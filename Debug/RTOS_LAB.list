
RTOS_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d18  08008d18  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d20  08008d20  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008d28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000381c  20000080  08008da8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000389c  08008da8  0002389c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c1ac  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003971  00000000  00000000  0003c29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121c  00000000  00000000  00041370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029cfa  00000000  00000000  0004258c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d10  00000000  00000000  0006c286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe942  00000000  00000000  00085f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066c8  00000000  00000000  001848d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a80 	.word	0x08008a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008a80 	.word	0x08008a80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   idle_hook_count++;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <vApplicationIdleHook+0x20>)
 8000572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000576:	1c50      	adds	r0, r2, #1
 8000578:	f143 0100 	adc.w	r1, r3, #0
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <vApplicationIdleHook+0x20>)
 800057e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	200000a0 	.word	0x200000a0

08000590 <init_teller>:
uint16_t total_customer_queue_time = 0;
uint16_t max_customer_queue_time = 0;
uint16_t max_customer_queue_depth = 0;

void init_teller(TELLER_INFO* teller)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	teller->max_wait_time = 0;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
	teller->max_transaction_time = 0;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
	teller->max_break_time = 0;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
	teller->last_waiting_start_time = 0;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
	teller->total_service_time = 0;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	821a      	strh	r2, [r3, #16]
	teller->total_wait_time = 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	831a      	strh	r2, [r3, #24]
	teller->total_break_time = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	829a      	strh	r2, [r3, #20]
	teller->total_breaks_taken = 0;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	82da      	strh	r2, [r3, #22]
	teller->total_customers_serviced = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	825a      	strh	r2, [r3, #18]
	teller->next_available_natural_break_time = rand_range(MIN_TELLER_BREAK_WAIT, MAX_TELLER_BREAK_WAIT);
 80005ce:	f241 7270 	movw	r2, #6000	; 0x1770
 80005d2:	f04f 0300 	mov.w	r3, #0
 80005d6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005da:	f04f 0100 	mov.w	r1, #0
 80005de:	f000 fe47 	bl	8001270 <rand_range>
 80005e2:	4602      	mov	r2, r0
 80005e4:	460b      	mov	r3, r1
 80005e6:	b292      	uxth	r2, r2
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	835a      	strh	r2, [r3, #26]
	teller->is_on_forced_break = false;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2200      	movs	r2, #0
 80005f0:	771a      	strb	r2, [r3, #28]
	teller->waiting_flag = false;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	775a      	strb	r2, [r3, #29]

}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <reset_and_init_customer>:

void reset_and_init_customer(CUSTOMER_INFO* customer)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	customer->service_time = rand_range(MIN_SERVICE_TIME, MAX_SERVICE_TIME);
 8000608:	f44f 7248 	mov.w	r2, #800	; 0x320
 800060c:	f04f 0300 	mov.w	r3, #0
 8000610:	f04f 0032 	mov.w	r0, #50	; 0x32
 8000614:	f04f 0100 	mov.w	r1, #0
 8000618:	f000 fe2a 	bl	8001270 <rand_range>
 800061c:	4602      	mov	r2, r0
 800061e:	460b      	mov	r3, r1
 8000620:	b292      	uxth	r2, r2
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	801a      	strh	r2, [r3, #0]
	customer->time_entered_queue = HAL_GetTick();
 8000626:	f001 f847 	bl	80016b8 <HAL_GetTick>
 800062a:	4602      	mov	r2, r0
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	605a      	str	r2, [r3, #4]
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <HAL_GPIO_EXTI_Callback>:
* @brief Callback for S1-S3 SHIELD BUTTONS interrupt.
* @param GPIO_Pin: The GPIO_Pin of the button that generated the interrupt.
* @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]

	TELLER_INFO* teller;
//	char* teller_name;

	// First button corresponds to teller01
	if(GPIO_Pin == S1_SHLD_BUTTON_Pin)
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d101      	bne.n	800064c <HAL_GPIO_EXTI_Callback+0x14>
	{
		teller = &teller01_info;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <HAL_GPIO_EXTI_Callback+0x4c>)
 800064a:	60fb      	str	r3, [r7, #12]
//		teller_name = "TELLER01";
	}

	// Second button corresponds to teller02
	if(GPIO_Pin == S2_SHLD_BUTTON_Pin)
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	2b10      	cmp	r3, #16
 8000650:	d101      	bne.n	8000656 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		teller = &teller02_info;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_GPIO_EXTI_Callback+0x50>)
 8000654:	60fb      	str	r3, [r7, #12]
//		teller_name = "TELLER02";
	}

	// Third button corresponds to teller03
	if(GPIO_Pin == S3_SHLD_BUTTON_Pin)
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d101      	bne.n	8000660 <HAL_GPIO_EXTI_Callback+0x28>
	{
		teller = &teller03_info;
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <HAL_GPIO_EXTI_Callback+0x54>)
 800065e:	60fb      	str	r3, [r7, #12]
//		teller_name = "TELLER03";
	}

	// Callback is triggered by both the rising AND falling edge, so we just toggle.
	teller->is_on_forced_break ^= 1;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	7f1b      	ldrb	r3, [r3, #28]
 8000664:	f083 0301 	eor.w	r3, r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	bf14      	ite	ne
 800066e:	2301      	movne	r3, #1
 8000670:	2300      	moveq	r3, #0
 8000672:	b2da      	uxtb	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	771a      	strb	r2, [r3, #28]
//		data_size = sprintf((char*)buffer, "%s YELLING HAS STOPPED!!\r\n", teller_name);
//	}
//
//	// Send message - for testing purposes right now...
//	HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	200001a8 	.word	0x200001a8
 8000688:	200001c8 	.word	0x200001c8
 800068c:	200001e8 	.word	0x200001e8

08000690 <shiftOut>:
* @param clock_port: The port of the GPIO pin associated with the clock used to operate shift register.
* @param clock_pin: The GPIO clock pin.
* @param value: The value to shift into the data pin.
* @retval None
*/
static inline void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	461a      	mov	r2, r3
 800069c:	460b      	mov	r3, r1
 800069e:	817b      	strh	r3, [r7, #10]
 80006a0:	4613      	mov	r3, r2
 80006a2:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	e01d      	b.n	80006e6 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 80006aa:	893b      	ldrh	r3, [r7, #8]
 80006ac:	2200      	movs	r2, #0
 80006ae:	4619      	mov	r1, r3
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f001 fa99 	bl	8001be8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 80006b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4013      	ands	r3, r2
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf14      	ite	ne
 80006c2:	2301      	movne	r3, #1
 80006c4:	2300      	moveq	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	897b      	ldrh	r3, [r7, #10]
 80006cc:	4619      	mov	r1, r3
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f001 fa8a 	bl	8001be8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 80006d4:	893b      	ldrh	r3, [r7, #8]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f001 fa84 	bl	8001be8 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	105b      	asrs	r3, r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1de      	bne.n	80006aa <shiftOut+0x1a>
	}
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <set_segment_digit>:
* @param digit: The digit to set (four in total)	.
* @param value: The value to set.
* @retval None
*/
static inline void set_segment_digit(uint8_t digit, uint8_t value)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2120      	movs	r1, #32
 800070c:	4811      	ldr	r0, [pc, #68]	; (8000754 <set_segment_digit+0x5c>)
 800070e:	f001 fa6b 	bl	8001be8 <HAL_GPIO_WritePin>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, value);
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800071a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800071e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000726:	f7ff ffb3 	bl	8000690 <shiftOut>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, digit);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000732:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f7ff ffa7 	bl	8000690 <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2120      	movs	r1, #32
 8000746:	4803      	ldr	r0, [pc, #12]	; (8000754 <set_segment_digit+0x5c>)
 8000748:	f001 fa4e 	bl	8001be8 <HAL_GPIO_WritePin>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	48000400 	.word	0x48000400

08000758 <set_segment_display>:
*
* @param num: The four digit number to set the display to (MAX: 9999).
* @retval None
*/
void set_segment_display(uint16_t num)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
	uint8_t value;
	while(digit < NUM_SEGMENT_DIGITS)
 8000766:	e01e      	b.n	80007a6 <set_segment_display+0x4e>
	{
		value = num % 10;
 8000768:	88fa      	ldrh	r2, [r7, #6]
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <set_segment_display+0x64>)
 800076c:	fba3 1302 	umull	r1, r3, r3, r2
 8000770:	08d9      	lsrs	r1, r3, #3
 8000772:	460b      	mov	r3, r1
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	440b      	add	r3, r1
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	73bb      	strb	r3, [r7, #14]
		set_segment_digit(SEGMENT_DIGIT[digit], SEGMENT_NUM[value]);
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <set_segment_display+0x68>)
 8000784:	5cd2      	ldrb	r2, [r2, r3]
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	490e      	ldr	r1, [pc, #56]	; (80007c4 <set_segment_display+0x6c>)
 800078a:	5ccb      	ldrb	r3, [r1, r3]
 800078c:	4619      	mov	r1, r3
 800078e:	4610      	mov	r0, r2
 8000790:	f7ff ffb2 	bl	80006f8 <set_segment_digit>
		num /= 10;
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <set_segment_display+0x64>)
 8000798:	fba2 2303 	umull	r2, r3, r2, r3
 800079c:	08db      	lsrs	r3, r3, #3
 800079e:	80fb      	strh	r3, [r7, #6]
		digit++;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	3301      	adds	r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	while(digit < NUM_SEGMENT_DIGITS)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d9dd      	bls.n	8000768 <set_segment_display+0x10>
	}
	set_segment_digit(0, 0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ffa2 	bl	80006f8 <set_segment_digit>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	cccccccd 	.word	0xcccccccd
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000004 	.word	0x20000004

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 ff40 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f896 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f000 f964 	bl	8000aa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d8:	f000 f932 	bl	8000a40 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007dc:	f000 f8e2 	bl	80009a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize tellers
  init_teller(&teller01_info);
 80007e0:	482d      	ldr	r0, [pc, #180]	; (8000898 <main+0xd0>)
 80007e2:	f7ff fed5 	bl	8000590 <init_teller>
  init_teller(&teller02_info);
 80007e6:	482d      	ldr	r0, [pc, #180]	; (800089c <main+0xd4>)
 80007e8:	f7ff fed2 	bl	8000590 <init_teller>
  init_teller(&teller03_info);
 80007ec:	482c      	ldr	r0, [pc, #176]	; (80008a0 <main+0xd8>)
 80007ee:	f7ff fecf 	bl	8000590 <init_teller>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f2:	f003 fffb 	bl	80047ec <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 80007f6:	482b      	ldr	r0, [pc, #172]	; (80008a4 <main+0xdc>)
 80007f8:	f004 f910 	bl	8004a1c <osMutexNew>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <main+0xe0>)
 8000800:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of customerQueue */
  customerQueueHandle = osMessageQueueNew (421, sizeof(uint64_t), &customerQueue_attributes);
 8000802:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <main+0xe4>)
 8000804:	2108      	movs	r1, #8
 8000806:	f240 10a5 	movw	r0, #421	; 0x1a5
 800080a:	f004 fa15 	bl	8004c38 <osMessageQueueNew>
 800080e:	4603      	mov	r3, r0
 8000810:	4a27      	ldr	r2, [pc, #156]	; (80008b0 <main+0xe8>)
 8000812:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of updateSegment */
  updateSegmentHandle = osThreadNew(StartUpdateSegment, NULL, &updateSegment_attributes);
 8000814:	4a27      	ldr	r2, [pc, #156]	; (80008b4 <main+0xec>)
 8000816:	2100      	movs	r1, #0
 8000818:	4827      	ldr	r0, [pc, #156]	; (80008b8 <main+0xf0>)
 800081a:	f004 f831 	bl	8004880 <osThreadNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a26      	ldr	r2, [pc, #152]	; (80008bc <main+0xf4>)
 8000822:	6013      	str	r3, [r2, #0]

  /* creation of genCustomer */
  genCustomerHandle = osThreadNew(StartGenCustomerTask, NULL, &genCustomer_attributes);
 8000824:	4a26      	ldr	r2, [pc, #152]	; (80008c0 <main+0xf8>)
 8000826:	2100      	movs	r1, #0
 8000828:	4826      	ldr	r0, [pc, #152]	; (80008c4 <main+0xfc>)
 800082a:	f004 f829 	bl	8004880 <osThreadNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <main+0x100>)
 8000832:	6013      	str	r3, [r2, #0]

  /* creation of teller01 */
  teller01Handle = osThreadNew(StartTeller01, NULL, &teller01_attributes);
 8000834:	4a25      	ldr	r2, [pc, #148]	; (80008cc <main+0x104>)
 8000836:	2100      	movs	r1, #0
 8000838:	4825      	ldr	r0, [pc, #148]	; (80008d0 <main+0x108>)
 800083a:	f004 f821 	bl	8004880 <osThreadNew>
 800083e:	4603      	mov	r3, r0
 8000840:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <main+0x10c>)
 8000842:	6013      	str	r3, [r2, #0]

  /* creation of teller02 */
  teller02Handle = osThreadNew(StartTeller02, NULL, &teller02_attributes);
 8000844:	4a24      	ldr	r2, [pc, #144]	; (80008d8 <main+0x110>)
 8000846:	2100      	movs	r1, #0
 8000848:	4824      	ldr	r0, [pc, #144]	; (80008dc <main+0x114>)
 800084a:	f004 f819 	bl	8004880 <osThreadNew>
 800084e:	4603      	mov	r3, r0
 8000850:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <main+0x118>)
 8000852:	6013      	str	r3, [r2, #0]

  /* creation of teller03 */
  teller03Handle = osThreadNew(StartTeller03, NULL, &teller03_attributes);
 8000854:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <main+0x11c>)
 8000856:	2100      	movs	r1, #0
 8000858:	4823      	ldr	r0, [pc, #140]	; (80008e8 <main+0x120>)
 800085a:	f004 f811 	bl	8004880 <osThreadNew>
 800085e:	4603      	mov	r3, r0
 8000860:	4a22      	ldr	r2, [pc, #136]	; (80008ec <main+0x124>)
 8000862:	6013      	str	r3, [r2, #0]

  /* creation of simMonitorInfo */
  simMonitorInfoHandle = osThreadNew(StartSimMonitorInfo, NULL, &simMonitorInfo_attributes);
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <main+0x128>)
 8000866:	2100      	movs	r1, #0
 8000868:	4822      	ldr	r0, [pc, #136]	; (80008f4 <main+0x12c>)
 800086a:	f004 f809 	bl	8004880 <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <main+0x130>)
 8000872:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Grab reference point to get an accurate reading of simulated time.
  SIMULATED_TIME_START = HAL_GetTick();
 8000874:	f000 ff20 	bl	80016b8 <HAL_GetTick>
 8000878:	4603      	mov	r3, r0
 800087a:	4a20      	ldr	r2, [pc, #128]	; (80008fc <main+0x134>)
 800087c:	6013      	str	r3, [r2, #0]


  /* ----- TESTING THREADS -----*/
//  osThreadSuspend(genCustomerHandle);
//  osThreadSuspend(teller01Handle);
  osThreadSuspend(teller02Handle);
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <main+0x118>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f004 f88e 	bl	80049a4 <osThreadSuspend>
  osThreadSuspend(teller03Handle);
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <main+0x124>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f004 f889 	bl	80049a4 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000892:	f003 ffcf 	bl	8004834 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000896:	e7fe      	b.n	8000896 <main+0xce>
 8000898:	200001a8 	.word	0x200001a8
 800089c:	200001c8 	.word	0x200001c8
 80008a0:	200001e8 	.word	0x200001e8
 80008a4:	08008c8c 	.word	0x08008c8c
 80008a8:	200001a0 	.word	0x200001a0
 80008ac:	08008c74 	.word	0x08008c74
 80008b0:	2000019c 	.word	0x2000019c
 80008b4:	08008b9c 	.word	0x08008b9c
 80008b8:	08000f1d 	.word	0x08000f1d
 80008bc:	20000184 	.word	0x20000184
 80008c0:	08008bc0 	.word	0x08008bc0
 80008c4:	08000f45 	.word	0x08000f45
 80008c8:	20000188 	.word	0x20000188
 80008cc:	08008be4 	.word	0x08008be4
 80008d0:	08000fe5 	.word	0x08000fe5
 80008d4:	2000018c 	.word	0x2000018c
 80008d8:	08008c08 	.word	0x08008c08
 80008dc:	08001009 	.word	0x08001009
 80008e0:	20000190 	.word	0x20000190
 80008e4:	08008c2c 	.word	0x08008c2c
 80008e8:	0800102d 	.word	0x0800102d
 80008ec:	20000194 	.word	0x20000194
 80008f0:	08008c50 	.word	0x08008c50
 80008f4:	08001051 	.word	0x08001051
 80008f8:	20000198 	.word	0x20000198
 80008fc:	200001a4 	.word	0x200001a4

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b096      	sub	sp, #88	; 0x58
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2244      	movs	r2, #68	; 0x44
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f007 fbdc 	bl	80080cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000922:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000926:	f001 f99d 	bl	8001c64 <HAL_PWREx_ControlVoltageScaling>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000930:	f000 fbfe 	bl	8001130 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2310      	movs	r3, #16
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000946:	2302      	movs	r3, #2
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800094e:	230a      	movs	r3, #10
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000952:	2307      	movs	r3, #7
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095a:	2302      	movs	r3, #2
 800095c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f9d4 	bl	8001d10 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800096e:	f000 fbdf 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2303      	movs	r3, #3
 8000978:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	2104      	movs	r1, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f001 fd9c 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000996:	f000 fbcb 	bl	8001130 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3758      	adds	r7, #88	; 0x58
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <MX_TIM2_Init+0x98>)
 80009ec:	f002 fc7e 	bl	80032ec <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009f6:	f000 fb9b 	bl	8001130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_TIM2_Init+0x98>)
 8000a08:	f002 fe3a 	bl	8003680 <HAL_TIM_ConfigClockSource>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a12:	f000 fb8d 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_TIM2_Init+0x98>)
 8000a24:	f003 f852 	bl	8003acc <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a2e:	f000 fb7f 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000b0 	.word	0x200000b0

08000a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <MX_USART2_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART2_UART_Init+0x58>)
 8000a84:	f003 f8c8 	bl	8003c18 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 fb4f 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000fc 	.word	0x200000fc
 8000a9c:	40004400 	.word	0x40004400

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b57      	ldr	r3, [pc, #348]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a56      	ldr	r2, [pc, #344]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b54      	ldr	r3, [pc, #336]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b51      	ldr	r3, [pc, #324]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a50      	ldr	r2, [pc, #320]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b4e      	ldr	r3, [pc, #312]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b4b      	ldr	r3, [pc, #300]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a4a      	ldr	r2, [pc, #296]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b48      	ldr	r3, [pc, #288]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a44      	ldr	r2, [pc, #272]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b42      	ldr	r3, [pc, #264]	; (8000c14 <MX_GPIO_Init+0x174>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 f862 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2120      	movs	r1, #32
 8000b28:	483b      	ldr	r0, [pc, #236]	; (8000c18 <MX_GPIO_Init+0x178>)
 8000b2a:	f001 f85d 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4835      	ldr	r0, [pc, #212]	; (8000c1c <MX_GPIO_Init+0x17c>)
 8000b46:	f000 fea5 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_SHLD_BUTTON_Pin S2_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S1_SHLD_BUTTON_Pin|S2_SHLD_BUTTON_Pin;
 8000b4a:	2312      	movs	r3, #18
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b4e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 fe97 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b66:	2320      	movs	r3, #32
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f000 fe88 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S3_SHLD_BUTTON_Pin;
 8000b84:	2301      	movs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b88:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S3_SHLD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	481f      	ldr	r0, [pc, #124]	; (8000c18 <MX_GPIO_Init+0x178>)
 8000b9a:	f000 fe7b 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_D7_SEG7_Clock_Pin SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin;
 8000b9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bac:	2301      	movs	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f000 fe6b 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4810      	ldr	r0, [pc, #64]	; (8000c18 <MX_GPIO_Init+0x178>)
 8000bd6:	f000 fe5d 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // S1_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2007      	movs	r0, #7
 8000be0:	f000 fe2e 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000be4:	2007      	movs	r0, #7
 8000be6:	f000 fe47 	bl	8001878 <HAL_NVIC_EnableIRQ>

  // S2_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f000 fe26 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f000 fe3f 	bl	8001878 <HAL_NVIC_EnableIRQ>

  // S3_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f000 fe1e 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c04:	2006      	movs	r0, #6
 8000c06:	f000 fe37 	bl	8001878 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	48000800 	.word	0x48000800

08000c20 <teller_functionality>:

/* USER CODE BEGIN 4 */
void teller_functionality(TELLER_INFO* teller_info, osThreadId_t tellerHandler)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b0af      	sub	sp, #188	; 0xbc
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	int data_size;

	for(;;)
	{
		// Waiting for a customer to arrive, this is different than taking a break.
		if(teller_info->waiting_flag == true)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7f5b      	ldrb	r3, [r3, #29]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <teller_functionality+0x18>
		{
			osDelay(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f003 fed7 	bl	80049e6 <osDelay>
		}

		// Stop when the day ends.
		if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 8000c38:	f000 fd3e 	bl	80016b8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	4baf      	ldr	r3, [pc, #700]	; (8000efc <teller_functionality+0x2dc>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 8000c46:	3310      	adds	r3, #16
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d302      	bcc.n	8000c52 <teller_functionality+0x32>
		{
			osThreadSuspend(tellerHandler);
 8000c4c:	6838      	ldr	r0, [r7, #0]
 8000c4e:	f003 fea9 	bl	80049a4 <osThreadSuspend>
		}

		// Get next customer from the queue.
		queue_status = osMessageQueueGet(customerQueueHandle, &current_customer, 0, osWaitForever);
 8000c52:	4bab      	ldr	r3, [pc, #684]	; (8000f00 <teller_functionality+0x2e0>)
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f004 f8be 	bl	8004de0 <osMessageQueueGet>
 8000c64:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if(queue_status == osOK) // retrieved
 8000c68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d17b      	bne.n	8000d68 <teller_functionality+0x148>
		{
			// If this is the first customer after waiting...
			if(teller_info->waiting_flag == true)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7f5b      	ldrb	r3, [r3, #29]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d024      	beq.n	8000cc2 <teller_functionality+0xa2>
			{
				// ...record the time spent waiting. The teller is no longer waiting.
				teller_info->waiting_flag = false;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	775a      	strb	r2, [r3, #29]
				wait_time = HAL_GetTick() - teller_info->last_waiting_start_time;
 8000c7e:	f000 fd1b 	bl	80016b8 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				teller_info->max_wait_time = MAX(teller_info->max_wait_time, wait_time);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	bf38      	it	cc
 8000caa:	461a      	movcc	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	601a      	str	r2, [r3, #0]
				teller_info->total_wait_time += wait_time;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	8b1a      	ldrh	r2, [r3, #24]
 8000cb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	831a      	strh	r2, [r3, #24]
			}

			// Record statistic about customer...
			teller_info->total_customers_serviced++;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8a5b      	ldrh	r3, [r3, #18]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	825a      	strh	r2, [r3, #18]
			teller_info->total_service_time += current_customer.service_time;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	8a1a      	ldrh	r2, [r3, #16]
 8000cd2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	821a      	strh	r2, [r3, #16]
			teller_info->max_transaction_time = MAX(teller_info->max_transaction_time, current_customer.service_time);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000ce6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000cea:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8000cee:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8000cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	bf38      	it	cc
 8000cfa:	461a      	movcc	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	605a      	str	r2, [r3, #4]

			// This is time the customer had to wait in the queue before being serviced
			queue_time = HAL_GetTick() - current_customer.time_entered_queue;
 8000d00:	f000 fcda 	bl	80016b8 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


			// Access global variables to update customer queue time statistics
			osMutexAcquire(Mutex01Handle, osWaitForever);
 8000d0e:	4b7d      	ldr	r3, [pc, #500]	; (8000f04 <teller_functionality+0x2e4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 ff06 	bl	8004b28 <osMutexAcquire>
			max_customer_queue_time = MAX(max_customer_queue_time, queue_time);
 8000d1c:	4b7a      	ldr	r3, [pc, #488]	; (8000f08 <teller_functionality+0x2e8>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8000d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000d28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000d2c:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8000d30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d34:	4293      	cmp	r3, r2
 8000d36:	bf38      	it	cc
 8000d38:	4613      	movcc	r3, r2
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b72      	ldr	r3, [pc, #456]	; (8000f08 <teller_functionality+0x2e8>)
 8000d3e:	801a      	strh	r2, [r3, #0]
			total_customer_queue_time += queue_time;
 8000d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	4b71      	ldr	r3, [pc, #452]	; (8000f0c <teller_functionality+0x2ec>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b6f      	ldr	r3, [pc, #444]	; (8000f0c <teller_functionality+0x2ec>)
 8000d50:	801a      	strh	r2, [r3, #0]
			osMutexRelease(Mutex01Handle);
 8000d52:	4b6c      	ldr	r3, [pc, #432]	; (8000f04 <teller_functionality+0x2e4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f003 ff31 	bl	8004bbe <osMutexRelease>

			// Customer service delay
			osDelay(current_customer.service_time);
 8000d5c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fe40 	bl	80049e6 <osDelay>
 8000d66:	e00c      	b.n	8000d82 <teller_functionality+0x162>
		}
		else if(queue_status == osErrorResource) // Empty queue -> teller is waiting for next customer.
 8000d68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d6c:	f113 0f03 	cmn.w	r3, #3
 8000d70:	d107      	bne.n	8000d82 <teller_functionality+0x162>
		{
			teller_info->waiting_flag = true;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	775a      	strb	r2, [r3, #29]

			// Record when the teller started waiting to calculate total time waiting later.
			teller_info->last_waiting_start_time = HAL_GetTick();
 8000d78:	f000 fc9e 	bl	80016b8 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60da      	str	r2, [r3, #12]
		}

		/* --- Check for breaks only after finishing with a customer --- */

		// Forced break - takes priority over natural break
		if(teller_info->is_on_forced_break == true)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7f1b      	ldrb	r3, [r3, #28]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d056      	beq.n	8000e38 <teller_functionality+0x218>
		{
			data_size = sprintf((char*)buffer, "A TELLER IS GOING ON A FORCED BREAK!!\r\n");
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4960      	ldr	r1, [pc, #384]	; (8000f10 <teller_functionality+0x2f0>)
 8000d90:	4618      	mov	r0, r3
 8000d92:	f007 f97b 	bl	800808c <siprintf>
 8000d96:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 8000d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f107 010c 	add.w	r1, r7, #12
 8000da4:	2364      	movs	r3, #100	; 0x64
 8000da6:	485b      	ldr	r0, [pc, #364]	; (8000f14 <teller_functionality+0x2f4>)
 8000da8:	f002 ff84 	bl	8003cb4 <HAL_UART_Transmit>

			// Grab reference point
			forced_break_start_time = HAL_GetTick();
 8000dac:	f000 fc84 	bl	80016b8 <HAL_GetTick>
 8000db0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

			// Stay until the forced break is released
			while(teller_info->is_on_forced_break == true)
 8000db4:	e002      	b.n	8000dbc <teller_functionality+0x19c>
			{
				osDelay(100); // Decently long delay - can be adjusted
 8000db6:	2064      	movs	r0, #100	; 0x64
 8000db8:	f003 fe15 	bl	80049e6 <osDelay>
			while(teller_info->is_on_forced_break == true)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7f1b      	ldrb	r3, [r3, #28]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f8      	bne.n	8000db6 <teller_functionality+0x196>
			}

			// Record break time and updated statistics...
			break_time = HAL_GetTick() - forced_break_start_time;
 8000dc4:	f000 fc78 	bl	80016b8 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			teller_info->max_break_time = MAX(teller_info->max_break_time, break_time);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000dda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000dde:	67bb      	str	r3, [r7, #120]	; 0x78
 8000de0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000de2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000de4:	429a      	cmp	r2, r3
 8000de6:	bf38      	it	cc
 8000de8:	461a      	movcc	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	609a      	str	r2, [r3, #8]
			teller_info->total_break_time += break_time;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	8a9a      	ldrh	r2, [r3, #20]
 8000df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	829a      	strh	r2, [r3, #20]
			teller_info->total_breaks_taken++;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	8adb      	ldrh	r3, [r3, #22]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	82da      	strh	r2, [r3, #22]

			// ...teller was just on break, so recalculate next available natural break time
			teller_info->next_available_natural_break_time = HAL_GetTick() + rand_range(MIN_TELLER_BREAK_WAIT, MAX_TELLER_BREAK_WAIT);
 8000e0c:	f000 fc54 	bl	80016b8 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29c      	uxth	r4, r3
 8000e14:	f241 7270 	movw	r2, #6000	; 0x1770
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e20:	f04f 0100 	mov.w	r1, #0
 8000e24:	f000 fa24 	bl	8001270 <rand_range>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	b293      	uxth	r3, r2
 8000e2e:	4423      	add	r3, r4
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	835a      	strh	r2, [r3, #26]
 8000e36:	e6f8      	b.n	8000c2a <teller_functionality+0xa>


		} // Natural break
		else if(HAL_GetTick() >= teller_info->next_available_natural_break_time)
 8000e38:	f000 fc3e 	bl	80016b8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	8b5b      	ldrh	r3, [r3, #26]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	f4ff aef1 	bcc.w	8000c2a <teller_functionality+0xa>
		{

			// Generate break time and store statistics
			break_time = rand_range(MIN_TELLER_BREAK_TIME, MAX_TELLER_BREAK_TIME);
 8000e48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	f04f 0064 	mov.w	r0, #100	; 0x64
 8000e54:	f04f 0100 	mov.w	r1, #0
 8000e58:	f000 fa0a 	bl	8001270 <rand_range>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4613      	mov	r3, r2
 8000e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			teller_info->max_break_time = MAX(teller_info->max_break_time, break_time);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000e6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000e76:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	bf38      	it	cc
 8000e82:	461a      	movcc	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	609a      	str	r2, [r3, #8]
			teller_info->total_break_time += break_time;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	8a9a      	ldrh	r2, [r3, #20]
 8000e8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4413      	add	r3, r2
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	829a      	strh	r2, [r3, #20]
			teller_info->total_breaks_taken++;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	8adb      	ldrh	r3, [r3, #22]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	82da      	strh	r2, [r3, #22]
			teller_info->next_available_natural_break_time = HAL_GetTick() + rand_range(MIN_TELLER_BREAK_WAIT, MAX_TELLER_BREAK_WAIT);
 8000ea6:	f000 fc07 	bl	80016b8 <HAL_GetTick>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b29c      	uxth	r4, r3
 8000eae:	f241 7270 	movw	r2, #6000	; 0x1770
 8000eb2:	f04f 0300 	mov.w	r3, #0
 8000eb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eba:	f04f 0100 	mov.w	r1, #0
 8000ebe:	f000 f9d7 	bl	8001270 <rand_range>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	b293      	uxth	r3, r2
 8000ec8:	4423      	add	r3, r4
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	835a      	strh	r2, [r3, #26]

			// Send message - for testing purposes right now...
			data_size = sprintf((char*)buffer, "A TELLER IS GOING ON A NATURAL BREAK!!\r\n");
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	4910      	ldr	r1, [pc, #64]	; (8000f18 <teller_functionality+0x2f8>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f007 f8d8 	bl	800808c <siprintf>
 8000edc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 8000ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	f107 010c 	add.w	r1, r7, #12
 8000eea:	2364      	movs	r3, #100	; 0x64
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <teller_functionality+0x2f4>)
 8000eee:	f002 fee1 	bl	8003cb4 <HAL_UART_Transmit>

			// Go on break...
			osDelay(break_time);
 8000ef2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8000ef6:	f003 fd76 	bl	80049e6 <osDelay>
		if(teller_info->waiting_flag == true)
 8000efa:	e696      	b.n	8000c2a <teller_functionality+0xa>
 8000efc:	200001a4 	.word	0x200001a4
 8000f00:	2000019c 	.word	0x2000019c
 8000f04:	200001a0 	.word	0x200001a0
 8000f08:	200000aa 	.word	0x200000aa
 8000f0c:	200000a8 	.word	0x200000a8
 8000f10:	08008b00 	.word	0x08008b00
 8000f14:	200000fc 	.word	0x200000fc
 8000f18:	08008b28 	.word	0x08008b28

08000f1c <StartUpdateSegment>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateSegment */
void StartUpdateSegment(void *argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	// Update 7-segment display
	set_segment_display(osMessageQueueGetCount(customerQueueHandle));
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <StartUpdateSegment+0x24>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f003 ffb7 	bl	8004e9c <osMessageQueueGetCount>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fc10 	bl	8000758 <set_segment_display>

	// Need short delay for display to stay updated properly
    osDelay(1);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f003 fd54 	bl	80049e6 <osDelay>
	set_segment_display(osMessageQueueGetCount(customerQueueHandle));
 8000f3e:	e7f1      	b.n	8000f24 <StartUpdateSegment+0x8>
 8000f40:	2000019c 	.word	0x2000019c

08000f44 <StartGenCustomerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGenCustomerTask */
void StartGenCustomerTask(void *argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// Stop when the day ends.
	if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 8000f4c:	f000 fbb4 	bl	80016b8 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <StartGenCustomerTask+0x90>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 8000f5a:	3310      	adds	r3, #16
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d304      	bcc.n	8000f6a <StartGenCustomerTask+0x26>
	{
		osThreadSuspend(genCustomerHandle);
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <StartGenCustomerTask+0x94>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fd1d 	bl	80049a4 <osThreadSuspend>
	}

	// New customer arrives every 1-4 minutes
	delay_until_next_customer_arrival = rand_range(MIN_CUSTOMER_ARRIVAL_DELAY, MAX_CUSTOMER_ARRIVAL_DELAY);
 8000f6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	f04f 0064 	mov.w	r0, #100	; 0x64
 8000f76:	f04f 0100 	mov.w	r1, #0
 8000f7a:	f000 f979 	bl	8001270 <rand_range>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4613      	mov	r3, r2
 8000f84:	61fb      	str	r3, [r7, #28]

	// Generate a new customer with randomized service time
	reset_and_init_customer(&customer_template);
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fb38 	bl	8000600 <reset_and_init_customer>

	// Send customer to queue to be picked up by tellers
	queue_status = osMessageQueuePut(customerQueueHandle, &customer_template, 0U, osWaitForever);
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <StartGenCustomerTask+0x98>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	f107 0108 	add.w	r1, r7, #8
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f003 febf 	bl	8004d20 <osMessageQueuePut>
 8000fa2:	61b8      	str	r0, [r7, #24]

	if(queue_status == osOK)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1d0      	bne.n	8000f4c <StartGenCustomerTask+0x8>
	{

		// Record queue statistics
		max_customer_queue_depth = MAX(max_customer_queue_depth, osMessageQueueGetCount(customerQueueHandle));
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <StartGenCustomerTask+0x9c>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	82fb      	strh	r3, [r7, #22]
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <StartGenCustomerTask+0x98>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 ff71 	bl	8004e9c <osMessageQueueGetCount>
 8000fba:	6138      	str	r0, [r7, #16]
 8000fbc:	8afa      	ldrh	r2, [r7, #22]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	bf38      	it	cc
 8000fc4:	4613      	movcc	r3, r2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <StartGenCustomerTask+0x9c>)
 8000fca:	801a      	strh	r2, [r3, #0]

		// Simulate time between customers
		osDelay(delay_until_next_customer_arrival);
 8000fcc:	69f8      	ldr	r0, [r7, #28]
 8000fce:	f003 fd0a 	bl	80049e6 <osDelay>
	if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 8000fd2:	e7bb      	b.n	8000f4c <StartGenCustomerTask+0x8>
 8000fd4:	200001a4 	.word	0x200001a4
 8000fd8:	20000188 	.word	0x20000188
 8000fdc:	2000019c 	.word	0x2000019c
 8000fe0:	200000ac 	.word	0x200000ac

08000fe4 <StartTeller01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller01 */
void StartTeller01(void *argument)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller01 */
  /* Infinite loop */

  // All tellers share the same functionality
  teller_functionality(&teller01_info, teller01Handle);
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <StartTeller01+0x1c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <StartTeller01+0x20>)
 8000ff4:	f7ff fe14 	bl	8000c20 <teller_functionality>

  /* USER CODE END StartTeller01 */
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000018c 	.word	0x2000018c
 8001004:	200001a8 	.word	0x200001a8

08001008 <StartTeller02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller02 */
void StartTeller02(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller02 */
  /* Infinite loop */

  // All tellers share the same functionality
  teller_functionality(&teller02_info, teller02Handle);
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <StartTeller02+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <StartTeller02+0x20>)
 8001018:	f7ff fe02 	bl	8000c20 <teller_functionality>

  /* USER CODE END StartTeller02 */
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000190 	.word	0x20000190
 8001028:	200001c8 	.word	0x200001c8

0800102c <StartTeller03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller03 */
void StartTeller03(void *argument)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller03 */
  /* Infinite loop */

  // All tellers share the same functionality
  teller_functionality(&teller03_info, teller03Handle);
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <StartTeller03+0x1c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <StartTeller03+0x20>)
 800103c:	f7ff fdf0 	bl	8000c20 <teller_functionality>

  /* USER CODE END StartTeller03 */
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000194 	.word	0x20000194
 800104c:	200001e8 	.word	0x200001e8

08001050 <StartSimMonitorInfo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSimMonitorInfo */
void StartSimMonitorInfo(void *argument)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b0a1      	sub	sp, #132	; 0x84
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t sim_min;
  uint32_t sim_hours;
  uint32_t current_time_ms;
  for(;;)
  {
	current_time_ms = HAL_GetTick();
 8001058:	f000 fb2e 	bl	80016b8 <HAL_GetTick>
 800105c:	67f8      	str	r0, [r7, #124]	; 0x7c

	sim_hours = MS_TO_SIM_HOURS(current_time_ms);
 800105e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <StartSimMonitorInfo+0x9c>)
 8001062:	fba2 2303 	umull	r2, r3, r2, r3
 8001066:	09db      	lsrs	r3, r3, #7
 8001068:	67bb      	str	r3, [r7, #120]	; 0x78
	sim_min = MS_TO_SIM_MIN(current_time_ms);
 800106a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800106c:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <StartSimMonitorInfo+0xa0>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	677b      	str	r3, [r7, #116]	; 0x74

	data_size = sprintf((char*)buffer, "CURRENT TIME: %02ld:%02ld\r\nTELLER01 Status:\r\n", ((sim_hours + 8) % 12) + 1, sim_min % 60);
 8001076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001078:	f103 0108 	add.w	r1, r3, #8
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <StartSimMonitorInfo+0xa4>)
 800107e:	fba3 2301 	umull	r2, r3, r3, r1
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	1aca      	subs	r2, r1, r3
 800108e:	1c54      	adds	r4, r2, #1
 8001090:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <StartSimMonitorInfo+0xa8>)
 8001094:	fba3 2301 	umull	r2, r3, r3, r1
 8001098:	095a      	lsrs	r2, r3, #5
 800109a:	4613      	mov	r3, r2
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	1aca      	subs	r2, r1, r3
 80010a4:	f107 000c 	add.w	r0, r7, #12
 80010a8:	4613      	mov	r3, r2
 80010aa:	4622      	mov	r2, r4
 80010ac:	4913      	ldr	r1, [pc, #76]	; (80010fc <StartSimMonitorInfo+0xac>)
 80010ae:	f006 ffed 	bl	800808c <siprintf>
 80010b2:	6738      	str	r0, [r7, #112]	; 0x70
	HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 80010b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f107 010c 	add.w	r1, r7, #12
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	4810      	ldr	r0, [pc, #64]	; (8001100 <StartSimMonitorInfo+0xb0>)
 80010c0:	f002 fdf8 	bl	8003cb4 <HAL_UART_Transmit>

	// Stop when the day ends.
	if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 80010c4:	f000 faf8 	bl	80016b8 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <StartSimMonitorInfo+0xb4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 80010d2:	3310      	adds	r3, #16
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d304      	bcc.n	80010e2 <StartSimMonitorInfo+0x92>
	{
		osThreadSuspend(simMonitorInfoHandle);
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <StartSimMonitorInfo+0xb8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fc61 	bl	80049a4 <osThreadSuspend>
	}
    osDelay(100);
 80010e2:	2064      	movs	r0, #100	; 0x64
 80010e4:	f003 fc7f 	bl	80049e6 <osDelay>
	current_time_ms = HAL_GetTick();
 80010e8:	e7b6      	b.n	8001058 <StartSimMonitorInfo+0x8>
 80010ea:	bf00      	nop
 80010ec:	057619f1 	.word	0x057619f1
 80010f0:	51eb851f 	.word	0x51eb851f
 80010f4:	aaaaaaab 	.word	0xaaaaaaab
 80010f8:	88888889 	.word	0x88888889
 80010fc:	08008b54 	.word	0x08008b54
 8001100:	200000fc 	.word	0x200000fc
 8001104:	200001a4 	.word	0x200001a4
 8001108:	20000198 	.word	0x20000198

0800110c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800111e:	f000 fab7 	bl	8001690 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40001000 	.word	0x40001000

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>

0800113a <rotl>:

#include <stdint.h>
#include "rng.h"

static inline uint64_t rotl(const uint64_t x, int k)
{
 800113a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
	return (x << k) | (x >> (64 - k));
 8001148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	f1a1 0620 	sub.w	r6, r1, #32
 8001152:	f1c1 0020 	rsb	r0, r1, #32
 8001156:	fa03 f901 	lsl.w	r9, r3, r1
 800115a:	fa02 f606 	lsl.w	r6, r2, r6
 800115e:	ea49 0906 	orr.w	r9, r9, r6
 8001162:	fa22 f000 	lsr.w	r0, r2, r0
 8001166:	ea49 0900 	orr.w	r9, r9, r0
 800116a:	fa02 f801 	lsl.w	r8, r2, r1
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4249      	negs	r1, r1
 8001172:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001176:	f1c1 0620 	rsb	r6, r1, #32
 800117a:	f1a1 0020 	sub.w	r0, r1, #32
 800117e:	fa22 f401 	lsr.w	r4, r2, r1
 8001182:	fa03 f606 	lsl.w	r6, r3, r6
 8001186:	4334      	orrs	r4, r6
 8001188:	fa23 f000 	lsr.w	r0, r3, r0
 800118c:	4304      	orrs	r4, r0
 800118e:	fa23 f501 	lsr.w	r5, r3, r1
 8001192:	ea48 0a04 	orr.w	sl, r8, r4
 8001196:	ea49 0b05 	orr.w	fp, r9, r5
 800119a:	4654      	mov	r4, sl
 800119c:	465d      	mov	r5, fp
 800119e:	4622      	mov	r2, r4
 80011a0:	462b      	mov	r3, r5
}
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011ae:	4770      	bx	lr

080011b0 <generate_random_u64>:

// setting the seeds
static uint64_t s[2] = {SEED1, SEED2};

uint64_t generate_random_u64(void)
{
 80011b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b4:	b08b      	sub	sp, #44	; 0x2c
 80011b6:	af00      	add	r7, sp, #0
	const uint64_t s0 = s[0];
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <generate_random_u64+0xbc>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t s1 = s[1];
 80011c2:	4b2a      	ldr	r3, [pc, #168]	; (800126c <generate_random_u64+0xbc>)
 80011c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	const uint64_t result = rotl(s0 + s1, 17) + s0;
 80011cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011d4:	1886      	adds	r6, r0, r2
 80011d6:	60be      	str	r6, [r7, #8]
 80011d8:	eb41 0303 	adc.w	r3, r1, r3
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	2211      	movs	r2, #17
 80011e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011e4:	f7ff ffa9 	bl	800113a <rotl>
 80011e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011ec:	1816      	adds	r6, r2, r0
 80011ee:	603e      	str	r6, [r7, #0]
 80011f0:	414b      	adcs	r3, r1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011f8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	s1 ^= s0;
 80011fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001200:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001204:	ea80 0a02 	eor.w	sl, r0, r2
 8001208:	ea81 0b03 	eor.w	fp, r1, r3
 800120c:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	s[0] = rotl(s0, 49) ^ s1 ^ (s1 << 21); // a, b
 8001210:	2231      	movs	r2, #49	; 0x31
 8001212:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001216:	f7ff ff90 	bl	800113a <rotl>
 800121a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800121e:	ea80 0402 	eor.w	r4, r0, r2
 8001222:	ea81 0503 	eor.w	r5, r1, r3
 8001226:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	054b      	lsls	r3, r1, #21
 8001234:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 8001238:	0542      	lsls	r2, r0, #21
 800123a:	ea84 0802 	eor.w	r8, r4, r2
 800123e:	ea85 0903 	eor.w	r9, r5, r3
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <generate_random_u64+0xbc>)
 8001244:	e9c3 8900 	strd	r8, r9, [r3]
	s[1] = rotl(s1, 28); // c
 8001248:	221c      	movs	r2, #28
 800124a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800124e:	f7ff ff74 	bl	800113a <rotl>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4905      	ldr	r1, [pc, #20]	; (800126c <generate_random_u64+0xbc>)
 8001258:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return result;
 800125c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	372c      	adds	r7, #44	; 0x2c
 8001266:	46bd      	mov	sp, r7
 8001268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800126c:	20000010 	.word	0x20000010

08001270 <rand_range>:

uint64_t rand_range(uint64_t start_inclusive, uint64_t end_inclusive)
{
 8001270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800127c:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t rand_num;
	do
	{
		rand_num = (generate_random_u64() % end_inclusive) + start_inclusive + 1;
 8001280:	f7ff ff96 	bl	80011b0 <generate_random_u64>
 8001284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001288:	f7fe fff2 	bl	8000270 <__aeabi_uldivmod>
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001294:	1884      	adds	r4, r0, r2
 8001296:	eb41 0503 	adc.w	r5, r1, r3
 800129a:	f114 0801 	adds.w	r8, r4, #1
 800129e:	f145 0900 	adc.w	r9, r5, #0
 80012a2:	e9c7 8904 	strd	r8, r9, [r7, #16]
	}
	while(rand_num > end_inclusive);
 80012a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ae:	4290      	cmp	r0, r2
 80012b0:	eb71 0303 	sbcs.w	r3, r1, r3
 80012b4:	d3e4      	bcc.n	8001280 <rand_range+0x10>

	return rand_num;
 80012b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_MspInit+0x4c>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <HAL_MspInit+0x4c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6613      	str	r3, [r2, #96]	; 0x60
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_MspInit+0x4c>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_MspInit+0x4c>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6593      	str	r3, [r2, #88]	; 0x58
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_MspInit+0x4c>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	210f      	movs	r1, #15
 8001302:	f06f 0001 	mvn.w	r0, #1
 8001306:	f000 fa9b 	bl	8001840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001328:	d10b      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_TIM_Base_MspInit+0x38>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_TIM_Base_MspInit+0x38>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6593      	str	r3, [r2, #88]	; 0x58
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_TIM_Base_MspInit+0x38>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0ac      	sub	sp, #176	; 0xb0
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2288      	movs	r2, #136	; 0x88
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f006 fea9 	bl	80080cc <memset>
  if(huart->Instance==USART2)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <HAL_UART_MspInit+0xb0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d13b      	bne.n	80013fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001384:	2302      	movs	r3, #2
 8001386:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001388:	2300      	movs	r3, #0
 800138a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4618      	mov	r0, r3
 8001392:	f001 faef 	bl	8002974 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800139c:	f7ff fec8 	bl	8001130 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	4a18      	ldr	r2, [pc, #96]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013aa:	6593      	str	r3, [r2, #88]	; 0x58
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_UART_MspInit+0xb4>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013d0:	230c      	movs	r3, #12
 80013d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e8:	2307      	movs	r3, #7
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f000 fa4c 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	37b0      	adds	r7, #176	; 0xb0
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004400 	.word	0x40004400
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_InitTick+0xe0>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	4a33      	ldr	r2, [pc, #204]	; (80014ec <HAL_InitTick+0xe0>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	6593      	str	r3, [r2, #88]	; 0x58
 8001426:	4b31      	ldr	r3, [pc, #196]	; (80014ec <HAL_InitTick+0xe0>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001432:	f107 0210 	add.w	r2, r7, #16
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fa07 	bl	8002850 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800144c:	f001 f9d4 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8001450:	6378      	str	r0, [r7, #52]	; 0x34
 8001452:	e004      	b.n	800145e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001454:	f001 f9d0 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8001458:	4603      	mov	r3, r0
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001460:	4a23      	ldr	r2, [pc, #140]	; (80014f0 <HAL_InitTick+0xe4>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9b      	lsrs	r3, r3, #18
 8001468:	3b01      	subs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <HAL_InitTick+0xe8>)
 800146e:	4a22      	ldr	r2, [pc, #136]	; (80014f8 <HAL_InitTick+0xec>)
 8001470:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <HAL_InitTick+0xe8>)
 8001474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001478:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800147a:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <HAL_InitTick+0xe8>)
 800147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <HAL_InitTick+0xe8>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_InitTick+0xe8>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_InitTick+0xe8>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001492:	4818      	ldr	r0, [pc, #96]	; (80014f4 <HAL_InitTick+0xe8>)
 8001494:	f001 ff2a 	bl	80032ec <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800149e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11b      	bne.n	80014de <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014a6:	4813      	ldr	r0, [pc, #76]	; (80014f4 <HAL_InitTick+0xe8>)
 80014a8:	f001 ff78 	bl	800339c <HAL_TIM_Base_Start_IT>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d111      	bne.n	80014de <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014ba:	2036      	movs	r0, #54	; 0x36
 80014bc:	f000 f9dc 	bl	8001878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b0f      	cmp	r3, #15
 80014c4:	d808      	bhi.n	80014d8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014c6:	2200      	movs	r2, #0
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	2036      	movs	r0, #54	; 0x36
 80014cc:	f000 f9b8 	bl	8001840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_InitTick+0xf0>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e002      	b.n	80014de <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3738      	adds	r7, #56	; 0x38
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	431bde83 	.word	0x431bde83
 80014f4:	20000208 	.word	0x20000208
 80014f8:	40001000 	.word	0x40001000
 80014fc:	20000024 	.word	0x20000024

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM6_DAC_IRQHandler+0x10>)
 8001532:	f001 ffa3 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000208 	.word	0x20000208

08001540 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001544:	2002      	movs	r0, #2
 8001546:	f000 fb67 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}

0800154e <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001552:	2010      	movs	r0, #16
 8001554:	f000 fb60 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001560:	2001      	movs	r0, #1
 8001562:	f000 fb59 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f006 fdf4 	bl	8008188 <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20018000 	.word	0x20018000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	20000254 	.word	0x20000254
 80015d4:	200038a0 	.word	0x200038a0

080015d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <SystemInit+0x20>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <SystemInit+0x20>)
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001600:	f7ff ffea 	bl	80015d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopForever+0x6>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopForever+0xe>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopForever+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162a:	f006 fdb3 	bl	8008194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800162e:	f7ff f8cb 	bl	80007c8 <main>

08001632 <LoopForever>:

LoopForever:
    b LoopForever
 8001632:	e7fe      	b.n	8001632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001634:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001640:	08008d28 	.word	0x08008d28
  ldr r2, =_sbss
 8001644:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001648:	2000389c 	.word	0x2000389c

0800164c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_2_IRQHandler>
	...

08001650 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_Init+0x3c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_Init+0x3c>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001664:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001666:	2003      	movs	r0, #3
 8001668:	f000 f8df 	bl	800182a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166c:	200f      	movs	r0, #15
 800166e:	f7ff fecd 	bl	800140c <HAL_InitTick>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	e001      	b.n	8001682 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800167e:	f7ff fe23 	bl	80012c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001682:	79fb      	ldrb	r3, [r7, #7]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40022000 	.word	0x40022000

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000028 	.word	0x20000028
 80016b4:	20000258 	.word	0x20000258

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000258 	.word	0x20000258

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff4c 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001852:	f7ff ff61 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001856:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7ff ffb1 	bl	80017c4 <NVIC_EncodePriority>
 8001862:	4602      	mov	r2, r0
 8001864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff80 	bl	8001770 <__NVIC_SetPriority>
}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff54 	bl	8001734 <__NVIC_EnableIRQ>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a2:	e17f      	b.n	8001ba4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8171 	beq.w	8001b9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x40>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d118      	bne.n	8001974 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001948:	2201      	movs	r2, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	f003 0201 	and.w	r2, r3, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b03      	cmp	r3, #3
 800197e:	d017      	beq.n	80019b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d123      	bne.n	8001a04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	08da      	lsrs	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3208      	adds	r2, #8
 80019fe:	6939      	ldr	r1, [r7, #16]
 8001a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0203 	and.w	r2, r3, #3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80ac 	beq.w	8001b9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b5f      	ldr	r3, [pc, #380]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4a:	4a5e      	ldr	r2, [pc, #376]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6613      	str	r3, [r2, #96]	; 0x60
 8001a52:	4b5c      	ldr	r3, [pc, #368]	; (8001bc4 <HAL_GPIO_Init+0x330>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a5e:	4a5a      	ldr	r2, [pc, #360]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a88:	d025      	beq.n	8001ad6 <HAL_GPIO_Init+0x242>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4f      	ldr	r2, [pc, #316]	; (8001bcc <HAL_GPIO_Init+0x338>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01f      	beq.n	8001ad2 <HAL_GPIO_Init+0x23e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_GPIO_Init+0x33c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d019      	beq.n	8001ace <HAL_GPIO_Init+0x23a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_GPIO_Init+0x340>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x236>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_GPIO_Init+0x344>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x232>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_GPIO_Init+0x348>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x22e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4a      	ldr	r2, [pc, #296]	; (8001be0 <HAL_GPIO_Init+0x34c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x22a>
 8001aba:	2306      	movs	r3, #6
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x244>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae8:	4937      	ldr	r1, [pc, #220]	; (8001bc8 <HAL_GPIO_Init+0x334>)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b1a:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b6e:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_GPIO_Init+0x350>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f ae78 	bne.w	80018a4 <HAL_GPIO_Init+0x10>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	48000c00 	.word	0x48000c00
 8001bd8:	48001000 	.word	0x48001000
 8001bdc:	48001400 	.word	0x48001400
 8001be0:	48001800 	.word	0x48001800
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fcfe 	bl	8000638 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40010400 	.word	0x40010400

08001c48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40007000 	.word	0x40007000

08001c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c72:	d130      	bne.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c80:	d038      	beq.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2232      	movs	r2, #50	; 0x32
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	0c9b      	lsrs	r3, r3, #18
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca8:	e002      	b.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbc:	d102      	bne.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f2      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d110      	bne.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e00f      	b.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce2:	d007      	beq.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cec:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40007000 	.word	0x40007000
 8001d08:	20000020 	.word	0x20000020
 8001d0c:	431bde83 	.word	0x431bde83

08001d10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e3ca      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d22:	4b97      	ldr	r3, [pc, #604]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d2c:	4b94      	ldr	r3, [pc, #592]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 80e4 	beq.w	8001f0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <HAL_RCC_OscConfig+0x4a>
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	f040 808b 	bne.w	8001e68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	f040 8087 	bne.w	8001e68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d5a:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <HAL_RCC_OscConfig+0x62>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e3a2      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1a      	ldr	r2, [r3, #32]
 8001d76:	4b82      	ldr	r3, [pc, #520]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_RCC_OscConfig+0x7c>
 8001d82:	4b7f      	ldr	r3, [pc, #508]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8a:	e005      	b.n	8001d98 <HAL_RCC_OscConfig+0x88>
 8001d8c:	4b7c      	ldr	r3, [pc, #496]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d223      	bcs.n	8001de4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fd87 	bl	80028b4 <RCC_SetFlashLatencyFromMSIRange>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e383      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db0:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b70      	ldr	r3, [pc, #448]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	496d      	ldr	r1, [pc, #436]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dce:	4b6c      	ldr	r3, [pc, #432]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	4968      	ldr	r1, [pc, #416]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
 8001de2:	e025      	b.n	8001e30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de4:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a65      	ldr	r2, [pc, #404]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4960      	ldr	r1, [pc, #384]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e02:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	495b      	ldr	r1, [pc, #364]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fd47 	bl	80028b4 <RCC_SetFlashLatencyFromMSIRange>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e343      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e30:	f000 fc4a 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b52      	ldr	r3, [pc, #328]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	4950      	ldr	r1, [pc, #320]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_RCC_OscConfig+0x278>)
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e50:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <HAL_RCC_OscConfig+0x27c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fad9 	bl	800140c <HAL_InitTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d052      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	e327      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d032      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e70:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a42      	ldr	r2, [pc, #264]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fc1c 	bl	80016b8 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e84:	f7ff fc18 	bl	80016b8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e310      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea2:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	f043 0308 	orr.w	r3, r3, #8
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4931      	ldr	r1, [pc, #196]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	492c      	ldr	r1, [pc, #176]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	e01a      	b.n	8001f0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a29      	ldr	r2, [pc, #164]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fbe9 	bl	80016b8 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eea:	f7ff fbe5 	bl	80016b8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e2dd      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001efc:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x1da>
 8001f08:	e000      	b.n	8001f0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d074      	beq.n	8002002 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x21a>
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d10e      	bne.n	8001f42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d064      	beq.n	8002000 <HAL_RCC_OscConfig+0x2f0>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d160      	bne.n	8002000 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e2ba      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x24a>
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e026      	b.n	8001fa8 <HAL_RCC_OscConfig+0x298>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f62:	d115      	bne.n	8001f90 <HAL_RCC_OscConfig+0x280>
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a02      	ldr	r2, [pc, #8]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	e014      	b.n	8001fa8 <HAL_RCC_OscConfig+0x298>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08008c9c 	.word	0x08008c9c
 8001f88:	20000020 	.word	0x20000020
 8001f8c:	20000024 	.word	0x20000024
 8001f90:	4ba0      	ldr	r3, [pc, #640]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a9f      	ldr	r2, [pc, #636]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b9d      	ldr	r3, [pc, #628]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a9c      	ldr	r2, [pc, #624]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fb82 	bl	80016b8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fb7e 	bl	80016b8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e276      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fca:	4b92      	ldr	r3, [pc, #584]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x2a8>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fb6e 	bl	80016b8 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff fb6a 	bl	80016b8 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e262      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff2:	4b88      	ldr	r3, [pc, #544]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x2d0>
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d060      	beq.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d005      	beq.n	8002020 <HAL_RCC_OscConfig+0x310>
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d119      	bne.n	800204e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d116      	bne.n	800204e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002020:	4b7c      	ldr	r3, [pc, #496]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_OscConfig+0x328>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e23f      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	4973      	ldr	r1, [pc, #460]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800204c:	e040      	b.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d023      	beq.n	800209e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002056:	4b6f      	ldr	r3, [pc, #444]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6e      	ldr	r2, [pc, #440]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff fb29 	bl	80016b8 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206a:	f7ff fb25 	bl	80016b8 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e21d      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207c:	4b65      	ldr	r3, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b62      	ldr	r3, [pc, #392]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	495f      	ldr	r1, [pc, #380]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
 800209c:	e018      	b.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b5d      	ldr	r3, [pc, #372]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7ff fb05 	bl	80016b8 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b2:	f7ff fb01 	bl	80016b8 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1f9      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d03c      	beq.n	8002156 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01c      	beq.n	800211e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e4:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	4a4a      	ldr	r2, [pc, #296]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff fae0 	bl	80016b8 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff fadc 	bl	80016b8 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1d4      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ef      	beq.n	80020fc <HAL_RCC_OscConfig+0x3ec>
 800211c:	e01b      	b.n	8002156 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002124:	4a3b      	ldr	r2, [pc, #236]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff fac3 	bl	80016b8 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7ff fabf 	bl	80016b8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1b7      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1ef      	bne.n	8002136 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80a6 	beq.w	80022b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002168:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10d      	bne.n	8002190 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800217a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217e:	6593      	str	r3, [r2, #88]	; 0x58
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218c:	2301      	movs	r3, #1
 800218e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x508>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d118      	bne.n	80021ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCC_OscConfig+0x508>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_RCC_OscConfig+0x508>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a8:	f7ff fa86 	bl	80016b8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7ff fa82 	bl	80016b8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e17a      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_RCC_OscConfig+0x508>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4d8>
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e6:	e029      	b.n	800223c <HAL_RCC_OscConfig+0x52c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d115      	bne.n	800221c <HAL_RCC_OscConfig+0x50c>
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002210:	e014      	b.n	800223c <HAL_RCC_OscConfig+0x52c>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
 800221c:	4b9c      	ldr	r3, [pc, #624]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a9b      	ldr	r2, [pc, #620]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800222c:	4b98      	ldr	r3, [pc, #608]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	4a97      	ldr	r2, [pc, #604]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d016      	beq.n	8002272 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7ff fa38 	bl	80016b8 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224a:	e00a      	b.n	8002262 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7ff fa34 	bl	80016b8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e12a      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ed      	beq.n	800224c <HAL_RCC_OscConfig+0x53c>
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7ff fa21 	bl	80016b8 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff fa1d 	bl	80016b8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e113      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002290:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1ed      	bne.n	800227a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229e:	7ffb      	ldrb	r3, [r7, #31]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b7a      	ldr	r3, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a79      	ldr	r2, [pc, #484]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80022aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80fe 	beq.w	80024b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	2b02      	cmp	r3, #2
 80022c0:	f040 80d0 	bne.w	8002464 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022c4:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d130      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	3b01      	subs	r3, #1
 80022e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d127      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d11f      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002304:	2a07      	cmp	r2, #7
 8002306:	bf14      	ite	ne
 8002308:	2201      	movne	r2, #1
 800230a:	2200      	moveq	r2, #0
 800230c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800230e:	4293      	cmp	r3, r2
 8002310:	d113      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	3b01      	subs	r3, #1
 8002320:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d109      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d06e      	beq.n	8002418 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d069      	beq.n	8002414 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0ad      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800235c:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a4b      	ldr	r2, [pc, #300]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002368:	f7ff f9a6 	bl	80016b8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7ff f9a2 	bl	80016b8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e09a      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238e:	4b40      	ldr	r3, [pc, #256]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	4b40      	ldr	r3, [pc, #256]	; (8002494 <HAL_RCC_OscConfig+0x784>)
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800239e:	3a01      	subs	r2, #1
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	4311      	orrs	r1, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023a8:	0212      	lsls	r2, r2, #8
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023b0:	0852      	lsrs	r2, r2, #1
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0552      	lsls	r2, r2, #21
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023bc:	0852      	lsrs	r2, r2, #1
 80023be:	3a01      	subs	r2, #1
 80023c0:	0652      	lsls	r2, r2, #25
 80023c2:	4311      	orrs	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023c8:	0912      	lsrs	r2, r2, #4
 80023ca:	0452      	lsls	r2, r2, #17
 80023cc:	430a      	orrs	r2, r1
 80023ce:	4930      	ldr	r1, [pc, #192]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023d4:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ec:	f7ff f964 	bl	80016b8 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7ff f960 	bl	80016b8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e058      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002412:	e050      	b.n	80024b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e04f      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d148      	bne.n	80024b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800243c:	f7ff f93c 	bl	80016b8 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7ff f938 	bl	80016b8 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e030      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x734>
 8002462:	e028      	b.n	80024b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d023      	beq.n	80024b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7ff f91f 	bl	80016b8 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247c:	e00c      	b.n	8002498 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247e:	f7ff f91b 	bl	80016b8 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d905      	bls.n	8002498 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e013      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
 8002490:	40021000 	.word	0x40021000
 8002494:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_OscConfig+0x7b0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ec      	bne.n	800247e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_OscConfig+0x7b0>)
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	4905      	ldr	r1, [pc, #20]	; (80024c0 <HAL_RCC_OscConfig+0x7b0>)
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_OscConfig+0x7b4>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	60cb      	str	r3, [r1, #12]
 80024b0:	e001      	b.n	80024b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	feeefffc 	.word	0xfeeefffc

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0e7      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b75      	ldr	r3, [pc, #468]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d910      	bls.n	800250c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4970      	ldr	r1, [pc, #448]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0cf      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	4b66      	ldr	r3, [pc, #408]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002524:	429a      	cmp	r2, r3
 8002526:	d908      	bls.n	800253a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002528:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4960      	ldr	r1, [pc, #384]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d04c      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254e:	4b5a      	ldr	r3, [pc, #360]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d121      	bne.n	800259e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0a6      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002566:	4b54      	ldr	r3, [pc, #336]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d115      	bne.n	800259e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e09a      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800257e:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e08e      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800258e:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e086      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800259e:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f023 0203 	bic.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4943      	ldr	r1, [pc, #268]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b0:	f7ff f882 	bl	80016b8 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7ff f87e 	bl	80016b8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e06e      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 020c 	and.w	r2, r3, #12
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	429a      	cmp	r2, r3
 80025de:	d1eb      	bne.n	80025b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d010      	beq.n	800260e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d208      	bcs.n	800260e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025fc:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	492b      	ldr	r1, [pc, #172]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800260e:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d210      	bcs.n	800263e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 0207 	bic.w	r2, r3, #7
 8002624:	4923      	ldr	r1, [pc, #140]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e036      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4918      	ldr	r1, [pc, #96]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4910      	ldr	r1, [pc, #64]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800267c:	f000 f824 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	490b      	ldr	r1, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x1f4>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 800269a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1fc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe feb3 	bl	800140c <HAL_InitTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80026aa:	7afb      	ldrb	r3, [r7, #11]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08008c9c 	.word	0x08008c9c
 80026c0:	20000020 	.word	0x20000020
 80026c4:	20000024 	.word	0x20000024

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d6:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e0:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x34>
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d121      	bne.n	800273a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d11e      	bne.n	800273a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026fc:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800270a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e005      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002724:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10d      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d102      	bne.n	8002746 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e004      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d101      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_RCC_GetSysClockFreq+0x114>)
 800274e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d134      	bne.n	80027c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002756:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d003      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0xa6>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d003      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xac>
 800276c:	e005      	b.n	800277a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002770:	617b      	str	r3, [r7, #20]
      break;
 8002772:	e005      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002776:	617b      	str	r3, [r7, #20]
      break;
 8002778:	e002      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	617b      	str	r3, [r7, #20]
      break;
 800277e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	3301      	adds	r3, #1
 800278c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	fb03 f202 	mul.w	r2, r3, r2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	0e5b      	lsrs	r3, r3, #25
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	3301      	adds	r3, #1
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027c0:	69bb      	ldr	r3, [r7, #24]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08008cb4 	.word	0x08008cb4
 80027d8:	00f42400 	.word	0x00f42400
 80027dc:	007a1200 	.word	0x007a1200

080027e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000020 	.word	0x20000020

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027fc:	f7ff fff0 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4904      	ldr	r1, [pc, #16]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	08008cac 	.word	0x08008cac

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002828:	f7ff ffda 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0adb      	lsrs	r3, r3, #11
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4904      	ldr	r1, [pc, #16]	; (800284c <HAL_RCC_GetPCLK2Freq+0x28>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000
 800284c:	08008cac 	.word	0x08008cac

08002850 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	220f      	movs	r2, #15
 800285e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_RCC_GetClockConfig+0x5c>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0203 	and.w	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_RCC_GetClockConfig+0x5c>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	08db      	lsrs	r3, r3, #3
 800288a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_RCC_GetClockConfig+0x60>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0207 	and.w	r2, r3, #7
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	601a      	str	r2, [r3, #0]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40022000 	.word	0x40022000

080028b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028c0:	4b2a      	ldr	r3, [pc, #168]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028cc:	f7ff f9bc 	bl	8001c48 <HAL_PWREx_GetVoltageRange>
 80028d0:	6178      	str	r0, [r7, #20]
 80028d2:	e014      	b.n	80028fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	4a24      	ldr	r2, [pc, #144]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6593      	str	r3, [r2, #88]	; 0x58
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028ec:	f7ff f9ac 	bl	8001c48 <HAL_PWREx_GetVoltageRange>
 80028f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028f2:	4b1e      	ldr	r3, [pc, #120]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	4a1d      	ldr	r2, [pc, #116]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002904:	d10b      	bne.n	800291e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d919      	bls.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2ba0      	cmp	r3, #160	; 0xa0
 8002910:	d902      	bls.n	8002918 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002912:	2302      	movs	r3, #2
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	e013      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	e010      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b80      	cmp	r3, #128	; 0x80
 8002922:	d902      	bls.n	800292a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002924:	2303      	movs	r3, #3
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	e00a      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b80      	cmp	r3, #128	; 0x80
 800292e:	d102      	bne.n	8002936 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002930:	2302      	movs	r3, #2
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	e004      	b.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b70      	cmp	r3, #112	; 0x70
 800293a:	d101      	bne.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800293c:	2301      	movs	r3, #1
 800293e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 0207 	bic.w	r2, r3, #7
 8002948:	4909      	ldr	r1, [pc, #36]	; (8002970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	429a      	cmp	r2, r3
 800295c:	d001      	beq.n	8002962 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	40022000 	.word	0x40022000

08002974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800297c:	2300      	movs	r3, #0
 800297e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002980:	2300      	movs	r3, #0
 8002982:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298c:	2b00      	cmp	r3, #0
 800298e:	d041      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002994:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002998:	d02a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800299a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800299e:	d824      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029a4:	d008      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029aa:	d81e      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b4:	d010      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029b6:	e018      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029b8:	4b86      	ldr	r3, [pc, #536]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a85      	ldr	r2, [pc, #532]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c4:	e015      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fabb 	bl	8002f48 <RCCEx_PLLSAI1_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d6:	e00c      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3320      	adds	r3, #32
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fba6 	bl	8003130 <RCCEx_PLLSAI2_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e8:	e003      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	74fb      	strb	r3, [r7, #19]
      break;
 80029ee:	e000      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f8:	4b76      	ldr	r3, [pc, #472]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a06:	4973      	ldr	r1, [pc, #460]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a0e:	e001      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d041      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a28:	d02a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a2e:	d824      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a34:	d008      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a3a:	d81e      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a44:	d010      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a46:	e018      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a48:	4b62      	ldr	r3, [pc, #392]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a61      	ldr	r2, [pc, #388]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a54:	e015      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fa73 	bl	8002f48 <RCCEx_PLLSAI1_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a66:	e00c      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3320      	adds	r3, #32
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fb5e 	bl	8003130 <RCCEx_PLLSAI2_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a78:	e003      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a7e:	e000      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a82:	7cfb      	ldrb	r3, [r7, #19]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a88:	4b52      	ldr	r3, [pc, #328]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a96:	494f      	ldr	r1, [pc, #316]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a9e:	e001      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80a0 	beq.w	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00d      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002acc:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	4a40      	ldr	r2, [pc, #256]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad8:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae8:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a3a      	ldr	r2, [pc, #232]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af4:	f7fe fde0 	bl	80016b8 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002afa:	e009      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe fddc 	bl	80016b8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d902      	bls.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b0e:	e005      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b10:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ef      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d15c      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b22:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01f      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d019      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b6c:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fd9b 	bl	80016b8 <HAL_GetTick>
 8002b82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b84:	e00b      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fd97 	bl	80016b8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d902      	bls.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b9c:	e006      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ec      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc2:	4904      	ldr	r1, [pc, #16]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bca:	e009      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	74bb      	strb	r3, [r7, #18]
 8002bd0:	e006      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002be0:	7c7b      	ldrb	r3, [r7, #17]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be6:	4b9e      	ldr	r3, [pc, #632]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	4a9d      	ldr	r2, [pc, #628]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bfe:	4b98      	ldr	r3, [pc, #608]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f023 0203 	bic.w	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	4994      	ldr	r1, [pc, #592]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c20:	4b8f      	ldr	r3, [pc, #572]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f023 020c 	bic.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	498c      	ldr	r1, [pc, #560]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c42:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	4983      	ldr	r1, [pc, #524]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c64:	4b7e      	ldr	r3, [pc, #504]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	497b      	ldr	r1, [pc, #492]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c86:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c94:	4972      	ldr	r1, [pc, #456]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ca8:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	496a      	ldr	r1, [pc, #424]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cca:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	4961      	ldr	r1, [pc, #388]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cec:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfa:	4959      	ldr	r1, [pc, #356]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d0e:	4b54      	ldr	r3, [pc, #336]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	4950      	ldr	r1, [pc, #320]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d30:	4b4b      	ldr	r3, [pc, #300]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	4948      	ldr	r1, [pc, #288]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d52:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	493f      	ldr	r1, [pc, #252]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d028      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d74:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d82:	4937      	ldr	r1, [pc, #220]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d92:	d106      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b32      	ldr	r3, [pc, #200]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a31      	ldr	r2, [pc, #196]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
 8002da0:	e011      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f8c8 	bl	8002f48 <RCCEx_PLLSAI1_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d028      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dd2:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	491f      	ldr	r1, [pc, #124]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df0:	d106      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfc:	60d3      	str	r3, [r2, #12]
 8002dfe:	e011      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 f899 	bl	8002f48 <RCCEx_PLLSAI1_Config>
 8002e16:	4603      	mov	r3, r0
 8002e18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d02b      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3e:	4908      	ldr	r1, [pc, #32]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4e:	d109      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a02      	ldr	r2, [pc, #8]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e5a:	60d3      	str	r3, [r2, #12]
 8002e5c:	e014      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2101      	movs	r1, #1
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 f867 	bl	8002f48 <RCCEx_PLLSAI1_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e7e:	7cfb      	ldrb	r3, [r7, #19]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d02f      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea2:	4928      	ldr	r1, [pc, #160]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	2102      	movs	r1, #2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f844 	bl	8002f48 <RCCEx_PLLSAI1_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d014      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	74bb      	strb	r3, [r7, #18]
 8002ece:	e011      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3320      	adds	r3, #32
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f925 	bl	8003130 <RCCEx_PLLSAI2_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0e:	490d      	ldr	r1, [pc, #52]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f32:	4904      	ldr	r1, [pc, #16]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000

08002f48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f56:	4b75      	ldr	r3, [pc, #468]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d018      	beq.n	8002f94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f62:	4b72      	ldr	r3, [pc, #456]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0203 	and.w	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d10d      	bne.n	8002f8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
       ||
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f7a:	4b6c      	ldr	r3, [pc, #432]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
       ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d047      	beq.n	800301e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
 8002f92:	e044      	b.n	800301e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d018      	beq.n	8002fce <RCCEx_PLLSAI1_Config+0x86>
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d825      	bhi.n	8002fec <RCCEx_PLLSAI1_Config+0xa4>
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d002      	beq.n	8002faa <RCCEx_PLLSAI1_Config+0x62>
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d009      	beq.n	8002fbc <RCCEx_PLLSAI1_Config+0x74>
 8002fa8:	e020      	b.n	8002fec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002faa:	4b60      	ldr	r3, [pc, #384]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11d      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fba:	e01a      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fbc:	4b5b      	ldr	r3, [pc, #364]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d116      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fcc:	e013      	b.n	8002ff6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fce:	4b57      	ldr	r3, [pc, #348]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10f      	bne.n	8002ffa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fda:	4b54      	ldr	r3, [pc, #336]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fea:	e006      	b.n	8002ffa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff0:	e004      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ffa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10d      	bne.n	800301e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003002:	4b4a      	ldr	r3, [pc, #296]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	430b      	orrs	r3, r1
 8003018:	4944      	ldr	r1, [pc, #272]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d17d      	bne.n	8003120 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003024:	4b41      	ldr	r3, [pc, #260]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a40      	ldr	r2, [pc, #256]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 800302a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800302e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003030:	f7fe fb42 	bl	80016b8 <HAL_GetTick>
 8003034:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003036:	e009      	b.n	800304c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003038:	f7fe fb3e 	bl	80016b8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d902      	bls.n	800304c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	73fb      	strb	r3, [r7, #15]
        break;
 800304a:	e005      	b.n	8003058 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800304c:	4b37      	ldr	r3, [pc, #220]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1ef      	bne.n	8003038 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d160      	bne.n	8003120 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d111      	bne.n	8003088 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800306c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6892      	ldr	r2, [r2, #8]
 8003074:	0211      	lsls	r1, r2, #8
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68d2      	ldr	r2, [r2, #12]
 800307a:	0912      	lsrs	r2, r2, #4
 800307c:	0452      	lsls	r2, r2, #17
 800307e:	430a      	orrs	r2, r1
 8003080:	492a      	ldr	r1, [pc, #168]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	610b      	str	r3, [r1, #16]
 8003086:	e027      	b.n	80030d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d112      	bne.n	80030b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003096:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6892      	ldr	r2, [r2, #8]
 800309e:	0211      	lsls	r1, r2, #8
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6912      	ldr	r2, [r2, #16]
 80030a4:	0852      	lsrs	r2, r2, #1
 80030a6:	3a01      	subs	r2, #1
 80030a8:	0552      	lsls	r2, r2, #21
 80030aa:	430a      	orrs	r2, r1
 80030ac:	491f      	ldr	r1, [pc, #124]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	610b      	str	r3, [r1, #16]
 80030b2:	e011      	b.n	80030d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6892      	ldr	r2, [r2, #8]
 80030c4:	0211      	lsls	r1, r2, #8
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6952      	ldr	r2, [r2, #20]
 80030ca:	0852      	lsrs	r2, r2, #1
 80030cc:	3a01      	subs	r2, #1
 80030ce:	0652      	lsls	r2, r2, #25
 80030d0:	430a      	orrs	r2, r1
 80030d2:	4916      	ldr	r1, [pc, #88]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030d8:	4b14      	ldr	r3, [pc, #80]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a13      	ldr	r2, [pc, #76]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe fae8 	bl	80016b8 <HAL_GetTick>
 80030e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ea:	e009      	b.n	8003100 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ec:	f7fe fae4 	bl	80016b8 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d902      	bls.n	8003100 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	73fb      	strb	r3, [r7, #15]
          break;
 80030fe:	e005      	b.n	800310c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ef      	beq.n	80030ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	4904      	ldr	r1, [pc, #16]	; (800312c <RCCEx_PLLSAI1_Config+0x1e4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000

08003130 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800313e:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d018      	beq.n	800317c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800314a:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0203 	and.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d10d      	bne.n	8003176 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
       ||
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003162:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
       ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d047      	beq.n	8003206 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
 800317a:	e044      	b.n	8003206 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d018      	beq.n	80031b6 <RCCEx_PLLSAI2_Config+0x86>
 8003184:	2b03      	cmp	r3, #3
 8003186:	d825      	bhi.n	80031d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003188:	2b01      	cmp	r3, #1
 800318a:	d002      	beq.n	8003192 <RCCEx_PLLSAI2_Config+0x62>
 800318c:	2b02      	cmp	r3, #2
 800318e:	d009      	beq.n	80031a4 <RCCEx_PLLSAI2_Config+0x74>
 8003190:	e020      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003192:	4b55      	ldr	r3, [pc, #340]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11d      	bne.n	80031da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a2:	e01a      	b.n	80031da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d116      	bne.n	80031de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b4:	e013      	b.n	80031de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031b6:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031c2:	4b49      	ldr	r3, [pc, #292]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031d2:	e006      	b.n	80031e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
      break;
 80031d8:	e004      	b.n	80031e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031da:	bf00      	nop
 80031dc:	e002      	b.n	80031e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10d      	bne.n	8003206 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	430b      	orrs	r3, r1
 8003200:	4939      	ldr	r1, [pc, #228]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003202:	4313      	orrs	r3, r2
 8003204:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d167      	bne.n	80032dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800320c:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a35      	ldr	r2, [pc, #212]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003218:	f7fe fa4e 	bl	80016b8 <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800321e:	e009      	b.n	8003234 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003220:	f7fe fa4a 	bl	80016b8 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d902      	bls.n	8003234 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	73fb      	strb	r3, [r7, #15]
        break;
 8003232:	e005      	b.n	8003240 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003234:	4b2c      	ldr	r3, [pc, #176]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ef      	bne.n	8003220 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d14a      	bne.n	80032dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d111      	bne.n	8003270 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800324c:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6892      	ldr	r2, [r2, #8]
 800325c:	0211      	lsls	r1, r2, #8
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68d2      	ldr	r2, [r2, #12]
 8003262:	0912      	lsrs	r2, r2, #4
 8003264:	0452      	lsls	r2, r2, #17
 8003266:	430a      	orrs	r2, r1
 8003268:	491f      	ldr	r1, [pc, #124]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326a:	4313      	orrs	r3, r2
 800326c:	614b      	str	r3, [r1, #20]
 800326e:	e011      	b.n	8003294 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003278:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6892      	ldr	r2, [r2, #8]
 8003280:	0211      	lsls	r1, r2, #8
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6912      	ldr	r2, [r2, #16]
 8003286:	0852      	lsrs	r2, r2, #1
 8003288:	3a01      	subs	r2, #1
 800328a:	0652      	lsls	r2, r2, #25
 800328c:	430a      	orrs	r2, r1
 800328e:	4916      	ldr	r1, [pc, #88]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003290:	4313      	orrs	r3, r2
 8003292:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003294:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe fa0a 	bl	80016b8 <HAL_GetTick>
 80032a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032a6:	e009      	b.n	80032bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032a8:	f7fe fa06 	bl	80016b8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d902      	bls.n	80032bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	73fb      	strb	r3, [r7, #15]
          break;
 80032ba:	e005      	b.n	80032c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ef      	beq.n	80032a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	4904      	ldr	r1, [pc, #16]	; (80032e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000

080032ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e049      	b.n	8003392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe f800 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 fa9a 	bl	8003864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d001      	beq.n	80033b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e04f      	b.n	8003454 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a23      	ldr	r2, [pc, #140]	; (8003460 <HAL_TIM_Base_Start_IT+0xc4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01d      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0x76>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033de:	d018      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0x76>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_TIM_Base_Start_IT+0xc8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0x76>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_TIM_Base_Start_IT+0xcc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0x76>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1c      	ldr	r2, [pc, #112]	; (800346c <HAL_TIM_Base_Start_IT+0xd0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0x76>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1b      	ldr	r2, [pc, #108]	; (8003470 <HAL_TIM_Base_Start_IT+0xd4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_TIM_Base_Start_IT+0x76>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a19      	ldr	r2, [pc, #100]	; (8003474 <HAL_TIM_Base_Start_IT+0xd8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d115      	bne.n	800343e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_TIM_Base_Start_IT+0xdc>)
 800341a:	4013      	ands	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b06      	cmp	r3, #6
 8003422:	d015      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0xb4>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d011      	beq.n	8003450 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	e008      	b.n	8003450 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e000      	b.n	8003452 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003450:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40000c00 	.word	0x40000c00
 8003470:	40013400 	.word	0x40013400
 8003474:	40014000 	.word	0x40014000
 8003478:	00010007 	.word	0x00010007

0800347c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d020      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01b      	beq.n	80034e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0202 	mvn.w	r2, #2
 80034b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9ad 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 80034cc:	e005      	b.n	80034da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f99f 	bl	8003812 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f9b0 	bl	800383a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d020      	beq.n	800352c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01b      	beq.n	800352c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0204 	mvn.w	r2, #4
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f987 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f979 	bl	8003812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f98a 	bl	800383a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d020      	beq.n	8003578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01b      	beq.n	8003578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0208 	mvn.w	r2, #8
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f961 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f953 	bl	8003812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f964 	bl	800383a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d020      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01b      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0210 	mvn.w	r2, #16
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2208      	movs	r2, #8
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f93b 	bl	8003826 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f92d 	bl	8003812 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f93e 	bl	800383a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0201 	mvn.w	r2, #1
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fd92 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 faf2 	bl	8003bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00c      	beq.n	8003630 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 faea 	bl	8003c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8fd 	bl	800384e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0220 	mvn.w	r2, #32
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fab2 	bl	8003bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIM_ConfigClockSource+0x1c>
 8003698:	2302      	movs	r3, #2
 800369a:	e0b6      	b.n	800380a <HAL_TIM_ConfigClockSource+0x18a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d8:	d03e      	beq.n	8003758 <HAL_TIM_ConfigClockSource+0xd8>
 80036da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036de:	f200 8087 	bhi.w	80037f0 <HAL_TIM_ConfigClockSource+0x170>
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e6:	f000 8086 	beq.w	80037f6 <HAL_TIM_ConfigClockSource+0x176>
 80036ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ee:	d87f      	bhi.n	80037f0 <HAL_TIM_ConfigClockSource+0x170>
 80036f0:	2b70      	cmp	r3, #112	; 0x70
 80036f2:	d01a      	beq.n	800372a <HAL_TIM_ConfigClockSource+0xaa>
 80036f4:	2b70      	cmp	r3, #112	; 0x70
 80036f6:	d87b      	bhi.n	80037f0 <HAL_TIM_ConfigClockSource+0x170>
 80036f8:	2b60      	cmp	r3, #96	; 0x60
 80036fa:	d050      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x11e>
 80036fc:	2b60      	cmp	r3, #96	; 0x60
 80036fe:	d877      	bhi.n	80037f0 <HAL_TIM_ConfigClockSource+0x170>
 8003700:	2b50      	cmp	r3, #80	; 0x50
 8003702:	d03c      	beq.n	800377e <HAL_TIM_ConfigClockSource+0xfe>
 8003704:	2b50      	cmp	r3, #80	; 0x50
 8003706:	d873      	bhi.n	80037f0 <HAL_TIM_ConfigClockSource+0x170>
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d058      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x13e>
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d86f      	bhi.n	80037f0 <HAL_TIM_ConfigClockSource+0x170>
 8003710:	2b30      	cmp	r3, #48	; 0x30
 8003712:	d064      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x15e>
 8003714:	2b30      	cmp	r3, #48	; 0x30
 8003716:	d86b      	bhi.n	80037f0 <HAL_TIM_ConfigClockSource+0x170>
 8003718:	2b20      	cmp	r3, #32
 800371a:	d060      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x15e>
 800371c:	2b20      	cmp	r3, #32
 800371e:	d867      	bhi.n	80037f0 <HAL_TIM_ConfigClockSource+0x170>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d05c      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x15e>
 8003724:	2b10      	cmp	r3, #16
 8003726:	d05a      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x15e>
 8003728:	e062      	b.n	80037f0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800373a:	f000 f9a7 	bl	8003a8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800374c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	609a      	str	r2, [r3, #8]
      break;
 8003756:	e04f      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003768:	f000 f990 	bl	8003a8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800377a:	609a      	str	r2, [r3, #8]
      break;
 800377c:	e03c      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800378a:	461a      	mov	r2, r3
 800378c:	f000 f904 	bl	8003998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2150      	movs	r1, #80	; 0x50
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f95d 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 800379c:	e02c      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037aa:	461a      	mov	r2, r3
 80037ac:	f000 f923 	bl	80039f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2160      	movs	r1, #96	; 0x60
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f94d 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 80037bc:	e01c      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 f8e4 	bl	8003998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2140      	movs	r1, #64	; 0x40
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f93d 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 80037dc:	e00c      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f000 f934 	bl	8003a56 <TIM_ITRx_SetConfig>
      break;
 80037ee:	e003      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      break;
 80037f4:	e000      	b.n	80037f8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80037f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003808:	7bfb      	ldrb	r3, [r7, #15]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a40      	ldr	r2, [pc, #256]	; (8003978 <TIM_Base_SetConfig+0x114>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003882:	d00f      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3d      	ldr	r2, [pc, #244]	; (800397c <TIM_Base_SetConfig+0x118>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00b      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a3c      	ldr	r2, [pc, #240]	; (8003980 <TIM_Base_SetConfig+0x11c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a3b      	ldr	r2, [pc, #236]	; (8003984 <TIM_Base_SetConfig+0x120>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a3a      	ldr	r2, [pc, #232]	; (8003988 <TIM_Base_SetConfig+0x124>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2f      	ldr	r2, [pc, #188]	; (8003978 <TIM_Base_SetConfig+0x114>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01f      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d01b      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2c      	ldr	r2, [pc, #176]	; (800397c <TIM_Base_SetConfig+0x118>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d017      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2b      	ldr	r2, [pc, #172]	; (8003980 <TIM_Base_SetConfig+0x11c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <TIM_Base_SetConfig+0x120>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00f      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a29      	ldr	r2, [pc, #164]	; (8003988 <TIM_Base_SetConfig+0x124>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00b      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a28      	ldr	r2, [pc, #160]	; (800398c <TIM_Base_SetConfig+0x128>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a27      	ldr	r2, [pc, #156]	; (8003990 <TIM_Base_SetConfig+0x12c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d003      	beq.n	80038fe <TIM_Base_SetConfig+0x9a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a26      	ldr	r2, [pc, #152]	; (8003994 <TIM_Base_SetConfig+0x130>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d108      	bne.n	8003910 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <TIM_Base_SetConfig+0x114>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00f      	beq.n	800395c <TIM_Base_SetConfig+0xf8>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <TIM_Base_SetConfig+0x124>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <TIM_Base_SetConfig+0xf8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a11      	ldr	r2, [pc, #68]	; (800398c <TIM_Base_SetConfig+0x128>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_Base_SetConfig+0xf8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <TIM_Base_SetConfig+0x12c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_Base_SetConfig+0xf8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a0f      	ldr	r2, [pc, #60]	; (8003994 <TIM_Base_SetConfig+0x130>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d103      	bne.n	8003964 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	615a      	str	r2, [r3, #20]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40013400 	.word	0x40013400
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400
 8003994:	40014800 	.word	0x40014800

08003998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f023 030a 	bic.w	r3, r3, #10
 80039d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f023 0210 	bic.w	r2, r3, #16
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	031b      	lsls	r3, r3, #12
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f043 0307 	orr.w	r3, r3, #7
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	021a      	lsls	r2, r3, #8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e068      	b.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2e      	ldr	r2, [pc, #184]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2d      	ldr	r2, [pc, #180]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d108      	bne.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01d      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b56:	d018      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d009      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10c      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40013400 	.word	0x40013400
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800
 8003bd4:	40000c00 	.word	0x40000c00
 8003bd8:	40014000 	.word	0x40014000

08003bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e040      	b.n	8003cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fb8a 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2224      	movs	r2, #36	; 0x24
 8003c44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d002      	beq.n	8003c64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fb6a 	bl	8004338 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8af 	bl	8003dc8 <UART_SetConfig>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e01b      	b.n	8003cac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fbe9 	bl	800447c <UART_CheckIdleState>
 8003caa:	4603      	mov	r3, r0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d178      	bne.n	8003dbe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_UART_Transmit+0x24>
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e071      	b.n	8003dc0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2221      	movs	r2, #33	; 0x21
 8003ce8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cea:	f7fd fce5 	bl	80016b8 <HAL_GetTick>
 8003cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Transmit+0x68>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d24:	e030      	b.n	8003d88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2180      	movs	r1, #128	; 0x80
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fc4b 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d004      	beq.n	8003d46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e03c      	b.n	8003dc0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d58:	b292      	uxth	r2, r2
 8003d5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	3302      	adds	r3, #2
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e008      	b.n	8003d76 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	b292      	uxth	r2, r2
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1c8      	bne.n	8003d26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2140      	movs	r1, #64	; 0x40
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fc14 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e005      	b.n	8003dc0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dcc:	b08a      	sub	sp, #40	; 0x28
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4ba4      	ldr	r3, [pc, #656]	; (8004088 <UART_SetConfig+0x2c0>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a99      	ldr	r2, [pc, #612]	; (800408c <UART_SetConfig+0x2c4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e30:	4313      	orrs	r3, r2
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	430a      	orrs	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a90      	ldr	r2, [pc, #576]	; (8004090 <UART_SetConfig+0x2c8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d126      	bne.n	8003ea0 <UART_SetConfig+0xd8>
 8003e52:	4b90      	ldr	r3, [pc, #576]	; (8004094 <UART_SetConfig+0x2cc>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d81b      	bhi.n	8003e98 <UART_SetConfig+0xd0>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <UART_SetConfig+0xa0>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e89 	.word	0x08003e89
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e91 	.word	0x08003e91
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7e:	e116      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003e80:	2302      	movs	r3, #2
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e86:	e112      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8e:	e10e      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003e90:	2308      	movs	r3, #8
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e96:	e10a      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9e:	e106      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a7c      	ldr	r2, [pc, #496]	; (8004098 <UART_SetConfig+0x2d0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d138      	bne.n	8003f1c <UART_SetConfig+0x154>
 8003eaa:	4b7a      	ldr	r3, [pc, #488]	; (8004094 <UART_SetConfig+0x2cc>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d82d      	bhi.n	8003f14 <UART_SetConfig+0x14c>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <UART_SetConfig+0xf8>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003f15 	.word	0x08003f15
 8003ec8:	08003f15 	.word	0x08003f15
 8003ecc:	08003f15 	.word	0x08003f15
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003f15 	.word	0x08003f15
 8003ee0:	08003efd 	.word	0x08003efd
 8003ee4:	08003f15 	.word	0x08003f15
 8003ee8:	08003f15 	.word	0x08003f15
 8003eec:	08003f15 	.word	0x08003f15
 8003ef0:	08003f0d 	.word	0x08003f0d
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efa:	e0d8      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003efc:	2302      	movs	r3, #2
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f02:	e0d4      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f04:	2304      	movs	r3, #4
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0a:	e0d0      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f12:	e0cc      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f14:	2310      	movs	r3, #16
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1a:	e0c8      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5e      	ldr	r2, [pc, #376]	; (800409c <UART_SetConfig+0x2d4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d125      	bne.n	8003f72 <UART_SetConfig+0x1aa>
 8003f26:	4b5b      	ldr	r3, [pc, #364]	; (8004094 <UART_SetConfig+0x2cc>)
 8003f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d016      	beq.n	8003f62 <UART_SetConfig+0x19a>
 8003f34:	2b30      	cmp	r3, #48	; 0x30
 8003f36:	d818      	bhi.n	8003f6a <UART_SetConfig+0x1a2>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d00a      	beq.n	8003f52 <UART_SetConfig+0x18a>
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d814      	bhi.n	8003f6a <UART_SetConfig+0x1a2>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <UART_SetConfig+0x182>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d008      	beq.n	8003f5a <UART_SetConfig+0x192>
 8003f48:	e00f      	b.n	8003f6a <UART_SetConfig+0x1a2>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f50:	e0ad      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f52:	2302      	movs	r3, #2
 8003f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f58:	e0a9      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f5a:	2304      	movs	r3, #4
 8003f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f60:	e0a5      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f62:	2308      	movs	r3, #8
 8003f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f68:	e0a1      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f6a:	2310      	movs	r3, #16
 8003f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f70:	e09d      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a4a      	ldr	r2, [pc, #296]	; (80040a0 <UART_SetConfig+0x2d8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d125      	bne.n	8003fc8 <UART_SetConfig+0x200>
 8003f7c:	4b45      	ldr	r3, [pc, #276]	; (8004094 <UART_SetConfig+0x2cc>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f86:	2bc0      	cmp	r3, #192	; 0xc0
 8003f88:	d016      	beq.n	8003fb8 <UART_SetConfig+0x1f0>
 8003f8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f8c:	d818      	bhi.n	8003fc0 <UART_SetConfig+0x1f8>
 8003f8e:	2b80      	cmp	r3, #128	; 0x80
 8003f90:	d00a      	beq.n	8003fa8 <UART_SetConfig+0x1e0>
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d814      	bhi.n	8003fc0 <UART_SetConfig+0x1f8>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <UART_SetConfig+0x1d8>
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d008      	beq.n	8003fb0 <UART_SetConfig+0x1e8>
 8003f9e:	e00f      	b.n	8003fc0 <UART_SetConfig+0x1f8>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa6:	e082      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fae:	e07e      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb6:	e07a      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fbe:	e076      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc6:	e072      	b.n	80040ae <UART_SetConfig+0x2e6>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a35      	ldr	r2, [pc, #212]	; (80040a4 <UART_SetConfig+0x2dc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d12a      	bne.n	8004028 <UART_SetConfig+0x260>
 8003fd2:	4b30      	ldr	r3, [pc, #192]	; (8004094 <UART_SetConfig+0x2cc>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe0:	d01a      	beq.n	8004018 <UART_SetConfig+0x250>
 8003fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe6:	d81b      	bhi.n	8004020 <UART_SetConfig+0x258>
 8003fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fec:	d00c      	beq.n	8004008 <UART_SetConfig+0x240>
 8003fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff2:	d815      	bhi.n	8004020 <UART_SetConfig+0x258>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <UART_SetConfig+0x238>
 8003ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffc:	d008      	beq.n	8004010 <UART_SetConfig+0x248>
 8003ffe:	e00f      	b.n	8004020 <UART_SetConfig+0x258>
 8004000:	2300      	movs	r3, #0
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004006:	e052      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004008:	2302      	movs	r3, #2
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	e04e      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004010:	2304      	movs	r3, #4
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004016:	e04a      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004018:	2308      	movs	r3, #8
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401e:	e046      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004020:	2310      	movs	r3, #16
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004026:	e042      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a17      	ldr	r2, [pc, #92]	; (800408c <UART_SetConfig+0x2c4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d13a      	bne.n	80040a8 <UART_SetConfig+0x2e0>
 8004032:	4b18      	ldr	r3, [pc, #96]	; (8004094 <UART_SetConfig+0x2cc>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800403c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004040:	d01a      	beq.n	8004078 <UART_SetConfig+0x2b0>
 8004042:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004046:	d81b      	bhi.n	8004080 <UART_SetConfig+0x2b8>
 8004048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404c:	d00c      	beq.n	8004068 <UART_SetConfig+0x2a0>
 800404e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004052:	d815      	bhi.n	8004080 <UART_SetConfig+0x2b8>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <UART_SetConfig+0x298>
 8004058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405c:	d008      	beq.n	8004070 <UART_SetConfig+0x2a8>
 800405e:	e00f      	b.n	8004080 <UART_SetConfig+0x2b8>
 8004060:	2300      	movs	r3, #0
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004066:	e022      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004068:	2302      	movs	r3, #2
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406e:	e01e      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004070:	2304      	movs	r3, #4
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004076:	e01a      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004078:	2308      	movs	r3, #8
 800407a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407e:	e016      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004080:	2310      	movs	r3, #16
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004086:	e012      	b.n	80040ae <UART_SetConfig+0x2e6>
 8004088:	efff69f3 	.word	0xefff69f3
 800408c:	40008000 	.word	0x40008000
 8004090:	40013800 	.word	0x40013800
 8004094:	40021000 	.word	0x40021000
 8004098:	40004400 	.word	0x40004400
 800409c:	40004800 	.word	0x40004800
 80040a0:	40004c00 	.word	0x40004c00
 80040a4:	40005000 	.word	0x40005000
 80040a8:	2310      	movs	r3, #16
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a9f      	ldr	r2, [pc, #636]	; (8004330 <UART_SetConfig+0x568>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d17a      	bne.n	80041ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d824      	bhi.n	800410a <UART_SetConfig+0x342>
 80040c0:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <UART_SetConfig+0x300>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	0800410b 	.word	0x0800410b
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	080040fb 	.word	0x080040fb
 80040dc:	0800410b 	.word	0x0800410b
 80040e0:	0800410b 	.word	0x0800410b
 80040e4:	0800410b 	.word	0x0800410b
 80040e8:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ec:	f7fe fb84 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 80040f0:	61f8      	str	r0, [r7, #28]
        break;
 80040f2:	e010      	b.n	8004116 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f4:	4b8f      	ldr	r3, [pc, #572]	; (8004334 <UART_SetConfig+0x56c>)
 80040f6:	61fb      	str	r3, [r7, #28]
        break;
 80040f8:	e00d      	b.n	8004116 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fa:	f7fe fae5 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 80040fe:	61f8      	str	r0, [r7, #28]
        break;
 8004100:	e009      	b.n	8004116 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	61fb      	str	r3, [r7, #28]
        break;
 8004108:	e005      	b.n	8004116 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004114:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80fb 	beq.w	8004314 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	429a      	cmp	r2, r3
 800412c:	d305      	bcc.n	800413a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	429a      	cmp	r2, r3
 8004138:	d903      	bls.n	8004142 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004140:	e0e8      	b.n	8004314 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2200      	movs	r2, #0
 8004146:	461c      	mov	r4, r3
 8004148:	4615      	mov	r5, r2
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	022b      	lsls	r3, r5, #8
 8004154:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004158:	0222      	lsls	r2, r4, #8
 800415a:	68f9      	ldr	r1, [r7, #12]
 800415c:	6849      	ldr	r1, [r1, #4]
 800415e:	0849      	lsrs	r1, r1, #1
 8004160:	2000      	movs	r0, #0
 8004162:	4688      	mov	r8, r1
 8004164:	4681      	mov	r9, r0
 8004166:	eb12 0a08 	adds.w	sl, r2, r8
 800416a:	eb43 0b09 	adc.w	fp, r3, r9
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800417c:	4650      	mov	r0, sl
 800417e:	4659      	mov	r1, fp
 8004180:	f7fc f876 	bl	8000270 <__aeabi_uldivmod>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4613      	mov	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004192:	d308      	bcc.n	80041a6 <UART_SetConfig+0x3de>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419a:	d204      	bcs.n	80041a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	60da      	str	r2, [r3, #12]
 80041a4:	e0b6      	b.n	8004314 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041ac:	e0b2      	b.n	8004314 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b6:	d15e      	bne.n	8004276 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d828      	bhi.n	8004212 <UART_SetConfig+0x44a>
 80041c0:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <UART_SetConfig+0x400>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	08004213 	.word	0x08004213
 80041d8:	08004203 	.word	0x08004203
 80041dc:	08004213 	.word	0x08004213
 80041e0:	08004213 	.word	0x08004213
 80041e4:	08004213 	.word	0x08004213
 80041e8:	0800420b 	.word	0x0800420b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe fb04 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 80041f0:	61f8      	str	r0, [r7, #28]
        break;
 80041f2:	e014      	b.n	800421e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f4:	f7fe fb16 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 80041f8:	61f8      	str	r0, [r7, #28]
        break;
 80041fa:	e010      	b.n	800421e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041fc:	4b4d      	ldr	r3, [pc, #308]	; (8004334 <UART_SetConfig+0x56c>)
 80041fe:	61fb      	str	r3, [r7, #28]
        break;
 8004200:	e00d      	b.n	800421e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004202:	f7fe fa61 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8004206:	61f8      	str	r0, [r7, #28]
        break;
 8004208:	e009      	b.n	800421e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420e:	61fb      	str	r3, [r7, #28]
        break;
 8004210:	e005      	b.n	800421e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800421c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d077      	beq.n	8004314 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005a      	lsls	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	441a      	add	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b0f      	cmp	r3, #15
 800423e:	d916      	bls.n	800426e <UART_SetConfig+0x4a6>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004246:	d212      	bcs.n	800426e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f023 030f 	bic.w	r3, r3, #15
 8004250:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	b29a      	uxth	r2, r3
 800425e:	8afb      	ldrh	r3, [r7, #22]
 8004260:	4313      	orrs	r3, r2
 8004262:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	8afa      	ldrh	r2, [r7, #22]
 800426a:	60da      	str	r2, [r3, #12]
 800426c:	e052      	b.n	8004314 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004274:	e04e      	b.n	8004314 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800427a:	2b08      	cmp	r3, #8
 800427c:	d827      	bhi.n	80042ce <UART_SetConfig+0x506>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0x4bc>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042b1 	.word	0x080042b1
 800428c:	080042b9 	.word	0x080042b9
 8004290:	080042cf 	.word	0x080042cf
 8004294:	080042bf 	.word	0x080042bf
 8004298:	080042cf 	.word	0x080042cf
 800429c:	080042cf 	.word	0x080042cf
 80042a0:	080042cf 	.word	0x080042cf
 80042a4:	080042c7 	.word	0x080042c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a8:	f7fe faa6 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 80042ac:	61f8      	str	r0, [r7, #28]
        break;
 80042ae:	e014      	b.n	80042da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b0:	f7fe fab8 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 80042b4:	61f8      	str	r0, [r7, #28]
        break;
 80042b6:	e010      	b.n	80042da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <UART_SetConfig+0x56c>)
 80042ba:	61fb      	str	r3, [r7, #28]
        break;
 80042bc:	e00d      	b.n	80042da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042be:	f7fe fa03 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 80042c2:	61f8      	str	r0, [r7, #28]
        break;
 80042c4:	e009      	b.n	80042da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ca:	61fb      	str	r3, [r7, #28]
        break;
 80042cc:	e005      	b.n	80042da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042d8:	bf00      	nop
    }

    if (pclk != 0U)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d019      	beq.n	8004314 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	085a      	lsrs	r2, r3, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	441a      	add	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	d909      	bls.n	800430e <UART_SetConfig+0x546>
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d205      	bcs.n	800430e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60da      	str	r2, [r3, #12]
 800430c:	e002      	b.n	8004314 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004320:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004324:	4618      	mov	r0, r3
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800432e:	bf00      	nop
 8004330:	40008000 	.word	0x40008000
 8004334:	00f42400 	.word	0x00f42400

08004338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01a      	beq.n	800444e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004436:	d10a      	bne.n	800444e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b098      	sub	sp, #96	; 0x60
 8004480:	af02      	add	r7, sp, #8
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800448c:	f7fd f914 	bl	80016b8 <HAL_GetTick>
 8004490:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d12e      	bne.n	80044fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a8:	2200      	movs	r2, #0
 80044aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f88c 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d021      	beq.n	80044fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ce:	653b      	str	r3, [r7, #80]	; 0x50
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d8:	647b      	str	r3, [r7, #68]	; 0x44
 80044da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e6      	bne.n	80044ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e062      	b.n	80045c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d149      	bne.n	80045a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800450c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004514:	2200      	movs	r2, #0
 8004516:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f856 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d03c      	beq.n	80045a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	623b      	str	r3, [r7, #32]
   return(result);
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004544:	633b      	str	r3, [r7, #48]	; 0x30
 8004546:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800454a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	60fb      	str	r3, [r7, #12]
   return(result);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004578:	61fa      	str	r2, [r7, #28]
 800457a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	617b      	str	r3, [r7, #20]
   return(result);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e011      	b.n	80045c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3758      	adds	r7, #88	; 0x58
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045dc:	e049      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e4:	d045      	beq.n	8004672 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fd f867 	bl	80016b8 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <UART_WaitOnFlagUntilTimeout+0x30>
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e048      	b.n	8004692 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d031      	beq.n	8004672 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b08      	cmp	r3, #8
 800461a:	d110      	bne.n	800463e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2208      	movs	r2, #8
 8004622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f838 	bl	800469a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2208      	movs	r2, #8
 800462e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e029      	b.n	8004692 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464c:	d111      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f81e 	bl	800469a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e00f      	b.n	8004692 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	429a      	cmp	r2, r3
 800468e:	d0a6      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800469a:	b480      	push	{r7}
 800469c:	b095      	sub	sp, #84	; 0x54
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c0:	643b      	str	r3, [r7, #64]	; 0x40
 80046c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e6      	bne.n	80046a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3308      	adds	r3, #8
 80046da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3308      	adds	r3, #8
 80046f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e5      	bne.n	80046d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470c:	2b01      	cmp	r3, #1
 800470e:	d118      	bne.n	8004742 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	60bb      	str	r3, [r7, #8]
   return(result);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f023 0310 	bic.w	r3, r3, #16
 8004724:	647b      	str	r3, [r7, #68]	; 0x44
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	613b      	str	r3, [r7, #16]
   return(result);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e6      	bne.n	8004710 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004756:	bf00      	nop
 8004758:	3754      	adds	r7, #84	; 0x54
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <__NVIC_SetPriority>:
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	6039      	str	r1, [r7, #0]
 800476e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004774:	2b00      	cmp	r3, #0
 8004776:	db0a      	blt.n	800478e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	490c      	ldr	r1, [pc, #48]	; (80047b0 <__NVIC_SetPriority+0x4c>)
 800477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004782:	0112      	lsls	r2, r2, #4
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	440b      	add	r3, r1
 8004788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800478c:	e00a      	b.n	80047a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	4908      	ldr	r1, [pc, #32]	; (80047b4 <__NVIC_SetPriority+0x50>)
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	3b04      	subs	r3, #4
 800479c:	0112      	lsls	r2, r2, #4
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	440b      	add	r3, r1
 80047a2:	761a      	strb	r2, [r3, #24]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	e000e100 	.word	0xe000e100
 80047b4:	e000ed00 	.word	0xe000ed00

080047b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <SysTick_Handler+0x1c>)
 80047be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80047c0:	f002 fb00 	bl	8006dc4 <xTaskGetSchedulerState>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d001      	beq.n	80047ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80047ca:	f003 f9e5 	bl	8007b98 <xPortSysTickHandler>
  }
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	e000e010 	.word	0xe000e010

080047d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80047dc:	2100      	movs	r1, #0
 80047de:	f06f 0004 	mvn.w	r0, #4
 80047e2:	f7ff ffbf 	bl	8004764 <__NVIC_SetPriority>
#endif
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f2:	f3ef 8305 	mrs	r3, IPSR
 80047f6:	603b      	str	r3, [r7, #0]
  return(result);
 80047f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80047fe:	f06f 0305 	mvn.w	r3, #5
 8004802:	607b      	str	r3, [r7, #4]
 8004804:	e00c      	b.n	8004820 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <osKernelInitialize+0x44>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d105      	bne.n	800481a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <osKernelInitialize+0x44>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004814:	2300      	movs	r3, #0
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	e002      	b.n	8004820 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800481e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004820:	687b      	ldr	r3, [r7, #4]
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	2000025c 	.word	0x2000025c

08004834 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800483a:	f3ef 8305 	mrs	r3, IPSR
 800483e:	603b      	str	r3, [r7, #0]
  return(result);
 8004840:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004846:	f06f 0305 	mvn.w	r3, #5
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	e010      	b.n	8004870 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <osKernelStart+0x48>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d109      	bne.n	800486a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004856:	f7ff ffbf 	bl	80047d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <osKernelStart+0x48>)
 800485c:	2202      	movs	r2, #2
 800485e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004860:	f001 fe42 	bl	80064e8 <vTaskStartScheduler>
      stat = osOK;
 8004864:	2300      	movs	r3, #0
 8004866:	607b      	str	r3, [r7, #4]
 8004868:	e002      	b.n	8004870 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800486a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800486e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004870:	687b      	ldr	r3, [r7, #4]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	2000025c 	.word	0x2000025c

08004880 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b08e      	sub	sp, #56	; 0x38
 8004884:	af04      	add	r7, sp, #16
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004890:	f3ef 8305 	mrs	r3, IPSR
 8004894:	617b      	str	r3, [r7, #20]
  return(result);
 8004896:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004898:	2b00      	cmp	r3, #0
 800489a:	d17e      	bne.n	800499a <osThreadNew+0x11a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d07b      	beq.n	800499a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80048a6:	2318      	movs	r3, #24
 80048a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d045      	beq.n	8004946 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <osThreadNew+0x48>
        name = attr->name;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <osThreadNew+0x6e>
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b38      	cmp	r3, #56	; 0x38
 80048e0:	d805      	bhi.n	80048ee <osThreadNew+0x6e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <osThreadNew+0x72>
        return (NULL);
 80048ee:	2300      	movs	r3, #0
 80048f0:	e054      	b.n	800499c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	089b      	lsrs	r3, r3, #2
 8004900:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00e      	beq.n	8004928 <osThreadNew+0xa8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2ba7      	cmp	r3, #167	; 0xa7
 8004910:	d90a      	bls.n	8004928 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <osThreadNew+0xa8>
        mem = 1;
 8004922:	2301      	movs	r3, #1
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e010      	b.n	800494a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10c      	bne.n	800494a <osThreadNew+0xca>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d108      	bne.n	800494a <osThreadNew+0xca>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d104      	bne.n	800494a <osThreadNew+0xca>
          mem = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	e001      	b.n	800494a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004946:	2300      	movs	r3, #0
 8004948:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d110      	bne.n	8004972 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004958:	9202      	str	r2, [sp, #8]
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f001 fb5c 	bl	8006024 <xTaskCreateStatic>
 800496c:	4603      	mov	r3, r0
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	e013      	b.n	800499a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d110      	bne.n	800499a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	b29a      	uxth	r2, r3
 800497c:	f107 0310 	add.w	r3, r7, #16
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f001 fba7 	bl	80060de <xTaskCreate>
 8004990:	4603      	mov	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d001      	beq.n	800499a <osThreadNew+0x11a>
            hTask = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800499a:	693b      	ldr	r3, [r7, #16]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3728      	adds	r7, #40	; 0x28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049b0:	f3ef 8305 	mrs	r3, IPSR
 80049b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049b6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80049bc:	f06f 0305 	mvn.w	r3, #5
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	e00b      	b.n	80049dc <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80049ca:	f06f 0303 	mvn.w	r3, #3
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	e004      	b.n	80049dc <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80049d6:	6938      	ldr	r0, [r7, #16]
 80049d8:	f001 fd10 	bl	80063fc <vTaskSuspend>
  }

  return (stat);
 80049dc:	697b      	ldr	r3, [r7, #20]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049ee:	f3ef 8305 	mrs	r3, IPSR
 80049f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80049f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <osDelay+0x1c>
    stat = osErrorISR;
 80049fa:	f06f 0305 	mvn.w	r3, #5
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e007      	b.n	8004a12 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f001 fcc1 	bl	8006394 <vTaskDelay>
    }
  }

  return (stat);
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a28:	f3ef 8305 	mrs	r3, IPSR
 8004a2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a2e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d174      	bne.n	8004b1e <osMutexNew+0x102>
    if (attr != NULL) {
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e001      	b.n	8004a46 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <osMutexNew+0x3a>
      rmtx = 1U;
 8004a50:	2301      	movs	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e001      	b.n	8004a5a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d15c      	bne.n	8004b1e <osMutexNew+0x102>
      mem = -1;
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a68:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d015      	beq.n	8004a9c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d006      	beq.n	8004a86 <osMutexNew+0x6a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b4f      	cmp	r3, #79	; 0x4f
 8004a7e:	d902      	bls.n	8004a86 <osMutexNew+0x6a>
          mem = 1;
 8004a80:	2301      	movs	r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	e00c      	b.n	8004aa0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <osMutexNew+0x84>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d104      	bne.n	8004aa0 <osMutexNew+0x84>
            mem = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
 8004a9a:	e001      	b.n	8004aa0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d112      	bne.n	8004acc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	2004      	movs	r0, #4
 8004ab4:	f000 fc69 	bl	800538a <xQueueCreateMutexStatic>
 8004ab8:	61f8      	str	r0, [r7, #28]
 8004aba:	e016      	b.n	8004aea <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	f000 fc61 	bl	800538a <xQueueCreateMutexStatic>
 8004ac8:	61f8      	str	r0, [r7, #28]
 8004aca:	e00e      	b.n	8004aea <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d004      	beq.n	8004ae2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004ad8:	2004      	movs	r0, #4
 8004ada:	f000 fc3e 	bl	800535a <xQueueCreateMutex>
 8004ade:	61f8      	str	r0, [r7, #28]
 8004ae0:	e003      	b.n	8004aea <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f000 fc39 	bl	800535a <xQueueCreateMutex>
 8004ae8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <osMutexNew+0xee>
        if (attr != NULL) {
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <osMutexNew+0xe2>
          name = attr->name;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e001      	b.n	8004b02 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	69f8      	ldr	r0, [r7, #28]
 8004b06:	f001 fa2f 	bl	8005f68 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <osMutexNew+0x102>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004b1e:	69fb      	ldr	r3, [r7, #28]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b46:	f3ef 8305 	mrs	r3, IPSR
 8004b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b4c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004b52:	f06f 0305 	mvn.w	r3, #5
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e02c      	b.n	8004bb4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004b60:	f06f 0303 	mvn.w	r3, #3
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	e025      	b.n	8004bb4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d011      	beq.n	8004b92 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004b6e:	6839      	ldr	r1, [r7, #0]
 8004b70:	6938      	ldr	r0, [r7, #16]
 8004b72:	f000 fc59 	bl	8005428 <xQueueTakeMutexRecursive>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d01b      	beq.n	8004bb4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004b82:	f06f 0301 	mvn.w	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	e014      	b.n	8004bb4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004b8a:	f06f 0302 	mvn.w	r3, #2
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e010      	b.n	8004bb4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	6938      	ldr	r0, [r7, #16]
 8004b96:	f000 fef7 	bl	8005988 <xQueueSemaphoreTake>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d009      	beq.n	8004bb4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004ba6:	f06f 0301 	mvn.w	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e002      	b.n	8004bb4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004bae:	f06f 0302 	mvn.w	r3, #2
 8004bb2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004bb4:	697b      	ldr	r3, [r7, #20]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bda:	f3ef 8305 	mrs	r3, IPSR
 8004bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <osMutexRelease+0x30>
    stat = osErrorISR;
 8004be6:	f06f 0305 	mvn.w	r3, #5
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e01f      	b.n	8004c2e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004bf4:	f06f 0303 	mvn.w	r3, #3
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	e018      	b.n	8004c2e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004c02:	6938      	ldr	r0, [r7, #16]
 8004c04:	f000 fbdc 	bl	80053c0 <xQueueGiveMutexRecursive>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d00f      	beq.n	8004c2e <osMutexRelease+0x70>
        stat = osErrorResource;
 8004c0e:	f06f 0302 	mvn.w	r3, #2
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e00b      	b.n	8004c2e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004c16:	2300      	movs	r3, #0
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	6938      	ldr	r0, [r7, #16]
 8004c1e:	f000 fc39 	bl	8005494 <xQueueGenericSend>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d002      	beq.n	8004c2e <osMutexRelease+0x70>
        stat = osErrorResource;
 8004c28:	f06f 0302 	mvn.w	r3, #2
 8004c2c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004c2e:	697b      	ldr	r3, [r7, #20]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c48:	f3ef 8305 	mrs	r3, IPSR
 8004c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8004c4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d15f      	bne.n	8004d14 <osMessageQueueNew+0xdc>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d05c      	beq.n	8004d14 <osMessageQueueNew+0xdc>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d059      	beq.n	8004d14 <osMessageQueueNew+0xdc>
    mem = -1;
 8004c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d029      	beq.n	8004cc0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d012      	beq.n	8004c9a <osMessageQueueNew+0x62>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	2b4f      	cmp	r3, #79	; 0x4f
 8004c7a:	d90e      	bls.n	8004c9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <osMessageQueueNew+0x62>
        mem = 1;
 8004c94:	2301      	movs	r3, #1
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	e014      	b.n	8004cc4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d110      	bne.n	8004cc4 <osMessageQueueNew+0x8c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10c      	bne.n	8004cc4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d108      	bne.n	8004cc4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d104      	bne.n	8004cc4 <osMessageQueueNew+0x8c>
          mem = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	e001      	b.n	8004cc4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d10b      	bne.n	8004ce2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	9100      	str	r1, [sp, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fa4f 	bl	800517c <xQueueGenericCreateStatic>
 8004cde:	61f8      	str	r0, [r7, #28]
 8004ce0:	e008      	b.n	8004cf4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d105      	bne.n	8004cf4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fabd 	bl	800526c <xQueueGenericCreate>
 8004cf2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	e001      	b.n	8004d0c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004d0c:	6979      	ldr	r1, [r7, #20]
 8004d0e:	69f8      	ldr	r0, [r7, #28]
 8004d10:	f001 f92a 	bl	8005f68 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004d14:	69fb      	ldr	r3, [r7, #28]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d38:	f3ef 8305 	mrs	r3, IPSR
 8004d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d3e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d028      	beq.n	8004d96 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <osMessageQueuePut+0x36>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <osMessageQueuePut+0x36>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004d56:	f06f 0303 	mvn.w	r3, #3
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	e038      	b.n	8004dd0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004d62:	f107 0210 	add.w	r2, r7, #16
 8004d66:	2300      	movs	r3, #0
 8004d68:	68b9      	ldr	r1, [r7, #8]
 8004d6a:	69b8      	ldr	r0, [r7, #24]
 8004d6c:	f000 fc90 	bl	8005690 <xQueueGenericSendFromISR>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d003      	beq.n	8004d7e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004d76:	f06f 0302 	mvn.w	r3, #2
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e028      	b.n	8004dd0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d025      	beq.n	8004dd0 <osMessageQueuePut+0xb0>
 8004d84:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <osMessageQueuePut+0xbc>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	e01c      	b.n	8004dd0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <osMessageQueuePut+0x82>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004da2:	f06f 0303 	mvn.w	r3, #3
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e012      	b.n	8004dd0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004daa:	2300      	movs	r3, #0
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	69b8      	ldr	r0, [r7, #24]
 8004db2:	f000 fb6f 	bl	8005494 <xQueueGenericSend>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d009      	beq.n	8004dd0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004dc2:	f06f 0301 	mvn.w	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	e002      	b.n	8004dd0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004dca:	f06f 0302 	mvn.w	r3, #2
 8004dce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004dd0:	69fb      	ldr	r3, [r7, #28]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df6:	f3ef 8305 	mrs	r3, IPSR
 8004dfa:	617b      	str	r3, [r7, #20]
  return(result);
 8004dfc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d028      	beq.n	8004e54 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <osMessageQueueGet+0x34>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <osMessageQueueGet+0x34>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004e14:	f06f 0303 	mvn.w	r3, #3
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	e037      	b.n	8004e8c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004e20:	f107 0310 	add.w	r3, r7, #16
 8004e24:	461a      	mov	r2, r3
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	69b8      	ldr	r0, [r7, #24]
 8004e2a:	f000 feb9 	bl	8005ba0 <xQueueReceiveFromISR>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d003      	beq.n	8004e3c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004e34:	f06f 0302 	mvn.w	r3, #2
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	e027      	b.n	8004e8c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d024      	beq.n	8004e8c <osMessageQueueGet+0xac>
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <osMessageQueueGet+0xb8>)
 8004e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	e01b      	b.n	8004e8c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <osMessageQueueGet+0x80>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004e60:	f06f 0303 	mvn.w	r3, #3
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	e011      	b.n	8004e8c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	69b8      	ldr	r0, [r7, #24]
 8004e6e:	f000 fcab 	bl	80057c8 <xQueueReceive>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d009      	beq.n	8004e8c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004e7e:	f06f 0301 	mvn.w	r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
 8004e84:	e002      	b.n	8004e8c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004e86:	f06f 0302 	mvn.w	r3, #2
 8004e8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004e8c:	69fb      	ldr	r3, [r7, #28]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	e000ed04 	.word	0xe000ed04

08004e9c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <osMessageQueueGetCount+0x18>
    count = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e00e      	b.n	8004ed2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb4:	f3ef 8305 	mrs	r3, IPSR
 8004eb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004ec0:	6938      	ldr	r0, [r7, #16]
 8004ec2:	f000 ff0b 	bl	8005cdc <uxQueueMessagesWaitingFromISR>
 8004ec6:	6178      	str	r0, [r7, #20]
 8004ec8:	e003      	b.n	8004ed2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004eca:	6938      	ldr	r0, [r7, #16]
 8004ecc:	f000 fee8 	bl	8005ca0 <uxQueueMessagesWaiting>
 8004ed0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8004ed2:	697b      	ldr	r3, [r7, #20]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a07      	ldr	r2, [pc, #28]	; (8004f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8004eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4a06      	ldr	r2, [pc, #24]	; (8004f0c <vApplicationGetIdleTaskMemory+0x30>)
 8004ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2280      	movs	r2, #128	; 0x80
 8004ef8:	601a      	str	r2, [r3, #0]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000260 	.word	0x20000260
 8004f0c:	20000308 	.word	0x20000308

08004f10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <vApplicationGetTimerTaskMemory+0x2c>)
 8004f20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4a06      	ldr	r2, [pc, #24]	; (8004f40 <vApplicationGetTimerTaskMemory+0x30>)
 8004f26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f2e:	601a      	str	r2, [r3, #0]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	20000508 	.word	0x20000508
 8004f40:	200005b0 	.word	0x200005b0

08004f44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f103 0208 	add.w	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f103 0208 	add.w	r2, r3, #8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f103 0208 	add.w	r2, r3, #8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffc:	d103      	bne.n	8005006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e00c      	b.n	8005020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3308      	adds	r3, #8
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e002      	b.n	8005014 <vListInsert+0x2e>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	429a      	cmp	r2, r3
 800501e:	d2f6      	bcs.n	800500e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	601a      	str	r2, [r3, #0]
}
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6892      	ldr	r2, [r2, #8]
 800506e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6852      	ldr	r2, [r2, #4]
 8005078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d103      	bne.n	800508c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	1e5a      	subs	r2, r3, #1
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050d6:	f002 fccd 	bl	8007a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	441a      	add	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	3b01      	subs	r3, #1
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	441a      	add	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	22ff      	movs	r2, #255	; 0xff
 800511a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	22ff      	movs	r2, #255	; 0xff
 8005122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d114      	bne.n	8005156 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01a      	beq.n	800516a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3310      	adds	r3, #16
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fc6f 	bl	8006a1c <xTaskRemoveFromEventList>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d012      	beq.n	800516a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <xQueueGenericReset+0xcc>)
 8005146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	e009      	b.n	800516a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3310      	adds	r3, #16
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fef2 	bl	8004f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3324      	adds	r3, #36	; 0x24
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff feed 	bl	8004f44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800516a:	f002 fcb3 	bl	8007ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800516e:	2301      	movs	r3, #1
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08e      	sub	sp, #56	; 0x38
 8005180:	af02      	add	r7, sp, #8
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10a      	bne.n	80051a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <xQueueGenericCreateStatic+0x52>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <xQueueGenericCreateStatic+0x56>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <xQueueGenericCreateStatic+0x58>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	623b      	str	r3, [r7, #32]
}
 80051ea:	bf00      	nop
 80051ec:	e7fe      	b.n	80051ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <xQueueGenericCreateStatic+0x7e>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <xQueueGenericCreateStatic+0x82>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <xQueueGenericCreateStatic+0x84>
 80051fe:	2300      	movs	r3, #0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	61fb      	str	r3, [r7, #28]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800521a:	2350      	movs	r3, #80	; 0x50
 800521c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b50      	cmp	r3, #80	; 0x50
 8005222:	d00a      	beq.n	800523a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	61bb      	str	r3, [r7, #24]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800523a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00d      	beq.n	8005262 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800524e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f83f 	bl	80052e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005264:	4618      	mov	r0, r3
 8005266:	3730      	adds	r7, #48	; 0x30
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	613b      	str	r3, [r7, #16]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	3350      	adds	r3, #80	; 0x50
 80052a4:	4618      	mov	r0, r3
 80052a6:	f002 fd07 	bl	8007cb8 <pvPortMalloc>
 80052aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d011      	beq.n	80052d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	3350      	adds	r3, #80	; 0x50
 80052ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052c4:	79fa      	ldrb	r2, [r7, #7]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	4613      	mov	r3, r2
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f805 	bl	80052e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052d6:	69bb      	ldr	r3, [r7, #24]
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e002      	b.n	8005302 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800530e:	2101      	movs	r1, #1
 8005310:	69b8      	ldr	r0, [r7, #24]
 8005312:	f7ff fecb 	bl	80050ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00e      	beq.n	8005352 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005346:	2300      	movs	r3, #0
 8005348:	2200      	movs	r2, #0
 800534a:	2100      	movs	r1, #0
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f8a1 	bl	8005494 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	4603      	mov	r3, r0
 8005362:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005364:	2301      	movs	r3, #1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	2300      	movs	r3, #0
 800536a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	461a      	mov	r2, r3
 8005370:	6939      	ldr	r1, [r7, #16]
 8005372:	6978      	ldr	r0, [r7, #20]
 8005374:	f7ff ff7a 	bl	800526c <xQueueGenericCreate>
 8005378:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff ffd3 	bl	8005326 <prvInitialiseMutex>

		return xNewQueue;
 8005380:	68fb      	ldr	r3, [r7, #12]
	}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800538a:	b580      	push	{r7, lr}
 800538c:	b088      	sub	sp, #32
 800538e:	af02      	add	r7, sp, #8
 8005390:	4603      	mov	r3, r0
 8005392:	6039      	str	r1, [r7, #0]
 8005394:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005396:	2301      	movs	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2200      	movs	r2, #0
 80053a6:	6939      	ldr	r1, [r7, #16]
 80053a8:	6978      	ldr	r0, [r7, #20]
 80053aa:	f7ff fee7 	bl	800517c <xQueueGenericCreateStatic>
 80053ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff ffb8 	bl	8005326 <prvInitialiseMutex>

		return xNewQueue;
 80053b6:	68fb      	ldr	r3, [r7, #12]
	}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60fb      	str	r3, [r7, #12]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	689c      	ldr	r4, [r3, #8]
 80053ec:	f001 fcda 	bl	8006da4 <xTaskGetCurrentTaskHandle>
 80053f0:	4603      	mov	r3, r0
 80053f2:	429c      	cmp	r4, r3
 80053f4:	d111      	bne.n	800541a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	1e5a      	subs	r2, r3, #1
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d105      	bne.n	8005414 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005408:	2300      	movs	r3, #0
 800540a:	2200      	movs	r2, #0
 800540c:	2100      	movs	r1, #0
 800540e:	6938      	ldr	r0, [r7, #16]
 8005410:	f000 f840 	bl	8005494 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005414:	2301      	movs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e001      	b.n	800541e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800541e:	697b      	ldr	r3, [r7, #20]
	}
 8005420:	4618      	mov	r0, r3
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	bd90      	pop	{r4, r7, pc}

08005428 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	60fb      	str	r3, [r7, #12]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	689c      	ldr	r4, [r3, #8]
 8005456:	f001 fca5 	bl	8006da4 <xTaskGetCurrentTaskHandle>
 800545a:	4603      	mov	r3, r0
 800545c:	429c      	cmp	r4, r3
 800545e:	d107      	bne.n	8005470 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800546a:	2301      	movs	r3, #1
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e00c      	b.n	800548a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6938      	ldr	r0, [r7, #16]
 8005474:	f000 fa88 	bl	8005988 <xQueueSemaphoreTake>
 8005478:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800548a:	697b      	ldr	r3, [r7, #20]
	}
 800548c:	4618      	mov	r0, r3
 800548e:	371c      	adds	r7, #28
 8005490:	46bd      	mov	sp, r7
 8005492:	bd90      	pop	{r4, r7, pc}

08005494 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08e      	sub	sp, #56	; 0x38
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054a2:	2300      	movs	r3, #0
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xQueueGenericSend+0x32>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d103      	bne.n	80054d4 <xQueueGenericSend+0x40>
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <xQueueGenericSend+0x44>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <xQueueGenericSend+0x46>
 80054d8:	2300      	movs	r3, #0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <xQueueGenericSend+0x60>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d103      	bne.n	8005502 <xQueueGenericSend+0x6e>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <xQueueGenericSend+0x72>
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <xQueueGenericSend+0x74>
 8005506:	2300      	movs	r3, #0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <xQueueGenericSend+0x8e>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	623b      	str	r3, [r7, #32]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005522:	f001 fc4f 	bl	8006dc4 <xTaskGetSchedulerState>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <xQueueGenericSend+0x9e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <xQueueGenericSend+0xa2>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <xQueueGenericSend+0xa4>
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xQueueGenericSend+0xbe>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	61fb      	str	r3, [r7, #28]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005552:	f002 fa8f 	bl	8007a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <xQueueGenericSend+0xd4>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d129      	bne.n	80055bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	68b9      	ldr	r1, [r7, #8]
 800556c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800556e:	f000 fbeb 	bl	8005d48 <prvCopyDataToQueue>
 8005572:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d010      	beq.n	800559e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	3324      	adds	r3, #36	; 0x24
 8005580:	4618      	mov	r0, r3
 8005582:	f001 fa4b 	bl	8006a1c <xTaskRemoveFromEventList>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d013      	beq.n	80055b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800558c:	4b3f      	ldr	r3, [pc, #252]	; (800568c <xQueueGenericSend+0x1f8>)
 800558e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	e00a      	b.n	80055b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055a4:	4b39      	ldr	r3, [pc, #228]	; (800568c <xQueueGenericSend+0x1f8>)
 80055a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055b4:	f002 fa8e 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e063      	b.n	8005684 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055c2:	f002 fa87 	bl	8007ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e05c      	b.n	8005684 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fa85 	bl	8006ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055de:	f002 fa79 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055e2:	f000 fff1 	bl	80065c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055e6:	f002 fa45 	bl	8007a74 <vPortEnterCritical>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055f0:	b25b      	sxtb	r3, r3
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f6:	d103      	bne.n	8005600 <xQueueGenericSend+0x16c>
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005606:	b25b      	sxtb	r3, r3
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800560c:	d103      	bne.n	8005616 <xQueueGenericSend+0x182>
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005616:	f002 fa5d 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800561a:	1d3a      	adds	r2, r7, #4
 800561c:	f107 0314 	add.w	r3, r7, #20
 8005620:	4611      	mov	r1, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fa74 	bl	8006b10 <xTaskCheckForTimeOut>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d124      	bne.n	8005678 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800562e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005630:	f000 fc82 	bl	8005f38 <prvIsQueueFull>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d018      	beq.n	800566c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	3310      	adds	r3, #16
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4611      	mov	r1, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f001 f99a 	bl	800697c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800564a:	f000 fc0d 	bl	8005e68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800564e:	f000 ffc9 	bl	80065e4 <xTaskResumeAll>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	f47f af7c 	bne.w	8005552 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <xQueueGenericSend+0x1f8>)
 800565c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	e772      	b.n	8005552 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800566c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800566e:	f000 fbfb 	bl	8005e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005672:	f000 ffb7 	bl	80065e4 <xTaskResumeAll>
 8005676:	e76c      	b.n	8005552 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800567a:	f000 fbf5 	bl	8005e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800567e:	f000 ffb1 	bl	80065e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005682:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005684:	4618      	mov	r0, r3
 8005686:	3738      	adds	r7, #56	; 0x38
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	e000ed04 	.word	0xe000ed04

08005690 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b090      	sub	sp, #64	; 0x40
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d103      	bne.n	80056cc <xQueueGenericSendFromISR+0x3c>
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <xQueueGenericSendFromISR+0x40>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <xQueueGenericSendFromISR+0x42>
 80056d0:	2300      	movs	r3, #0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056e8:	bf00      	nop
 80056ea:	e7fe      	b.n	80056ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d103      	bne.n	80056fa <xQueueGenericSendFromISR+0x6a>
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <xQueueGenericSendFromISR+0x6e>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <xQueueGenericSendFromISR+0x70>
 80056fe:	2300      	movs	r3, #0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	623b      	str	r3, [r7, #32]
}
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800571a:	f002 fa8d 	bl	8007c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800571e:	f3ef 8211 	mrs	r2, BASEPRI
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	61fa      	str	r2, [r7, #28]
 8005734:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005736:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005738:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <xQueueGenericSendFromISR+0xbc>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d12f      	bne.n	80057ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005762:	f000 faf1 	bl	8005d48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005766:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576e:	d112      	bne.n	8005796 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d016      	beq.n	80057a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	3324      	adds	r3, #36	; 0x24
 800577c:	4618      	mov	r0, r3
 800577e:	f001 f94d 	bl	8006a1c <xTaskRemoveFromEventList>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e007      	b.n	80057a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800579a:	3301      	adds	r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	b25a      	sxtb	r2, r3
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057a6:	2301      	movs	r3, #1
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80057aa:	e001      	b.n	80057b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3740      	adds	r7, #64	; 0x40
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	; 0x30
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057d4:	2300      	movs	r3, #0
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <xQueueReceive+0x30>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	623b      	str	r3, [r7, #32]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <xQueueReceive+0x3e>
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <xQueueReceive+0x42>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <xQueueReceive+0x44>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <xQueueReceive+0x5e>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	61fb      	str	r3, [r7, #28]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005826:	f001 facd 	bl	8006dc4 <xTaskGetSchedulerState>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <xQueueReceive+0x6e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <xQueueReceive+0x72>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <xQueueReceive+0x74>
 800583a:	2300      	movs	r3, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <xQueueReceive+0x8e>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	61bb      	str	r3, [r7, #24]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005856:	f002 f90d 	bl	8007a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01f      	beq.n	80058a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800586a:	f000 fad7 	bl	8005e1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	1e5a      	subs	r2, r3, #1
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00f      	beq.n	800589e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	3310      	adds	r3, #16
 8005882:	4618      	mov	r0, r3
 8005884:	f001 f8ca 	bl	8006a1c <xTaskRemoveFromEventList>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800588e:	4b3d      	ldr	r3, [pc, #244]	; (8005984 <xQueueReceive+0x1bc>)
 8005890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800589e:	f002 f919 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e069      	b.n	800597a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d103      	bne.n	80058b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058ac:	f002 f912 	bl	8007ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058b0:	2300      	movs	r3, #0
 80058b2:	e062      	b.n	800597a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058ba:	f107 0310 	add.w	r3, r7, #16
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 f910 	bl	8006ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058c4:	2301      	movs	r3, #1
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058c8:	f002 f904 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058cc:	f000 fe7c 	bl	80065c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058d0:	f002 f8d0 	bl	8007a74 <vPortEnterCritical>
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058da:	b25b      	sxtb	r3, r3
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e0:	d103      	bne.n	80058ea <xQueueReceive+0x122>
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f0:	b25b      	sxtb	r3, r3
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f6:	d103      	bne.n	8005900 <xQueueReceive+0x138>
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005900:	f002 f8e8 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005904:	1d3a      	adds	r2, r7, #4
 8005906:	f107 0310 	add.w	r3, r7, #16
 800590a:	4611      	mov	r1, r2
 800590c:	4618      	mov	r0, r3
 800590e:	f001 f8ff 	bl	8006b10 <xTaskCheckForTimeOut>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d123      	bne.n	8005960 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800591a:	f000 faf7 	bl	8005f0c <prvIsQueueEmpty>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d017      	beq.n	8005954 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f001 f825 	bl	800697c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005934:	f000 fa98 	bl	8005e68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005938:	f000 fe54 	bl	80065e4 <xTaskResumeAll>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d189      	bne.n	8005856 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005942:	4b10      	ldr	r3, [pc, #64]	; (8005984 <xQueueReceive+0x1bc>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	e780      	b.n	8005856 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005956:	f000 fa87 	bl	8005e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800595a:	f000 fe43 	bl	80065e4 <xTaskResumeAll>
 800595e:	e77a      	b.n	8005856 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005962:	f000 fa81 	bl	8005e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005966:	f000 fe3d 	bl	80065e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800596a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596c:	f000 face 	bl	8005f0c <prvIsQueueEmpty>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	f43f af6f 	beq.w	8005856 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005978:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800597a:	4618      	mov	r0, r3
 800597c:	3730      	adds	r7, #48	; 0x30
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	e000ed04 	.word	0xe000ed04

08005988 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08e      	sub	sp, #56	; 0x38
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005992:	2300      	movs	r3, #0
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800599a:	2300      	movs	r3, #0
 800599c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	623b      	str	r3, [r7, #32]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	61fb      	str	r3, [r7, #28]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d8:	f001 f9f4 	bl	8006dc4 <xTaskGetSchedulerState>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <xQueueSemaphoreTake+0x60>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <xQueueSemaphoreTake+0x64>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <xQueueSemaphoreTake+0x66>
 80059ec:	2300      	movs	r3, #0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	61bb      	str	r3, [r7, #24]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a08:	f002 f834 	bl	8007a74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d024      	beq.n	8005a62 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	1e5a      	subs	r2, r3, #1
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a28:	f001 fb42 	bl	80070b0 <pvTaskIncrementMutexHeldCount>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00f      	beq.n	8005a5a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	3310      	adds	r3, #16
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 ffec 	bl	8006a1c <xTaskRemoveFromEventList>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a4a:	4b54      	ldr	r3, [pc, #336]	; (8005b9c <xQueueSemaphoreTake+0x214>)
 8005a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a5a:	f002 f83b 	bl	8007ad4 <vPortExitCritical>
				return pdPASS;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e097      	b.n	8005b92 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d111      	bne.n	8005a8c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	617b      	str	r3, [r7, #20]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a84:	f002 f826 	bl	8007ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e082      	b.n	8005b92 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f824 	bl	8006ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa0:	f002 f818 	bl	8007ad4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa4:	f000 fd90 	bl	80065c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa8:	f001 ffe4 	bl	8007a74 <vPortEnterCritical>
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab8:	d103      	bne.n	8005ac2 <xQueueSemaphoreTake+0x13a>
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ace:	d103      	bne.n	8005ad8 <xQueueSemaphoreTake+0x150>
 8005ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad8:	f001 fffc 	bl	8007ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005adc:	463a      	mov	r2, r7
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 f813 	bl	8006b10 <xTaskCheckForTimeOut>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d132      	bne.n	8005b56 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005af2:	f000 fa0b 	bl	8005f0c <prvIsQueueEmpty>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d026      	beq.n	8005b4a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005b04:	f001 ffb6 	bl	8007a74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 f977 	bl	8006e00 <xTaskPriorityInherit>
 8005b12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b14:	f001 ffde 	bl	8007ad4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	3324      	adds	r3, #36	; 0x24
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 ff2b 	bl	800697c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b28:	f000 f99e 	bl	8005e68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b2c:	f000 fd5a 	bl	80065e4 <xTaskResumeAll>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f47f af68 	bne.w	8005a08 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005b38:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <xQueueSemaphoreTake+0x214>)
 8005b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	e75e      	b.n	8005a08 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b4c:	f000 f98c 	bl	8005e68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b50:	f000 fd48 	bl	80065e4 <xTaskResumeAll>
 8005b54:	e758      	b.n	8005a08 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b58:	f000 f986 	bl	8005e68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b5c:	f000 fd42 	bl	80065e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b62:	f000 f9d3 	bl	8005f0c <prvIsQueueEmpty>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f43f af4d 	beq.w	8005a08 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00d      	beq.n	8005b90 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005b74:	f001 ff7e 	bl	8007a74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b7a:	f000 f8cd 	bl	8005d18 <prvGetDisinheritPriorityAfterTimeout>
 8005b7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fa10 	bl	8006fac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b8c:	f001 ffa2 	bl	8007ad4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3738      	adds	r7, #56	; 0x38
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	e000ed04 	.word	0xe000ed04

08005ba0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08e      	sub	sp, #56	; 0x38
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	623b      	str	r3, [r7, #32]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d103      	bne.n	8005bda <xQueueReceiveFromISR+0x3a>
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <xQueueReceiveFromISR+0x3e>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <xQueueReceiveFromISR+0x40>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	61fb      	str	r3, [r7, #28]
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bfa:	f002 f81d 	bl	8007c38 <vPortValidateInterruptPriority>
	__asm volatile
 8005bfe:	f3ef 8211 	mrs	r2, BASEPRI
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	61ba      	str	r2, [r7, #24]
 8005c14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d02f      	beq.n	8005c86 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c34:	f000 f8f2 	bl	8005e1c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005c40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c48:	d112      	bne.n	8005c70 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d016      	beq.n	8005c80 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	3310      	adds	r3, #16
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fee0 	bl	8006a1c <xTaskRemoveFromEventList>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00e      	beq.n	8005c80 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e007      	b.n	8005c80 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c74:	3301      	adds	r3, #1
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	b25a      	sxtb	r2, r3
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005c80:	2301      	movs	r3, #1
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
 8005c84:	e001      	b.n	8005c8a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f383 8811 	msr	BASEPRI, r3
}
 8005c94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3738      	adds	r7, #56	; 0x38
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60bb      	str	r3, [r7, #8]
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005cc4:	f001 fed6 	bl	8007a74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005cce:	f001 ff01 	bl	8007ad4 <vPortExitCritical>

	return uxReturn;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60fb      	str	r3, [r7, #12]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005d0a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d006      	beq.n	8005d36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e001      	b.n	8005d3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
	}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10d      	bne.n	8005d82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d14d      	bne.n	8005e0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f8ac 	bl	8006ed0 <xTaskPriorityDisinherit>
 8005d78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	609a      	str	r2, [r3, #8]
 8005d80:	e043      	b.n	8005e0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d119      	bne.n	8005dbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6858      	ldr	r0, [r3, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	461a      	mov	r2, r3
 8005d92:	68b9      	ldr	r1, [r7, #8]
 8005d94:	f002 fa24 	bl	80081e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	441a      	add	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d32b      	bcc.n	8005e0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	e026      	b.n	8005e0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68d8      	ldr	r0, [r3, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	f002 fa0a 	bl	80081e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	425b      	negs	r3, r3
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d207      	bcs.n	8005df8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	425b      	negs	r3, r3
 8005df2:	441a      	add	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d105      	bne.n	8005e0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e12:	697b      	ldr	r3, [r7, #20]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	441a      	add	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d303      	bcc.n	8005e50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68d9      	ldr	r1, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6838      	ldr	r0, [r7, #0]
 8005e5c:	f002 f9c0 	bl	80081e0 <memcpy>
	}
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e70:	f001 fe00 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e7c:	e011      	b.n	8005ea2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d012      	beq.n	8005eac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3324      	adds	r3, #36	; 0x24
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fdc6 	bl	8006a1c <xTaskRemoveFromEventList>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e96:	f000 fe9d 	bl	8006bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	dce9      	bgt.n	8005e7e <prvUnlockQueue+0x16>
 8005eaa:	e000      	b.n	8005eae <prvUnlockQueue+0x46>
					break;
 8005eac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	22ff      	movs	r2, #255	; 0xff
 8005eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005eb6:	f001 fe0d 	bl	8007ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005eba:	f001 fddb 	bl	8007a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ec4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ec6:	e011      	b.n	8005eec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d012      	beq.n	8005ef6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3310      	adds	r3, #16
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fda1 	bl	8006a1c <xTaskRemoveFromEventList>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ee0:	f000 fe78 	bl	8006bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	dce9      	bgt.n	8005ec8 <prvUnlockQueue+0x60>
 8005ef4:	e000      	b.n	8005ef8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ef6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	22ff      	movs	r2, #255	; 0xff
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f00:	f001 fde8 	bl	8007ad4 <vPortExitCritical>
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f14:	f001 fdae 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d102      	bne.n	8005f26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f20:	2301      	movs	r3, #1
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	e001      	b.n	8005f2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f2a:	f001 fdd3 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f40:	f001 fd98 	bl	8007a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d102      	bne.n	8005f56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e001      	b.n	8005f5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f5a:	f001 fdbb 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e014      	b.n	8005fa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f78:	4a0f      	ldr	r2, [pc, #60]	; (8005fb8 <vQueueAddToRegistry+0x50>)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f84:	490c      	ldr	r1, [pc, #48]	; (8005fb8 <vQueueAddToRegistry+0x50>)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f8e:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <vQueueAddToRegistry+0x50>)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f9a:	e006      	b.n	8005faa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b07      	cmp	r3, #7
 8005fa6:	d9e7      	bls.n	8005f78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	200009b0 	.word	0x200009b0

08005fbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005fcc:	f001 fd52 	bl	8007a74 <vPortEnterCritical>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fd6:	b25b      	sxtb	r3, r3
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fdc:	d103      	bne.n	8005fe6 <vQueueWaitForMessageRestricted+0x2a>
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fec:	b25b      	sxtb	r3, r3
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff2:	d103      	bne.n	8005ffc <vQueueWaitForMessageRestricted+0x40>
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ffc:	f001 fd6a 	bl	8007ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	3324      	adds	r3, #36	; 0x24
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fcd7 	bl	80069c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006016:	6978      	ldr	r0, [r7, #20]
 8006018:	f7ff ff26 	bl	8005e68 <prvUnlockQueue>
	}
 800601c:	bf00      	nop
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08e      	sub	sp, #56	; 0x38
 8006028:	af04      	add	r7, sp, #16
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	623b      	str	r3, [r7, #32]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xTaskCreateStatic+0x46>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	61fb      	str	r3, [r7, #28]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800606a:	23a8      	movs	r3, #168	; 0xa8
 800606c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2ba8      	cmp	r3, #168	; 0xa8
 8006072:	d00a      	beq.n	800608a <xTaskCreateStatic+0x66>
	__asm volatile
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	61bb      	str	r3, [r7, #24]
}
 8006086:	bf00      	nop
 8006088:	e7fe      	b.n	8006088 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800608a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01e      	beq.n	80060d0 <xTaskCreateStatic+0xac>
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01b      	beq.n	80060d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060aa:	2300      	movs	r3, #0
 80060ac:	9303      	str	r3, [sp, #12]
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	9302      	str	r3, [sp, #8]
 80060b2:	f107 0314 	add.w	r3, r7, #20
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f850 	bl	8006168 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060ca:	f000 f8f3 	bl	80062b4 <prvAddNewTaskToReadyList>
 80060ce:	e001      	b.n	80060d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060d4:	697b      	ldr	r3, [r7, #20]
	}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3728      	adds	r7, #40	; 0x28
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b08c      	sub	sp, #48	; 0x30
 80060e2:	af04      	add	r7, sp, #16
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fde0 	bl	8007cb8 <pvPortMalloc>
 80060f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00e      	beq.n	800611e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006100:	20a8      	movs	r0, #168	; 0xa8
 8006102:	f001 fdd9 	bl	8007cb8 <pvPortMalloc>
 8006106:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
 8006114:	e005      	b.n	8006122 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006116:	6978      	ldr	r0, [r7, #20]
 8006118:	f001 fe9a 	bl	8007e50 <vPortFree>
 800611c:	e001      	b.n	8006122 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d017      	beq.n	8006158 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006130:	88fa      	ldrh	r2, [r7, #6]
 8006132:	2300      	movs	r3, #0
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	9302      	str	r3, [sp, #8]
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f80e 	bl	8006168 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800614c:	69f8      	ldr	r0, [r7, #28]
 800614e:	f000 f8b1 	bl	80062b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006152:	2301      	movs	r3, #1
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	e002      	b.n	800615e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800615c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800615e:	69bb      	ldr	r3, [r7, #24]
	}
 8006160:	4618      	mov	r0, r3
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	461a      	mov	r2, r3
 8006180:	21a5      	movs	r1, #165	; 0xa5
 8006182:	f001 ffa3 	bl	80080cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006190:	3b01      	subs	r3, #1
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	f023 0307 	bic.w	r3, r3, #7
 800619e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	617b      	str	r3, [r7, #20]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01f      	beq.n	8006206 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	e012      	b.n	80061f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	7819      	ldrb	r1, [r3, #0]
 80061d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	3334      	adds	r3, #52	; 0x34
 80061dc:	460a      	mov	r2, r1
 80061de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d006      	beq.n	80061fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	3301      	adds	r3, #1
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	2b0f      	cmp	r3, #15
 80061f6:	d9e9      	bls.n	80061cc <prvInitialiseNewTask+0x64>
 80061f8:	e000      	b.n	80061fc <prvInitialiseNewTask+0x94>
			{
				break;
 80061fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006204:	e003      	b.n	800620e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	2b37      	cmp	r3, #55	; 0x37
 8006212:	d901      	bls.n	8006218 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006214:	2337      	movs	r3, #55	; 0x37
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800621c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006222:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	2200      	movs	r2, #0
 8006228:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	3304      	adds	r3, #4
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe fea8 	bl	8004f84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	3318      	adds	r3, #24
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fea3 	bl	8004f84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006242:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006252:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2200      	movs	r2, #0
 8006260:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	3354      	adds	r3, #84	; 0x54
 8006268:	224c      	movs	r2, #76	; 0x4c
 800626a:	2100      	movs	r1, #0
 800626c:	4618      	mov	r0, r3
 800626e:	f001 ff2d 	bl	80080cc <memset>
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	4a0c      	ldr	r2, [pc, #48]	; (80062a8 <prvInitialiseNewTask+0x140>)
 8006276:	659a      	str	r2, [r3, #88]	; 0x58
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	4a0c      	ldr	r2, [pc, #48]	; (80062ac <prvInitialiseNewTask+0x144>)
 800627c:	65da      	str	r2, [r3, #92]	; 0x5c
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	4a0b      	ldr	r2, [pc, #44]	; (80062b0 <prvInitialiseNewTask+0x148>)
 8006282:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	69b8      	ldr	r0, [r7, #24]
 800628a:	f001 fac7 	bl	800781c <pxPortInitialiseStack>
 800628e:	4602      	mov	r2, r0
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062a0:	bf00      	nop
 80062a2:	3720      	adds	r7, #32
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20003754 	.word	0x20003754
 80062ac:	200037bc 	.word	0x200037bc
 80062b0:	20003824 	.word	0x20003824

080062b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062bc:	f001 fbda 	bl	8007a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062c0:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <prvAddNewTaskToReadyList+0xc4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3301      	adds	r3, #1
 80062c6:	4a2c      	ldr	r2, [pc, #176]	; (8006378 <prvAddNewTaskToReadyList+0xc4>)
 80062c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062ca:	4b2c      	ldr	r3, [pc, #176]	; (800637c <prvAddNewTaskToReadyList+0xc8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062d2:	4a2a      	ldr	r2, [pc, #168]	; (800637c <prvAddNewTaskToReadyList+0xc8>)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062d8:	4b27      	ldr	r3, [pc, #156]	; (8006378 <prvAddNewTaskToReadyList+0xc4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d110      	bne.n	8006302 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062e0:	f000 fc9e 	bl	8006c20 <prvInitialiseTaskLists>
 80062e4:	e00d      	b.n	8006302 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062e6:	4b26      	ldr	r3, [pc, #152]	; (8006380 <prvAddNewTaskToReadyList+0xcc>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062ee:	4b23      	ldr	r3, [pc, #140]	; (800637c <prvAddNewTaskToReadyList+0xc8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d802      	bhi.n	8006302 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062fc:	4a1f      	ldr	r2, [pc, #124]	; (800637c <prvAddNewTaskToReadyList+0xc8>)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006302:	4b20      	ldr	r3, [pc, #128]	; (8006384 <prvAddNewTaskToReadyList+0xd0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3301      	adds	r3, #1
 8006308:	4a1e      	ldr	r2, [pc, #120]	; (8006384 <prvAddNewTaskToReadyList+0xd0>)
 800630a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800630c:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <prvAddNewTaskToReadyList+0xd0>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006318:	4b1b      	ldr	r3, [pc, #108]	; (8006388 <prvAddNewTaskToReadyList+0xd4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d903      	bls.n	8006328 <prvAddNewTaskToReadyList+0x74>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	4a18      	ldr	r2, [pc, #96]	; (8006388 <prvAddNewTaskToReadyList+0xd4>)
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4a15      	ldr	r2, [pc, #84]	; (800638c <prvAddNewTaskToReadyList+0xd8>)
 8006336:	441a      	add	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	4619      	mov	r1, r3
 800633e:	4610      	mov	r0, r2
 8006340:	f7fe fe2d 	bl	8004f9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006344:	f001 fbc6 	bl	8007ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <prvAddNewTaskToReadyList+0xcc>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00e      	beq.n	800636e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <prvAddNewTaskToReadyList+0xc8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635a:	429a      	cmp	r2, r3
 800635c:	d207      	bcs.n	800636e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800635e:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <prvAddNewTaskToReadyList+0xdc>)
 8006360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	20000ec4 	.word	0x20000ec4
 800637c:	200009f0 	.word	0x200009f0
 8006380:	20000ed0 	.word	0x20000ed0
 8006384:	20000ee0 	.word	0x20000ee0
 8006388:	20000ecc 	.word	0x20000ecc
 800638c:	200009f4 	.word	0x200009f4
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d017      	beq.n	80063d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063a6:	4b13      	ldr	r3, [pc, #76]	; (80063f4 <vTaskDelay+0x60>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <vTaskDelay+0x30>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60bb      	str	r3, [r7, #8]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063c4:	f000 f900 	bl	80065c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063c8:	2100      	movs	r1, #0
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fe84 	bl	80070d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063d0:	f000 f908 	bl	80065e4 <xTaskResumeAll>
 80063d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d107      	bne.n	80063ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80063dc:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <vTaskDelay+0x64>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20000eec 	.word	0x20000eec
 80063f8:	e000ed04 	.word	0xe000ed04

080063fc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006404:	f001 fb36 	bl	8007a74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d102      	bne.n	8006414 <vTaskSuspend+0x18>
 800640e:	4b30      	ldr	r3, [pc, #192]	; (80064d0 <vTaskSuspend+0xd4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	e000      	b.n	8006416 <vTaskSuspend+0x1a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3304      	adds	r3, #4
 800641c:	4618      	mov	r0, r3
 800641e:	f7fe fe1b 	bl	8005058 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d004      	beq.n	8006434 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3318      	adds	r3, #24
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fe12 	bl	8005058 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4826      	ldr	r0, [pc, #152]	; (80064d4 <vTaskSuspend+0xd8>)
 800643c:	f7fe fdaf 	bl	8004f9e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	d103      	bne.n	8006454 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006454:	f001 fb3e 	bl	8007ad4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006458:	4b1f      	ldr	r3, [pc, #124]	; (80064d8 <vTaskSuspend+0xdc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006460:	f001 fb08 	bl	8007a74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006464:	f000 fc7e 	bl	8006d64 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006468:	f001 fb34 	bl	8007ad4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800646c:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <vTaskSuspend+0xd4>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	429a      	cmp	r2, r3
 8006474:	d127      	bne.n	80064c6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8006476:	4b18      	ldr	r3, [pc, #96]	; (80064d8 <vTaskSuspend+0xdc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d017      	beq.n	80064ae <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800647e:	4b17      	ldr	r3, [pc, #92]	; (80064dc <vTaskSuspend+0xe0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <vTaskSuspend+0xa0>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	60bb      	str	r3, [r7, #8]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <vTaskSuspend+0xe4>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064ac:	e00b      	b.n	80064c6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80064ae:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <vTaskSuspend+0xd8>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <vTaskSuspend+0xe8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d103      	bne.n	80064c2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <vTaskSuspend+0xd4>)
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
	}
 80064c0:	e001      	b.n	80064c6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80064c2:	f000 f9f7 	bl	80068b4 <vTaskSwitchContext>
	}
 80064c6:	bf00      	nop
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	200009f0 	.word	0x200009f0
 80064d4:	20000eb0 	.word	0x20000eb0
 80064d8:	20000ed0 	.word	0x20000ed0
 80064dc:	20000eec 	.word	0x20000eec
 80064e0:	e000ed04 	.word	0xe000ed04
 80064e4:	20000ec4 	.word	0x20000ec4

080064e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064f6:	463a      	mov	r2, r7
 80064f8:	1d39      	adds	r1, r7, #4
 80064fa:	f107 0308 	add.w	r3, r7, #8
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fcec 	bl	8004edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	9202      	str	r2, [sp, #8]
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	2300      	movs	r3, #0
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	460a      	mov	r2, r1
 8006516:	4924      	ldr	r1, [pc, #144]	; (80065a8 <vTaskStartScheduler+0xc0>)
 8006518:	4824      	ldr	r0, [pc, #144]	; (80065ac <vTaskStartScheduler+0xc4>)
 800651a:	f7ff fd83 	bl	8006024 <xTaskCreateStatic>
 800651e:	4603      	mov	r3, r0
 8006520:	4a23      	ldr	r2, [pc, #140]	; (80065b0 <vTaskStartScheduler+0xc8>)
 8006522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006524:	4b22      	ldr	r3, [pc, #136]	; (80065b0 <vTaskStartScheduler+0xc8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800652c:	2301      	movs	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e001      	b.n	8006536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d102      	bne.n	8006542 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800653c:	f000 fe20 	bl	8007180 <xTimerCreateTimerTask>
 8006540:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d11b      	bne.n	8006580 <vTaskStartScheduler+0x98>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	613b      	str	r3, [r7, #16]
}
 800655a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800655c:	4b15      	ldr	r3, [pc, #84]	; (80065b4 <vTaskStartScheduler+0xcc>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3354      	adds	r3, #84	; 0x54
 8006562:	4a15      	ldr	r2, [pc, #84]	; (80065b8 <vTaskStartScheduler+0xd0>)
 8006564:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006566:	4b15      	ldr	r3, [pc, #84]	; (80065bc <vTaskStartScheduler+0xd4>)
 8006568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800656c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <vTaskStartScheduler+0xd8>)
 8006570:	2201      	movs	r2, #1
 8006572:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006574:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <vTaskStartScheduler+0xdc>)
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800657a:	f001 f9d9 	bl	8007930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800657e:	e00e      	b.n	800659e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006586:	d10a      	bne.n	800659e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	60fb      	str	r3, [r7, #12]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <vTaskStartScheduler+0xb4>
}
 800659e:	bf00      	nop
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	08008b84 	.word	0x08008b84
 80065ac:	08006bed 	.word	0x08006bed
 80065b0:	20000ee8 	.word	0x20000ee8
 80065b4:	200009f0 	.word	0x200009f0
 80065b8:	2000007c 	.word	0x2000007c
 80065bc:	20000ee4 	.word	0x20000ee4
 80065c0:	20000ed0 	.word	0x20000ed0
 80065c4:	20000ec8 	.word	0x20000ec8

080065c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065cc:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <vTaskSuspendAll+0x18>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	4a03      	ldr	r2, [pc, #12]	; (80065e0 <vTaskSuspendAll+0x18>)
 80065d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065d6:	bf00      	nop
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	20000eec 	.word	0x20000eec

080065e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065f2:	4b42      	ldr	r3, [pc, #264]	; (80066fc <xTaskResumeAll+0x118>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <xTaskResumeAll+0x2c>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	603b      	str	r3, [r7, #0]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006610:	f001 fa30 	bl	8007a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006614:	4b39      	ldr	r3, [pc, #228]	; (80066fc <xTaskResumeAll+0x118>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3b01      	subs	r3, #1
 800661a:	4a38      	ldr	r2, [pc, #224]	; (80066fc <xTaskResumeAll+0x118>)
 800661c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661e:	4b37      	ldr	r3, [pc, #220]	; (80066fc <xTaskResumeAll+0x118>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d162      	bne.n	80066ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006626:	4b36      	ldr	r3, [pc, #216]	; (8006700 <xTaskResumeAll+0x11c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d05e      	beq.n	80066ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800662e:	e02f      	b.n	8006690 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006630:	4b34      	ldr	r3, [pc, #208]	; (8006704 <xTaskResumeAll+0x120>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3318      	adds	r3, #24
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe fd0b 	bl	8005058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fd06 	bl	8005058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <xTaskResumeAll+0x124>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d903      	bls.n	8006660 <xTaskResumeAll+0x7c>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	4a2a      	ldr	r2, [pc, #168]	; (8006708 <xTaskResumeAll+0x124>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4a27      	ldr	r2, [pc, #156]	; (800670c <xTaskResumeAll+0x128>)
 800666e:	441a      	add	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7fe fc91 	bl	8004f9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006680:	4b23      	ldr	r3, [pc, #140]	; (8006710 <xTaskResumeAll+0x12c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	429a      	cmp	r2, r3
 8006688:	d302      	bcc.n	8006690 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800668a:	4b22      	ldr	r3, [pc, #136]	; (8006714 <xTaskResumeAll+0x130>)
 800668c:	2201      	movs	r2, #1
 800668e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006690:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <xTaskResumeAll+0x120>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1cb      	bne.n	8006630 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800669e:	f000 fb61 	bl	8006d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <xTaskResumeAll+0x134>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d010      	beq.n	80066d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066ae:	f000 f847 	bl	8006740 <xTaskIncrementTick>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80066b8:	4b16      	ldr	r3, [pc, #88]	; (8006714 <xTaskResumeAll+0x130>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f1      	bne.n	80066ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066ca:	4b13      	ldr	r3, [pc, #76]	; (8006718 <xTaskResumeAll+0x134>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066d0:	4b10      	ldr	r3, [pc, #64]	; (8006714 <xTaskResumeAll+0x130>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066d8:	2301      	movs	r3, #1
 80066da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066dc:	4b0f      	ldr	r3, [pc, #60]	; (800671c <xTaskResumeAll+0x138>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066ec:	f001 f9f2 	bl	8007ad4 <vPortExitCritical>

	return xAlreadyYielded;
 80066f0:	68bb      	ldr	r3, [r7, #8]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000eec 	.word	0x20000eec
 8006700:	20000ec4 	.word	0x20000ec4
 8006704:	20000e84 	.word	0x20000e84
 8006708:	20000ecc 	.word	0x20000ecc
 800670c:	200009f4 	.word	0x200009f4
 8006710:	200009f0 	.word	0x200009f0
 8006714:	20000ed8 	.word	0x20000ed8
 8006718:	20000ed4 	.word	0x20000ed4
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006726:	4b05      	ldr	r3, [pc, #20]	; (800673c <xTaskGetTickCount+0x1c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800672c:	687b      	ldr	r3, [r7, #4]
}
 800672e:	4618      	mov	r0, r3
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20000ec8 	.word	0x20000ec8

08006740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800674a:	4b4f      	ldr	r3, [pc, #316]	; (8006888 <xTaskIncrementTick+0x148>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f040 808f 	bne.w	8006872 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006754:	4b4d      	ldr	r3, [pc, #308]	; (800688c <xTaskIncrementTick+0x14c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3301      	adds	r3, #1
 800675a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800675c:	4a4b      	ldr	r2, [pc, #300]	; (800688c <xTaskIncrementTick+0x14c>)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d120      	bne.n	80067aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006768:	4b49      	ldr	r3, [pc, #292]	; (8006890 <xTaskIncrementTick+0x150>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <xTaskIncrementTick+0x48>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	603b      	str	r3, [r7, #0]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <xTaskIncrementTick+0x46>
 8006788:	4b41      	ldr	r3, [pc, #260]	; (8006890 <xTaskIncrementTick+0x150>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	4b41      	ldr	r3, [pc, #260]	; (8006894 <xTaskIncrementTick+0x154>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a3f      	ldr	r2, [pc, #252]	; (8006890 <xTaskIncrementTick+0x150>)
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	4a3f      	ldr	r2, [pc, #252]	; (8006894 <xTaskIncrementTick+0x154>)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	4b3e      	ldr	r3, [pc, #248]	; (8006898 <xTaskIncrementTick+0x158>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	4a3d      	ldr	r2, [pc, #244]	; (8006898 <xTaskIncrementTick+0x158>)
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	f000 fadd 	bl	8006d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067aa:	4b3c      	ldr	r3, [pc, #240]	; (800689c <xTaskIncrementTick+0x15c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d349      	bcc.n	8006848 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b4:	4b36      	ldr	r3, [pc, #216]	; (8006890 <xTaskIncrementTick+0x150>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d104      	bne.n	80067c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067be:	4b37      	ldr	r3, [pc, #220]	; (800689c <xTaskIncrementTick+0x15c>)
 80067c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067c4:	601a      	str	r2, [r3, #0]
					break;
 80067c6:	e03f      	b.n	8006848 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c8:	4b31      	ldr	r3, [pc, #196]	; (8006890 <xTaskIncrementTick+0x150>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d203      	bcs.n	80067e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067e0:	4a2e      	ldr	r2, [pc, #184]	; (800689c <xTaskIncrementTick+0x15c>)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067e6:	e02f      	b.n	8006848 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe fc33 	bl	8005058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	3318      	adds	r3, #24
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe fc2a 	bl	8005058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006808:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <xTaskIncrementTick+0x160>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d903      	bls.n	8006818 <xTaskIncrementTick+0xd8>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <xTaskIncrementTick+0x160>)
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <xTaskIncrementTick+0x164>)
 8006826:	441a      	add	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3304      	adds	r3, #4
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f7fe fbb5 	bl	8004f9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006838:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <xTaskIncrementTick+0x168>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	429a      	cmp	r2, r3
 8006840:	d3b8      	bcc.n	80067b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006842:	2301      	movs	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006846:	e7b5      	b.n	80067b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006848:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <xTaskIncrementTick+0x168>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684e:	4915      	ldr	r1, [pc, #84]	; (80068a4 <xTaskIncrementTick+0x164>)
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d901      	bls.n	8006864 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006860:	2301      	movs	r3, #1
 8006862:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006864:	4b11      	ldr	r3, [pc, #68]	; (80068ac <xTaskIncrementTick+0x16c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	e004      	b.n	800687c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006872:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <xTaskIncrementTick+0x170>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	4a0d      	ldr	r2, [pc, #52]	; (80068b0 <xTaskIncrementTick+0x170>)
 800687a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800687c:	697b      	ldr	r3, [r7, #20]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000eec 	.word	0x20000eec
 800688c:	20000ec8 	.word	0x20000ec8
 8006890:	20000e7c 	.word	0x20000e7c
 8006894:	20000e80 	.word	0x20000e80
 8006898:	20000edc 	.word	0x20000edc
 800689c:	20000ee4 	.word	0x20000ee4
 80068a0:	20000ecc 	.word	0x20000ecc
 80068a4:	200009f4 	.word	0x200009f4
 80068a8:	200009f0 	.word	0x200009f0
 80068ac:	20000ed8 	.word	0x20000ed8
 80068b0:	20000ed4 	.word	0x20000ed4

080068b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068ba:	4b2a      	ldr	r3, [pc, #168]	; (8006964 <vTaskSwitchContext+0xb0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068c2:	4b29      	ldr	r3, [pc, #164]	; (8006968 <vTaskSwitchContext+0xb4>)
 80068c4:	2201      	movs	r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c8:	e046      	b.n	8006958 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80068ca:	4b27      	ldr	r3, [pc, #156]	; (8006968 <vTaskSwitchContext+0xb4>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d0:	4b26      	ldr	r3, [pc, #152]	; (800696c <vTaskSwitchContext+0xb8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e010      	b.n	80068fa <vTaskSwitchContext+0x46>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	607b      	str	r3, [r7, #4]
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <vTaskSwitchContext+0x3e>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	491d      	ldr	r1, [pc, #116]	; (8006970 <vTaskSwitchContext+0xbc>)
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0e4      	beq.n	80068d8 <vTaskSwitchContext+0x24>
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4a15      	ldr	r2, [pc, #84]	; (8006970 <vTaskSwitchContext+0xbc>)
 800691a:	4413      	add	r3, r2
 800691c:	60bb      	str	r3, [r7, #8]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	605a      	str	r2, [r3, #4]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	3308      	adds	r3, #8
 8006930:	429a      	cmp	r2, r3
 8006932:	d104      	bne.n	800693e <vTaskSwitchContext+0x8a>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <vTaskSwitchContext+0xc0>)
 8006946:	6013      	str	r3, [r2, #0]
 8006948:	4a08      	ldr	r2, [pc, #32]	; (800696c <vTaskSwitchContext+0xb8>)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800694e:	4b09      	ldr	r3, [pc, #36]	; (8006974 <vTaskSwitchContext+0xc0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3354      	adds	r3, #84	; 0x54
 8006954:	4a08      	ldr	r2, [pc, #32]	; (8006978 <vTaskSwitchContext+0xc4>)
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	20000eec 	.word	0x20000eec
 8006968:	20000ed8 	.word	0x20000ed8
 800696c:	20000ecc 	.word	0x20000ecc
 8006970:	200009f4 	.word	0x200009f4
 8006974:	200009f0 	.word	0x200009f0
 8006978:	2000007c 	.word	0x2000007c

0800697c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	60fb      	str	r3, [r7, #12]
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a2:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <vTaskPlaceOnEventList+0x44>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3318      	adds	r3, #24
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fe fb1b 	bl	8004fe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069b0:	2101      	movs	r1, #1
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f000 fb90 	bl	80070d8 <prvAddCurrentTaskToDelayedList>
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	200009f0 	.word	0x200009f0

080069c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	617b      	str	r3, [r7, #20]
}
 80069e8:	bf00      	nop
 80069ea:	e7fe      	b.n	80069ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <vTaskPlaceOnEventListRestricted+0x54>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3318      	adds	r3, #24
 80069f2:	4619      	mov	r1, r3
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7fe fad2 	bl	8004f9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	68b8      	ldr	r0, [r7, #8]
 8006a0a:	f000 fb65 	bl	80070d8 <prvAddCurrentTaskToDelayedList>
	}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	200009f0 	.word	0x200009f0

08006a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60fb      	str	r3, [r7, #12]
}
 8006a44:	bf00      	nop
 8006a46:	e7fe      	b.n	8006a46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	3318      	adds	r3, #24
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe fb03 	bl	8005058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a52:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <xTaskRemoveFromEventList+0xb0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d11d      	bne.n	8006a96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fafa 	bl	8005058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	4b19      	ldr	r3, [pc, #100]	; (8006ad0 <xTaskRemoveFromEventList+0xb4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d903      	bls.n	8006a78 <xTaskRemoveFromEventList+0x5c>
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <xTaskRemoveFromEventList+0xb4>)
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4a13      	ldr	r2, [pc, #76]	; (8006ad4 <xTaskRemoveFromEventList+0xb8>)
 8006a86:	441a      	add	r2, r3
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f7fe fa85 	bl	8004f9e <vListInsertEnd>
 8006a94:	e005      	b.n	8006aa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3318      	adds	r3, #24
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	480e      	ldr	r0, [pc, #56]	; (8006ad8 <xTaskRemoveFromEventList+0xbc>)
 8006a9e:	f7fe fa7e 	bl	8004f9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <xTaskRemoveFromEventList+0xc0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d905      	bls.n	8006abc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ab4:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <xTaskRemoveFromEventList+0xc4>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e001      	b.n	8006ac0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ac0:	697b      	ldr	r3, [r7, #20]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000eec 	.word	0x20000eec
 8006ad0:	20000ecc 	.word	0x20000ecc
 8006ad4:	200009f4 	.word	0x200009f4
 8006ad8:	20000e84 	.word	0x20000e84
 8006adc:	200009f0 	.word	0x200009f0
 8006ae0:	20000ed8 	.word	0x20000ed8

08006ae4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <vTaskInternalSetTimeOutState+0x24>)
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <vTaskInternalSetTimeOutState+0x28>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	605a      	str	r2, [r3, #4]
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	20000edc 	.word	0x20000edc
 8006b0c:	20000ec8 	.word	0x20000ec8

08006b10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	613b      	str	r3, [r7, #16]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	60fb      	str	r3, [r7, #12]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b52:	f000 ff8f 	bl	8007a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <xTaskCheckForTimeOut+0xbc>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b6e:	d102      	bne.n	8006b76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	e023      	b.n	8006bbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <xTaskCheckForTimeOut+0xc0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d007      	beq.n	8006b92 <xTaskCheckForTimeOut+0x82>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e015      	b.n	8006bbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d20b      	bcs.n	8006bb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ff9b 	bl	8006ae4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e004      	b.n	8006bbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bbe:	f000 ff89 	bl	8007ad4 <vPortExitCritical>

	return xReturn;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000ec8 	.word	0x20000ec8
 8006bd0:	20000edc 	.word	0x20000edc

08006bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bd8:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <vTaskMissedYield+0x14>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000ed8 	.word	0x20000ed8

08006bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bf4:	f000 f854 	bl	8006ca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bf8:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <prvIdleTask+0x2c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d907      	bls.n	8006c10 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <prvIdleTask+0x30>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006c10:	f7f9 fcac 	bl	800056c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006c14:	e7ee      	b.n	8006bf4 <prvIdleTask+0x8>
 8006c16:	bf00      	nop
 8006c18:	200009f4 	.word	0x200009f4
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c26:	2300      	movs	r3, #0
 8006c28:	607b      	str	r3, [r7, #4]
 8006c2a:	e00c      	b.n	8006c46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <prvInitialiseTaskLists+0x60>)
 8006c38:	4413      	add	r3, r2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe f982 	bl	8004f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3301      	adds	r3, #1
 8006c44:	607b      	str	r3, [r7, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b37      	cmp	r3, #55	; 0x37
 8006c4a:	d9ef      	bls.n	8006c2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c4c:	480d      	ldr	r0, [pc, #52]	; (8006c84 <prvInitialiseTaskLists+0x64>)
 8006c4e:	f7fe f979 	bl	8004f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c52:	480d      	ldr	r0, [pc, #52]	; (8006c88 <prvInitialiseTaskLists+0x68>)
 8006c54:	f7fe f976 	bl	8004f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c58:	480c      	ldr	r0, [pc, #48]	; (8006c8c <prvInitialiseTaskLists+0x6c>)
 8006c5a:	f7fe f973 	bl	8004f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c5e:	480c      	ldr	r0, [pc, #48]	; (8006c90 <prvInitialiseTaskLists+0x70>)
 8006c60:	f7fe f970 	bl	8004f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c64:	480b      	ldr	r0, [pc, #44]	; (8006c94 <prvInitialiseTaskLists+0x74>)
 8006c66:	f7fe f96d 	bl	8004f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <prvInitialiseTaskLists+0x78>)
 8006c6c:	4a05      	ldr	r2, [pc, #20]	; (8006c84 <prvInitialiseTaskLists+0x64>)
 8006c6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <prvInitialiseTaskLists+0x7c>)
 8006c72:	4a05      	ldr	r2, [pc, #20]	; (8006c88 <prvInitialiseTaskLists+0x68>)
 8006c74:	601a      	str	r2, [r3, #0]
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	200009f4 	.word	0x200009f4
 8006c84:	20000e54 	.word	0x20000e54
 8006c88:	20000e68 	.word	0x20000e68
 8006c8c:	20000e84 	.word	0x20000e84
 8006c90:	20000e98 	.word	0x20000e98
 8006c94:	20000eb0 	.word	0x20000eb0
 8006c98:	20000e7c 	.word	0x20000e7c
 8006c9c:	20000e80 	.word	0x20000e80

08006ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ca6:	e019      	b.n	8006cdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ca8:	f000 fee4 	bl	8007a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cac:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <prvCheckTasksWaitingTermination+0x50>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe f9cd 	bl	8005058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <prvCheckTasksWaitingTermination+0x54>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	4a0b      	ldr	r2, [pc, #44]	; (8006cf4 <prvCheckTasksWaitingTermination+0x54>)
 8006cc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <prvCheckTasksWaitingTermination+0x58>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	4a0a      	ldr	r2, [pc, #40]	; (8006cf8 <prvCheckTasksWaitingTermination+0x58>)
 8006cd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cd2:	f000 feff 	bl	8007ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f810 	bl	8006cfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cdc:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <prvCheckTasksWaitingTermination+0x58>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e1      	bne.n	8006ca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000e98 	.word	0x20000e98
 8006cf4:	20000ec4 	.word	0x20000ec4
 8006cf8:	20000eac 	.word	0x20000eac

08006cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3354      	adds	r3, #84	; 0x54
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 f9e7 	bl	80080dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 f897 	bl	8007e50 <vPortFree>
				vPortFree( pxTCB );
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 f894 	bl	8007e50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d28:	e018      	b.n	8006d5c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d103      	bne.n	8006d3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 f88b 	bl	8007e50 <vPortFree>
	}
 8006d3a:	e00f      	b.n	8006d5c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d00a      	beq.n	8006d5c <prvDeleteTCB+0x60>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60fb      	str	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <prvDeleteTCB+0x5e>
	}
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <prvResetNextTaskUnblockTime+0x38>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <prvResetNextTaskUnblockTime+0x3c>)
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d7c:	e008      	b.n	8006d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7e:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <prvResetNextTaskUnblockTime+0x38>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4a04      	ldr	r2, [pc, #16]	; (8006da0 <prvResetNextTaskUnblockTime+0x3c>)
 8006d8e:	6013      	str	r3, [r2, #0]
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	20000e7c 	.word	0x20000e7c
 8006da0:	20000ee4 	.word	0x20000ee4

08006da4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <xTaskGetCurrentTaskHandle+0x1c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006db0:	687b      	ldr	r3, [r7, #4]
	}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	200009f0 	.word	0x200009f0

08006dc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006dca:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <xTaskGetSchedulerState+0x34>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d102      	bne.n	8006dd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	607b      	str	r3, [r7, #4]
 8006dd6:	e008      	b.n	8006dea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd8:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <xTaskGetSchedulerState+0x38>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d102      	bne.n	8006de6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006de0:	2302      	movs	r3, #2
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	e001      	b.n	8006dea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dea:	687b      	ldr	r3, [r7, #4]
	}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	20000ed0 	.word	0x20000ed0
 8006dfc:	20000eec 	.word	0x20000eec

08006e00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d051      	beq.n	8006eba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1a:	4b2a      	ldr	r3, [pc, #168]	; (8006ec4 <xTaskPriorityInherit+0xc4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d241      	bcs.n	8006ea8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	db06      	blt.n	8006e3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2c:	4b25      	ldr	r3, [pc, #148]	; (8006ec4 <xTaskPriorityInherit+0xc4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6959      	ldr	r1, [r3, #20]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4a1f      	ldr	r2, [pc, #124]	; (8006ec8 <xTaskPriorityInherit+0xc8>)
 8006e4c:	4413      	add	r3, r2
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	d122      	bne.n	8006e98 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3304      	adds	r3, #4
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe f8fe 	bl	8005058 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e5c:	4b19      	ldr	r3, [pc, #100]	; (8006ec4 <xTaskPriorityInherit+0xc4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <xTaskPriorityInherit+0xcc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d903      	bls.n	8006e7a <xTaskPriorityInherit+0x7a>
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <xTaskPriorityInherit+0xcc>)
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4613      	mov	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4a10      	ldr	r2, [pc, #64]	; (8006ec8 <xTaskPriorityInherit+0xc8>)
 8006e88:	441a      	add	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7fe f884 	bl	8004f9e <vListInsertEnd>
 8006e96:	e004      	b.n	8006ea2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <xTaskPriorityInherit+0xc4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	e008      	b.n	8006eba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <xTaskPriorityInherit+0xc4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d201      	bcs.n	8006eba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006eba:	68fb      	ldr	r3, [r7, #12]
	}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	200009f0 	.word	0x200009f0
 8006ec8:	200009f4 	.word	0x200009f4
 8006ecc:	20000ecc 	.word	0x20000ecc

08006ed0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d056      	beq.n	8006f94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	; (8006fa0 <xTaskPriorityDisinherit+0xd0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d00a      	beq.n	8006f06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	60bb      	str	r3, [r7, #8]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	1e5a      	subs	r2, r3, #1
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d02c      	beq.n	8006f94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d128      	bne.n	8006f94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe f886 	bl	8005058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <xTaskPriorityDisinherit+0xd4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d903      	bls.n	8006f74 <xTaskPriorityDisinherit+0xa4>
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <xTaskPriorityDisinherit+0xd4>)
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4a09      	ldr	r2, [pc, #36]	; (8006fa8 <xTaskPriorityDisinherit+0xd8>)
 8006f82:	441a      	add	r2, r3
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	3304      	adds	r3, #4
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	f7fe f807 	bl	8004f9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f94:	697b      	ldr	r3, [r7, #20]
	}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200009f0 	.word	0x200009f0
 8006fa4:	20000ecc 	.word	0x20000ecc
 8006fa8:	200009f4 	.word	0x200009f4

08006fac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d06a      	beq.n	800709a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	60fb      	str	r3, [r7, #12]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d902      	bls.n	8006ff2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	e002      	b.n	8006ff8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d04b      	beq.n	800709a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	429a      	cmp	r2, r3
 800700a:	d146      	bne.n	800709a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800700c:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	429a      	cmp	r2, r3
 8007014:	d10a      	bne.n	800702c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	60bb      	str	r3, [r7, #8]
}
 8007028:	bf00      	nop
 800702a:	e7fe      	b.n	800702a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	db04      	blt.n	800704a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	6959      	ldr	r1, [r3, #20]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4a13      	ldr	r2, [pc, #76]	; (80070a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800705a:	4413      	add	r3, r2
 800705c:	4299      	cmp	r1, r3
 800705e:	d11c      	bne.n	800709a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	3304      	adds	r3, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f7fd fff7 	bl	8005058 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706e:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d903      	bls.n	800707e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707a:	4a0c      	ldr	r2, [pc, #48]	; (80070ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4a07      	ldr	r2, [pc, #28]	; (80070a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800708c:	441a      	add	r2, r3
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	3304      	adds	r3, #4
 8007092:	4619      	mov	r1, r3
 8007094:	4610      	mov	r0, r2
 8007096:	f7fd ff82 	bl	8004f9e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800709a:	bf00      	nop
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	200009f0 	.word	0x200009f0
 80070a8:	200009f4 	.word	0x200009f4
 80070ac:	20000ecc 	.word	0x20000ecc

080070b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80070b4:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d004      	beq.n	80070c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070c2:	3201      	adds	r2, #1
 80070c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80070c6:	4b03      	ldr	r3, [pc, #12]	; (80070d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80070c8:	681b      	ldr	r3, [r3, #0]
	}
 80070ca:	4618      	mov	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	200009f0 	.word	0x200009f0

080070d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070e2:	4b21      	ldr	r3, [pc, #132]	; (8007168 <prvAddCurrentTaskToDelayedList+0x90>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070e8:	4b20      	ldr	r3, [pc, #128]	; (800716c <prvAddCurrentTaskToDelayedList+0x94>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3304      	adds	r3, #4
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fd ffb2 	bl	8005058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070fa:	d10a      	bne.n	8007112 <prvAddCurrentTaskToDelayedList+0x3a>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007102:	4b1a      	ldr	r3, [pc, #104]	; (800716c <prvAddCurrentTaskToDelayedList+0x94>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4819      	ldr	r0, [pc, #100]	; (8007170 <prvAddCurrentTaskToDelayedList+0x98>)
 800710c:	f7fd ff47 	bl	8004f9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007110:	e026      	b.n	8007160 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4413      	add	r3, r2
 8007118:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800711a:	4b14      	ldr	r3, [pc, #80]	; (800716c <prvAddCurrentTaskToDelayedList+0x94>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	429a      	cmp	r2, r3
 8007128:	d209      	bcs.n	800713e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800712a:	4b12      	ldr	r3, [pc, #72]	; (8007174 <prvAddCurrentTaskToDelayedList+0x9c>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <prvAddCurrentTaskToDelayedList+0x94>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3304      	adds	r3, #4
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f7fd ff55 	bl	8004fe6 <vListInsert>
}
 800713c:	e010      	b.n	8007160 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800713e:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b0a      	ldr	r3, [pc, #40]	; (800716c <prvAddCurrentTaskToDelayedList+0x94>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3304      	adds	r3, #4
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f7fd ff4b 	bl	8004fe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007150:	4b0a      	ldr	r3, [pc, #40]	; (800717c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d202      	bcs.n	8007160 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800715a:	4a08      	ldr	r2, [pc, #32]	; (800717c <prvAddCurrentTaskToDelayedList+0xa4>)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6013      	str	r3, [r2, #0]
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000ec8 	.word	0x20000ec8
 800716c:	200009f0 	.word	0x200009f0
 8007170:	20000eb0 	.word	0x20000eb0
 8007174:	20000e80 	.word	0x20000e80
 8007178:	20000e7c 	.word	0x20000e7c
 800717c:	20000ee4 	.word	0x20000ee4

08007180 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	; 0x28
 8007184:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800718a:	f000 fb07 	bl	800779c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800718e:	4b1c      	ldr	r3, [pc, #112]	; (8007200 <xTimerCreateTimerTask+0x80>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d021      	beq.n	80071da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800719e:	1d3a      	adds	r2, r7, #4
 80071a0:	f107 0108 	add.w	r1, r7, #8
 80071a4:	f107 030c 	add.w	r3, r7, #12
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fd feb1 	bl	8004f10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	9202      	str	r2, [sp, #8]
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	2302      	movs	r3, #2
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	2300      	movs	r3, #0
 80071be:	460a      	mov	r2, r1
 80071c0:	4910      	ldr	r1, [pc, #64]	; (8007204 <xTimerCreateTimerTask+0x84>)
 80071c2:	4811      	ldr	r0, [pc, #68]	; (8007208 <xTimerCreateTimerTask+0x88>)
 80071c4:	f7fe ff2e 	bl	8006024 <xTaskCreateStatic>
 80071c8:	4603      	mov	r3, r0
 80071ca:	4a10      	ldr	r2, [pc, #64]	; (800720c <xTimerCreateTimerTask+0x8c>)
 80071cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071ce:	4b0f      	ldr	r3, [pc, #60]	; (800720c <xTimerCreateTimerTask+0x8c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071d6:	2301      	movs	r3, #1
 80071d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	613b      	str	r3, [r7, #16]
}
 80071f2:	bf00      	nop
 80071f4:	e7fe      	b.n	80071f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071f6:	697b      	ldr	r3, [r7, #20]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000f20 	.word	0x20000f20
 8007204:	08008b8c 	.word	0x08008b8c
 8007208:	08007345 	.word	0x08007345
 800720c:	20000f24 	.word	0x20000f24

08007210 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800721e:	2300      	movs	r3, #0
 8007220:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	623b      	str	r3, [r7, #32]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800723e:	4b1a      	ldr	r3, [pc, #104]	; (80072a8 <xTimerGenericCommand+0x98>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d02a      	beq.n	800729c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b05      	cmp	r3, #5
 8007256:	dc18      	bgt.n	800728a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007258:	f7ff fdb4 	bl	8006dc4 <xTaskGetSchedulerState>
 800725c:	4603      	mov	r3, r0
 800725e:	2b02      	cmp	r3, #2
 8007260:	d109      	bne.n	8007276 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007262:	4b11      	ldr	r3, [pc, #68]	; (80072a8 <xTimerGenericCommand+0x98>)
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	f107 0110 	add.w	r1, r7, #16
 800726a:	2300      	movs	r3, #0
 800726c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726e:	f7fe f911 	bl	8005494 <xQueueGenericSend>
 8007272:	6278      	str	r0, [r7, #36]	; 0x24
 8007274:	e012      	b.n	800729c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007276:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <xTimerGenericCommand+0x98>)
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	f107 0110 	add.w	r1, r7, #16
 800727e:	2300      	movs	r3, #0
 8007280:	2200      	movs	r2, #0
 8007282:	f7fe f907 	bl	8005494 <xQueueGenericSend>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24
 8007288:	e008      	b.n	800729c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800728a:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <xTimerGenericCommand+0x98>)
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	f107 0110 	add.w	r1, r7, #16
 8007292:	2300      	movs	r3, #0
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	f7fe f9fb 	bl	8005690 <xQueueGenericSendFromISR>
 800729a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3728      	adds	r7, #40	; 0x28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000f20 	.word	0x20000f20

080072ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b6:	4b22      	ldr	r3, [pc, #136]	; (8007340 <prvProcessExpiredTimer+0x94>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fd fec7 	bl	8005058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d022      	beq.n	800731e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	699a      	ldr	r2, [r3, #24]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	18d1      	adds	r1, r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	6978      	ldr	r0, [r7, #20]
 80072e6:	f000 f8d1 	bl	800748c <prvInsertTimerInActiveList>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01f      	beq.n	8007330 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072f0:	2300      	movs	r3, #0
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	2300      	movs	r3, #0
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	2100      	movs	r1, #0
 80072fa:	6978      	ldr	r0, [r7, #20]
 80072fc:	f7ff ff88 	bl	8007210 <xTimerGenericCommand>
 8007300:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d113      	bne.n	8007330 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	60fb      	str	r3, [r7, #12]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007324:	f023 0301 	bic.w	r3, r3, #1
 8007328:	b2da      	uxtb	r2, r3
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	6978      	ldr	r0, [r7, #20]
 8007336:	4798      	blx	r3
}
 8007338:	bf00      	nop
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000f18 	.word	0x20000f18

08007344 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800734c:	f107 0308 	add.w	r3, r7, #8
 8007350:	4618      	mov	r0, r3
 8007352:	f000 f857 	bl	8007404 <prvGetNextExpireTime>
 8007356:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4619      	mov	r1, r3
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f803 	bl	8007368 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007362:	f000 f8d5 	bl	8007510 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007366:	e7f1      	b.n	800734c <prvTimerTask+0x8>

08007368 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007372:	f7ff f929 	bl	80065c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007376:	f107 0308 	add.w	r3, r7, #8
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f866 	bl	800744c <prvSampleTimeNow>
 8007380:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d130      	bne.n	80073ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <prvProcessTimerOrBlockTask+0x3c>
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	d806      	bhi.n	80073a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007396:	f7ff f925 	bl	80065e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff ff85 	bl	80072ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073a2:	e024      	b.n	80073ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073aa:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <prvProcessTimerOrBlockTask+0x90>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <prvProcessTimerOrBlockTask+0x50>
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <prvProcessTimerOrBlockTask+0x52>
 80073b8:	2300      	movs	r3, #0
 80073ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <prvProcessTimerOrBlockTask+0x94>)
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	f7fe fdf7 	bl	8005fbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073ce:	f7ff f909 	bl	80065e4 <xTaskResumeAll>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10a      	bne.n	80073ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073d8:	4b09      	ldr	r3, [pc, #36]	; (8007400 <prvProcessTimerOrBlockTask+0x98>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
}
 80073e8:	e001      	b.n	80073ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073ea:	f7ff f8fb 	bl	80065e4 <xTaskResumeAll>
}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000f1c 	.word	0x20000f1c
 80073fc:	20000f20 	.word	0x20000f20
 8007400:	e000ed04 	.word	0xe000ed04

08007404 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <prvGetNextExpireTime+0x44>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <prvGetNextExpireTime+0x16>
 8007416:	2201      	movs	r2, #1
 8007418:	e000      	b.n	800741c <prvGetNextExpireTime+0x18>
 800741a:	2200      	movs	r2, #0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d105      	bne.n	8007434 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007428:	4b07      	ldr	r3, [pc, #28]	; (8007448 <prvGetNextExpireTime+0x44>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	e001      	b.n	8007438 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007438:	68fb      	ldr	r3, [r7, #12]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	20000f18 	.word	0x20000f18

0800744c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007454:	f7ff f964 	bl	8006720 <xTaskGetTickCount>
 8007458:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <prvSampleTimeNow+0x3c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	429a      	cmp	r2, r3
 8007462:	d205      	bcs.n	8007470 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007464:	f000 f936 	bl	80076d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	e002      	b.n	8007476 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007476:	4a04      	ldr	r2, [pc, #16]	; (8007488 <prvSampleTimeNow+0x3c>)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800747c:	68fb      	ldr	r3, [r7, #12]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000f28 	.word	0x20000f28

0800748c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800749a:	2300      	movs	r3, #0
 800749c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d812      	bhi.n	80074d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	1ad2      	subs	r2, r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d302      	bcc.n	80074c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	e01b      	b.n	80074fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074c6:	4b10      	ldr	r3, [pc, #64]	; (8007508 <prvInsertTimerInActiveList+0x7c>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3304      	adds	r3, #4
 80074ce:	4619      	mov	r1, r3
 80074d0:	4610      	mov	r0, r2
 80074d2:	f7fd fd88 	bl	8004fe6 <vListInsert>
 80074d6:	e012      	b.n	80074fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d206      	bcs.n	80074ee <prvInsertTimerInActiveList+0x62>
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d302      	bcc.n	80074ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074e8:	2301      	movs	r3, #1
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e007      	b.n	80074fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ee:	4b07      	ldr	r3, [pc, #28]	; (800750c <prvInsertTimerInActiveList+0x80>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f7fd fd74 	bl	8004fe6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074fe:	697b      	ldr	r3, [r7, #20]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20000f1c 	.word	0x20000f1c
 800750c:	20000f18 	.word	0x20000f18

08007510 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08e      	sub	sp, #56	; 0x38
 8007514:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007516:	e0ca      	b.n	80076ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	da18      	bge.n	8007550 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800751e:	1d3b      	adds	r3, r7, #4
 8007520:	3304      	adds	r3, #4
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10a      	bne.n	8007540 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	61fb      	str	r3, [r7, #28]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007546:	6850      	ldr	r0, [r2, #4]
 8007548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800754a:	6892      	ldr	r2, [r2, #8]
 800754c:	4611      	mov	r1, r2
 800754e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f2c0 80ab 	blt.w	80076ae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d004      	beq.n	800756e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fd fd75 	bl	8005058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800756e:	463b      	mov	r3, r7
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff ff6b 	bl	800744c <prvSampleTimeNow>
 8007576:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b09      	cmp	r3, #9
 800757c:	f200 8096 	bhi.w	80076ac <prvProcessReceivedCommands+0x19c>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <prvProcessReceivedCommands+0x78>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	080075b1 	.word	0x080075b1
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075b1 	.word	0x080075b1
 8007594:	08007625 	.word	0x08007625
 8007598:	08007639 	.word	0x08007639
 800759c:	08007683 	.word	0x08007683
 80075a0:	080075b1 	.word	0x080075b1
 80075a4:	080075b1 	.word	0x080075b1
 80075a8:	08007625 	.word	0x08007625
 80075ac:	08007639 	.word	0x08007639
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	18d1      	adds	r1, r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d0:	f7ff ff5c 	bl	800748c <prvInsertTimerInActiveList>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d069      	beq.n	80076ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d05e      	beq.n	80076ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	441a      	add	r2, r3
 80075f8:	2300      	movs	r3, #0
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	2300      	movs	r3, #0
 80075fe:	2100      	movs	r1, #0
 8007600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007602:	f7ff fe05 	bl	8007210 <xTimerGenericCommand>
 8007606:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d14f      	bne.n	80076ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	61bb      	str	r3, [r7, #24]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	b2da      	uxtb	r2, r3
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007636:	e03a      	b.n	80076ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	b2da      	uxtb	r2, r3
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	617b      	str	r3, [r7, #20]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	18d1      	adds	r1, r2, r3
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767c:	f7ff ff06 	bl	800748c <prvInsertTimerInActiveList>
					break;
 8007680:	e015      	b.n	80076ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d103      	bne.n	8007698 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007692:	f000 fbdd 	bl	8007e50 <vPortFree>
 8007696:	e00a      	b.n	80076ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800769e:	f023 0301 	bic.w	r3, r3, #1
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80076aa:	e000      	b.n	80076ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80076ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076ae:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <prvProcessReceivedCommands+0x1c0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	1d39      	adds	r1, r7, #4
 80076b4:	2200      	movs	r2, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe f886 	bl	80057c8 <xQueueReceive>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f47f af2a 	bne.w	8007518 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	3730      	adds	r7, #48	; 0x30
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20000f20 	.word	0x20000f20

080076d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076da:	e048      	b.n	800776e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076dc:	4b2d      	ldr	r3, [pc, #180]	; (8007794 <prvSwitchTimerLists+0xc0>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e6:	4b2b      	ldr	r3, [pc, #172]	; (8007794 <prvSwitchTimerLists+0xc0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fd fcaf 	bl	8005058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d02e      	beq.n	800776e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4413      	add	r3, r2
 8007718:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	429a      	cmp	r2, r3
 8007720:	d90e      	bls.n	8007740 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800772e:	4b19      	ldr	r3, [pc, #100]	; (8007794 <prvSwitchTimerLists+0xc0>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3304      	adds	r3, #4
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f7fd fc54 	bl	8004fe6 <vListInsert>
 800773e:	e016      	b.n	800776e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007740:	2300      	movs	r3, #0
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	2300      	movs	r3, #0
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	2100      	movs	r1, #0
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff fd60 	bl	8007210 <xTimerGenericCommand>
 8007750:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	603b      	str	r3, [r7, #0]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800776e:	4b09      	ldr	r3, [pc, #36]	; (8007794 <prvSwitchTimerLists+0xc0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1b1      	bne.n	80076dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007778:	4b06      	ldr	r3, [pc, #24]	; (8007794 <prvSwitchTimerLists+0xc0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <prvSwitchTimerLists+0xc4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a04      	ldr	r2, [pc, #16]	; (8007794 <prvSwitchTimerLists+0xc0>)
 8007784:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007786:	4a04      	ldr	r2, [pc, #16]	; (8007798 <prvSwitchTimerLists+0xc4>)
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	6013      	str	r3, [r2, #0]
}
 800778c:	bf00      	nop
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20000f18 	.word	0x20000f18
 8007798:	20000f1c 	.word	0x20000f1c

0800779c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80077a2:	f000 f967 	bl	8007a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80077a6:	4b15      	ldr	r3, [pc, #84]	; (80077fc <prvCheckForValidListAndQueue+0x60>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d120      	bne.n	80077f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80077ae:	4814      	ldr	r0, [pc, #80]	; (8007800 <prvCheckForValidListAndQueue+0x64>)
 80077b0:	f7fd fbc8 	bl	8004f44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80077b4:	4813      	ldr	r0, [pc, #76]	; (8007804 <prvCheckForValidListAndQueue+0x68>)
 80077b6:	f7fd fbc5 	bl	8004f44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80077ba:	4b13      	ldr	r3, [pc, #76]	; (8007808 <prvCheckForValidListAndQueue+0x6c>)
 80077bc:	4a10      	ldr	r2, [pc, #64]	; (8007800 <prvCheckForValidListAndQueue+0x64>)
 80077be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <prvCheckForValidListAndQueue+0x70>)
 80077c2:	4a10      	ldr	r2, [pc, #64]	; (8007804 <prvCheckForValidListAndQueue+0x68>)
 80077c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077c6:	2300      	movs	r3, #0
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	4b11      	ldr	r3, [pc, #68]	; (8007810 <prvCheckForValidListAndQueue+0x74>)
 80077cc:	4a11      	ldr	r2, [pc, #68]	; (8007814 <prvCheckForValidListAndQueue+0x78>)
 80077ce:	2110      	movs	r1, #16
 80077d0:	200a      	movs	r0, #10
 80077d2:	f7fd fcd3 	bl	800517c <xQueueGenericCreateStatic>
 80077d6:	4603      	mov	r3, r0
 80077d8:	4a08      	ldr	r2, [pc, #32]	; (80077fc <prvCheckForValidListAndQueue+0x60>)
 80077da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077dc:	4b07      	ldr	r3, [pc, #28]	; (80077fc <prvCheckForValidListAndQueue+0x60>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077e4:	4b05      	ldr	r3, [pc, #20]	; (80077fc <prvCheckForValidListAndQueue+0x60>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	490b      	ldr	r1, [pc, #44]	; (8007818 <prvCheckForValidListAndQueue+0x7c>)
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fbbc 	bl	8005f68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077f0:	f000 f970 	bl	8007ad4 <vPortExitCritical>
}
 80077f4:	bf00      	nop
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000f20 	.word	0x20000f20
 8007800:	20000ef0 	.word	0x20000ef0
 8007804:	20000f04 	.word	0x20000f04
 8007808:	20000f18 	.word	0x20000f18
 800780c:	20000f1c 	.word	0x20000f1c
 8007810:	20000fcc 	.word	0x20000fcc
 8007814:	20000f2c 	.word	0x20000f2c
 8007818:	08008b94 	.word	0x08008b94

0800781c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3b04      	subs	r3, #4
 800782c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3b04      	subs	r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f023 0201 	bic.w	r2, r3, #1
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b04      	subs	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800784c:	4a0c      	ldr	r2, [pc, #48]	; (8007880 <pxPortInitialiseStack+0x64>)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3b14      	subs	r3, #20
 8007856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3b04      	subs	r3, #4
 8007862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f06f 0202 	mvn.w	r2, #2
 800786a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3b20      	subs	r3, #32
 8007870:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007872:	68fb      	ldr	r3, [r7, #12]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	08007885 	.word	0x08007885

08007884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800788e:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <prvTaskExitError+0x54>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007896:	d00a      	beq.n	80078ae <prvTaskExitError+0x2a>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	60fb      	str	r3, [r7, #12]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <prvTaskExitError+0x28>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	60bb      	str	r3, [r7, #8]
}
 80078c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078c2:	bf00      	nop
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0fc      	beq.n	80078c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	2000002c 	.word	0x2000002c
 80078dc:	00000000 	.word	0x00000000

080078e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <pxCurrentTCBConst2>)
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	6808      	ldr	r0, [r1, #0]
 80078e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ea:	f380 8809 	msr	PSP, r0
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8811 	msr	BASEPRI, r0
 80078fa:	4770      	bx	lr
 80078fc:	f3af 8000 	nop.w

08007900 <pxCurrentTCBConst2>:
 8007900:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007908:	4808      	ldr	r0, [pc, #32]	; (800792c <prvPortStartFirstTask+0x24>)
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	6800      	ldr	r0, [r0, #0]
 800790e:	f380 8808 	msr	MSP, r0
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8814 	msr	CONTROL, r0
 800791a:	b662      	cpsie	i
 800791c:	b661      	cpsie	f
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	df00      	svc	0
 8007928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800792a:	bf00      	nop
 800792c:	e000ed08 	.word	0xe000ed08

08007930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007936:	4b46      	ldr	r3, [pc, #280]	; (8007a50 <xPortStartScheduler+0x120>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a46      	ldr	r2, [pc, #280]	; (8007a54 <xPortStartScheduler+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d10a      	bne.n	8007956 <xPortStartScheduler+0x26>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007956:	4b3e      	ldr	r3, [pc, #248]	; (8007a50 <xPortStartScheduler+0x120>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3f      	ldr	r2, [pc, #252]	; (8007a58 <xPortStartScheduler+0x128>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d10a      	bne.n	8007976 <xPortStartScheduler+0x46>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007976:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <xPortStartScheduler+0x12c>)
 8007978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007998:	b2da      	uxtb	r2, r3
 800799a:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <xPortStartScheduler+0x130>)
 800799c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800799e:	4b31      	ldr	r3, [pc, #196]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a0:	2207      	movs	r2, #7
 80079a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079a4:	e009      	b.n	80079ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079a6:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <xPortStartScheduler+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	4a2d      	ldr	r2, [pc, #180]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c2:	2b80      	cmp	r3, #128	; 0x80
 80079c4:	d0ef      	beq.n	80079a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079c6:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <xPortStartScheduler+0x134>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1c3 0307 	rsb	r3, r3, #7
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d00a      	beq.n	80079e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60bb      	str	r3, [r7, #8]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079e8:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <xPortStartScheduler+0x134>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <xPortStartScheduler+0x134>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <xPortStartScheduler+0x134>)
 80079fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a06:	4b18      	ldr	r3, [pc, #96]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <xPortStartScheduler+0x138>)
 8007a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a1e:	f000 f8dd 	bl	8007bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a22:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <xPortStartScheduler+0x13c>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a28:	f000 f8fc 	bl	8007c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0f      	ldr	r2, [pc, #60]	; (8007a70 <xPortStartScheduler+0x140>)
 8007a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a38:	f7ff ff66 	bl	8007908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a3c:	f7fe ff3a 	bl	80068b4 <vTaskSwitchContext>
	prvTaskExitError();
 8007a40:	f7ff ff20 	bl	8007884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	e000ed00 	.word	0xe000ed00
 8007a54:	410fc271 	.word	0x410fc271
 8007a58:	410fc270 	.word	0x410fc270
 8007a5c:	e000e400 	.word	0xe000e400
 8007a60:	2000101c 	.word	0x2000101c
 8007a64:	20001020 	.word	0x20001020
 8007a68:	e000ed20 	.word	0xe000ed20
 8007a6c:	2000002c 	.word	0x2000002c
 8007a70:	e000ef34 	.word	0xe000ef34

08007a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	607b      	str	r3, [r7, #4]
}
 8007a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <vPortEnterCritical+0x58>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	4a0d      	ldr	r2, [pc, #52]	; (8007acc <vPortEnterCritical+0x58>)
 8007a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a98:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <vPortEnterCritical+0x58>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10f      	bne.n	8007ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <vPortEnterCritical+0x5c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	603b      	str	r3, [r7, #0]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <vPortEnterCritical+0x4a>
	}
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	2000002c 	.word	0x2000002c
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ada:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <vPortExitCritical+0x50>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <vPortExitCritical+0x24>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	607b      	str	r3, [r7, #4]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <vPortExitCritical+0x50>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <vPortExitCritical+0x50>)
 8007b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b02:	4b08      	ldr	r3, [pc, #32]	; (8007b24 <vPortExitCritical+0x50>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <vPortExitCritical+0x42>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	f383 8811 	msr	BASEPRI, r3
}
 8007b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	2000002c 	.word	0x2000002c
	...

08007b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b30:	f3ef 8009 	mrs	r0, PSP
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <pxCurrentTCBConst>)
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	f01e 0f10 	tst.w	lr, #16
 8007b40:	bf08      	it	eq
 8007b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	6010      	str	r0, [r2, #0]
 8007b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b54:	f380 8811 	msr	BASEPRI, r0
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f7fe fea8 	bl	80068b4 <vTaskSwitchContext>
 8007b64:	f04f 0000 	mov.w	r0, #0
 8007b68:	f380 8811 	msr	BASEPRI, r0
 8007b6c:	bc09      	pop	{r0, r3}
 8007b6e:	6819      	ldr	r1, [r3, #0]
 8007b70:	6808      	ldr	r0, [r1, #0]
 8007b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b76:	f01e 0f10 	tst.w	lr, #16
 8007b7a:	bf08      	it	eq
 8007b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b80:	f380 8809 	msr	PSP, r0
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst>:
 8007b90:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007bb2:	f7fe fdc5 	bl	8006740 <xTaskIncrementTick>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <xPortSysTickHandler+0x40>)
 8007bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	f383 8811 	msr	BASEPRI, r3
}
 8007bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007be6:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <vPortSetupTimerInterrupt+0x38>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <vPortSetupTimerInterrupt+0x3c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <vPortSetupTimerInterrupt+0x40>)
 8007bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf6:	099b      	lsrs	r3, r3, #6
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <vPortSetupTimerInterrupt+0x44>)
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bfe:	4b04      	ldr	r3, [pc, #16]	; (8007c10 <vPortSetupTimerInterrupt+0x34>)
 8007c00:	2207      	movs	r2, #7
 8007c02:	601a      	str	r2, [r3, #0]
}
 8007c04:	bf00      	nop
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	e000e010 	.word	0xe000e010
 8007c14:	e000e018 	.word	0xe000e018
 8007c18:	20000020 	.word	0x20000020
 8007c1c:	10624dd3 	.word	0x10624dd3
 8007c20:	e000e014 	.word	0xe000e014

08007c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c34 <vPortEnableVFP+0x10>
 8007c28:	6801      	ldr	r1, [r0, #0]
 8007c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c2e:	6001      	str	r1, [r0, #0]
 8007c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c32:	bf00      	nop
 8007c34:	e000ed88 	.word	0xe000ed88

08007c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c3e:	f3ef 8305 	mrs	r3, IPSR
 8007c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b0f      	cmp	r3, #15
 8007c48:	d914      	bls.n	8007c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <vPortValidateInterruptPriority+0x70>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c54:	4b15      	ldr	r3, [pc, #84]	; (8007cac <vPortValidateInterruptPriority+0x74>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	7afa      	ldrb	r2, [r7, #11]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d20a      	bcs.n	8007c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	607b      	str	r3, [r7, #4]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c74:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <vPortValidateInterruptPriority+0x78>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c7c:	4b0d      	ldr	r3, [pc, #52]	; (8007cb4 <vPortValidateInterruptPriority+0x7c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d90a      	bls.n	8007c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	603b      	str	r3, [r7, #0]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <vPortValidateInterruptPriority+0x60>
	}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	e000e3f0 	.word	0xe000e3f0
 8007cac:	2000101c 	.word	0x2000101c
 8007cb0:	e000ed0c 	.word	0xe000ed0c
 8007cb4:	20001020 	.word	0x20001020

08007cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08a      	sub	sp, #40	; 0x28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cc4:	f7fe fc80 	bl	80065c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cc8:	4b5b      	ldr	r3, [pc, #364]	; (8007e38 <pvPortMalloc+0x180>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cd0:	f000 f920 	bl	8007f14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cd4:	4b59      	ldr	r3, [pc, #356]	; (8007e3c <pvPortMalloc+0x184>)
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4013      	ands	r3, r2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 8093 	bne.w	8007e08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01d      	beq.n	8007d24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007ce8:	2208      	movs	r2, #8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4413      	add	r3, r2
 8007cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d014      	beq.n	8007d24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f023 0307 	bic.w	r3, r3, #7
 8007d00:	3308      	adds	r3, #8
 8007d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <pvPortMalloc+0x6c>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	617b      	str	r3, [r7, #20]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d06e      	beq.n	8007e08 <pvPortMalloc+0x150>
 8007d2a:	4b45      	ldr	r3, [pc, #276]	; (8007e40 <pvPortMalloc+0x188>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d869      	bhi.n	8007e08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d34:	4b43      	ldr	r3, [pc, #268]	; (8007e44 <pvPortMalloc+0x18c>)
 8007d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d38:	4b42      	ldr	r3, [pc, #264]	; (8007e44 <pvPortMalloc+0x18c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d3e:	e004      	b.n	8007d4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d903      	bls.n	8007d5c <pvPortMalloc+0xa4>
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f1      	bne.n	8007d40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d5c:	4b36      	ldr	r3, [pc, #216]	; (8007e38 <pvPortMalloc+0x180>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d050      	beq.n	8007e08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2208      	movs	r2, #8
 8007d6c:	4413      	add	r3, r2
 8007d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	1ad2      	subs	r2, r2, r3
 8007d80:	2308      	movs	r3, #8
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d91f      	bls.n	8007dc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	f003 0307 	and.w	r3, r3, #7
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <pvPortMalloc+0xf8>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	613b      	str	r3, [r7, #16]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	1ad2      	subs	r2, r2, r3
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dc2:	69b8      	ldr	r0, [r7, #24]
 8007dc4:	f000 f908 	bl	8007fd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <pvPortMalloc+0x188>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <pvPortMalloc+0x188>)
 8007dd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <pvPortMalloc+0x188>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <pvPortMalloc+0x190>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d203      	bcs.n	8007dea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007de2:	4b17      	ldr	r3, [pc, #92]	; (8007e40 <pvPortMalloc+0x188>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <pvPortMalloc+0x190>)
 8007de8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <pvPortMalloc+0x184>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	431a      	orrs	r2, r3
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <pvPortMalloc+0x194>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3301      	adds	r3, #1
 8007e04:	4a11      	ldr	r2, [pc, #68]	; (8007e4c <pvPortMalloc+0x194>)
 8007e06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e08:	f7fe fbec 	bl	80065e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <pvPortMalloc+0x174>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	60fb      	str	r3, [r7, #12]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <pvPortMalloc+0x172>
	return pvReturn;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3728      	adds	r7, #40	; 0x28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	2000373c 	.word	0x2000373c
 8007e3c:	20003750 	.word	0x20003750
 8007e40:	20003740 	.word	0x20003740
 8007e44:	20003734 	.word	0x20003734
 8007e48:	20003744 	.word	0x20003744
 8007e4c:	20003748 	.word	0x20003748

08007e50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04d      	beq.n	8007efe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e62:	2308      	movs	r3, #8
 8007e64:	425b      	negs	r3, r3
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <vPortFree+0xb8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10a      	bne.n	8007e94 <vPortFree+0x44>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	60fb      	str	r3, [r7, #12]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <vPortFree+0x62>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	60bb      	str	r3, [r7, #8]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <vPortFree+0xb8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01e      	beq.n	8007efe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d11a      	bne.n	8007efe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <vPortFree+0xb8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ed8:	f7fe fb76 	bl	80065c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <vPortFree+0xbc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <vPortFree+0xbc>)
 8007ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eea:	6938      	ldr	r0, [r7, #16]
 8007eec:	f000 f874 	bl	8007fd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ef0:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <vPortFree+0xc0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	4a06      	ldr	r2, [pc, #24]	; (8007f10 <vPortFree+0xc0>)
 8007ef8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007efa:	f7fe fb73 	bl	80065e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007efe:	bf00      	nop
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20003750 	.word	0x20003750
 8007f0c:	20003740 	.word	0x20003740
 8007f10:	2000374c 	.word	0x2000374c

08007f14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f1a:	f242 7310 	movw	r3, #10000	; 0x2710
 8007f1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <prvHeapInit+0xac>)
 8007f22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00c      	beq.n	8007f48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3307      	adds	r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0307 	bic.w	r3, r3, #7
 8007f3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	4a1f      	ldr	r2, [pc, #124]	; (8007fc0 <prvHeapInit+0xac>)
 8007f44:	4413      	add	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f4c:	4a1d      	ldr	r2, [pc, #116]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f52:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <prvHeapInit+0xb0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f60:	2208      	movs	r2, #8
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0307 	bic.w	r3, r3, #7
 8007f6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a15      	ldr	r2, [pc, #84]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f7e:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f94:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <prvHeapInit+0xb4>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <prvHeapInit+0xb8>)
 8007fa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <prvHeapInit+0xbc>)
 8007faa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <prvHeapInit+0xc0>)
 8007fae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	20001024 	.word	0x20001024
 8007fc4:	20003734 	.word	0x20003734
 8007fc8:	2000373c 	.word	0x2000373c
 8007fcc:	20003744 	.word	0x20003744
 8007fd0:	20003740 	.word	0x20003740
 8007fd4:	20003750 	.word	0x20003750

08007fd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fe0:	4b28      	ldr	r3, [pc, #160]	; (8008084 <prvInsertBlockIntoFreeList+0xac>)
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	e002      	b.n	8007fec <prvInsertBlockIntoFreeList+0x14>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d8f7      	bhi.n	8007fe6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	429a      	cmp	r2, r3
 8008006:	d108      	bne.n	800801a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	441a      	add	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d118      	bne.n	8008060 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d00d      	beq.n	8008056 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	441a      	add	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	e008      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008056:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <prvInsertBlockIntoFreeList+0xb0>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e003      	b.n	8008068 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d002      	beq.n	8008076 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20003734 	.word	0x20003734
 8008088:	2000373c 	.word	0x2000373c

0800808c <siprintf>:
 800808c:	b40e      	push	{r1, r2, r3}
 800808e:	b500      	push	{lr}
 8008090:	b09c      	sub	sp, #112	; 0x70
 8008092:	ab1d      	add	r3, sp, #116	; 0x74
 8008094:	9002      	str	r0, [sp, #8]
 8008096:	9006      	str	r0, [sp, #24]
 8008098:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800809c:	4809      	ldr	r0, [pc, #36]	; (80080c4 <siprintf+0x38>)
 800809e:	9107      	str	r1, [sp, #28]
 80080a0:	9104      	str	r1, [sp, #16]
 80080a2:	4909      	ldr	r1, [pc, #36]	; (80080c8 <siprintf+0x3c>)
 80080a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080a8:	9105      	str	r1, [sp, #20]
 80080aa:	6800      	ldr	r0, [r0, #0]
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	a902      	add	r1, sp, #8
 80080b0:	f000 f9f6 	bl	80084a0 <_svfiprintf_r>
 80080b4:	9b02      	ldr	r3, [sp, #8]
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	b01c      	add	sp, #112	; 0x70
 80080bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c0:	b003      	add	sp, #12
 80080c2:	4770      	bx	lr
 80080c4:	2000007c 	.word	0x2000007c
 80080c8:	ffff0208 	.word	0xffff0208

080080cc <memset>:
 80080cc:	4402      	add	r2, r0
 80080ce:	4603      	mov	r3, r0
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d100      	bne.n	80080d6 <memset+0xa>
 80080d4:	4770      	bx	lr
 80080d6:	f803 1b01 	strb.w	r1, [r3], #1
 80080da:	e7f9      	b.n	80080d0 <memset+0x4>

080080dc <_reclaim_reent>:
 80080dc:	4b29      	ldr	r3, [pc, #164]	; (8008184 <_reclaim_reent+0xa8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4283      	cmp	r3, r0
 80080e2:	b570      	push	{r4, r5, r6, lr}
 80080e4:	4604      	mov	r4, r0
 80080e6:	d04b      	beq.n	8008180 <_reclaim_reent+0xa4>
 80080e8:	69c3      	ldr	r3, [r0, #28]
 80080ea:	b143      	cbz	r3, 80080fe <_reclaim_reent+0x22>
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d144      	bne.n	800817c <_reclaim_reent+0xa0>
 80080f2:	69e3      	ldr	r3, [r4, #28]
 80080f4:	6819      	ldr	r1, [r3, #0]
 80080f6:	b111      	cbz	r1, 80080fe <_reclaim_reent+0x22>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f000 f87f 	bl	80081fc <_free_r>
 80080fe:	6961      	ldr	r1, [r4, #20]
 8008100:	b111      	cbz	r1, 8008108 <_reclaim_reent+0x2c>
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f87a 	bl	80081fc <_free_r>
 8008108:	69e1      	ldr	r1, [r4, #28]
 800810a:	b111      	cbz	r1, 8008112 <_reclaim_reent+0x36>
 800810c:	4620      	mov	r0, r4
 800810e:	f000 f875 	bl	80081fc <_free_r>
 8008112:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008114:	b111      	cbz	r1, 800811c <_reclaim_reent+0x40>
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f870 	bl	80081fc <_free_r>
 800811c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811e:	b111      	cbz	r1, 8008126 <_reclaim_reent+0x4a>
 8008120:	4620      	mov	r0, r4
 8008122:	f000 f86b 	bl	80081fc <_free_r>
 8008126:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008128:	b111      	cbz	r1, 8008130 <_reclaim_reent+0x54>
 800812a:	4620      	mov	r0, r4
 800812c:	f000 f866 	bl	80081fc <_free_r>
 8008130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008132:	b111      	cbz	r1, 800813a <_reclaim_reent+0x5e>
 8008134:	4620      	mov	r0, r4
 8008136:	f000 f861 	bl	80081fc <_free_r>
 800813a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800813c:	b111      	cbz	r1, 8008144 <_reclaim_reent+0x68>
 800813e:	4620      	mov	r0, r4
 8008140:	f000 f85c 	bl	80081fc <_free_r>
 8008144:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008146:	b111      	cbz	r1, 800814e <_reclaim_reent+0x72>
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f857 	bl	80081fc <_free_r>
 800814e:	6a23      	ldr	r3, [r4, #32]
 8008150:	b1b3      	cbz	r3, 8008180 <_reclaim_reent+0xa4>
 8008152:	4620      	mov	r0, r4
 8008154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008158:	4718      	bx	r3
 800815a:	5949      	ldr	r1, [r1, r5]
 800815c:	b941      	cbnz	r1, 8008170 <_reclaim_reent+0x94>
 800815e:	3504      	adds	r5, #4
 8008160:	69e3      	ldr	r3, [r4, #28]
 8008162:	2d80      	cmp	r5, #128	; 0x80
 8008164:	68d9      	ldr	r1, [r3, #12]
 8008166:	d1f8      	bne.n	800815a <_reclaim_reent+0x7e>
 8008168:	4620      	mov	r0, r4
 800816a:	f000 f847 	bl	80081fc <_free_r>
 800816e:	e7c0      	b.n	80080f2 <_reclaim_reent+0x16>
 8008170:	680e      	ldr	r6, [r1, #0]
 8008172:	4620      	mov	r0, r4
 8008174:	f000 f842 	bl	80081fc <_free_r>
 8008178:	4631      	mov	r1, r6
 800817a:	e7ef      	b.n	800815c <_reclaim_reent+0x80>
 800817c:	2500      	movs	r5, #0
 800817e:	e7ef      	b.n	8008160 <_reclaim_reent+0x84>
 8008180:	bd70      	pop	{r4, r5, r6, pc}
 8008182:	bf00      	nop
 8008184:	2000007c 	.word	0x2000007c

08008188 <__errno>:
 8008188:	4b01      	ldr	r3, [pc, #4]	; (8008190 <__errno+0x8>)
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	2000007c 	.word	0x2000007c

08008194 <__libc_init_array>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4d0d      	ldr	r5, [pc, #52]	; (80081cc <__libc_init_array+0x38>)
 8008198:	4c0d      	ldr	r4, [pc, #52]	; (80081d0 <__libc_init_array+0x3c>)
 800819a:	1b64      	subs	r4, r4, r5
 800819c:	10a4      	asrs	r4, r4, #2
 800819e:	2600      	movs	r6, #0
 80081a0:	42a6      	cmp	r6, r4
 80081a2:	d109      	bne.n	80081b8 <__libc_init_array+0x24>
 80081a4:	4d0b      	ldr	r5, [pc, #44]	; (80081d4 <__libc_init_array+0x40>)
 80081a6:	4c0c      	ldr	r4, [pc, #48]	; (80081d8 <__libc_init_array+0x44>)
 80081a8:	f000 fc6a 	bl	8008a80 <_init>
 80081ac:	1b64      	subs	r4, r4, r5
 80081ae:	10a4      	asrs	r4, r4, #2
 80081b0:	2600      	movs	r6, #0
 80081b2:	42a6      	cmp	r6, r4
 80081b4:	d105      	bne.n	80081c2 <__libc_init_array+0x2e>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081bc:	4798      	blx	r3
 80081be:	3601      	adds	r6, #1
 80081c0:	e7ee      	b.n	80081a0 <__libc_init_array+0xc>
 80081c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c6:	4798      	blx	r3
 80081c8:	3601      	adds	r6, #1
 80081ca:	e7f2      	b.n	80081b2 <__libc_init_array+0x1e>
 80081cc:	08008d20 	.word	0x08008d20
 80081d0:	08008d20 	.word	0x08008d20
 80081d4:	08008d20 	.word	0x08008d20
 80081d8:	08008d24 	.word	0x08008d24

080081dc <__retarget_lock_acquire_recursive>:
 80081dc:	4770      	bx	lr

080081de <__retarget_lock_release_recursive>:
 80081de:	4770      	bx	lr

080081e0 <memcpy>:
 80081e0:	440a      	add	r2, r1
 80081e2:	4291      	cmp	r1, r2
 80081e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80081e8:	d100      	bne.n	80081ec <memcpy+0xc>
 80081ea:	4770      	bx	lr
 80081ec:	b510      	push	{r4, lr}
 80081ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f6:	4291      	cmp	r1, r2
 80081f8:	d1f9      	bne.n	80081ee <memcpy+0xe>
 80081fa:	bd10      	pop	{r4, pc}

080081fc <_free_r>:
 80081fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081fe:	2900      	cmp	r1, #0
 8008200:	d044      	beq.n	800828c <_free_r+0x90>
 8008202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008206:	9001      	str	r0, [sp, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f1a1 0404 	sub.w	r4, r1, #4
 800820e:	bfb8      	it	lt
 8008210:	18e4      	addlt	r4, r4, r3
 8008212:	f000 f8df 	bl	80083d4 <__malloc_lock>
 8008216:	4a1e      	ldr	r2, [pc, #120]	; (8008290 <_free_r+0x94>)
 8008218:	9801      	ldr	r0, [sp, #4]
 800821a:	6813      	ldr	r3, [r2, #0]
 800821c:	b933      	cbnz	r3, 800822c <_free_r+0x30>
 800821e:	6063      	str	r3, [r4, #4]
 8008220:	6014      	str	r4, [r2, #0]
 8008222:	b003      	add	sp, #12
 8008224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008228:	f000 b8da 	b.w	80083e0 <__malloc_unlock>
 800822c:	42a3      	cmp	r3, r4
 800822e:	d908      	bls.n	8008242 <_free_r+0x46>
 8008230:	6825      	ldr	r5, [r4, #0]
 8008232:	1961      	adds	r1, r4, r5
 8008234:	428b      	cmp	r3, r1
 8008236:	bf01      	itttt	eq
 8008238:	6819      	ldreq	r1, [r3, #0]
 800823a:	685b      	ldreq	r3, [r3, #4]
 800823c:	1949      	addeq	r1, r1, r5
 800823e:	6021      	streq	r1, [r4, #0]
 8008240:	e7ed      	b.n	800821e <_free_r+0x22>
 8008242:	461a      	mov	r2, r3
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	b10b      	cbz	r3, 800824c <_free_r+0x50>
 8008248:	42a3      	cmp	r3, r4
 800824a:	d9fa      	bls.n	8008242 <_free_r+0x46>
 800824c:	6811      	ldr	r1, [r2, #0]
 800824e:	1855      	adds	r5, r2, r1
 8008250:	42a5      	cmp	r5, r4
 8008252:	d10b      	bne.n	800826c <_free_r+0x70>
 8008254:	6824      	ldr	r4, [r4, #0]
 8008256:	4421      	add	r1, r4
 8008258:	1854      	adds	r4, r2, r1
 800825a:	42a3      	cmp	r3, r4
 800825c:	6011      	str	r1, [r2, #0]
 800825e:	d1e0      	bne.n	8008222 <_free_r+0x26>
 8008260:	681c      	ldr	r4, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	6053      	str	r3, [r2, #4]
 8008266:	440c      	add	r4, r1
 8008268:	6014      	str	r4, [r2, #0]
 800826a:	e7da      	b.n	8008222 <_free_r+0x26>
 800826c:	d902      	bls.n	8008274 <_free_r+0x78>
 800826e:	230c      	movs	r3, #12
 8008270:	6003      	str	r3, [r0, #0]
 8008272:	e7d6      	b.n	8008222 <_free_r+0x26>
 8008274:	6825      	ldr	r5, [r4, #0]
 8008276:	1961      	adds	r1, r4, r5
 8008278:	428b      	cmp	r3, r1
 800827a:	bf04      	itt	eq
 800827c:	6819      	ldreq	r1, [r3, #0]
 800827e:	685b      	ldreq	r3, [r3, #4]
 8008280:	6063      	str	r3, [r4, #4]
 8008282:	bf04      	itt	eq
 8008284:	1949      	addeq	r1, r1, r5
 8008286:	6021      	streq	r1, [r4, #0]
 8008288:	6054      	str	r4, [r2, #4]
 800828a:	e7ca      	b.n	8008222 <_free_r+0x26>
 800828c:	b003      	add	sp, #12
 800828e:	bd30      	pop	{r4, r5, pc}
 8008290:	20003894 	.word	0x20003894

08008294 <sbrk_aligned>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	4e0e      	ldr	r6, [pc, #56]	; (80082d0 <sbrk_aligned+0x3c>)
 8008298:	460c      	mov	r4, r1
 800829a:	6831      	ldr	r1, [r6, #0]
 800829c:	4605      	mov	r5, r0
 800829e:	b911      	cbnz	r1, 80082a6 <sbrk_aligned+0x12>
 80082a0:	f000 fba6 	bl	80089f0 <_sbrk_r>
 80082a4:	6030      	str	r0, [r6, #0]
 80082a6:	4621      	mov	r1, r4
 80082a8:	4628      	mov	r0, r5
 80082aa:	f000 fba1 	bl	80089f0 <_sbrk_r>
 80082ae:	1c43      	adds	r3, r0, #1
 80082b0:	d00a      	beq.n	80082c8 <sbrk_aligned+0x34>
 80082b2:	1cc4      	adds	r4, r0, #3
 80082b4:	f024 0403 	bic.w	r4, r4, #3
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d007      	beq.n	80082cc <sbrk_aligned+0x38>
 80082bc:	1a21      	subs	r1, r4, r0
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 fb96 	bl	80089f0 <_sbrk_r>
 80082c4:	3001      	adds	r0, #1
 80082c6:	d101      	bne.n	80082cc <sbrk_aligned+0x38>
 80082c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80082cc:	4620      	mov	r0, r4
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	20003898 	.word	0x20003898

080082d4 <_malloc_r>:
 80082d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d8:	1ccd      	adds	r5, r1, #3
 80082da:	f025 0503 	bic.w	r5, r5, #3
 80082de:	3508      	adds	r5, #8
 80082e0:	2d0c      	cmp	r5, #12
 80082e2:	bf38      	it	cc
 80082e4:	250c      	movcc	r5, #12
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	4607      	mov	r7, r0
 80082ea:	db01      	blt.n	80082f0 <_malloc_r+0x1c>
 80082ec:	42a9      	cmp	r1, r5
 80082ee:	d905      	bls.n	80082fc <_malloc_r+0x28>
 80082f0:	230c      	movs	r3, #12
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	2600      	movs	r6, #0
 80082f6:	4630      	mov	r0, r6
 80082f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083d0 <_malloc_r+0xfc>
 8008300:	f000 f868 	bl	80083d4 <__malloc_lock>
 8008304:	f8d8 3000 	ldr.w	r3, [r8]
 8008308:	461c      	mov	r4, r3
 800830a:	bb5c      	cbnz	r4, 8008364 <_malloc_r+0x90>
 800830c:	4629      	mov	r1, r5
 800830e:	4638      	mov	r0, r7
 8008310:	f7ff ffc0 	bl	8008294 <sbrk_aligned>
 8008314:	1c43      	adds	r3, r0, #1
 8008316:	4604      	mov	r4, r0
 8008318:	d155      	bne.n	80083c6 <_malloc_r+0xf2>
 800831a:	f8d8 4000 	ldr.w	r4, [r8]
 800831e:	4626      	mov	r6, r4
 8008320:	2e00      	cmp	r6, #0
 8008322:	d145      	bne.n	80083b0 <_malloc_r+0xdc>
 8008324:	2c00      	cmp	r4, #0
 8008326:	d048      	beq.n	80083ba <_malloc_r+0xe6>
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	4631      	mov	r1, r6
 800832c:	4638      	mov	r0, r7
 800832e:	eb04 0903 	add.w	r9, r4, r3
 8008332:	f000 fb5d 	bl	80089f0 <_sbrk_r>
 8008336:	4581      	cmp	r9, r0
 8008338:	d13f      	bne.n	80083ba <_malloc_r+0xe6>
 800833a:	6821      	ldr	r1, [r4, #0]
 800833c:	1a6d      	subs	r5, r5, r1
 800833e:	4629      	mov	r1, r5
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff ffa7 	bl	8008294 <sbrk_aligned>
 8008346:	3001      	adds	r0, #1
 8008348:	d037      	beq.n	80083ba <_malloc_r+0xe6>
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	442b      	add	r3, r5
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	f8d8 3000 	ldr.w	r3, [r8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d038      	beq.n	80083ca <_malloc_r+0xf6>
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	42a2      	cmp	r2, r4
 800835c:	d12b      	bne.n	80083b6 <_malloc_r+0xe2>
 800835e:	2200      	movs	r2, #0
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	e00f      	b.n	8008384 <_malloc_r+0xb0>
 8008364:	6822      	ldr	r2, [r4, #0]
 8008366:	1b52      	subs	r2, r2, r5
 8008368:	d41f      	bmi.n	80083aa <_malloc_r+0xd6>
 800836a:	2a0b      	cmp	r2, #11
 800836c:	d917      	bls.n	800839e <_malloc_r+0xca>
 800836e:	1961      	adds	r1, r4, r5
 8008370:	42a3      	cmp	r3, r4
 8008372:	6025      	str	r5, [r4, #0]
 8008374:	bf18      	it	ne
 8008376:	6059      	strne	r1, [r3, #4]
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	bf08      	it	eq
 800837c:	f8c8 1000 	streq.w	r1, [r8]
 8008380:	5162      	str	r2, [r4, r5]
 8008382:	604b      	str	r3, [r1, #4]
 8008384:	4638      	mov	r0, r7
 8008386:	f104 060b 	add.w	r6, r4, #11
 800838a:	f000 f829 	bl	80083e0 <__malloc_unlock>
 800838e:	f026 0607 	bic.w	r6, r6, #7
 8008392:	1d23      	adds	r3, r4, #4
 8008394:	1af2      	subs	r2, r6, r3
 8008396:	d0ae      	beq.n	80082f6 <_malloc_r+0x22>
 8008398:	1b9b      	subs	r3, r3, r6
 800839a:	50a3      	str	r3, [r4, r2]
 800839c:	e7ab      	b.n	80082f6 <_malloc_r+0x22>
 800839e:	42a3      	cmp	r3, r4
 80083a0:	6862      	ldr	r2, [r4, #4]
 80083a2:	d1dd      	bne.n	8008360 <_malloc_r+0x8c>
 80083a4:	f8c8 2000 	str.w	r2, [r8]
 80083a8:	e7ec      	b.n	8008384 <_malloc_r+0xb0>
 80083aa:	4623      	mov	r3, r4
 80083ac:	6864      	ldr	r4, [r4, #4]
 80083ae:	e7ac      	b.n	800830a <_malloc_r+0x36>
 80083b0:	4634      	mov	r4, r6
 80083b2:	6876      	ldr	r6, [r6, #4]
 80083b4:	e7b4      	b.n	8008320 <_malloc_r+0x4c>
 80083b6:	4613      	mov	r3, r2
 80083b8:	e7cc      	b.n	8008354 <_malloc_r+0x80>
 80083ba:	230c      	movs	r3, #12
 80083bc:	603b      	str	r3, [r7, #0]
 80083be:	4638      	mov	r0, r7
 80083c0:	f000 f80e 	bl	80083e0 <__malloc_unlock>
 80083c4:	e797      	b.n	80082f6 <_malloc_r+0x22>
 80083c6:	6025      	str	r5, [r4, #0]
 80083c8:	e7dc      	b.n	8008384 <_malloc_r+0xb0>
 80083ca:	605b      	str	r3, [r3, #4]
 80083cc:	deff      	udf	#255	; 0xff
 80083ce:	bf00      	nop
 80083d0:	20003894 	.word	0x20003894

080083d4 <__malloc_lock>:
 80083d4:	4801      	ldr	r0, [pc, #4]	; (80083dc <__malloc_lock+0x8>)
 80083d6:	f7ff bf01 	b.w	80081dc <__retarget_lock_acquire_recursive>
 80083da:	bf00      	nop
 80083dc:	20003890 	.word	0x20003890

080083e0 <__malloc_unlock>:
 80083e0:	4801      	ldr	r0, [pc, #4]	; (80083e8 <__malloc_unlock+0x8>)
 80083e2:	f7ff befc 	b.w	80081de <__retarget_lock_release_recursive>
 80083e6:	bf00      	nop
 80083e8:	20003890 	.word	0x20003890

080083ec <__ssputs_r>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	688e      	ldr	r6, [r1, #8]
 80083f2:	461f      	mov	r7, r3
 80083f4:	42be      	cmp	r6, r7
 80083f6:	680b      	ldr	r3, [r1, #0]
 80083f8:	4682      	mov	sl, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	4690      	mov	r8, r2
 80083fe:	d82c      	bhi.n	800845a <__ssputs_r+0x6e>
 8008400:	898a      	ldrh	r2, [r1, #12]
 8008402:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008406:	d026      	beq.n	8008456 <__ssputs_r+0x6a>
 8008408:	6965      	ldr	r5, [r4, #20]
 800840a:	6909      	ldr	r1, [r1, #16]
 800840c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008410:	eba3 0901 	sub.w	r9, r3, r1
 8008414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008418:	1c7b      	adds	r3, r7, #1
 800841a:	444b      	add	r3, r9
 800841c:	106d      	asrs	r5, r5, #1
 800841e:	429d      	cmp	r5, r3
 8008420:	bf38      	it	cc
 8008422:	461d      	movcc	r5, r3
 8008424:	0553      	lsls	r3, r2, #21
 8008426:	d527      	bpl.n	8008478 <__ssputs_r+0x8c>
 8008428:	4629      	mov	r1, r5
 800842a:	f7ff ff53 	bl	80082d4 <_malloc_r>
 800842e:	4606      	mov	r6, r0
 8008430:	b360      	cbz	r0, 800848c <__ssputs_r+0xa0>
 8008432:	6921      	ldr	r1, [r4, #16]
 8008434:	464a      	mov	r2, r9
 8008436:	f7ff fed3 	bl	80081e0 <memcpy>
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	6126      	str	r6, [r4, #16]
 8008448:	6165      	str	r5, [r4, #20]
 800844a:	444e      	add	r6, r9
 800844c:	eba5 0509 	sub.w	r5, r5, r9
 8008450:	6026      	str	r6, [r4, #0]
 8008452:	60a5      	str	r5, [r4, #8]
 8008454:	463e      	mov	r6, r7
 8008456:	42be      	cmp	r6, r7
 8008458:	d900      	bls.n	800845c <__ssputs_r+0x70>
 800845a:	463e      	mov	r6, r7
 800845c:	6820      	ldr	r0, [r4, #0]
 800845e:	4632      	mov	r2, r6
 8008460:	4641      	mov	r1, r8
 8008462:	f000 faab 	bl	80089bc <memmove>
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	1b9b      	subs	r3, r3, r6
 800846a:	60a3      	str	r3, [r4, #8]
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	4433      	add	r3, r6
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	2000      	movs	r0, #0
 8008474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008478:	462a      	mov	r2, r5
 800847a:	f000 fac9 	bl	8008a10 <_realloc_r>
 800847e:	4606      	mov	r6, r0
 8008480:	2800      	cmp	r0, #0
 8008482:	d1e0      	bne.n	8008446 <__ssputs_r+0x5a>
 8008484:	6921      	ldr	r1, [r4, #16]
 8008486:	4650      	mov	r0, sl
 8008488:	f7ff feb8 	bl	80081fc <_free_r>
 800848c:	230c      	movs	r3, #12
 800848e:	f8ca 3000 	str.w	r3, [sl]
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008498:	81a3      	strh	r3, [r4, #12]
 800849a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800849e:	e7e9      	b.n	8008474 <__ssputs_r+0x88>

080084a0 <_svfiprintf_r>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	4698      	mov	r8, r3
 80084a6:	898b      	ldrh	r3, [r1, #12]
 80084a8:	061b      	lsls	r3, r3, #24
 80084aa:	b09d      	sub	sp, #116	; 0x74
 80084ac:	4607      	mov	r7, r0
 80084ae:	460d      	mov	r5, r1
 80084b0:	4614      	mov	r4, r2
 80084b2:	d50e      	bpl.n	80084d2 <_svfiprintf_r+0x32>
 80084b4:	690b      	ldr	r3, [r1, #16]
 80084b6:	b963      	cbnz	r3, 80084d2 <_svfiprintf_r+0x32>
 80084b8:	2140      	movs	r1, #64	; 0x40
 80084ba:	f7ff ff0b 	bl	80082d4 <_malloc_r>
 80084be:	6028      	str	r0, [r5, #0]
 80084c0:	6128      	str	r0, [r5, #16]
 80084c2:	b920      	cbnz	r0, 80084ce <_svfiprintf_r+0x2e>
 80084c4:	230c      	movs	r3, #12
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084cc:	e0d0      	b.n	8008670 <_svfiprintf_r+0x1d0>
 80084ce:	2340      	movs	r3, #64	; 0x40
 80084d0:	616b      	str	r3, [r5, #20]
 80084d2:	2300      	movs	r3, #0
 80084d4:	9309      	str	r3, [sp, #36]	; 0x24
 80084d6:	2320      	movs	r3, #32
 80084d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80084e0:	2330      	movs	r3, #48	; 0x30
 80084e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008688 <_svfiprintf_r+0x1e8>
 80084e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084ea:	f04f 0901 	mov.w	r9, #1
 80084ee:	4623      	mov	r3, r4
 80084f0:	469a      	mov	sl, r3
 80084f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084f6:	b10a      	cbz	r2, 80084fc <_svfiprintf_r+0x5c>
 80084f8:	2a25      	cmp	r2, #37	; 0x25
 80084fa:	d1f9      	bne.n	80084f0 <_svfiprintf_r+0x50>
 80084fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008500:	d00b      	beq.n	800851a <_svfiprintf_r+0x7a>
 8008502:	465b      	mov	r3, fp
 8008504:	4622      	mov	r2, r4
 8008506:	4629      	mov	r1, r5
 8008508:	4638      	mov	r0, r7
 800850a:	f7ff ff6f 	bl	80083ec <__ssputs_r>
 800850e:	3001      	adds	r0, #1
 8008510:	f000 80a9 	beq.w	8008666 <_svfiprintf_r+0x1c6>
 8008514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008516:	445a      	add	r2, fp
 8008518:	9209      	str	r2, [sp, #36]	; 0x24
 800851a:	f89a 3000 	ldrb.w	r3, [sl]
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 80a1 	beq.w	8008666 <_svfiprintf_r+0x1c6>
 8008524:	2300      	movs	r3, #0
 8008526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800852a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800852e:	f10a 0a01 	add.w	sl, sl, #1
 8008532:	9304      	str	r3, [sp, #16]
 8008534:	9307      	str	r3, [sp, #28]
 8008536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800853a:	931a      	str	r3, [sp, #104]	; 0x68
 800853c:	4654      	mov	r4, sl
 800853e:	2205      	movs	r2, #5
 8008540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008544:	4850      	ldr	r0, [pc, #320]	; (8008688 <_svfiprintf_r+0x1e8>)
 8008546:	f7f7 fe43 	bl	80001d0 <memchr>
 800854a:	9a04      	ldr	r2, [sp, #16]
 800854c:	b9d8      	cbnz	r0, 8008586 <_svfiprintf_r+0xe6>
 800854e:	06d0      	lsls	r0, r2, #27
 8008550:	bf44      	itt	mi
 8008552:	2320      	movmi	r3, #32
 8008554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008558:	0711      	lsls	r1, r2, #28
 800855a:	bf44      	itt	mi
 800855c:	232b      	movmi	r3, #43	; 0x2b
 800855e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008562:	f89a 3000 	ldrb.w	r3, [sl]
 8008566:	2b2a      	cmp	r3, #42	; 0x2a
 8008568:	d015      	beq.n	8008596 <_svfiprintf_r+0xf6>
 800856a:	9a07      	ldr	r2, [sp, #28]
 800856c:	4654      	mov	r4, sl
 800856e:	2000      	movs	r0, #0
 8008570:	f04f 0c0a 	mov.w	ip, #10
 8008574:	4621      	mov	r1, r4
 8008576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800857a:	3b30      	subs	r3, #48	; 0x30
 800857c:	2b09      	cmp	r3, #9
 800857e:	d94d      	bls.n	800861c <_svfiprintf_r+0x17c>
 8008580:	b1b0      	cbz	r0, 80085b0 <_svfiprintf_r+0x110>
 8008582:	9207      	str	r2, [sp, #28]
 8008584:	e014      	b.n	80085b0 <_svfiprintf_r+0x110>
 8008586:	eba0 0308 	sub.w	r3, r0, r8
 800858a:	fa09 f303 	lsl.w	r3, r9, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	9304      	str	r3, [sp, #16]
 8008592:	46a2      	mov	sl, r4
 8008594:	e7d2      	b.n	800853c <_svfiprintf_r+0x9c>
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	1d19      	adds	r1, r3, #4
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	9103      	str	r1, [sp, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bfbb      	ittet	lt
 80085a2:	425b      	neglt	r3, r3
 80085a4:	f042 0202 	orrlt.w	r2, r2, #2
 80085a8:	9307      	strge	r3, [sp, #28]
 80085aa:	9307      	strlt	r3, [sp, #28]
 80085ac:	bfb8      	it	lt
 80085ae:	9204      	strlt	r2, [sp, #16]
 80085b0:	7823      	ldrb	r3, [r4, #0]
 80085b2:	2b2e      	cmp	r3, #46	; 0x2e
 80085b4:	d10c      	bne.n	80085d0 <_svfiprintf_r+0x130>
 80085b6:	7863      	ldrb	r3, [r4, #1]
 80085b8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ba:	d134      	bne.n	8008626 <_svfiprintf_r+0x186>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	1d1a      	adds	r2, r3, #4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	9203      	str	r2, [sp, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfb8      	it	lt
 80085c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80085cc:	3402      	adds	r4, #2
 80085ce:	9305      	str	r3, [sp, #20]
 80085d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008698 <_svfiprintf_r+0x1f8>
 80085d4:	7821      	ldrb	r1, [r4, #0]
 80085d6:	2203      	movs	r2, #3
 80085d8:	4650      	mov	r0, sl
 80085da:	f7f7 fdf9 	bl	80001d0 <memchr>
 80085de:	b138      	cbz	r0, 80085f0 <_svfiprintf_r+0x150>
 80085e0:	9b04      	ldr	r3, [sp, #16]
 80085e2:	eba0 000a 	sub.w	r0, r0, sl
 80085e6:	2240      	movs	r2, #64	; 0x40
 80085e8:	4082      	lsls	r2, r0
 80085ea:	4313      	orrs	r3, r2
 80085ec:	3401      	adds	r4, #1
 80085ee:	9304      	str	r3, [sp, #16]
 80085f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f4:	4825      	ldr	r0, [pc, #148]	; (800868c <_svfiprintf_r+0x1ec>)
 80085f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085fa:	2206      	movs	r2, #6
 80085fc:	f7f7 fde8 	bl	80001d0 <memchr>
 8008600:	2800      	cmp	r0, #0
 8008602:	d038      	beq.n	8008676 <_svfiprintf_r+0x1d6>
 8008604:	4b22      	ldr	r3, [pc, #136]	; (8008690 <_svfiprintf_r+0x1f0>)
 8008606:	bb1b      	cbnz	r3, 8008650 <_svfiprintf_r+0x1b0>
 8008608:	9b03      	ldr	r3, [sp, #12]
 800860a:	3307      	adds	r3, #7
 800860c:	f023 0307 	bic.w	r3, r3, #7
 8008610:	3308      	adds	r3, #8
 8008612:	9303      	str	r3, [sp, #12]
 8008614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008616:	4433      	add	r3, r6
 8008618:	9309      	str	r3, [sp, #36]	; 0x24
 800861a:	e768      	b.n	80084ee <_svfiprintf_r+0x4e>
 800861c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008620:	460c      	mov	r4, r1
 8008622:	2001      	movs	r0, #1
 8008624:	e7a6      	b.n	8008574 <_svfiprintf_r+0xd4>
 8008626:	2300      	movs	r3, #0
 8008628:	3401      	adds	r4, #1
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	4619      	mov	r1, r3
 800862e:	f04f 0c0a 	mov.w	ip, #10
 8008632:	4620      	mov	r0, r4
 8008634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008638:	3a30      	subs	r2, #48	; 0x30
 800863a:	2a09      	cmp	r2, #9
 800863c:	d903      	bls.n	8008646 <_svfiprintf_r+0x1a6>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0c6      	beq.n	80085d0 <_svfiprintf_r+0x130>
 8008642:	9105      	str	r1, [sp, #20]
 8008644:	e7c4      	b.n	80085d0 <_svfiprintf_r+0x130>
 8008646:	fb0c 2101 	mla	r1, ip, r1, r2
 800864a:	4604      	mov	r4, r0
 800864c:	2301      	movs	r3, #1
 800864e:	e7f0      	b.n	8008632 <_svfiprintf_r+0x192>
 8008650:	ab03      	add	r3, sp, #12
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	462a      	mov	r2, r5
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <_svfiprintf_r+0x1f4>)
 8008658:	a904      	add	r1, sp, #16
 800865a:	4638      	mov	r0, r7
 800865c:	f3af 8000 	nop.w
 8008660:	1c42      	adds	r2, r0, #1
 8008662:	4606      	mov	r6, r0
 8008664:	d1d6      	bne.n	8008614 <_svfiprintf_r+0x174>
 8008666:	89ab      	ldrh	r3, [r5, #12]
 8008668:	065b      	lsls	r3, r3, #25
 800866a:	f53f af2d 	bmi.w	80084c8 <_svfiprintf_r+0x28>
 800866e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008670:	b01d      	add	sp, #116	; 0x74
 8008672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008676:	ab03      	add	r3, sp, #12
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	462a      	mov	r2, r5
 800867c:	4b05      	ldr	r3, [pc, #20]	; (8008694 <_svfiprintf_r+0x1f4>)
 800867e:	a904      	add	r1, sp, #16
 8008680:	4638      	mov	r0, r7
 8008682:	f000 f879 	bl	8008778 <_printf_i>
 8008686:	e7eb      	b.n	8008660 <_svfiprintf_r+0x1c0>
 8008688:	08008ce4 	.word	0x08008ce4
 800868c:	08008cee 	.word	0x08008cee
 8008690:	00000000 	.word	0x00000000
 8008694:	080083ed 	.word	0x080083ed
 8008698:	08008cea 	.word	0x08008cea

0800869c <_printf_common>:
 800869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	4616      	mov	r6, r2
 80086a2:	4699      	mov	r9, r3
 80086a4:	688a      	ldr	r2, [r1, #8]
 80086a6:	690b      	ldr	r3, [r1, #16]
 80086a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	bfb8      	it	lt
 80086b0:	4613      	movlt	r3, r2
 80086b2:	6033      	str	r3, [r6, #0]
 80086b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086b8:	4607      	mov	r7, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	b10a      	cbz	r2, 80086c2 <_printf_common+0x26>
 80086be:	3301      	adds	r3, #1
 80086c0:	6033      	str	r3, [r6, #0]
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	0699      	lsls	r1, r3, #26
 80086c6:	bf42      	ittt	mi
 80086c8:	6833      	ldrmi	r3, [r6, #0]
 80086ca:	3302      	addmi	r3, #2
 80086cc:	6033      	strmi	r3, [r6, #0]
 80086ce:	6825      	ldr	r5, [r4, #0]
 80086d0:	f015 0506 	ands.w	r5, r5, #6
 80086d4:	d106      	bne.n	80086e4 <_printf_common+0x48>
 80086d6:	f104 0a19 	add.w	sl, r4, #25
 80086da:	68e3      	ldr	r3, [r4, #12]
 80086dc:	6832      	ldr	r2, [r6, #0]
 80086de:	1a9b      	subs	r3, r3, r2
 80086e0:	42ab      	cmp	r3, r5
 80086e2:	dc26      	bgt.n	8008732 <_printf_common+0x96>
 80086e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086e8:	1e13      	subs	r3, r2, #0
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	bf18      	it	ne
 80086ee:	2301      	movne	r3, #1
 80086f0:	0692      	lsls	r2, r2, #26
 80086f2:	d42b      	bmi.n	800874c <_printf_common+0xb0>
 80086f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086f8:	4649      	mov	r1, r9
 80086fa:	4638      	mov	r0, r7
 80086fc:	47c0      	blx	r8
 80086fe:	3001      	adds	r0, #1
 8008700:	d01e      	beq.n	8008740 <_printf_common+0xa4>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	6922      	ldr	r2, [r4, #16]
 8008706:	f003 0306 	and.w	r3, r3, #6
 800870a:	2b04      	cmp	r3, #4
 800870c:	bf02      	ittt	eq
 800870e:	68e5      	ldreq	r5, [r4, #12]
 8008710:	6833      	ldreq	r3, [r6, #0]
 8008712:	1aed      	subeq	r5, r5, r3
 8008714:	68a3      	ldr	r3, [r4, #8]
 8008716:	bf0c      	ite	eq
 8008718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800871c:	2500      	movne	r5, #0
 800871e:	4293      	cmp	r3, r2
 8008720:	bfc4      	itt	gt
 8008722:	1a9b      	subgt	r3, r3, r2
 8008724:	18ed      	addgt	r5, r5, r3
 8008726:	2600      	movs	r6, #0
 8008728:	341a      	adds	r4, #26
 800872a:	42b5      	cmp	r5, r6
 800872c:	d11a      	bne.n	8008764 <_printf_common+0xc8>
 800872e:	2000      	movs	r0, #0
 8008730:	e008      	b.n	8008744 <_printf_common+0xa8>
 8008732:	2301      	movs	r3, #1
 8008734:	4652      	mov	r2, sl
 8008736:	4649      	mov	r1, r9
 8008738:	4638      	mov	r0, r7
 800873a:	47c0      	blx	r8
 800873c:	3001      	adds	r0, #1
 800873e:	d103      	bne.n	8008748 <_printf_common+0xac>
 8008740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008748:	3501      	adds	r5, #1
 800874a:	e7c6      	b.n	80086da <_printf_common+0x3e>
 800874c:	18e1      	adds	r1, r4, r3
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	2030      	movs	r0, #48	; 0x30
 8008752:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008756:	4422      	add	r2, r4
 8008758:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800875c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008760:	3302      	adds	r3, #2
 8008762:	e7c7      	b.n	80086f4 <_printf_common+0x58>
 8008764:	2301      	movs	r3, #1
 8008766:	4622      	mov	r2, r4
 8008768:	4649      	mov	r1, r9
 800876a:	4638      	mov	r0, r7
 800876c:	47c0      	blx	r8
 800876e:	3001      	adds	r0, #1
 8008770:	d0e6      	beq.n	8008740 <_printf_common+0xa4>
 8008772:	3601      	adds	r6, #1
 8008774:	e7d9      	b.n	800872a <_printf_common+0x8e>
	...

08008778 <_printf_i>:
 8008778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	7e0f      	ldrb	r7, [r1, #24]
 800877e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008780:	2f78      	cmp	r7, #120	; 0x78
 8008782:	4691      	mov	r9, r2
 8008784:	4680      	mov	r8, r0
 8008786:	460c      	mov	r4, r1
 8008788:	469a      	mov	sl, r3
 800878a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800878e:	d807      	bhi.n	80087a0 <_printf_i+0x28>
 8008790:	2f62      	cmp	r7, #98	; 0x62
 8008792:	d80a      	bhi.n	80087aa <_printf_i+0x32>
 8008794:	2f00      	cmp	r7, #0
 8008796:	f000 80d4 	beq.w	8008942 <_printf_i+0x1ca>
 800879a:	2f58      	cmp	r7, #88	; 0x58
 800879c:	f000 80c0 	beq.w	8008920 <_printf_i+0x1a8>
 80087a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087a8:	e03a      	b.n	8008820 <_printf_i+0xa8>
 80087aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087ae:	2b15      	cmp	r3, #21
 80087b0:	d8f6      	bhi.n	80087a0 <_printf_i+0x28>
 80087b2:	a101      	add	r1, pc, #4	; (adr r1, 80087b8 <_printf_i+0x40>)
 80087b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087b8:	08008811 	.word	0x08008811
 80087bc:	08008825 	.word	0x08008825
 80087c0:	080087a1 	.word	0x080087a1
 80087c4:	080087a1 	.word	0x080087a1
 80087c8:	080087a1 	.word	0x080087a1
 80087cc:	080087a1 	.word	0x080087a1
 80087d0:	08008825 	.word	0x08008825
 80087d4:	080087a1 	.word	0x080087a1
 80087d8:	080087a1 	.word	0x080087a1
 80087dc:	080087a1 	.word	0x080087a1
 80087e0:	080087a1 	.word	0x080087a1
 80087e4:	08008929 	.word	0x08008929
 80087e8:	08008851 	.word	0x08008851
 80087ec:	080088e3 	.word	0x080088e3
 80087f0:	080087a1 	.word	0x080087a1
 80087f4:	080087a1 	.word	0x080087a1
 80087f8:	0800894b 	.word	0x0800894b
 80087fc:	080087a1 	.word	0x080087a1
 8008800:	08008851 	.word	0x08008851
 8008804:	080087a1 	.word	0x080087a1
 8008808:	080087a1 	.word	0x080087a1
 800880c:	080088eb 	.word	0x080088eb
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	1d1a      	adds	r2, r3, #4
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	602a      	str	r2, [r5, #0]
 8008818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800881c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008820:	2301      	movs	r3, #1
 8008822:	e09f      	b.n	8008964 <_printf_i+0x1ec>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	0607      	lsls	r7, r0, #24
 800882a:	f103 0104 	add.w	r1, r3, #4
 800882e:	6029      	str	r1, [r5, #0]
 8008830:	d501      	bpl.n	8008836 <_printf_i+0xbe>
 8008832:	681e      	ldr	r6, [r3, #0]
 8008834:	e003      	b.n	800883e <_printf_i+0xc6>
 8008836:	0646      	lsls	r6, r0, #25
 8008838:	d5fb      	bpl.n	8008832 <_printf_i+0xba>
 800883a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800883e:	2e00      	cmp	r6, #0
 8008840:	da03      	bge.n	800884a <_printf_i+0xd2>
 8008842:	232d      	movs	r3, #45	; 0x2d
 8008844:	4276      	negs	r6, r6
 8008846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800884a:	485a      	ldr	r0, [pc, #360]	; (80089b4 <_printf_i+0x23c>)
 800884c:	230a      	movs	r3, #10
 800884e:	e012      	b.n	8008876 <_printf_i+0xfe>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	6820      	ldr	r0, [r4, #0]
 8008854:	1d19      	adds	r1, r3, #4
 8008856:	6029      	str	r1, [r5, #0]
 8008858:	0605      	lsls	r5, r0, #24
 800885a:	d501      	bpl.n	8008860 <_printf_i+0xe8>
 800885c:	681e      	ldr	r6, [r3, #0]
 800885e:	e002      	b.n	8008866 <_printf_i+0xee>
 8008860:	0641      	lsls	r1, r0, #25
 8008862:	d5fb      	bpl.n	800885c <_printf_i+0xe4>
 8008864:	881e      	ldrh	r6, [r3, #0]
 8008866:	4853      	ldr	r0, [pc, #332]	; (80089b4 <_printf_i+0x23c>)
 8008868:	2f6f      	cmp	r7, #111	; 0x6f
 800886a:	bf0c      	ite	eq
 800886c:	2308      	moveq	r3, #8
 800886e:	230a      	movne	r3, #10
 8008870:	2100      	movs	r1, #0
 8008872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008876:	6865      	ldr	r5, [r4, #4]
 8008878:	60a5      	str	r5, [r4, #8]
 800887a:	2d00      	cmp	r5, #0
 800887c:	bfa2      	ittt	ge
 800887e:	6821      	ldrge	r1, [r4, #0]
 8008880:	f021 0104 	bicge.w	r1, r1, #4
 8008884:	6021      	strge	r1, [r4, #0]
 8008886:	b90e      	cbnz	r6, 800888c <_printf_i+0x114>
 8008888:	2d00      	cmp	r5, #0
 800888a:	d04b      	beq.n	8008924 <_printf_i+0x1ac>
 800888c:	4615      	mov	r5, r2
 800888e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008892:	fb03 6711 	mls	r7, r3, r1, r6
 8008896:	5dc7      	ldrb	r7, [r0, r7]
 8008898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800889c:	4637      	mov	r7, r6
 800889e:	42bb      	cmp	r3, r7
 80088a0:	460e      	mov	r6, r1
 80088a2:	d9f4      	bls.n	800888e <_printf_i+0x116>
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d10b      	bne.n	80088c0 <_printf_i+0x148>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07de      	lsls	r6, r3, #31
 80088ac:	d508      	bpl.n	80088c0 <_printf_i+0x148>
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	6861      	ldr	r1, [r4, #4]
 80088b2:	4299      	cmp	r1, r3
 80088b4:	bfde      	ittt	le
 80088b6:	2330      	movle	r3, #48	; 0x30
 80088b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80088c0:	1b52      	subs	r2, r2, r5
 80088c2:	6122      	str	r2, [r4, #16]
 80088c4:	f8cd a000 	str.w	sl, [sp]
 80088c8:	464b      	mov	r3, r9
 80088ca:	aa03      	add	r2, sp, #12
 80088cc:	4621      	mov	r1, r4
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7ff fee4 	bl	800869c <_printf_common>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d14a      	bne.n	800896e <_printf_i+0x1f6>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088dc:	b004      	add	sp, #16
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	f043 0320 	orr.w	r3, r3, #32
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	4833      	ldr	r0, [pc, #204]	; (80089b8 <_printf_i+0x240>)
 80088ec:	2778      	movs	r7, #120	; 0x78
 80088ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	6829      	ldr	r1, [r5, #0]
 80088f6:	061f      	lsls	r7, r3, #24
 80088f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80088fc:	d402      	bmi.n	8008904 <_printf_i+0x18c>
 80088fe:	065f      	lsls	r7, r3, #25
 8008900:	bf48      	it	mi
 8008902:	b2b6      	uxthmi	r6, r6
 8008904:	07df      	lsls	r7, r3, #31
 8008906:	bf48      	it	mi
 8008908:	f043 0320 	orrmi.w	r3, r3, #32
 800890c:	6029      	str	r1, [r5, #0]
 800890e:	bf48      	it	mi
 8008910:	6023      	strmi	r3, [r4, #0]
 8008912:	b91e      	cbnz	r6, 800891c <_printf_i+0x1a4>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	f023 0320 	bic.w	r3, r3, #32
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	2310      	movs	r3, #16
 800891e:	e7a7      	b.n	8008870 <_printf_i+0xf8>
 8008920:	4824      	ldr	r0, [pc, #144]	; (80089b4 <_printf_i+0x23c>)
 8008922:	e7e4      	b.n	80088ee <_printf_i+0x176>
 8008924:	4615      	mov	r5, r2
 8008926:	e7bd      	b.n	80088a4 <_printf_i+0x12c>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	6826      	ldr	r6, [r4, #0]
 800892c:	6961      	ldr	r1, [r4, #20]
 800892e:	1d18      	adds	r0, r3, #4
 8008930:	6028      	str	r0, [r5, #0]
 8008932:	0635      	lsls	r5, r6, #24
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	d501      	bpl.n	800893c <_printf_i+0x1c4>
 8008938:	6019      	str	r1, [r3, #0]
 800893a:	e002      	b.n	8008942 <_printf_i+0x1ca>
 800893c:	0670      	lsls	r0, r6, #25
 800893e:	d5fb      	bpl.n	8008938 <_printf_i+0x1c0>
 8008940:	8019      	strh	r1, [r3, #0]
 8008942:	2300      	movs	r3, #0
 8008944:	6123      	str	r3, [r4, #16]
 8008946:	4615      	mov	r5, r2
 8008948:	e7bc      	b.n	80088c4 <_printf_i+0x14c>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	1d1a      	adds	r2, r3, #4
 800894e:	602a      	str	r2, [r5, #0]
 8008950:	681d      	ldr	r5, [r3, #0]
 8008952:	6862      	ldr	r2, [r4, #4]
 8008954:	2100      	movs	r1, #0
 8008956:	4628      	mov	r0, r5
 8008958:	f7f7 fc3a 	bl	80001d0 <memchr>
 800895c:	b108      	cbz	r0, 8008962 <_printf_i+0x1ea>
 800895e:	1b40      	subs	r0, r0, r5
 8008960:	6060      	str	r0, [r4, #4]
 8008962:	6863      	ldr	r3, [r4, #4]
 8008964:	6123      	str	r3, [r4, #16]
 8008966:	2300      	movs	r3, #0
 8008968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800896c:	e7aa      	b.n	80088c4 <_printf_i+0x14c>
 800896e:	6923      	ldr	r3, [r4, #16]
 8008970:	462a      	mov	r2, r5
 8008972:	4649      	mov	r1, r9
 8008974:	4640      	mov	r0, r8
 8008976:	47d0      	blx	sl
 8008978:	3001      	adds	r0, #1
 800897a:	d0ad      	beq.n	80088d8 <_printf_i+0x160>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	079b      	lsls	r3, r3, #30
 8008980:	d413      	bmi.n	80089aa <_printf_i+0x232>
 8008982:	68e0      	ldr	r0, [r4, #12]
 8008984:	9b03      	ldr	r3, [sp, #12]
 8008986:	4298      	cmp	r0, r3
 8008988:	bfb8      	it	lt
 800898a:	4618      	movlt	r0, r3
 800898c:	e7a6      	b.n	80088dc <_printf_i+0x164>
 800898e:	2301      	movs	r3, #1
 8008990:	4632      	mov	r2, r6
 8008992:	4649      	mov	r1, r9
 8008994:	4640      	mov	r0, r8
 8008996:	47d0      	blx	sl
 8008998:	3001      	adds	r0, #1
 800899a:	d09d      	beq.n	80088d8 <_printf_i+0x160>
 800899c:	3501      	adds	r5, #1
 800899e:	68e3      	ldr	r3, [r4, #12]
 80089a0:	9903      	ldr	r1, [sp, #12]
 80089a2:	1a5b      	subs	r3, r3, r1
 80089a4:	42ab      	cmp	r3, r5
 80089a6:	dcf2      	bgt.n	800898e <_printf_i+0x216>
 80089a8:	e7eb      	b.n	8008982 <_printf_i+0x20a>
 80089aa:	2500      	movs	r5, #0
 80089ac:	f104 0619 	add.w	r6, r4, #25
 80089b0:	e7f5      	b.n	800899e <_printf_i+0x226>
 80089b2:	bf00      	nop
 80089b4:	08008cf5 	.word	0x08008cf5
 80089b8:	08008d06 	.word	0x08008d06

080089bc <memmove>:
 80089bc:	4288      	cmp	r0, r1
 80089be:	b510      	push	{r4, lr}
 80089c0:	eb01 0402 	add.w	r4, r1, r2
 80089c4:	d902      	bls.n	80089cc <memmove+0x10>
 80089c6:	4284      	cmp	r4, r0
 80089c8:	4623      	mov	r3, r4
 80089ca:	d807      	bhi.n	80089dc <memmove+0x20>
 80089cc:	1e43      	subs	r3, r0, #1
 80089ce:	42a1      	cmp	r1, r4
 80089d0:	d008      	beq.n	80089e4 <memmove+0x28>
 80089d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089da:	e7f8      	b.n	80089ce <memmove+0x12>
 80089dc:	4402      	add	r2, r0
 80089de:	4601      	mov	r1, r0
 80089e0:	428a      	cmp	r2, r1
 80089e2:	d100      	bne.n	80089e6 <memmove+0x2a>
 80089e4:	bd10      	pop	{r4, pc}
 80089e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ee:	e7f7      	b.n	80089e0 <memmove+0x24>

080089f0 <_sbrk_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	4d06      	ldr	r5, [pc, #24]	; (8008a0c <_sbrk_r+0x1c>)
 80089f4:	2300      	movs	r3, #0
 80089f6:	4604      	mov	r4, r0
 80089f8:	4608      	mov	r0, r1
 80089fa:	602b      	str	r3, [r5, #0]
 80089fc:	f7f8 fdb6 	bl	800156c <_sbrk>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d102      	bne.n	8008a0a <_sbrk_r+0x1a>
 8008a04:	682b      	ldr	r3, [r5, #0]
 8008a06:	b103      	cbz	r3, 8008a0a <_sbrk_r+0x1a>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	2000388c 	.word	0x2000388c

08008a10 <_realloc_r>:
 8008a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a14:	4680      	mov	r8, r0
 8008a16:	4614      	mov	r4, r2
 8008a18:	460e      	mov	r6, r1
 8008a1a:	b921      	cbnz	r1, 8008a26 <_realloc_r+0x16>
 8008a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	4611      	mov	r1, r2
 8008a22:	f7ff bc57 	b.w	80082d4 <_malloc_r>
 8008a26:	b92a      	cbnz	r2, 8008a34 <_realloc_r+0x24>
 8008a28:	f7ff fbe8 	bl	80081fc <_free_r>
 8008a2c:	4625      	mov	r5, r4
 8008a2e:	4628      	mov	r0, r5
 8008a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a34:	f000 f81b 	bl	8008a6e <_malloc_usable_size_r>
 8008a38:	4284      	cmp	r4, r0
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	d802      	bhi.n	8008a44 <_realloc_r+0x34>
 8008a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a42:	d812      	bhi.n	8008a6a <_realloc_r+0x5a>
 8008a44:	4621      	mov	r1, r4
 8008a46:	4640      	mov	r0, r8
 8008a48:	f7ff fc44 	bl	80082d4 <_malloc_r>
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d0ed      	beq.n	8008a2e <_realloc_r+0x1e>
 8008a52:	42bc      	cmp	r4, r7
 8008a54:	4622      	mov	r2, r4
 8008a56:	4631      	mov	r1, r6
 8008a58:	bf28      	it	cs
 8008a5a:	463a      	movcs	r2, r7
 8008a5c:	f7ff fbc0 	bl	80081e0 <memcpy>
 8008a60:	4631      	mov	r1, r6
 8008a62:	4640      	mov	r0, r8
 8008a64:	f7ff fbca 	bl	80081fc <_free_r>
 8008a68:	e7e1      	b.n	8008a2e <_realloc_r+0x1e>
 8008a6a:	4635      	mov	r5, r6
 8008a6c:	e7df      	b.n	8008a2e <_realloc_r+0x1e>

08008a6e <_malloc_usable_size_r>:
 8008a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a72:	1f18      	subs	r0, r3, #4
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bfbc      	itt	lt
 8008a78:	580b      	ldrlt	r3, [r1, r0]
 8008a7a:	18c0      	addlt	r0, r0, r3
 8008a7c:	4770      	bx	lr
	...

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
