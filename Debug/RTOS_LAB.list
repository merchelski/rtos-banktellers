
RTOS_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  0800db68  0800db68  0001db68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e564  0800e564  000206e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e564  0800e564  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e56c  0800e56c  000206e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e56c  0800e56c  0001e56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e574  0800e574  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e4  20000000  0800e578  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d88  200006e8  0800ec5c  000206e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004470  0800ec5c  00024470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020714  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cafb  00000000  00000000  00020757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf9  00000000  00000000  0003d252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  00040e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001296  00000000  00000000  00042658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a843  00000000  00000000  000438ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019dc9  00000000  00000000  0006e131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010028c  00000000  00000000  00087efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000778c  00000000  00000000  00188188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018f914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006e8 	.word	0x200006e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db4c 	.word	0x0800db4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006ec 	.word	0x200006ec
 80001cc:	0800db4c 	.word	0x0800db4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   idle_hook_count++;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <vApplicationIdleHook+0x20>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	1c50      	adds	r0, r2, #1
 8000eb0:	f143 0100 	adc.w	r1, r3, #0
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <vApplicationIdleHook+0x20>)
 8000eb6:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20000708 	.word	0x20000708

08000ec8 <init_teller>:
uint16_t total_customer_queue_time = 0;
uint16_t max_customer_queue_time = 0;
uint16_t max_customer_queue_depth = 0;

void init_teller(TELLER_INFO* teller)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	teller->max_wait_time = 0;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
	teller->max_service_time = 0;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
	teller->max_break_time = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
	teller->min_break_time = (uint32_t)(-1);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee8:	60da      	str	r2, [r3, #12]
	teller->total_service_time = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	821a      	strh	r2, [r3, #16]
	teller->total_wait_time = 0;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	831a      	strh	r2, [r3, #24]
	teller->total_waits_taken = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	835a      	strh	r2, [r3, #26]
	teller->total_break_time = 0;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	829a      	strh	r2, [r3, #20]
	teller->total_breaks_taken = 0;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	82da      	strh	r2, [r3, #22]
	teller->total_customers_serviced = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	825a      	strh	r2, [r3, #18]
	teller->next_available_natural_break_time = rand_range(MIN_TELLER_BREAK_WAIT, MAX_TELLER_BREAK_WAIT);
 8000f0e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f1a:	f04f 0100 	mov.w	r1, #0
 8000f1e:	f001 f83d 	bl	8001f9c <rand_range>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	b292      	uxth	r2, r2
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	839a      	strh	r2, [r3, #28]
	teller->status = status_waiting;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	77da      	strb	r2, [r3, #31]
	teller->forced_break_flag = false;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	779a      	strb	r2, [r3, #30]

}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <reset_and_init_customer>:

void reset_and_init_customer(CUSTOMER_INFO* customer)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	customer->service_time = rand_range(MIN_SERVICE_TIME, MAX_SERVICE_TIME);
 8000f48:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	f04f 0032 	mov.w	r0, #50	; 0x32
 8000f54:	f04f 0100 	mov.w	r1, #0
 8000f58:	f001 f820 	bl	8001f9c <rand_range>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	b292      	uxth	r2, r2
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	801a      	strh	r2, [r3, #0]
	customer->time_entered_queue = HAL_GetTick();
 8000f66:	f001 fae7 	bl	8002538 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	605a      	str	r2, [r3, #4]
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_GPIO_EXTI_Callback>:
* @brief Callback for S1-S3 SHIELD BUTTONS interrupt.
* @param GPIO_Pin: The GPIO_Pin of the button that generated the interrupt.
* @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
	TELLER_INFO* teller;

	// First button corresponds to teller01.
	if(GPIO_Pin == S1_SHLD_BUTTON_Pin)
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_EXTI_Callback+0x14>
	{
		teller = &teller01_info;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f8a:	60fb      	str	r3, [r7, #12]
	}

	// Second button corresponds to teller02.
	if(GPIO_Pin == S2_SHLD_BUTTON_Pin)
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		teller = &teller02_info;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f94:	60fb      	str	r3, [r7, #12]
	}

	// Third button corresponds to teller03.
	if(GPIO_Pin == S3_SHLD_BUTTON_Pin)
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d101      	bne.n	8000fa0 <HAL_GPIO_EXTI_Callback+0x28>
	{
		teller = &teller03_info;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x54>)
 8000f9e:	60fb      	str	r3, [r7, #12]
	}

	// Callback is triggered by both the rising AND falling edge, so we just toggle.
	teller->forced_break_flag ^= 1;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	7f9b      	ldrb	r3, [r3, #30]
 8000fa4:	f083 0301 	eor.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	bf14      	ite	ne
 8000fae:	2301      	movne	r3, #1
 8000fb0:	2300      	moveq	r3, #0
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	779a      	strb	r2, [r3, #30]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	20000810 	.word	0x20000810
 8000fc8:	20000830 	.word	0x20000830
 8000fcc:	20000850 	.word	0x20000850

08000fd0 <shiftOut>:
* @param clock_port: The port of the GPIO pin associated with the clock used to operate shift register.
* @param clock_pin: The GPIO clock pin.
* @param value: The value to shift into the data pin.
* @retval None
*/
static inline void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	460b      	mov	r3, r1
 8000fde:	817b      	strh	r3, [r7, #10]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e01d      	b.n	8001026 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f001 fd39 	bl	8002a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8000ff6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf14      	ite	ne
 8001002:	2301      	movne	r3, #1
 8001004:	2300      	moveq	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	897b      	ldrh	r3, [r7, #10]
 800100c:	4619      	mov	r1, r3
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f001 fd2a 	bl	8002a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8001014:	893b      	ldrh	r3, [r7, #8]
 8001016:	2201      	movs	r2, #1
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f001 fd24 	bl	8002a68 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	105b      	asrs	r3, r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1de      	bne.n	8000fea <shiftOut+0x1a>
	}
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <set_segment_digit>:
* @param digit: The digit to set (four in total)	.
* @param value: The value to set.
* @retval None
*/
static inline void set_segment_digit(uint8_t digit, uint8_t value)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	4811      	ldr	r0, [pc, #68]	; (8001094 <set_segment_digit+0x5c>)
 800104e:	f001 fd0b 	bl	8002a68 <HAL_GPIO_WritePin>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, value);
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800105e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f7ff ffb3 	bl	8000fd0 <shiftOut>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, digit);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f7ff ffa7 	bl	8000fd0 <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2120      	movs	r1, #32
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <set_segment_digit+0x5c>)
 8001088:	f001 fcee 	bl	8002a68 <HAL_GPIO_WritePin>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	48000400 	.word	0x48000400

08001098 <set_segment_display>:
*
* @param num: The four digit number to set the display to (MAX: 9999).
* @retval None
*/
void set_segment_display(uint16_t num)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
	uint8_t value;
	while(digit < NUM_SEGMENT_DIGITS)
 80010a6:	e01e      	b.n	80010e6 <set_segment_display+0x4e>
	{
		value = num % 10;
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <set_segment_display+0x64>)
 80010ac:	fba3 1302 	umull	r1, r3, r3, r2
 80010b0:	08d9      	lsrs	r1, r3, #3
 80010b2:	460b      	mov	r3, r1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	b29b      	uxth	r3, r3
 80010be:	73bb      	strb	r3, [r7, #14]
		set_segment_digit(SEGMENT_DIGIT[digit], SEGMENT_NUM[value]);
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <set_segment_display+0x68>)
 80010c4:	5cd2      	ldrb	r2, [r2, r3]
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	490e      	ldr	r1, [pc, #56]	; (8001104 <set_segment_display+0x6c>)
 80010ca:	5ccb      	ldrb	r3, [r1, r3]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f7ff ffb2 	bl	8001038 <set_segment_digit>
		num /= 10;
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	4a09      	ldr	r2, [pc, #36]	; (80010fc <set_segment_display+0x64>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	80fb      	strh	r3, [r7, #6]
		digit++;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	3301      	adds	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
	while(digit < NUM_SEGMENT_DIGITS)
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d9dd      	bls.n	80010a8 <set_segment_display+0x10>
	}
	set_segment_digit(0, 0);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ffa2 	bl	8001038 <set_segment_digit>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	cccccccd 	.word	0xcccccccd
 8001100:	0800e184 	.word	0x0800e184
 8001104:	0800e188 	.word	0x0800e188

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f001 f9e0 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f88c 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f000 f95a 	bl	80013cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001118:	f000 f928 	bl	800136c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800111c:	f000 f8d8 	bl	80012d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize tellers
  init_teller(&teller01_info);
 8001120:	4828      	ldr	r0, [pc, #160]	; (80011c4 <main+0xbc>)
 8001122:	f7ff fed1 	bl	8000ec8 <init_teller>
  init_teller(&teller02_info);
 8001126:	4828      	ldr	r0, [pc, #160]	; (80011c8 <main+0xc0>)
 8001128:	f7ff fece 	bl	8000ec8 <init_teller>
  init_teller(&teller03_info);
 800112c:	4827      	ldr	r0, [pc, #156]	; (80011cc <main+0xc4>)
 800112e:	f7ff fecb 	bl	8000ec8 <init_teller>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001132:	f004 fa9b 	bl	800566c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 8001136:	4826      	ldr	r0, [pc, #152]	; (80011d0 <main+0xc8>)
 8001138:	f004 fbb1 	bl	800589e <osMutexNew>
 800113c:	4603      	mov	r3, r0
 800113e:	4a25      	ldr	r2, [pc, #148]	; (80011d4 <main+0xcc>)
 8001140:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of customerQueue */
  customerQueueHandle = osMessageQueueNew (421, sizeof(uint64_t), &customerQueue_attributes);
 8001142:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <main+0xd0>)
 8001144:	2108      	movs	r1, #8
 8001146:	f240 10a5 	movw	r0, #421	; 0x1a5
 800114a:	f004 fcb6 	bl	8005aba <osMessageQueueNew>
 800114e:	4603      	mov	r3, r0
 8001150:	4a22      	ldr	r2, [pc, #136]	; (80011dc <main+0xd4>)
 8001152:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of updateSegment */
  updateSegmentHandle = osThreadNew(StartUpdateSegment, NULL, &updateSegment_attributes);
 8001154:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <main+0xd8>)
 8001156:	2100      	movs	r1, #0
 8001158:	4822      	ldr	r0, [pc, #136]	; (80011e4 <main+0xdc>)
 800115a:	f004 fad1 	bl	8005700 <osThreadNew>
 800115e:	4603      	mov	r3, r0
 8001160:	4a21      	ldr	r2, [pc, #132]	; (80011e8 <main+0xe0>)
 8001162:	6013      	str	r3, [r2, #0]

  /* creation of genCustomer */
  genCustomerHandle = osThreadNew(StartGenCustomerTask, NULL, &genCustomer_attributes);
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <main+0xe4>)
 8001166:	2100      	movs	r1, #0
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <main+0xe8>)
 800116a:	f004 fac9 	bl	8005700 <osThreadNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <main+0xec>)
 8001172:	6013      	str	r3, [r2, #0]

  /* creation of teller01 */
  teller01Handle = osThreadNew(StartTeller01, NULL, &teller01_attributes);
 8001174:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <main+0xf0>)
 8001176:	2100      	movs	r1, #0
 8001178:	4820      	ldr	r0, [pc, #128]	; (80011fc <main+0xf4>)
 800117a:	f004 fac1 	bl	8005700 <osThreadNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <main+0xf8>)
 8001182:	6013      	str	r3, [r2, #0]

  /* creation of teller02 */
  teller02Handle = osThreadNew(StartTeller02, NULL, &teller02_attributes);
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <main+0xfc>)
 8001186:	2100      	movs	r1, #0
 8001188:	481f      	ldr	r0, [pc, #124]	; (8001208 <main+0x100>)
 800118a:	f004 fab9 	bl	8005700 <osThreadNew>
 800118e:	4603      	mov	r3, r0
 8001190:	4a1e      	ldr	r2, [pc, #120]	; (800120c <main+0x104>)
 8001192:	6013      	str	r3, [r2, #0]

  /* creation of teller03 */
  teller03Handle = osThreadNew(StartTeller03, NULL, &teller03_attributes);
 8001194:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <main+0x108>)
 8001196:	2100      	movs	r1, #0
 8001198:	481e      	ldr	r0, [pc, #120]	; (8001214 <main+0x10c>)
 800119a:	f004 fab1 	bl	8005700 <osThreadNew>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <main+0x110>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* creation of simMonitorInfo */
  simMonitorInfoHandle = osThreadNew(StartSimMonitorInfo, NULL, &simMonitorInfo_attributes);
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <main+0x114>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	481d      	ldr	r0, [pc, #116]	; (8001220 <main+0x118>)
 80011aa:	f004 faa9 	bl	8005700 <osThreadNew>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <main+0x11c>)
 80011b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Grab reference point to get an accurate reading of simulated time.
  SIMULATED_TIME_START = HAL_GetTick();
 80011b4:	f001 f9c0 	bl	8002538 <HAL_GetTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <main+0x120>)
 80011bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011be:	f004 fa79 	bl	80056b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80011c2:	e7fe      	b.n	80011c2 <main+0xba>
 80011c4:	20000810 	.word	0x20000810
 80011c8:	20000830 	.word	0x20000830
 80011cc:	20000850 	.word	0x20000850
 80011d0:	0800e174 	.word	0x0800e174
 80011d4:	20000808 	.word	0x20000808
 80011d8:	0800e15c 	.word	0x0800e15c
 80011dc:	20000804 	.word	0x20000804
 80011e0:	0800e084 	.word	0x0800e084
 80011e4:	080017e9 	.word	0x080017e9
 80011e8:	200007ec 	.word	0x200007ec
 80011ec:	0800e0a8 	.word	0x0800e0a8
 80011f0:	08001839 	.word	0x08001839
 80011f4:	200007f0 	.word	0x200007f0
 80011f8:	0800e0cc 	.word	0x0800e0cc
 80011fc:	080018d1 	.word	0x080018d1
 8001200:	200007f4 	.word	0x200007f4
 8001204:	0800e0f0 	.word	0x0800e0f0
 8001208:	080018f5 	.word	0x080018f5
 800120c:	200007f8 	.word	0x200007f8
 8001210:	0800e114 	.word	0x0800e114
 8001214:	08001919 	.word	0x08001919
 8001218:	200007fc 	.word	0x200007fc
 800121c:	0800e138 	.word	0x0800e138
 8001220:	0800193d 	.word	0x0800193d
 8001224:	20000800 	.word	0x20000800
 8001228:	2000080c 	.word	0x2000080c

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b096      	sub	sp, #88	; 0x58
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2244      	movs	r2, #68	; 0x44
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f008 f811 	bl	8009262 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800124e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001252:	f001 fc47 	bl	8002ae4 <HAL_PWREx_ControlVoltageScaling>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800125c:	f000 fdfe 	bl	8001e5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001260:	2302      	movs	r3, #2
 8001262:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001268:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126a:	2310      	movs	r3, #16
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126e:	2302      	movs	r3, #2
 8001270:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001272:	2302      	movs	r3, #2
 8001274:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001276:	2301      	movs	r3, #1
 8001278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800127a:	230a      	movs	r3, #10
 800127c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800127e:	2307      	movs	r3, #7
 8001280:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001282:	2302      	movs	r3, #2
 8001284:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001286:	2302      	movs	r3, #2
 8001288:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fc7e 	bl	8002b90 <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800129a:	f000 fddf 	bl	8001e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2303      	movs	r3, #3
 80012a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b2:	463b      	mov	r3, r7
 80012b4:	2104      	movs	r1, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 f846 	bl	8003348 <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012c2:	f000 fdcb 	bl	8001e5c <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3758      	adds	r7, #88	; 0x58
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_TIM2_Init+0x98>)
 80012f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_TIM2_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_TIM2_Init+0x98>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_TIM2_Init+0x98>)
 8001304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001308:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_TIM2_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_TIM2_Init+0x98>)
 8001312:	2200      	movs	r2, #0
 8001314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001316:	4814      	ldr	r0, [pc, #80]	; (8001368 <MX_TIM2_Init+0x98>)
 8001318:	f002 ff28 	bl	800416c <HAL_TIM_Base_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001322:	f000 fd9b 	bl	8001e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_TIM2_Init+0x98>)
 8001334:	f003 f8e4 	bl	8004500 <HAL_TIM_ConfigClockSource>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800133e:	f000 fd8d 	bl	8001e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_TIM2_Init+0x98>)
 8001350:	f003 fafc 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800135a:	f000 fd7f 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000718 	.word	0x20000718

0800136c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <MX_USART2_UART_Init+0x5c>)
 8001374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 80013b0:	f003 fb72 	bl	8004a98 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ba:	f000 fd4f 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000764 	.word	0x20000764
 80013c8:	40004400 	.word	0x40004400

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b57      	ldr	r3, [pc, #348]	; (8001540 <MX_GPIO_Init+0x174>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a56      	ldr	r2, [pc, #344]	; (8001540 <MX_GPIO_Init+0x174>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b54      	ldr	r3, [pc, #336]	; (8001540 <MX_GPIO_Init+0x174>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fa:	4b51      	ldr	r3, [pc, #324]	; (8001540 <MX_GPIO_Init+0x174>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a50      	ldr	r2, [pc, #320]	; (8001540 <MX_GPIO_Init+0x174>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b4e      	ldr	r3, [pc, #312]	; (8001540 <MX_GPIO_Init+0x174>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <MX_GPIO_Init+0x174>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <MX_GPIO_Init+0x174>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b48      	ldr	r3, [pc, #288]	; (8001540 <MX_GPIO_Init+0x174>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b45      	ldr	r3, [pc, #276]	; (8001540 <MX_GPIO_Init+0x174>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a44      	ldr	r2, [pc, #272]	; (8001540 <MX_GPIO_Init+0x174>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b42      	ldr	r3, [pc, #264]	; (8001540 <MX_GPIO_Init+0x174>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144c:	f001 fb0c 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2120      	movs	r1, #32
 8001454:	483b      	ldr	r0, [pc, #236]	; (8001544 <MX_GPIO_Init+0x178>)
 8001456:	f001 fb07 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800145a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001460:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4835      	ldr	r0, [pc, #212]	; (8001548 <MX_GPIO_Init+0x17c>)
 8001472:	f001 f94f 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_SHLD_BUTTON_Pin S2_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S1_SHLD_BUTTON_Pin|S2_SHLD_BUTTON_Pin;
 8001476:	2312      	movs	r3, #18
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800147a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f001 f941 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001492:	2320      	movs	r3, #32
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f001 f932 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S3_SHLD_BUTTON_Pin;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014b4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S3_SHLD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	481f      	ldr	r0, [pc, #124]	; (8001544 <MX_GPIO_Init+0x178>)
 80014c6:	f001 f925 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_D7_SEG7_Clock_Pin SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin;
 80014ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f001 f915 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 80014ea:	2320      	movs	r3, #32
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014f6:	2301      	movs	r3, #1
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4810      	ldr	r0, [pc, #64]	; (8001544 <MX_GPIO_Init+0x178>)
 8001502:	f001 f907 	bl	8002714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // S1_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2007      	movs	r0, #7
 800150c:	f001 f8d8 	bl	80026c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001510:	2007      	movs	r0, #7
 8001512:	f001 f8f1 	bl	80026f8 <HAL_NVIC_EnableIRQ>

  // S2_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	200a      	movs	r0, #10
 800151c:	f001 f8d0 	bl	80026c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001520:	200a      	movs	r0, #10
 8001522:	f001 f8e9 	bl	80026f8 <HAL_NVIC_EnableIRQ>

  // S3_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2006      	movs	r0, #6
 800152c:	f001 f8c8 	bl	80026c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001530:	2006      	movs	r0, #6
 8001532:	f001 f8e1 	bl	80026f8 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	48000400 	.word	0x48000400
 8001548:	48000800 	.word	0x48000800

0800154c <teller_functionality>:

/* USER CODE BEGIN 4 */
void teller_functionality(TELLER_INFO* teller_info, osThreadId_t tellerHandler)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b097      	sub	sp, #92	; 0x5c
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	uint32_t wait_discrepancy;

	for(;;)
	{
		// Teller starts working.
		teller_info->status = status_working;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	77da      	strb	r2, [r3, #31]

		// Stop teller when the day ends.
		if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 800155c:	f000 ffec 	bl	8002538 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	4b9c      	ldr	r3, [pc, #624]	; (80017d4 <teller_functionality+0x288>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 800156a:	3310      	adds	r3, #16
 800156c:	429a      	cmp	r2, r3
 800156e:	d305      	bcc.n	800157c <teller_functionality+0x30>
		{
			teller_info->status = status_done_for_the_day;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2203      	movs	r2, #3
 8001574:	77da      	strb	r2, [r3, #31]
			osThreadSuspend(tellerHandler);
 8001576:	6838      	ldr	r0, [r7, #0]
 8001578:	f004 f955 	bl	8005826 <osThreadSuspend>
		}

		/* --- First step is to obtain a customer --- */

		// [A: 1/2] We assume the teller will have to wait for a customer...
		teller_info->status = status_waiting;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	77da      	strb	r2, [r3, #31]

		// [A: 2/2] ...so we grab a reference snapshot of the current time to calculate total wait later.
		pre_wait_reference = HAL_GetTick();
 8001582:	f000 ffd9 	bl	8002538 <HAL_GetTick>
 8001586:	6578      	str	r0, [r7, #84]	; 0x54

		// Attempt to grab the next customer from the queue.
		osMessageQueueGet(customerQueueHandle, &current_customer, 0, osWaitForever);
 8001588:	4b93      	ldr	r3, [pc, #588]	; (80017d8 <teller_functionality+0x28c>)
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	f107 0108 	add.w	r1, r7, #8
 8001590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001594:	2200      	movs	r2, #0
 8001596:	f004 fb63 	bl	8005c60 <osMessageQueueGet>

		// If the teller was able to unblock, it means a customer was successfully obtained -> teller is no longer waiting
		wait_discrepancy = HAL_GetTick() - pre_wait_reference;
 800159a:	f000 ffcd 	bl	8002538 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	653b      	str	r3, [r7, #80]	; 0x50
		teller_info->status = status_working;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	77da      	strb	r2, [r3, #31]

		// This is time the customer had to wait in the queue before being serviced.
		customer_time_spent_in_queue = HAL_GetTick() - current_customer.time_entered_queue;
 80015ac:	f000 ffc4 	bl	8002538 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c

		// [B: 1/2] If the time discrepancy is too high, it probably means the teller had to wait...
		if(wait_discrepancy > TELLER_WAIT_TOLERANCE)
 80015b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015ba:	2b0a      	cmp	r3, #10
 80015bc:	d91c      	bls.n	80015f8 <teller_functionality+0xac>
		{
			// [B: 2/2] ...so update the teller's wait statistics.
			teller_info->total_wait_time += (wait_discrepancy - TELLER_WAIT_TOLERANCE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	8b1a      	ldrh	r2, [r3, #24]
 80015c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	3b0a      	subs	r3, #10
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	831a      	strh	r2, [r3, #24]
			teller_info->total_waits_taken++;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	8b5b      	ldrh	r3, [r3, #26]
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	835a      	strh	r2, [r3, #26]
			teller_info->max_wait_time = MAX(teller_info->max_wait_time, (wait_discrepancy - TELLER_WAIT_TOLERANCE));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80015e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015e6:	3b0a      	subs	r3, #10
 80015e8:	647b      	str	r3, [r7, #68]	; 0x44
 80015ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ee:	429a      	cmp	r2, r3
 80015f0:	bf38      	it	cc
 80015f2:	461a      	movcc	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	601a      	str	r2, [r3, #0]
		}

		/* --- Move on to process customer --- */

		// Record statistic about customer.
		teller_info->total_customers_serviced++;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	8a5b      	ldrh	r3, [r3, #18]
 80015fc:	3301      	adds	r3, #1
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	825a      	strh	r2, [r3, #18]
		teller_info->total_service_time += current_customer.service_time;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	8a1a      	ldrh	r2, [r3, #16]
 8001608:	893b      	ldrh	r3, [r7, #8]
 800160a:	4413      	add	r3, r2
 800160c:	b29a      	uxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	821a      	strh	r2, [r3, #16]
		teller_info->max_service_time = MAX(teller_info->max_service_time, current_customer.service_time);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
 8001618:	893b      	ldrh	r3, [r7, #8]
 800161a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800161c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800161e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001620:	429a      	cmp	r2, r3
 8001622:	bf38      	it	cc
 8001624:	461a      	movcc	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	605a      	str	r2, [r3, #4]


		// Access global variables to update customer queue time statistics.
		osMutexAcquire(Mutex01Handle, osWaitForever);
 800162a:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <teller_functionality+0x290>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001632:	4618      	mov	r0, r3
 8001634:	f004 f9b9 	bl	80059aa <osMutexAcquire>
		max_customer_queue_time = MAX(max_customer_queue_time, customer_time_spent_in_queue);
 8001638:	4b69      	ldr	r3, [pc, #420]	; (80017e0 <teller_functionality+0x294>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800163e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
 8001642:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001646:	4293      	cmp	r3, r2
 8001648:	bf38      	it	cc
 800164a:	4613      	movcc	r3, r2
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <teller_functionality+0x294>)
 8001650:	801a      	strh	r2, [r3, #0]
		total_customer_queue_time += customer_time_spent_in_queue;
 8001652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b63      	ldr	r3, [pc, #396]	; (80017e4 <teller_functionality+0x298>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	b29a      	uxth	r2, r3
 800165e:	4b61      	ldr	r3, [pc, #388]	; (80017e4 <teller_functionality+0x298>)
 8001660:	801a      	strh	r2, [r3, #0]
		osMutexRelease(Mutex01Handle);
 8001662:	4b5e      	ldr	r3, [pc, #376]	; (80017dc <teller_functionality+0x290>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f004 f9ea 	bl	8005a40 <osMutexRelease>

		// Simulate time spent servicing customer.
		osDelay(current_customer.service_time);
 800166c:	893b      	ldrh	r3, [r7, #8]
 800166e:	4618      	mov	r0, r3
 8001670:	f004 f8fa 	bl	8005868 <osDelay>


		/* --- Check for breaks only after finishing with a customer --- */

		// Forced break -> takes priority over natural break.
		if(teller_info->forced_break_flag == true)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7f9b      	ldrb	r3, [r3, #30]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d052      	beq.n	8001722 <teller_functionality+0x1d6>
		{
			// Grab reference point
			forced_break_start_time = HAL_GetTick();
 800167c:	f000 ff5c 	bl	8002538 <HAL_GetTick>
 8001680:	6238      	str	r0, [r7, #32]
			teller_info->status = status_on_break;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2202      	movs	r2, #2
 8001686:	77da      	strb	r2, [r3, #31]

			// Stay until the forced break is released
			while(teller_info->forced_break_flag == true)
 8001688:	e002      	b.n	8001690 <teller_functionality+0x144>
			{
				osDelay(1);
 800168a:	2001      	movs	r0, #1
 800168c:	f004 f8ec 	bl	8005868 <osDelay>
			while(teller_info->forced_break_flag == true)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7f9b      	ldrb	r3, [r3, #30]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f8      	bne.n	800168a <teller_functionality+0x13e>
			}

			// Break ends.
			teller_info->status = status_working;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	77da      	strb	r2, [r3, #31]

			// [C: 1/2] Calculate break time and updated statistics...
			break_time = HAL_GetTick() - forced_break_start_time;
 800169e:	f000 ff4b 	bl	8002538 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
			teller_info->max_break_time = MAX(teller_info->max_break_time, break_time);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	bf38      	it	cc
 80016bc:	461a      	movcc	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	609a      	str	r2, [r3, #8]
			teller_info->min_break_time = MIN(teller_info->min_break_time, break_time);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	bf28      	it	cs
 80016d4:	461a      	movcs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60da      	str	r2, [r3, #12]
			teller_info->total_break_time += break_time;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	8a9a      	ldrh	r2, [r3, #20]
 80016de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	829a      	strh	r2, [r3, #20]
			teller_info->total_breaks_taken++;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	8adb      	ldrh	r3, [r3, #22]
 80016ee:	3301      	adds	r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	82da      	strh	r2, [r3, #22]

			// [C: 2/2] ...teller was just on break, so recalculate next available natural break time
			teller_info->next_available_natural_break_time = HAL_GetTick() + rand_range(MIN_TELLER_BREAK_WAIT, MAX_TELLER_BREAK_WAIT);
 80016f6:	f000 ff1f 	bl	8002538 <HAL_GetTick>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b29c      	uxth	r4, r3
 80016fe:	f241 7270 	movw	r2, #6000	; 0x1770
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800170a:	f04f 0100 	mov.w	r1, #0
 800170e:	f000 fc45 	bl	8001f9c <rand_range>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	b293      	uxth	r3, r2
 8001718:	4423      	add	r3, r4
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	839a      	strh	r2, [r3, #28]
 8001720:	e719      	b.n	8001556 <teller_functionality+0xa>


		} // Natural break.
		else if(HAL_GetTick() >= teller_info->next_available_natural_break_time)
 8001722:	f000 ff09 	bl	8002538 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8b9b      	ldrh	r3, [r3, #28]
 800172c:	429a      	cmp	r2, r3
 800172e:	f4ff af12 	bcc.w	8001556 <teller_functionality+0xa>
		{

			// Generate a random break duration and update statistics.
			break_time = rand_range(MIN_TELLER_BREAK_TIME, MAX_TELLER_BREAK_TIME);
 8001732:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	f04f 0064 	mov.w	r0, #100	; 0x64
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	f000 fc2b 	bl	8001f9c <rand_range>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4613      	mov	r3, r2
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
			teller_info->max_break_time = MAX(teller_info->max_break_time, break_time);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
 8001754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175c:	429a      	cmp	r2, r3
 800175e:	bf38      	it	cc
 8001760:	461a      	movcc	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]
			teller_info->min_break_time = MIN(teller_info->min_break_time, break_time);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
 800176c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
 8001770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	429a      	cmp	r2, r3
 8001776:	bf28      	it	cs
 8001778:	461a      	movcs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60da      	str	r2, [r3, #12]
			teller_info->total_break_time += break_time;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8a9a      	ldrh	r2, [r3, #20]
 8001782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001784:	b29b      	uxth	r3, r3
 8001786:	4413      	add	r3, r2
 8001788:	b29a      	uxth	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	829a      	strh	r2, [r3, #20]
			teller_info->total_breaks_taken++;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	8adb      	ldrh	r3, [r3, #22]
 8001792:	3301      	adds	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	82da      	strh	r2, [r3, #22]

			// Generate next available break.
			teller_info->next_available_natural_break_time = HAL_GetTick() + rand_range(MIN_TELLER_BREAK_WAIT, MAX_TELLER_BREAK_WAIT);
 800179a:	f000 fecd 	bl	8002538 <HAL_GetTick>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29c      	uxth	r4, r3
 80017a2:	f241 7270 	movw	r2, #6000	; 0x1770
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	f000 fbf3 	bl	8001f9c <rand_range>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	b293      	uxth	r3, r2
 80017bc:	4423      	add	r3, r4
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	839a      	strh	r2, [r3, #28]

			// Go on break.
			teller_info->status = status_on_break;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	77da      	strb	r2, [r3, #31]
			osDelay(break_time);
 80017ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017cc:	f004 f84c 	bl	8005868 <osDelay>
		teller_info->status = status_working;
 80017d0:	e6c1      	b.n	8001556 <teller_functionality+0xa>
 80017d2:	bf00      	nop
 80017d4:	2000080c 	.word	0x2000080c
 80017d8:	20000804 	.word	0x20000804
 80017dc:	20000808 	.word	0x20000808
 80017e0:	20000712 	.word	0x20000712
 80017e4:	20000710 	.word	0x20000710

080017e8 <StartUpdateSegment>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateSegment */
void StartUpdateSegment(void *argument)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	// Stop generator when the day ends.
	if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 80017f0:	f000 fea2 	bl	8002538 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <StartUpdateSegment+0x44>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 80017fe:	3310      	adds	r3, #16
 8001800:	429a      	cmp	r2, r3
 8001802:	d304      	bcc.n	800180e <StartUpdateSegment+0x26>
	{
		osThreadSuspend(updateSegmentHandle);
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <StartUpdateSegment+0x48>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f004 f80c 	bl	8005826 <osThreadSuspend>
	}

	// [A: 1/2] Constantly update the 7-segment display...
	set_segment_display(osMessageQueueGetCount(customerQueueHandle));
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <StartUpdateSegment+0x4c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fa82 	bl	8005d1c <osMessageQueueGetCount>
 8001818:	4603      	mov	r3, r0
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fc3b 	bl	8001098 <set_segment_display>

	// [A: 2/2] ... need short delay for display to stay updated properly.
    osDelay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f004 f820 	bl	8005868 <osDelay>
	if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 8001828:	e7e2      	b.n	80017f0 <StartUpdateSegment+0x8>
 800182a:	bf00      	nop
 800182c:	2000080c 	.word	0x2000080c
 8001830:	200007ec 	.word	0x200007ec
 8001834:	20000804 	.word	0x20000804

08001838 <StartGenCustomerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGenCustomerTask */
void StartGenCustomerTask(void *argument)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// Stop generator when the day ends.
	if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 8001840:	f000 fe7a 	bl	8002538 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <StartGenCustomerTask+0x88>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 800184e:	3310      	adds	r3, #16
 8001850:	429a      	cmp	r2, r3
 8001852:	d304      	bcc.n	800185e <StartGenCustomerTask+0x26>
	{
		osThreadSuspend(genCustomerHandle);
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <StartGenCustomerTask+0x8c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f003 ffe4 	bl	8005826 <osThreadSuspend>
	}

	// New customer arrives after a random time within a set interval.
	delay_until_next_customer_arrival = rand_range(MIN_CUSTOMER_ARRIVAL_DELAY, MAX_CUSTOMER_ARRIVAL_DELAY);
 800185e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	f04f 0064 	mov.w	r0, #100	; 0x64
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	f000 fb95 	bl	8001f9c <rand_range>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4613      	mov	r3, r2
 8001878:	61fb      	str	r3, [r7, #28]

	// Generate a new customer with randomized service time.
	reset_and_init_customer(&customer_template);
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fb5e 	bl	8000f40 <reset_and_init_customer>

	// Send customer to queue to be picked up by tellers.
	osMessageQueuePut(customerQueueHandle, &customer_template, 0U, osWaitForever);
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <StartGenCustomerTask+0x90>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f107 010c 	add.w	r1, r7, #12
 800188c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001890:	2200      	movs	r2, #0
 8001892:	f004 f985 	bl	8005ba0 <osMessageQueuePut>

	// Record queue statistics.
	max_customer_queue_depth = MAX(max_customer_queue_depth, osMessageQueueGetCount(customerQueueHandle));
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <StartGenCustomerTask+0x94>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	837b      	strh	r3, [r7, #26]
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <StartGenCustomerTask+0x90>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 fa3b 	bl	8005d1c <osMessageQueueGetCount>
 80018a6:	6178      	str	r0, [r7, #20]
 80018a8:	8b7a      	ldrh	r2, [r7, #26]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	4293      	cmp	r3, r2
 80018ae:	bf38      	it	cc
 80018b0:	4613      	movcc	r3, r2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <StartGenCustomerTask+0x94>)
 80018b6:	801a      	strh	r2, [r3, #0]

	// Simulate time between customers.
	osDelay(delay_until_next_customer_arrival);
 80018b8:	69f8      	ldr	r0, [r7, #28]
 80018ba:	f003 ffd5 	bl	8005868 <osDelay>
	if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 80018be:	e7bf      	b.n	8001840 <StartGenCustomerTask+0x8>
 80018c0:	2000080c 	.word	0x2000080c
 80018c4:	200007f0 	.word	0x200007f0
 80018c8:	20000804 	.word	0x20000804
 80018cc:	20000714 	.word	0x20000714

080018d0 <StartTeller01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller01 */
void StartTeller01(void *argument)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller01 */
  /* Infinite loop */

  // All tellers share the same functionality.
  teller_functionality(&teller01_info, teller01Handle);
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <StartTeller01+0x1c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	4804      	ldr	r0, [pc, #16]	; (80018f0 <StartTeller01+0x20>)
 80018e0:	f7ff fe34 	bl	800154c <teller_functionality>

  /* USER CODE END StartTeller01 */
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200007f4 	.word	0x200007f4
 80018f0:	20000810 	.word	0x20000810

080018f4 <StartTeller02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller02 */
void StartTeller02(void *argument)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller02 */
  /* Infinite loop */

  // All tellers share the same functionality.
  teller_functionality(&teller02_info, teller02Handle);
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <StartTeller02+0x1c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	4804      	ldr	r0, [pc, #16]	; (8001914 <StartTeller02+0x20>)
 8001904:	f7ff fe22 	bl	800154c <teller_functionality>

  /* USER CODE END StartTeller02 */
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200007f8 	.word	0x200007f8
 8001914:	20000830 	.word	0x20000830

08001918 <StartTeller03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller03 */
void StartTeller03(void *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller03 */
  /* Infinite loop */

  // All tellers share the same functionality.
  teller_functionality(&teller03_info, teller03Handle);
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <StartTeller03+0x1c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <StartTeller03+0x20>)
 8001928:	f7ff fe10 	bl	800154c <teller_functionality>

  /* USER CODE END StartTeller03 */
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200007fc 	.word	0x200007fc
 8001938:	20000850 	.word	0x20000850

0800193c <StartSimMonitorInfo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSimMonitorInfo */
void StartSimMonitorInfo(void *argument)
{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b098      	sub	sp, #96	; 0x60
 8001940:	af04      	add	r7, sp, #16
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t total_wait_time;
  uint32_t total_num_waits;

  for(;;)
  {
	current_time_ms = HAL_GetTick();
 8001944:	f000 fdf8 	bl	8002538 <HAL_GetTick>
 8001948:	64f8      	str	r0, [r7, #76]	; 0x4c

	if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 800194a:	f000 fdf5 	bl	8002538 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	4ba6      	ldr	r3, [pc, #664]	; (8001bec <StartSimMonitorInfo+0x2b0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 8001958:	3310      	adds	r3, #16
 800195a:	429a      	cmp	r2, r3
 800195c:	d318      	bcc.n	8001990 <StartSimMonitorInfo+0x54>
	{
		while((eTaskGetState(teller01Handle) != eSuspended) ||
 800195e:	bf00      	nop
 8001960:	4ba3      	ldr	r3, [pc, #652]	; (8001bf0 <StartSimMonitorInfo+0x2b4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f005 fcb7 	bl	80072d8 <eTaskGetState>
 800196a:	4603      	mov	r3, r0
				(eTaskGetState(teller02Handle) != eSuspended) ||
 800196c:	2b03      	cmp	r3, #3
 800196e:	d1f7      	bne.n	8001960 <StartSimMonitorInfo+0x24>
 8001970:	4ba0      	ldr	r3, [pc, #640]	; (8001bf4 <StartSimMonitorInfo+0x2b8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f005 fcaf 	bl	80072d8 <eTaskGetState>
 800197a:	4603      	mov	r3, r0
		while((eTaskGetState(teller01Handle) != eSuspended) ||
 800197c:	2b03      	cmp	r3, #3
 800197e:	d1ef      	bne.n	8001960 <StartSimMonitorInfo+0x24>
				(eTaskGetState(teller03Handle) != eSuspended));
 8001980:	4b9d      	ldr	r3, [pc, #628]	; (8001bf8 <StartSimMonitorInfo+0x2bc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f005 fca7 	bl	80072d8 <eTaskGetState>
 800198a:	4603      	mov	r3, r0
				(eTaskGetState(teller02Handle) != eSuspended) ||
 800198c:	2b03      	cmp	r3, #3
 800198e:	d1e7      	bne.n	8001960 <StartSimMonitorInfo+0x24>
	}

	sim_hours = MS_TO_SIM_HOURS(current_time_ms);
 8001990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001992:	4a9a      	ldr	r2, [pc, #616]	; (8001bfc <StartSimMonitorInfo+0x2c0>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	09db      	lsrs	r3, r3, #7
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
	sim_min = MS_TO_SIM_MIN(current_time_ms);
 800199c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800199e:	4a98      	ldr	r2, [pc, #608]	; (8001c00 <StartSimMonitorInfo+0x2c4>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44

	teller01_info_str = STATUS_TO_STR[teller01_info.status];
 80019a8:	4b96      	ldr	r3, [pc, #600]	; (8001c04 <StartSimMonitorInfo+0x2c8>)
 80019aa:	7fdb      	ldrb	r3, [r3, #31]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b96      	ldr	r3, [pc, #600]	; (8001c08 <StartSimMonitorInfo+0x2cc>)
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	643b      	str	r3, [r7, #64]	; 0x40
	teller02_info_str = STATUS_TO_STR[teller02_info.status];
 80019b6:	4b95      	ldr	r3, [pc, #596]	; (8001c0c <StartSimMonitorInfo+0x2d0>)
 80019b8:	7fdb      	ldrb	r3, [r3, #31]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <StartSimMonitorInfo+0x2cc>)
 80019be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	teller03_info_str = STATUS_TO_STR[teller03_info.status];
 80019c4:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <StartSimMonitorInfo+0x2d4>)
 80019c6:	7fdb      	ldrb	r3, [r3, #31]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b8f      	ldr	r3, [pc, #572]	; (8001c08 <StartSimMonitorInfo+0x2cc>)
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	63bb      	str	r3, [r7, #56]	; 0x38

	// [A: 1/2] Build up the real time data...
	monitor_data_size = sprintf((char*)monitor_buffer, "\r\n\r\nCURRENT TIME: %02ld:%02ld\r\nCustomers in queue: %ld\r\nTeller01 status: %s\r\nTeller02 status: %s\r\nTeller03 status: %s\r\n\r\n\r\n",
															(((sim_hours + 8) % 12) + 1),
 80019d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019d4:	f103 0108 	add.w	r1, r3, #8
 80019d8:	4b8e      	ldr	r3, [pc, #568]	; (8001c14 <StartSimMonitorInfo+0x2d8>)
 80019da:	fba3 2301 	umull	r2, r3, r3, r1
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	1aca      	subs	r2, r1, r3
	monitor_data_size = sprintf((char*)monitor_buffer, "\r\n\r\nCURRENT TIME: %02ld:%02ld\r\nCustomers in queue: %ld\r\nTeller01 status: %s\r\nTeller02 status: %s\r\nTeller03 status: %s\r\n\r\n\r\n",
 80019ea:	1c55      	adds	r5, r2, #1
 80019ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019ee:	4b8a      	ldr	r3, [pc, #552]	; (8001c18 <StartSimMonitorInfo+0x2dc>)
 80019f0:	fba3 1302 	umull	r1, r3, r3, r2
 80019f4:	095c      	lsrs	r4, r3, #5
 80019f6:	4623      	mov	r3, r4
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	1b1b      	subs	r3, r3, r4
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	1ad4      	subs	r4, r2, r3
 8001a00:	4b86      	ldr	r3, [pc, #536]	; (8001c1c <StartSimMonitorInfo+0x2e0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 f989 	bl	8005d1c <osMessageQueueGetCount>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a0e:	9303      	str	r3, [sp, #12]
 8001a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	9200      	str	r2, [sp, #0]
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	462a      	mov	r2, r5
 8001a1e:	4980      	ldr	r1, [pc, #512]	; (8001c20 <StartSimMonitorInfo+0x2e4>)
 8001a20:	4880      	ldr	r0, [pc, #512]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001a22:	f007 fbbb 	bl	800919c <sprintf>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a7f      	ldr	r2, [pc, #508]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001a2a:	6013      	str	r3, [r2, #0]
															teller01_info_str,
															teller02_info_str,
															teller03_info_str);

	// [A: 2/2] ... and print it.
	HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001a2c:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	2364      	movs	r3, #100	; 0x64
 8001a34:	497b      	ldr	r1, [pc, #492]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001a36:	487d      	ldr	r0, [pc, #500]	; (8001c2c <StartSimMonitorInfo+0x2f0>)
 8001a38:	f003 f87c 	bl	8004b34 <HAL_UART_Transmit>


	// Stop when the day ends.
	if(HAL_GetTick() >= (TOTAL_SIM_TIME_MS + SIMULATED_TIME_START))
 8001a3c:	f000 fd7c 	bl	8002538 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <StartSimMonitorInfo+0x2b0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 8001a4a:	3310      	adds	r3, #16
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f0c0 81cd 	bcc.w	8001dec <StartSimMonitorInfo+0x4b0>
	{
		/* --- At the end of the day, gather all statistics --- */

		// The total number of customers served during the day.
		total_customers_served = teller01_info.total_customers_serviced +
 8001a52:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <StartSimMonitorInfo+0x2c8>)
 8001a54:	8a5b      	ldrh	r3, [r3, #18]
 8001a56:	461a      	mov	r2, r3
								 teller02_info.total_customers_serviced +
 8001a58:	4b6c      	ldr	r3, [pc, #432]	; (8001c0c <StartSimMonitorInfo+0x2d0>)
 8001a5a:	8a5b      	ldrh	r3, [r3, #18]
		total_customers_served = teller01_info.total_customers_serviced +
 8001a5c:	4413      	add	r3, r2
								 teller03_info.total_customers_serviced;
 8001a5e:	4a6c      	ldr	r2, [pc, #432]	; (8001c10 <StartSimMonitorInfo+0x2d4>)
 8001a60:	8a52      	ldrh	r2, [r2, #18]
								 teller02_info.total_customers_serviced +
 8001a62:	4413      	add	r3, r2
		total_customers_served = teller01_info.total_customers_serviced +
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34

		monitor_data_size = sprintf((char*)monitor_buffer, "Total number of customers served during the day: %ld\r\n", total_customers_served);
 8001a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a68:	4971      	ldr	r1, [pc, #452]	; (8001c30 <StartSimMonitorInfo+0x2f4>)
 8001a6a:	486e      	ldr	r0, [pc, #440]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001a6c:	f007 fb96 	bl	800919c <sprintf>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a6d      	ldr	r2, [pc, #436]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001a74:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001a76:	4b6c      	ldr	r3, [pc, #432]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	4969      	ldr	r1, [pc, #420]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001a80:	486a      	ldr	r0, [pc, #424]	; (8001c2c <StartSimMonitorInfo+0x2f0>)
 8001a82:	f003 f857 	bl	8004b34 <HAL_UART_Transmit>

		// The number of customers served by Teller 1, by Teller 2, and by Teller 3.
		monitor_data_size = sprintf((char*)monitor_buffer, "The number of customers served by\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
				teller01_info.total_customers_serviced,
 8001a86:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <StartSimMonitorInfo+0x2c8>)
 8001a88:	8a5b      	ldrh	r3, [r3, #18]
		monitor_data_size = sprintf((char*)monitor_buffer, "The number of customers served by\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001a8a:	461a      	mov	r2, r3
				teller02_info.total_customers_serviced,
 8001a8c:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <StartSimMonitorInfo+0x2d0>)
 8001a8e:	8a5b      	ldrh	r3, [r3, #18]
		monitor_data_size = sprintf((char*)monitor_buffer, "The number of customers served by\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001a90:	4619      	mov	r1, r3
				teller03_info.total_customers_serviced);
 8001a92:	4b5f      	ldr	r3, [pc, #380]	; (8001c10 <StartSimMonitorInfo+0x2d4>)
 8001a94:	8a5b      	ldrh	r3, [r3, #18]
		monitor_data_size = sprintf((char*)monitor_buffer, "The number of customers served by\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4966      	ldr	r1, [pc, #408]	; (8001c34 <StartSimMonitorInfo+0x2f8>)
 8001a9c:	4861      	ldr	r0, [pc, #388]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001a9e:	f007 fb7d 	bl	800919c <sprintf>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a60      	ldr	r2, [pc, #384]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001aa6:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001aa8:	4b5f      	ldr	r3, [pc, #380]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	2364      	movs	r3, #100	; 0x64
 8001ab0:	495c      	ldr	r1, [pc, #368]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001ab2:	485e      	ldr	r0, [pc, #376]	; (8001c2c <StartSimMonitorInfo+0x2f0>)
 8001ab4:	f003 f83e 	bl	8004b34 <HAL_UART_Transmit>

		// The average time each customer spends waiting in the queue.
		monitor_data_size = sprintf((char*)monitor_buffer, "The average time each customer spends waiting in the queue: %ld seconds\r\n",
				MS_TO_SIM_SEC((total_customer_queue_time / total_customers_served)));
 8001ab8:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <StartSimMonitorInfo+0x2fc>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The average time each customer spends waiting in the queue: %ld seconds\r\n",
 8001aca:	4a5c      	ldr	r2, [pc, #368]	; (8001c3c <StartSimMonitorInfo+0x300>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	495a      	ldr	r1, [pc, #360]	; (8001c40 <StartSimMonitorInfo+0x304>)
 8001ad6:	4853      	ldr	r0, [pc, #332]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001ad8:	f007 fb60 	bl	800919c <sprintf>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001ae0:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001ae2:	4b51      	ldr	r3, [pc, #324]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	2364      	movs	r3, #100	; 0x64
 8001aea:	494e      	ldr	r1, [pc, #312]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001aec:	484f      	ldr	r0, [pc, #316]	; (8001c2c <StartSimMonitorInfo+0x2f0>)
 8001aee:	f003 f821 	bl	8004b34 <HAL_UART_Transmit>

		// The average time each customer spends with the teller.
		total_service_time = teller01_info.total_service_time +
 8001af2:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <StartSimMonitorInfo+0x2c8>)
 8001af4:	8a1b      	ldrh	r3, [r3, #16]
 8001af6:	461a      	mov	r2, r3
							 teller02_info.total_service_time +
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <StartSimMonitorInfo+0x2d0>)
 8001afa:	8a1b      	ldrh	r3, [r3, #16]
		total_service_time = teller01_info.total_service_time +
 8001afc:	4413      	add	r3, r2
							 teller03_info.total_service_time;
 8001afe:	4a44      	ldr	r2, [pc, #272]	; (8001c10 <StartSimMonitorInfo+0x2d4>)
 8001b00:	8a12      	ldrh	r2, [r2, #16]
							 teller02_info.total_service_time +
 8001b02:	4413      	add	r3, r2
		total_service_time = teller01_info.total_service_time +
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30

		monitor_data_size = sprintf((char*)monitor_buffer, "The average time each customer spends with the teller: %ld seconds\r\n",
				MS_TO_SIM_SEC(total_service_time / total_customers_served));
 8001b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The average time each customer spends with the teller: %ld seconds\r\n",
 8001b14:	4a49      	ldr	r2, [pc, #292]	; (8001c3c <StartSimMonitorInfo+0x300>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4949      	ldr	r1, [pc, #292]	; (8001c44 <StartSimMonitorInfo+0x308>)
 8001b20:	4840      	ldr	r0, [pc, #256]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001b22:	f007 fb3b 	bl	800919c <sprintf>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a3f      	ldr	r2, [pc, #252]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001b2a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001b2c:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	2364      	movs	r3, #100	; 0x64
 8001b34:	493b      	ldr	r1, [pc, #236]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001b36:	483d      	ldr	r0, [pc, #244]	; (8001c2c <StartSimMonitorInfo+0x2f0>)
 8001b38:	f002 fffc 	bl	8004b34 <HAL_UART_Transmit>

		// The average time tellers wait for customers.
		total_wait_time = teller01_info.total_wait_time +
 8001b3c:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <StartSimMonitorInfo+0x2c8>)
 8001b3e:	8b1b      	ldrh	r3, [r3, #24]
 8001b40:	461a      	mov	r2, r3
						  teller02_info.total_wait_time +
 8001b42:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <StartSimMonitorInfo+0x2d0>)
 8001b44:	8b1b      	ldrh	r3, [r3, #24]
		total_wait_time = teller01_info.total_wait_time +
 8001b46:	4413      	add	r3, r2
						  teller03_info.total_wait_time;
 8001b48:	4a31      	ldr	r2, [pc, #196]	; (8001c10 <StartSimMonitorInfo+0x2d4>)
 8001b4a:	8b12      	ldrh	r2, [r2, #24]
						  teller02_info.total_wait_time +
 8001b4c:	4413      	add	r3, r2
		total_wait_time = teller01_info.total_wait_time +
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		total_num_waits = teller01_info.total_waits_taken +
 8001b50:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <StartSimMonitorInfo+0x2c8>)
 8001b52:	8b5b      	ldrh	r3, [r3, #26]
 8001b54:	461a      	mov	r2, r3
						  teller02_info.total_waits_taken +
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <StartSimMonitorInfo+0x2d0>)
 8001b58:	8b5b      	ldrh	r3, [r3, #26]
		total_num_waits = teller01_info.total_waits_taken +
 8001b5a:	4413      	add	r3, r2
						  teller03_info.total_waits_taken;
 8001b5c:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <StartSimMonitorInfo+0x2d4>)
 8001b5e:	8b52      	ldrh	r2, [r2, #26]
						  teller02_info.total_waits_taken +
 8001b60:	4413      	add	r3, r2
		total_num_waits = teller01_info.total_waits_taken +
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28

		monitor_data_size = sprintf((char*)monitor_buffer, "The average time tellers wait for customers: %ld seconds\r\n",
				MS_TO_SIM_SEC(total_wait_time / total_num_waits));
 8001b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The average time tellers wait for customers: %ld seconds\r\n",
 8001b72:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <StartSimMonitorInfo+0x300>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4932      	ldr	r1, [pc, #200]	; (8001c48 <StartSimMonitorInfo+0x30c>)
 8001b7e:	4829      	ldr	r0, [pc, #164]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001b80:	f007 fb0c 	bl	800919c <sprintf>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a28      	ldr	r2, [pc, #160]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001b88:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	2364      	movs	r3, #100	; 0x64
 8001b92:	4924      	ldr	r1, [pc, #144]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001b94:	4825      	ldr	r0, [pc, #148]	; (8001c2c <StartSimMonitorInfo+0x2f0>)
 8001b96:	f002 ffcd 	bl	8004b34 <HAL_UART_Transmit>

		// The maximum customer wait time in the queue.
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum customer wait time in the queue: %d seconds\r\n",
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <StartSimMonitorInfo+0x310>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	492b      	ldr	r1, [pc, #172]	; (8001c50 <StartSimMonitorInfo+0x314>)
 8001ba2:	4820      	ldr	r0, [pc, #128]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001ba4:	f007 fafa 	bl	800919c <sprintf>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001bac:	6013      	str	r3, [r2, #0]
				max_customer_queue_time);
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <StartSimMonitorInfo+0x2ec>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	491b      	ldr	r1, [pc, #108]	; (8001c24 <StartSimMonitorInfo+0x2e8>)
 8001bb8:	481c      	ldr	r0, [pc, #112]	; (8001c2c <StartSimMonitorInfo+0x2f0>)
 8001bba:	f002 ffbb 	bl	8004b34 <HAL_UART_Transmit>

		// The maximum wait time for tellers waiting for customers.
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum wait time for tellers waiting for customers: %ld seconds\r\n",
				MAX(MAX(teller01_info.max_wait_time, teller02_info.max_wait_time), teller03_info.max_wait_time));
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <StartSimMonitorInfo+0x2c8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <StartSimMonitorInfo+0x2d0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	623b      	str	r3, [r7, #32]
 8001bca:	6a3a      	ldr	r2, [r7, #32]
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	bf38      	it	cc
 8001bd2:	4613      	movcc	r3, r2
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <StartSimMonitorInfo+0x2d4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf38      	it	cc
 8001be4:	4613      	movcc	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum wait time for tellers waiting for customers: %ld seconds\r\n",
 8001be6:	461a      	mov	r2, r3
 8001be8:	e034      	b.n	8001c54 <StartSimMonitorInfo+0x318>
 8001bea:	bf00      	nop
 8001bec:	2000080c 	.word	0x2000080c
 8001bf0:	200007f4 	.word	0x200007f4
 8001bf4:	200007f8 	.word	0x200007f8
 8001bf8:	200007fc 	.word	0x200007fc
 8001bfc:	057619f1 	.word	0x057619f1
 8001c00:	51eb851f 	.word	0x51eb851f
 8001c04:	20000810 	.word	0x20000810
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000830 	.word	0x20000830
 8001c10:	20000850 	.word	0x20000850
 8001c14:	aaaaaaab 	.word	0xaaaaaaab
 8001c18:	88888889 	.word	0x88888889
 8001c1c:	20000804 	.word	0x20000804
 8001c20:	0800dc00 	.word	0x0800dc00
 8001c24:	20000870 	.word	0x20000870
 8001c28:	20000a64 	.word	0x20000a64
 8001c2c:	20000764 	.word	0x20000764
 8001c30:	0800dc7c 	.word	0x0800dc7c
 8001c34:	0800dcb4 	.word	0x0800dcb4
 8001c38:	20000710 	.word	0x20000710
 8001c3c:	cccccccd 	.word	0xcccccccd
 8001c40:	0800dd08 	.word	0x0800dd08
 8001c44:	0800dd54 	.word	0x0800dd54
 8001c48:	0800dd9c 	.word	0x0800dd9c
 8001c4c:	20000712 	.word	0x20000712
 8001c50:	0800ddd8 	.word	0x0800ddd8
 8001c54:	4967      	ldr	r1, [pc, #412]	; (8001df4 <StartSimMonitorInfo+0x4b8>)
 8001c56:	4868      	ldr	r0, [pc, #416]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001c58:	f007 faa0 	bl	800919c <sprintf>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a67      	ldr	r2, [pc, #412]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001c60:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001c62:	4b66      	ldr	r3, [pc, #408]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	2364      	movs	r3, #100	; 0x64
 8001c6a:	4963      	ldr	r1, [pc, #396]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001c6c:	4864      	ldr	r0, [pc, #400]	; (8001e00 <StartSimMonitorInfo+0x4c4>)
 8001c6e:	f002 ff61 	bl	8004b34 <HAL_UART_Transmit>

		// The maximum transaction time for the tellers.
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum transaction time for the tellers: %ld seconds\r\n",
				MAX(MAX(teller01_info.max_service_time, teller02_info.max_service_time), teller03_info.max_service_time));
 8001c72:	4b64      	ldr	r3, [pc, #400]	; (8001e04 <StartSimMonitorInfo+0x4c8>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <StartSimMonitorInfo+0x4cc>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	4293      	cmp	r3, r2
 8001c84:	bf38      	it	cc
 8001c86:	4613      	movcc	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b60      	ldr	r3, [pc, #384]	; (8001e0c <StartSimMonitorInfo+0x4d0>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4293      	cmp	r3, r2
 8001c96:	bf38      	it	cc
 8001c98:	4613      	movcc	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum transaction time for the tellers: %ld seconds\r\n",
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	495c      	ldr	r1, [pc, #368]	; (8001e10 <StartSimMonitorInfo+0x4d4>)
 8001c9e:	4856      	ldr	r0, [pc, #344]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001ca0:	f007 fa7c 	bl	800919c <sprintf>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a55      	ldr	r2, [pc, #340]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001ca8:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2364      	movs	r3, #100	; 0x64
 8001cb2:	4951      	ldr	r1, [pc, #324]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001cb4:	4852      	ldr	r0, [pc, #328]	; (8001e00 <StartSimMonitorInfo+0x4c4>)
 8001cb6:	f002 ff3d 	bl	8004b34 <HAL_UART_Transmit>

		// The maximum depth of the customer queue.
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum depth of the customer queue: %d\r\n",
 8001cba:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <StartSimMonitorInfo+0x4d8>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4955      	ldr	r1, [pc, #340]	; (8001e18 <StartSimMonitorInfo+0x4dc>)
 8001cc2:	484d      	ldr	r0, [pc, #308]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001cc4:	f007 fa6a 	bl	800919c <sprintf>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4a4c      	ldr	r2, [pc, #304]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001ccc:	6013      	str	r3, [r2, #0]
				max_customer_queue_depth);
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001cce:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2364      	movs	r3, #100	; 0x64
 8001cd6:	4948      	ldr	r1, [pc, #288]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001cd8:	4849      	ldr	r0, [pc, #292]	; (8001e00 <StartSimMonitorInfo+0x4c4>)
 8001cda:	f002 ff2b 	bl	8004b34 <HAL_UART_Transmit>

		// The idle hook count.
		monitor_data_size = sprintf((char*)monitor_buffer, "The idle hook count: %" PRIu64 "\r\n",
 8001cde:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <StartSimMonitorInfo+0x4e0>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	494e      	ldr	r1, [pc, #312]	; (8001e20 <StartSimMonitorInfo+0x4e4>)
 8001ce6:	4844      	ldr	r0, [pc, #272]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001ce8:	f007 fa58 	bl	800919c <sprintf>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a43      	ldr	r2, [pc, #268]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001cf0:	6013      	str	r3, [r2, #0]
				idle_hook_count);
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001cf2:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	2364      	movs	r3, #100	; 0x64
 8001cfa:	493f      	ldr	r1, [pc, #252]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001cfc:	4840      	ldr	r0, [pc, #256]	; (8001e00 <StartSimMonitorInfo+0x4c4>)
 8001cfe:	f002 ff19 	bl	8004b34 <HAL_UART_Transmit>

		// Number of breaks for each of the three tellers.
		monitor_data_size = sprintf((char*)monitor_buffer, "Number of breaks for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
				teller01_info.total_breaks_taken,
 8001d02:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <StartSimMonitorInfo+0x4c8>)
 8001d04:	8adb      	ldrh	r3, [r3, #22]
		monitor_data_size = sprintf((char*)monitor_buffer, "Number of breaks for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001d06:	461a      	mov	r2, r3
				teller02_info.total_breaks_taken,
 8001d08:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <StartSimMonitorInfo+0x4cc>)
 8001d0a:	8adb      	ldrh	r3, [r3, #22]
		monitor_data_size = sprintf((char*)monitor_buffer, "Number of breaks for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001d0c:	4619      	mov	r1, r3
				teller03_info.total_breaks_taken);
 8001d0e:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <StartSimMonitorInfo+0x4d0>)
 8001d10:	8adb      	ldrh	r3, [r3, #22]
		monitor_data_size = sprintf((char*)monitor_buffer, "Number of breaks for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	460b      	mov	r3, r1
 8001d16:	4943      	ldr	r1, [pc, #268]	; (8001e24 <StartSimMonitorInfo+0x4e8>)
 8001d18:	4837      	ldr	r0, [pc, #220]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001d1a:	f007 fa3f 	bl	800919c <sprintf>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001d22:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001d24:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	2364      	movs	r3, #100	; 0x64
 8001d2c:	4932      	ldr	r1, [pc, #200]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001d2e:	4834      	ldr	r0, [pc, #208]	; (8001e00 <StartSimMonitorInfo+0x4c4>)
 8001d30:	f002 ff00 	bl	8004b34 <HAL_UART_Transmit>

		// Average break time for each of the three tellers.
		monitor_data_size = sprintf((char*)monitor_buffer, "Average break time for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
				teller01_info.total_break_time / teller01_info.total_breaks_taken,
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <StartSimMonitorInfo+0x4c8>)
 8001d36:	8a9a      	ldrh	r2, [r3, #20]
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <StartSimMonitorInfo+0x4c8>)
 8001d3a:	8adb      	ldrh	r3, [r3, #22]
		monitor_data_size = sprintf((char*)monitor_buffer, "Average break time for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4619      	mov	r1, r3
				teller02_info.total_break_time / teller02_info.total_breaks_taken,
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <StartSimMonitorInfo+0x4cc>)
 8001d46:	8a9a      	ldrh	r2, [r3, #20]
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <StartSimMonitorInfo+0x4cc>)
 8001d4a:	8adb      	ldrh	r3, [r3, #22]
		monitor_data_size = sprintf((char*)monitor_buffer, "Average break time for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4618      	mov	r0, r3
				teller03_info.total_break_time / teller03_info.total_breaks_taken);
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <StartSimMonitorInfo+0x4d0>)
 8001d56:	8a9a      	ldrh	r2, [r3, #20]
 8001d58:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <StartSimMonitorInfo+0x4d0>)
 8001d5a:	8adb      	ldrh	r3, [r3, #22]
		monitor_data_size = sprintf((char*)monitor_buffer, "Average break time for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4603      	mov	r3, r0
 8001d66:	460a      	mov	r2, r1
 8001d68:	492f      	ldr	r1, [pc, #188]	; (8001e28 <StartSimMonitorInfo+0x4ec>)
 8001d6a:	4823      	ldr	r0, [pc, #140]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001d6c:	f007 fa16 	bl	800919c <sprintf>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001d74:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2364      	movs	r3, #100	; 0x64
 8001d7e:	491e      	ldr	r1, [pc, #120]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001d80:	481f      	ldr	r0, [pc, #124]	; (8001e00 <StartSimMonitorInfo+0x4c4>)
 8001d82:	f002 fed7 	bl	8004b34 <HAL_UART_Transmit>

		// Longest break time for each of the three tellers
		monitor_data_size = sprintf((char*)monitor_buffer, "Longest break time for each of the three tellers\r\n\tTeller01: %ld\r\n\tTeller02: %ld\r\n\tTeller03: %ld\r\n",
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <StartSimMonitorInfo+0x4c8>)
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <StartSimMonitorInfo+0x4cc>)
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <StartSimMonitorInfo+0x4d0>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	460b      	mov	r3, r1
 8001d96:	4925      	ldr	r1, [pc, #148]	; (8001e2c <StartSimMonitorInfo+0x4f0>)
 8001d98:	4817      	ldr	r0, [pc, #92]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001d9a:	f007 f9ff 	bl	800919c <sprintf>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001da2:	6013      	str	r3, [r2, #0]
				teller01_info.max_break_time,
				teller02_info.max_break_time,
				teller03_info.max_break_time);

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	2364      	movs	r3, #100	; 0x64
 8001dac:	4912      	ldr	r1, [pc, #72]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001dae:	4814      	ldr	r0, [pc, #80]	; (8001e00 <StartSimMonitorInfo+0x4c4>)
 8001db0:	f002 fec0 	bl	8004b34 <HAL_UART_Transmit>

		// Shortest break time for each of the three tellers
		monitor_data_size = sprintf((char*)monitor_buffer, "Shortest break time for each of the three tellers\r\n\tTeller01: %ld\r\n\tTeller02: %ld\r\n\tTeller03: %ld\r\n",
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <StartSimMonitorInfo+0x4c8>)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <StartSimMonitorInfo+0x4cc>)
 8001dba:	68d9      	ldr	r1, [r3, #12]
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <StartSimMonitorInfo+0x4d0>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	491a      	ldr	r1, [pc, #104]	; (8001e30 <StartSimMonitorInfo+0x4f4>)
 8001dc6:	480c      	ldr	r0, [pc, #48]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001dc8:	f007 f9e8 	bl	800919c <sprintf>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001dd0:	6013      	str	r3, [r2, #0]
				teller01_info.min_break_time,
				teller02_info.min_break_time,
				teller03_info.min_break_time);

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <StartSimMonitorInfo+0x4c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	2364      	movs	r3, #100	; 0x64
 8001dda:	4907      	ldr	r1, [pc, #28]	; (8001df8 <StartSimMonitorInfo+0x4bc>)
 8001ddc:	4808      	ldr	r0, [pc, #32]	; (8001e00 <StartSimMonitorInfo+0x4c4>)
 8001dde:	f002 fea9 	bl	8004b34 <HAL_UART_Transmit>

		osThreadSuspend(simMonitorInfoHandle);
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <StartSimMonitorInfo+0x4f8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fd1d 	bl	8005826 <osThreadSuspend>
	}

	// Update monitor info every one minute of simulated time.
    osDelay(100);
 8001dec:	2064      	movs	r0, #100	; 0x64
 8001dee:	f003 fd3b 	bl	8005868 <osDelay>
	current_time_ms = HAL_GetTick();
 8001df2:	e5a7      	b.n	8001944 <StartSimMonitorInfo+0x8>
 8001df4:	0800de14 	.word	0x0800de14
 8001df8:	20000870 	.word	0x20000870
 8001dfc:	20000a64 	.word	0x20000a64
 8001e00:	20000764 	.word	0x20000764
 8001e04:	20000810 	.word	0x20000810
 8001e08:	20000830 	.word	0x20000830
 8001e0c:	20000850 	.word	0x20000850
 8001e10:	0800de5c 	.word	0x0800de5c
 8001e14:	20000714 	.word	0x20000714
 8001e18:	0800de98 	.word	0x0800de98
 8001e1c:	20000708 	.word	0x20000708
 8001e20:	0800dec8 	.word	0x0800dec8
 8001e24:	0800dee4 	.word	0x0800dee4
 8001e28:	0800df44 	.word	0x0800df44
 8001e2c:	0800dfa4 	.word	0x0800dfa4
 8001e30:	0800e008 	.word	0x0800e008
 8001e34:	20000800 	.word	0x20000800

08001e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e4a:	f000 fb61 	bl	8002510 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40001000 	.word	0x40001000

08001e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
}
 8001e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <Error_Handler+0x8>

08001e66 <rotl>:

#include <stdint.h>
#include "rng.h"

static inline uint64_t rotl(const uint64_t x, int k)
{
 8001e66:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
	return (x << k) | (x >> (64 - k));
 8001e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	f1a1 0620 	sub.w	r6, r1, #32
 8001e7e:	f1c1 0020 	rsb	r0, r1, #32
 8001e82:	fa03 f901 	lsl.w	r9, r3, r1
 8001e86:	fa02 f606 	lsl.w	r6, r2, r6
 8001e8a:	ea49 0906 	orr.w	r9, r9, r6
 8001e8e:	fa22 f000 	lsr.w	r0, r2, r0
 8001e92:	ea49 0900 	orr.w	r9, r9, r0
 8001e96:	fa02 f801 	lsl.w	r8, r2, r1
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4249      	negs	r1, r1
 8001e9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ea2:	f1c1 0620 	rsb	r6, r1, #32
 8001ea6:	f1a1 0020 	sub.w	r0, r1, #32
 8001eaa:	fa22 f401 	lsr.w	r4, r2, r1
 8001eae:	fa03 f606 	lsl.w	r6, r3, r6
 8001eb2:	4334      	orrs	r4, r6
 8001eb4:	fa23 f000 	lsr.w	r0, r3, r0
 8001eb8:	4304      	orrs	r4, r0
 8001eba:	fa23 f501 	lsr.w	r5, r3, r1
 8001ebe:	ea48 0a04 	orr.w	sl, r8, r4
 8001ec2:	ea49 0b05 	orr.w	fp, r9, r5
 8001ec6:	4654      	mov	r4, sl
 8001ec8:	465d      	mov	r5, fp
 8001eca:	4622      	mov	r2, r4
 8001ecc:	462b      	mov	r3, r5
}
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001eda:	4770      	bx	lr

08001edc <generate_random_u64>:

// setting the seeds
static uint64_t s[2] = {SEED1, SEED2};

uint64_t generate_random_u64(void)
{
 8001edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ee0:	b08b      	sub	sp, #44	; 0x2c
 8001ee2:	af00      	add	r7, sp, #0
	const uint64_t s0 = s[0];
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <generate_random_u64+0xbc>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t s1 = s[1];
 8001eee:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <generate_random_u64+0xbc>)
 8001ef0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ef4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	const uint64_t result = rotl(s0 + s1, 17) + s0;
 8001ef8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f00:	1886      	adds	r6, r0, r2
 8001f02:	60be      	str	r6, [r7, #8]
 8001f04:	eb41 0303 	adc.w	r3, r1, r3
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	2211      	movs	r2, #17
 8001f0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f10:	f7ff ffa9 	bl	8001e66 <rotl>
 8001f14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f18:	1816      	adds	r6, r2, r0
 8001f1a:	603e      	str	r6, [r7, #0]
 8001f1c:	414b      	adcs	r3, r1
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f24:	e9c7 2304 	strd	r2, r3, [r7, #16]

	s1 ^= s0;
 8001f28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f30:	ea80 0a02 	eor.w	sl, r0, r2
 8001f34:	ea81 0b03 	eor.w	fp, r1, r3
 8001f38:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	s[0] = rotl(s0, 49) ^ s1 ^ (s1 << 21); // a, b
 8001f3c:	2231      	movs	r2, #49	; 0x31
 8001f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f42:	f7ff ff90 	bl	8001e66 <rotl>
 8001f46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f4a:	ea80 0402 	eor.w	r4, r0, r2
 8001f4e:	ea81 0503 	eor.w	r5, r1, r3
 8001f52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	054b      	lsls	r3, r1, #21
 8001f60:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 8001f64:	0542      	lsls	r2, r0, #21
 8001f66:	ea84 0802 	eor.w	r8, r4, r2
 8001f6a:	ea85 0903 	eor.w	r9, r5, r3
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <generate_random_u64+0xbc>)
 8001f70:	e9c3 8900 	strd	r8, r9, [r3]
	s[1] = rotl(s1, 28); // c
 8001f74:	221c      	movs	r2, #28
 8001f76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f7a:	f7ff ff74 	bl	8001e66 <rotl>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4905      	ldr	r1, [pc, #20]	; (8001f98 <generate_random_u64+0xbc>)
 8001f84:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return result;
 8001f88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	372c      	adds	r7, #44	; 0x2c
 8001f92:	46bd      	mov	sp, r7
 8001f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f98:	20000010 	.word	0x20000010

08001f9c <rand_range>:

uint64_t rand_range(uint64_t start_inclusive, uint64_t end_inclusive)
{
 8001f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa0:	b08a      	sub	sp, #40	; 0x28
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint64_t rand_num;
	do
	{
		rand_num = start_inclusive + generate_random_u64() / ((uint64_t)(-1) / (end_inclusive - start_inclusive + 1) + 1);
 8001fac:	f7ff ff96 	bl	8001edc <generate_random_u64>
 8001fb0:	e9c7 0100 	strd	r0, r1, [r7]
 8001fb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fbc:	1a84      	subs	r4, r0, r2
 8001fbe:	eb61 0503 	sbc.w	r5, r1, r3
 8001fc2:	1c63      	adds	r3, r4, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	f145 0300 	adc.w	r3, r5, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fd8:	f7fe fde6 	bl	8000ba8 <__aeabi_uldivmod>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	f112 0a01 	adds.w	sl, r2, #1
 8001fe4:	f143 0b00 	adc.w	fp, r3, #0
 8001fe8:	4652      	mov	r2, sl
 8001fea:	465b      	mov	r3, fp
 8001fec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ff0:	f7fe fdda 	bl	8000ba8 <__aeabi_uldivmod>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002000:	eb12 0800 	adds.w	r8, r2, r0
 8002004:	eb43 0901 	adc.w	r9, r3, r1
 8002008:	e9c7 8908 	strd	r8, r9, [r7, #32]
	}
	while(rand_num > end_inclusive);
 800200c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002010:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002014:	4290      	cmp	r0, r2
 8002016:	eb71 0303 	sbcs.w	r3, r1, r3
 800201a:	d3c7      	bcc.n	8001fac <rand_range+0x10>

	return rand_num;
 800201c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800202c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_MspInit+0x4c>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_MspInit+0x4c>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6613      	str	r3, [r2, #96]	; 0x60
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_MspInit+0x4c>)
 8002040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_MspInit+0x4c>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_MspInit+0x4c>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6593      	str	r3, [r2, #88]	; 0x58
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_MspInit+0x4c>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	210f      	movs	r1, #15
 8002066:	f06f 0001 	mvn.w	r0, #1
 800206a:	f000 fb29 	bl	80026c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000

0800207c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208c:	d10b      	bne.n	80020a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_TIM_Base_MspInit+0x38>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_TIM_Base_MspInit+0x38>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_TIM_Base_MspInit+0x38>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0ac      	sub	sp, #176	; 0xb0
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2288      	movs	r2, #136	; 0x88
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f007 f8c2 	bl	8009262 <memset>
  if(huart->Instance==USART2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a21      	ldr	r2, [pc, #132]	; (8002168 <HAL_UART_MspInit+0xb0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d13b      	bne.n	8002160 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020e8:	2302      	movs	r3, #2
 80020ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 fb7d 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002100:	f7ff feac 	bl	8001e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_UART_MspInit+0xb4>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <HAL_UART_MspInit+0xb4>)
 800210a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210e:	6593      	str	r3, [r2, #88]	; 0x58
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_UART_MspInit+0xb4>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_UART_MspInit+0xb4>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_UART_MspInit+0xb4>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_UART_MspInit+0xb4>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002134:	230c      	movs	r3, #12
 8002136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800214c:	2307      	movs	r3, #7
 800214e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f000 fada 	bl	8002714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	37b0      	adds	r7, #176	; 0xb0
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40004400 	.word	0x40004400
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800217e:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_InitTick+0xe0>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a33      	ldr	r2, [pc, #204]	; (8002250 <HAL_InitTick+0xe0>)
 8002184:	f043 0310 	orr.w	r3, r3, #16
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_InitTick+0xe0>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002196:	f107 0210 	add.w	r2, r7, #16
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f001 fa95 	bl	80036d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021b0:	f001 fa62 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 80021b4:	6378      	str	r0, [r7, #52]	; 0x34
 80021b6:	e004      	b.n	80021c2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021b8:	f001 fa5e 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 80021bc:	4603      	mov	r3, r0
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_InitTick+0xe4>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	3b01      	subs	r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_InitTick+0xe8>)
 80021d2:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_InitTick+0xec>)
 80021d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_InitTick+0xe8>)
 80021d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_InitTick+0xe8>)
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_InitTick+0xe8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_InitTick+0xe8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_InitTick+0xe8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80021f6:	4818      	ldr	r0, [pc, #96]	; (8002258 <HAL_InitTick+0xe8>)
 80021f8:	f001 ffb8 	bl	800416c <HAL_TIM_Base_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002202:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11b      	bne.n	8002242 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800220a:	4813      	ldr	r0, [pc, #76]	; (8002258 <HAL_InitTick+0xe8>)
 800220c:	f002 f806 	bl	800421c <HAL_TIM_Base_Start_IT>
 8002210:	4603      	mov	r3, r0
 8002212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002216:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800221a:	2b00      	cmp	r3, #0
 800221c:	d111      	bne.n	8002242 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800221e:	2036      	movs	r0, #54	; 0x36
 8002220:	f000 fa6a 	bl	80026f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	d808      	bhi.n	800223c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800222a:	2200      	movs	r2, #0
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	2036      	movs	r0, #54	; 0x36
 8002230:	f000 fa46 	bl	80026c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002234:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <HAL_InitTick+0xf0>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e002      	b.n	8002242 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002246:	4618      	mov	r0, r3
 8002248:	3738      	adds	r7, #56	; 0x38
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	431bde83 	.word	0x431bde83
 8002258:	20000a68 	.word	0x20000a68
 800225c:	40001000 	.word	0x40001000
 8002260:	20000024 	.word	0x20000024

08002264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <NMI_Handler+0x4>

0800226a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <HardFault_Handler+0x4>

08002270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <MemManage_Handler+0x4>

08002276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <UsageFault_Handler+0x4>

08002282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <TIM6_DAC_IRQHandler+0x10>)
 8002296:	f002 f831 	bl	80042fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000a68 	.word	0x20000a68

080022a4 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80022a8:	2002      	movs	r0, #2
 80022aa:	f000 fbf5 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80022b6:	2010      	movs	r0, #16
 80022b8:	f000 fbee 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}

080022c0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f000 fbe7 	bl	8002a98 <HAL_GPIO_EXTI_IRQHandler>
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  return 1;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_kill>:

int _kill(int pid, int sig)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022e8:	f007 f838 	bl	800935c <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2216      	movs	r2, #22
 80022f0:	601a      	str	r2, [r3, #0]
  return -1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <_exit>:

void _exit (int status)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002306:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffe7 	bl	80022de <_kill>
  while (1) {}    /* Make sure we hang here */
 8002310:	e7fe      	b.n	8002310 <_exit+0x12>

08002312 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e00a      	b.n	800233a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002324:	f3af 8000 	nop.w
 8002328:	4601      	mov	r1, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	60ba      	str	r2, [r7, #8]
 8002330:	b2ca      	uxtb	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	dbf0      	blt.n	8002324 <_read+0x12>
  }

  return len;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e009      	b.n	8002372 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbf1      	blt.n	800235e <_write+0x12>
  }
  return len;
 800237a:	687b      	ldr	r3, [r7, #4]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_close>:

int _close(int file)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ac:	605a      	str	r2, [r3, #4]
  return 0;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_isatty>:

int _isatty(int file)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023c4:	2301      	movs	r3, #1
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	; (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f006 ff9e 	bl	800935c <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20018000 	.word	0x20018000
 800244c:	00000400 	.word	0x00000400
 8002450:	20000ab4 	.word	0x20000ab4
 8002454:	20004470 	.word	0x20004470

08002458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <SystemInit+0x20>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	4a05      	ldr	r2, [pc, #20]	; (8002478 <SystemInit+0x20>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800247c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002480:	f7ff ffea 	bl	8002458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002486:	490d      	ldr	r1, [pc, #52]	; (80024bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <LoopForever+0xe>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800248c:	e002      	b.n	8002494 <LoopCopyDataInit>

0800248e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002492:	3304      	adds	r3, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002498:	d3f9      	bcc.n	800248e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <LoopForever+0x16>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a0:	e001      	b.n	80024a6 <LoopFillZerobss>

080024a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a4:	3204      	adds	r2, #4

080024a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a8:	d3fb      	bcc.n	80024a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024aa:	f006 ff5d 	bl	8009368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ae:	f7fe fe2b 	bl	8001108 <main>

080024b2 <LoopForever>:

LoopForever:
    b LoopForever
 80024b2:	e7fe      	b.n	80024b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	200006e4 	.word	0x200006e4
  ldr r2, =_sidata
 80024c0:	0800e578 	.word	0x0800e578
  ldr r2, =_sbss
 80024c4:	200006e8 	.word	0x200006e8
  ldr r4, =_ebss
 80024c8:	20004470 	.word	0x20004470

080024cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC1_2_IRQHandler>
	...

080024d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_Init+0x3c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_Init+0x3c>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e6:	2003      	movs	r0, #3
 80024e8:	f000 f8df 	bl	80026aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ec:	200f      	movs	r0, #15
 80024ee:	f7ff fe3f 	bl	8002170 <HAL_InitTick>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	71fb      	strb	r3, [r7, #7]
 80024fc:	e001      	b.n	8002502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024fe:	f7ff fd95 	bl	800202c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002502:	79fb      	ldrb	r3, [r7, #7]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40022000 	.word	0x40022000

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x20>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x24>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_IncTick+0x24>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000028 	.word	0x20000028
 8002534:	20000ab8 	.word	0x20000ab8

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_GetTick+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000ab8 	.word	0x20000ab8

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	; (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ff4c 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d2:	f7ff ff61 	bl	8002598 <__NVIC_GetPriorityGrouping>
 80026d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	6978      	ldr	r0, [r7, #20]
 80026de:	f7ff ffb1 	bl	8002644 <NVIC_EncodePriority>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff80 	bl	80025f0 <__NVIC_SetPriority>
}
 80026f0:	bf00      	nop
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff54 	bl	80025b4 <__NVIC_EnableIRQ>
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002722:	e17f      	b.n	8002a24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8171 	beq.w	8002a1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d005      	beq.n	8002754 <HAL_GPIO_Init+0x40>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d130      	bne.n	80027b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800278a:	2201      	movs	r2, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 0201 	and.w	r2, r3, #1
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d118      	bne.n	80027f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80027c8:	2201      	movs	r2, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	f003 0201 	and.w	r2, r3, #1
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d017      	beq.n	8002830 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d123      	bne.n	8002884 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	08da      	lsrs	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3208      	adds	r2, #8
 8002844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	220f      	movs	r2, #15
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	08da      	lsrs	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3208      	adds	r2, #8
 800287e:	6939      	ldr	r1, [r7, #16]
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0203 	and.w	r2, r3, #3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80ac 	beq.w	8002a1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	4b5f      	ldr	r3, [pc, #380]	; (8002a44 <HAL_GPIO_Init+0x330>)
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	4a5e      	ldr	r2, [pc, #376]	; (8002a44 <HAL_GPIO_Init+0x330>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6613      	str	r3, [r2, #96]	; 0x60
 80028d2:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_GPIO_Init+0x330>)
 80028d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028de:	4a5a      	ldr	r2, [pc, #360]	; (8002a48 <HAL_GPIO_Init+0x334>)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002908:	d025      	beq.n	8002956 <HAL_GPIO_Init+0x242>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4f      	ldr	r2, [pc, #316]	; (8002a4c <HAL_GPIO_Init+0x338>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01f      	beq.n	8002952 <HAL_GPIO_Init+0x23e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4e      	ldr	r2, [pc, #312]	; (8002a50 <HAL_GPIO_Init+0x33c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d019      	beq.n	800294e <HAL_GPIO_Init+0x23a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4d      	ldr	r2, [pc, #308]	; (8002a54 <HAL_GPIO_Init+0x340>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0x236>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4c      	ldr	r2, [pc, #304]	; (8002a58 <HAL_GPIO_Init+0x344>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00d      	beq.n	8002946 <HAL_GPIO_Init+0x232>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4b      	ldr	r2, [pc, #300]	; (8002a5c <HAL_GPIO_Init+0x348>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x22e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_GPIO_Init+0x34c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_GPIO_Init+0x22a>
 800293a:	2306      	movs	r3, #6
 800293c:	e00c      	b.n	8002958 <HAL_GPIO_Init+0x244>
 800293e:	2307      	movs	r3, #7
 8002940:	e00a      	b.n	8002958 <HAL_GPIO_Init+0x244>
 8002942:	2305      	movs	r3, #5
 8002944:	e008      	b.n	8002958 <HAL_GPIO_Init+0x244>
 8002946:	2304      	movs	r3, #4
 8002948:	e006      	b.n	8002958 <HAL_GPIO_Init+0x244>
 800294a:	2303      	movs	r3, #3
 800294c:	e004      	b.n	8002958 <HAL_GPIO_Init+0x244>
 800294e:	2302      	movs	r3, #2
 8002950:	e002      	b.n	8002958 <HAL_GPIO_Init+0x244>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x244>
 8002956:	2300      	movs	r3, #0
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	f002 0203 	and.w	r2, r2, #3
 800295e:	0092      	lsls	r2, r2, #2
 8002960:	4093      	lsls	r3, r2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002968:	4937      	ldr	r1, [pc, #220]	; (8002a48 <HAL_GPIO_Init+0x334>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	3302      	adds	r3, #2
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_GPIO_Init+0x350>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800299a:	4a32      	ldr	r2, [pc, #200]	; (8002a64 <HAL_GPIO_Init+0x350>)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029a0:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <HAL_GPIO_Init+0x350>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <HAL_GPIO_Init+0x350>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <HAL_GPIO_Init+0x350>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_GPIO_Init+0x350>)
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <HAL_GPIO_Init+0x350>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <HAL_GPIO_Init+0x350>)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f47f ae78 	bne.w	8002724 <HAL_GPIO_Init+0x10>
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	48000400 	.word	0x48000400
 8002a50:	48000800 	.word	0x48000800
 8002a54:	48000c00 	.word	0x48000c00
 8002a58:	48001000 	.word	0x48001000
 8002a5c:	48001400 	.word	0x48001400
 8002a60:	48001800 	.word	0x48001800
 8002a64:	40010400 	.word	0x40010400

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aae:	4a05      	ldr	r2, [pc, #20]	; (8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fa5e 	bl	8000f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40007000 	.word	0x40007000

08002ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af2:	d130      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af4:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b00:	d038      	beq.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2232      	movs	r2, #50	; 0x32
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	3301      	adds	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b28:	e002      	b.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3c:	d102      	bne.n	8002b44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f2      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b50:	d110      	bne.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e00f      	b.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b62:	d007      	beq.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b6c:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40007000 	.word	0x40007000
 8002b88:	20000020 	.word	0x20000020
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e3ca      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba2:	4b97      	ldr	r3, [pc, #604]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bac:	4b94      	ldr	r3, [pc, #592]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80e4 	beq.w	8002d8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <HAL_RCC_OscConfig+0x4a>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	f040 808b 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	f040 8087 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bda:	4b89      	ldr	r3, [pc, #548]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x62>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e3a2      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <HAL_RCC_OscConfig+0x7c>
 8002c02:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c0a:	e005      	b.n	8002c18 <HAL_RCC_OscConfig+0x88>
 8002c0c:	4b7c      	ldr	r3, [pc, #496]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d223      	bcs.n	8002c64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fd87 	bl	8003734 <RCC_SetFlashLatencyFromMSIRange>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e383      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c30:	4b73      	ldr	r3, [pc, #460]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a72      	ldr	r2, [pc, #456]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c36:	f043 0308 	orr.w	r3, r3, #8
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	496d      	ldr	r1, [pc, #436]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4e:	4b6c      	ldr	r3, [pc, #432]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	4968      	ldr	r1, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
 8002c62:	e025      	b.n	8002cb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c64:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a65      	ldr	r2, [pc, #404]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4960      	ldr	r1, [pc, #384]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c82:	4b5f      	ldr	r3, [pc, #380]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	495b      	ldr	r1, [pc, #364]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fd47 	bl	8003734 <RCC_SetFlashLatencyFromMSIRange>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e343      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cb0:	f000 fc4a 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b52      	ldr	r3, [pc, #328]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	4950      	ldr	r1, [pc, #320]	; (8002e04 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	4a4e      	ldr	r2, [pc, #312]	; (8002e08 <HAL_RCC_OscConfig+0x278>)
 8002cce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cd0:	4b4e      	ldr	r3, [pc, #312]	; (8002e0c <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fa4b 	bl	8002170 <HAL_InitTick>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d052      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	e327      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d032      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cf0:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a42      	ldr	r2, [pc, #264]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff fc1c 	bl	8002538 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d04:	f7ff fc18 	bl	8002538 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e310      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d16:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d22:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a36      	ldr	r2, [pc, #216]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4931      	ldr	r1, [pc, #196]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d40:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	492c      	ldr	r1, [pc, #176]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
 8002d54:	e01a      	b.n	8002d8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d56:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a29      	ldr	r2, [pc, #164]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d62:	f7ff fbe9 	bl	8002538 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d6a:	f7ff fbe5 	bl	8002538 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e2dd      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d7c:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x1da>
 8002d88:	e000      	b.n	8002d8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d074      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x21a>
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d10e      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d10b      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d064      	beq.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d160      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e2ba      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x24a>
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e026      	b.n	8002e28 <HAL_RCC_OscConfig+0x298>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de2:	d115      	bne.n	8002e10 <HAL_RCC_OscConfig+0x280>
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a02      	ldr	r2, [pc, #8]	; (8002e00 <HAL_RCC_OscConfig+0x270>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x298>
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	0800e194 	.word	0x0800e194
 8002e08:	20000020 	.word	0x20000020
 8002e0c:	20000024 	.word	0x20000024
 8002e10:	4ba0      	ldr	r3, [pc, #640]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a9f      	ldr	r2, [pc, #636]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b9d      	ldr	r3, [pc, #628]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a9c      	ldr	r2, [pc, #624]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7ff fb82 	bl	8002538 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7ff fb7e 	bl	8002538 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e276      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4a:	4b92      	ldr	r3, [pc, #584]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x2a8>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7ff fb6e 	bl	8002538 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7ff fb6a 	bl	8002538 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e262      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e72:	4b88      	ldr	r3, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x2d0>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d060      	beq.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x310>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d119      	bne.n	8002ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d116      	bne.n	8002ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea0:	4b7c      	ldr	r3, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x328>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e23f      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb8:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	4973      	ldr	r1, [pc, #460]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ecc:	e040      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d023      	beq.n	8002f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6e      	ldr	r2, [pc, #440]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7ff fb29 	bl	8002538 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eea:	f7ff fb25 	bl	8002538 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e21d      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002efc:	4b65      	ldr	r3, [pc, #404]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b62      	ldr	r3, [pc, #392]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	495f      	ldr	r1, [pc, #380]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e018      	b.n	8002f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b5d      	ldr	r3, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5c      	ldr	r2, [pc, #368]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2a:	f7ff fb05 	bl	8002538 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f32:	f7ff fb01 	bl	8002538 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e1f9      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d03c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f64:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6a:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7ff fae0 	bl	8002538 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7ff fadc 	bl	8002538 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1d4      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8e:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ef      	beq.n	8002f7c <HAL_RCC_OscConfig+0x3ec>
 8002f9c:	e01b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7ff fac3 	bl	8002538 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7ff fabf 	bl	8002538 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1b7      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1ef      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80a6 	beq.w	8003130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10d      	bne.n	8003010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	4a26      	ldr	r2, [pc, #152]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8003000:	4b24      	ldr	r3, [pc, #144]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300c:	2301      	movs	r3, #1
 800300e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_RCC_OscConfig+0x508>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d118      	bne.n	800304e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301c:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_RCC_OscConfig+0x508>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_RCC_OscConfig+0x508>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003028:	f7ff fa86 	bl	8002538 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7ff fa82 	bl	8002538 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e17a      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_RCC_OscConfig+0x508>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d108      	bne.n	8003068 <HAL_RCC_OscConfig+0x4d8>
 8003056:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003066:	e029      	b.n	80030bc <HAL_RCC_OscConfig+0x52c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d115      	bne.n	800309c <HAL_RCC_OscConfig+0x50c>
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a07      	ldr	r2, [pc, #28]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003078:	f043 0304 	orr.w	r3, r3, #4
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a03      	ldr	r2, [pc, #12]	; (8003094 <HAL_RCC_OscConfig+0x504>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003090:	e014      	b.n	80030bc <HAL_RCC_OscConfig+0x52c>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
 800309c:	4b9c      	ldr	r3, [pc, #624]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	4a9b      	ldr	r2, [pc, #620]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ac:	4b98      	ldr	r3, [pc, #608]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	4a97      	ldr	r2, [pc, #604]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d016      	beq.n	80030f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7ff fa38 	bl	8002538 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7ff fa34 	bl	8002538 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e12a      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e2:	4b8b      	ldr	r3, [pc, #556]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ed      	beq.n	80030cc <HAL_RCC_OscConfig+0x53c>
 80030f0:	e015      	b.n	800311e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f2:	f7ff fa21 	bl	8002538 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fa:	f7ff fa1d 	bl	8002538 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f241 3288 	movw	r2, #5000	; 0x1388
 8003108:	4293      	cmp	r3, r2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e113      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003110:	4b7f      	ldr	r3, [pc, #508]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ed      	bne.n	80030fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003124:	4b7a      	ldr	r3, [pc, #488]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	4a79      	ldr	r2, [pc, #484]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 800312a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80fe 	beq.w	8003336 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	2b02      	cmp	r3, #2
 8003140:	f040 80d0 	bne.w	80032e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003144:	4b72      	ldr	r3, [pc, #456]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	429a      	cmp	r2, r3
 8003156:	d130      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	3b01      	subs	r3, #1
 8003164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d127      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d11f      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003184:	2a07      	cmp	r2, #7
 8003186:	bf14      	ite	ne
 8003188:	2201      	movne	r2, #1
 800318a:	2200      	moveq	r2, #0
 800318c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318e:	4293      	cmp	r3, r2
 8003190:	d113      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	3b01      	subs	r3, #1
 80031a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d109      	bne.n	80031ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d06e      	beq.n	8003298 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d069      	beq.n	8003294 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d105      	bne.n	80031d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031cc:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0ad      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031dc:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4b      	ldr	r2, [pc, #300]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80031e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031e8:	f7ff f9a6 	bl	8002538 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7ff f9a2 	bl	8002538 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e09a      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003202:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320e:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_RCC_OscConfig+0x784>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800321e:	3a01      	subs	r2, #1
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003228:	0212      	lsls	r2, r2, #8
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003230:	0852      	lsrs	r2, r2, #1
 8003232:	3a01      	subs	r2, #1
 8003234:	0552      	lsls	r2, r2, #21
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800323c:	0852      	lsrs	r2, r2, #1
 800323e:	3a01      	subs	r2, #1
 8003240:	0652      	lsls	r2, r2, #25
 8003242:	4311      	orrs	r1, r2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003248:	0912      	lsrs	r2, r2, #4
 800324a:	0452      	lsls	r2, r2, #17
 800324c:	430a      	orrs	r2, r1
 800324e:	4930      	ldr	r1, [pc, #192]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003250:	4313      	orrs	r3, r2
 8003252:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003254:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 800325a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800326a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800326c:	f7ff f964 	bl	8002538 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7ff f960 	bl	8002538 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e058      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003292:	e050      	b.n	8003336 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e04f      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d148      	bne.n	8003336 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a16      	ldr	r2, [pc, #88]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80032b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032bc:	f7ff f93c 	bl	8002538 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c4:	f7ff f938 	bl	8002538 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e030      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x734>
 80032e2:	e028      	b.n	8003336 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d023      	beq.n	8003332 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <HAL_RCC_OscConfig+0x780>)
 80032f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7ff f91f 	bl	8002538 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	e00c      	b.n	8003318 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fe:	f7ff f91b 	bl	8002538 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d905      	bls.n	8003318 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e013      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
 8003310:	40021000 	.word	0x40021000
 8003314:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_OscConfig+0x7b0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ec      	bne.n	80032fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x7b0>)
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	4905      	ldr	r1, [pc, #20]	; (8003340 <HAL_RCC_OscConfig+0x7b0>)
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_RCC_OscConfig+0x7b4>)
 800332c:	4013      	ands	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
 8003330:	e001      	b.n	8003336 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021000 	.word	0x40021000
 8003344:	feeefffc 	.word	0xfeeefffc

08003348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0e7      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800335c:	4b75      	ldr	r3, [pc, #468]	; (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d910      	bls.n	800338c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b72      	ldr	r3, [pc, #456]	; (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 0207 	bic.w	r2, r3, #7
 8003372:	4970      	ldr	r1, [pc, #448]	; (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b6e      	ldr	r3, [pc, #440]	; (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0cf      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b66      	ldr	r3, [pc, #408]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d908      	bls.n	80033ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b63      	ldr	r3, [pc, #396]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4960      	ldr	r1, [pc, #384]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04c      	beq.n	8003460 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	4b5a      	ldr	r3, [pc, #360]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d121      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0a6      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	4b54      	ldr	r3, [pc, #336]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d115      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e09a      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033fe:	4b4e      	ldr	r3, [pc, #312]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e08e      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340e:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e086      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b46      	ldr	r3, [pc, #280]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4943      	ldr	r1, [pc, #268]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003430:	f7ff f882 	bl	8002538 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7ff f87e 	bl	8002538 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e06e      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d010      	beq.n	800348e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	4b31      	ldr	r3, [pc, #196]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003478:	429a      	cmp	r2, r3
 800347a:	d208      	bcs.n	800348e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	492b      	ldr	r1, [pc, #172]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800348e:	4b29      	ldr	r3, [pc, #164]	; (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d210      	bcs.n	80034be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 0207 	bic.w	r2, r3, #7
 80034a4:	4923      	ldr	r1, [pc, #140]	; (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <HAL_RCC_ClockConfig+0x1ec>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d001      	beq.n	80034be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e036      	b.n	800352c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	4918      	ldr	r1, [pc, #96]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4910      	ldr	r1, [pc, #64]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034fc:	f000 f824 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8003500:	4602      	mov	r2, r0
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <HAL_RCC_ClockConfig+0x1f0>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	490b      	ldr	r1, [pc, #44]	; (800353c <HAL_RCC_ClockConfig+0x1f4>)
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	f003 031f 	and.w	r3, r3, #31
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
 8003518:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1f8>)
 800351a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x1fc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fe25 	bl	8002170 <HAL_InitTick>
 8003526:	4603      	mov	r3, r0
 8003528:	72fb      	strb	r3, [r7, #11]

  return status;
 800352a:	7afb      	ldrb	r3, [r7, #11]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40022000 	.word	0x40022000
 8003538:	40021000 	.word	0x40021000
 800353c:	0800e194 	.word	0x0800e194
 8003540:	20000020 	.word	0x20000020
 8003544:	20000024 	.word	0x20000024

08003548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	; 0x24
 800354c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003556:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003560:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x34>
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d121      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d11e      	bne.n	80035ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800357c:	4b34      	ldr	r3, [pc, #208]	; (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003588:	4b31      	ldr	r3, [pc, #196]	; (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 800358a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358e:	0a1b      	lsrs	r3, r3, #8
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	e005      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035a4:	4a2b      	ldr	r2, [pc, #172]	; (8003654 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035c0:	4b25      	ldr	r3, [pc, #148]	; (8003658 <HAL_RCC_GetSysClockFreq+0x110>)
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	e004      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_RCC_GetSysClockFreq+0x114>)
 80035ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d134      	bne.n	8003640 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035d6:	4b1e      	ldr	r3, [pc, #120]	; (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0xa6>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d003      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0xac>
 80035ec:	e005      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035ee:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <HAL_RCC_GetSysClockFreq+0x110>)
 80035f0:	617b      	str	r3, [r7, #20]
      break;
 80035f2:	e005      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_RCC_GetSysClockFreq+0x114>)
 80035f6:	617b      	str	r3, [r7, #20]
      break;
 80035f8:	e002      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	617b      	str	r3, [r7, #20]
      break;
 80035fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	3301      	adds	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	fb03 f202 	mul.w	r2, r3, r2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003626:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <HAL_RCC_GetSysClockFreq+0x108>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	0e5b      	lsrs	r3, r3, #25
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	3301      	adds	r3, #1
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003640:	69bb      	ldr	r3, [r7, #24]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	; 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000
 8003654:	0800e1ac 	.word	0x0800e1ac
 8003658:	00f42400 	.word	0x00f42400
 800365c:	007a1200 	.word	0x007a1200

08003660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_RCC_GetHCLKFreq+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000020 	.word	0x20000020

08003678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800367c:	f7ff fff0 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4904      	ldr	r1, [pc, #16]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	0800e1a4 	.word	0x0800e1a4

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036a8:	f7ff ffda 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0adb      	lsrs	r3, r3, #11
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4904      	ldr	r1, [pc, #16]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	0800e1a4 	.word	0x0800e1a4

080036d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	220f      	movs	r2, #15
 80036de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_RCC_GetClockConfig+0x5c>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0203 	and.w	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <HAL_RCC_GetClockConfig+0x5c>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_RCC_GetClockConfig+0x5c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_GetClockConfig+0x5c>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	08db      	lsrs	r3, r3, #3
 800370a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_RCC_GetClockConfig+0x60>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0207 	and.w	r2, r3, #7
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	40022000 	.word	0x40022000

08003734 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003740:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800374c:	f7ff f9bc 	bl	8002ac8 <HAL_PWREx_GetVoltageRange>
 8003750:	6178      	str	r0, [r7, #20]
 8003752:	e014      	b.n	800377e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	4a24      	ldr	r2, [pc, #144]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800375a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800376c:	f7ff f9ac 	bl	8002ac8 <HAL_PWREx_GetVoltageRange>
 8003770:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003784:	d10b      	bne.n	800379e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b80      	cmp	r3, #128	; 0x80
 800378a:	d919      	bls.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2ba0      	cmp	r3, #160	; 0xa0
 8003790:	d902      	bls.n	8003798 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003792:	2302      	movs	r3, #2
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e013      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003798:	2301      	movs	r3, #1
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	e010      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d902      	bls.n	80037aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037a4:	2303      	movs	r3, #3
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	e00a      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b80      	cmp	r3, #128	; 0x80
 80037ae:	d102      	bne.n	80037b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037b0:	2302      	movs	r3, #2
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	e004      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b70      	cmp	r3, #112	; 0x70
 80037ba:	d101      	bne.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037bc:	2301      	movs	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 0207 	bic.w	r2, r3, #7
 80037c8:	4909      	ldr	r1, [pc, #36]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40022000 	.word	0x40022000

080037f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037fc:	2300      	movs	r3, #0
 80037fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003800:	2300      	movs	r3, #0
 8003802:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380c:	2b00      	cmp	r3, #0
 800380e:	d041      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003814:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003818:	d02a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800381a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800381e:	d824      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003820:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003824:	d008      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003826:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800382a:	d81e      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003834:	d010      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003836:	e018      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003838:	4b86      	ldr	r3, [pc, #536]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a85      	ldr	r2, [pc, #532]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003842:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003844:	e015      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fabb 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003856:	e00c      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3320      	adds	r3, #32
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fba6 	bl	8003fb0 <RCCEx_PLLSAI2_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003868:	e003      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	74fb      	strb	r3, [r7, #19]
      break;
 800386e:	e000      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003878:	4b76      	ldr	r3, [pc, #472]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003886:	4973      	ldr	r1, [pc, #460]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800388e:	e001      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d041      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038a8:	d02a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038ae:	d824      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ba:	d81e      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c4:	d010      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038c6:	e018      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038c8:	4b62      	ldr	r3, [pc, #392]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a61      	ldr	r2, [pc, #388]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038d4:	e015      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fa73 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038e6:	e00c      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3320      	adds	r3, #32
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fb5e 	bl	8003fb0 <RCCEx_PLLSAI2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	74fb      	strb	r3, [r7, #19]
      break;
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003908:	4b52      	ldr	r3, [pc, #328]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003916:	494f      	ldr	r1, [pc, #316]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800391e:	e001      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80a0 	beq.w	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	4a40      	ldr	r2, [pc, #256]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003956:	6593      	str	r3, [r2, #88]	; 0x58
 8003958:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003964:	2301      	movs	r3, #1
 8003966:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003968:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003974:	f7fe fde0 	bl	8002538 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800397a:	e009      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397c:	f7fe fddc 	bl	8002538 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	74fb      	strb	r3, [r7, #19]
        break;
 800398e:	e005      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d15c      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039a2:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d019      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039cc:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fe fd9b 	bl	8002538 <HAL_GetTick>
 8003a02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a04:	e00b      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fe fd97 	bl	8002538 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d902      	bls.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ec      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a42:	4904      	ldr	r1, [pc, #16]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a4a:	e009      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
 8003a50:	e006      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a60:	7c7b      	ldrb	r3, [r7, #17]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a66:	4b9e      	ldr	r3, [pc, #632]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	4a9d      	ldr	r2, [pc, #628]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a7e:	4b98      	ldr	r3, [pc, #608]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f023 0203 	bic.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	4994      	ldr	r1, [pc, #592]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa0:	4b8f      	ldr	r3, [pc, #572]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 020c 	bic.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aae:	498c      	ldr	r1, [pc, #560]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ac2:	4b87      	ldr	r3, [pc, #540]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	4983      	ldr	r1, [pc, #524]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ae4:	4b7e      	ldr	r3, [pc, #504]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	497b      	ldr	r1, [pc, #492]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b06:	4b76      	ldr	r3, [pc, #472]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b14:	4972      	ldr	r1, [pc, #456]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b28:	4b6d      	ldr	r3, [pc, #436]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	496a      	ldr	r1, [pc, #424]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b4a:	4b65      	ldr	r3, [pc, #404]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	4961      	ldr	r1, [pc, #388]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b6c:	4b5c      	ldr	r3, [pc, #368]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7a:	4959      	ldr	r1, [pc, #356]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b8e:	4b54      	ldr	r3, [pc, #336]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	4950      	ldr	r1, [pc, #320]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	4948      	ldr	r1, [pc, #288]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bd2:	4b43      	ldr	r3, [pc, #268]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	493f      	ldr	r1, [pc, #252]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d028      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf4:	4b3a      	ldr	r3, [pc, #232]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c02:	4937      	ldr	r1, [pc, #220]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c12:	d106      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c14:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a31      	ldr	r2, [pc, #196]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c1e:	60d3      	str	r3, [r2, #12]
 8003c20:	e011      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c2a:	d10c      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f8c8 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c52:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	491f      	ldr	r1, [pc, #124]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c70:	d106      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c72:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7c:	60d3      	str	r3, [r2, #12]
 8003c7e:	e011      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f899 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02b      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbe:	4908      	ldr	r1, [pc, #32]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a02      	ldr	r2, [pc, #8]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cda:	60d3      	str	r3, [r2, #12]
 8003cdc:	e014      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 f867 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02f      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d22:	4928      	ldr	r1, [pc, #160]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d32:	d10d      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f844 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	74bb      	strb	r3, [r7, #18]
 8003d4e:	e011      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3320      	adds	r3, #32
 8003d5e:	2102      	movs	r1, #2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f925 	bl	8003fb0 <RCCEx_PLLSAI2_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d8e:	490d      	ldr	r1, [pc, #52]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db2:	4904      	ldr	r1, [pc, #16]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dba:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000

08003dc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dd6:	4b75      	ldr	r3, [pc, #468]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003de2:	4b72      	ldr	r3, [pc, #456]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0203 	and.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10d      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
       ||
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dfa:	4b6c      	ldr	r3, [pc, #432]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
       ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d047      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	e044      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d018      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0x86>
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d825      	bhi.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d002      	beq.n	8003e2a <RCCEx_PLLSAI1_Config+0x62>
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d009      	beq.n	8003e3c <RCCEx_PLLSAI1_Config+0x74>
 8003e28:	e020      	b.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e2a:	4b60      	ldr	r3, [pc, #384]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11d      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3a:	e01a      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e3c:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4c:	e013      	b.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e4e:	4b57      	ldr	r3, [pc, #348]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e5a:	4b54      	ldr	r3, [pc, #336]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e6a:	e006      	b.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e004      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e82:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	430b      	orrs	r3, r1
 8003e98:	4944      	ldr	r1, [pc, #272]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d17d      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ea4:	4b41      	ldr	r3, [pc, #260]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a40      	ldr	r2, [pc, #256]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb0:	f7fe fb42 	bl	8002538 <HAL_GetTick>
 8003eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eb6:	e009      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eb8:	f7fe fb3e 	bl	8002538 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d902      	bls.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eca:	e005      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ecc:	4b37      	ldr	r3, [pc, #220]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ef      	bne.n	8003eb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d160      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d111      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee4:	4b31      	ldr	r3, [pc, #196]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6892      	ldr	r2, [r2, #8]
 8003ef4:	0211      	lsls	r1, r2, #8
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68d2      	ldr	r2, [r2, #12]
 8003efa:	0912      	lsrs	r2, r2, #4
 8003efc:	0452      	lsls	r2, r2, #17
 8003efe:	430a      	orrs	r2, r1
 8003f00:	492a      	ldr	r1, [pc, #168]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	610b      	str	r3, [r1, #16]
 8003f06:	e027      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d112      	bne.n	8003f34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f0e:	4b27      	ldr	r3, [pc, #156]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6892      	ldr	r2, [r2, #8]
 8003f1e:	0211      	lsls	r1, r2, #8
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6912      	ldr	r2, [r2, #16]
 8003f24:	0852      	lsrs	r2, r2, #1
 8003f26:	3a01      	subs	r2, #1
 8003f28:	0552      	lsls	r2, r2, #21
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	491f      	ldr	r1, [pc, #124]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	610b      	str	r3, [r1, #16]
 8003f32:	e011      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	0211      	lsls	r1, r2, #8
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6952      	ldr	r2, [r2, #20]
 8003f4a:	0852      	lsrs	r2, r2, #1
 8003f4c:	3a01      	subs	r2, #1
 8003f4e:	0652      	lsls	r2, r2, #25
 8003f50:	430a      	orrs	r2, r1
 8003f52:	4916      	ldr	r1, [pc, #88]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f64:	f7fe fae8 	bl	8002538 <HAL_GetTick>
 8003f68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f6a:	e009      	b.n	8003f80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f6c:	f7fe fae4 	bl	8002538 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d902      	bls.n	8003f80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f7e:	e005      	b.n	8003f8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ef      	beq.n	8003f6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	4904      	ldr	r1, [pc, #16]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000

08003fb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d018      	beq.n	8003ffc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003fca:	4b67      	ldr	r3, [pc, #412]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0203 	and.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d10d      	bne.n	8003ff6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
       ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fe2:	4b61      	ldr	r3, [pc, #388]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d047      	beq.n	8004086 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	e044      	b.n	8004086 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d018      	beq.n	8004036 <RCCEx_PLLSAI2_Config+0x86>
 8004004:	2b03      	cmp	r3, #3
 8004006:	d825      	bhi.n	8004054 <RCCEx_PLLSAI2_Config+0xa4>
 8004008:	2b01      	cmp	r3, #1
 800400a:	d002      	beq.n	8004012 <RCCEx_PLLSAI2_Config+0x62>
 800400c:	2b02      	cmp	r3, #2
 800400e:	d009      	beq.n	8004024 <RCCEx_PLLSAI2_Config+0x74>
 8004010:	e020      	b.n	8004054 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004012:	4b55      	ldr	r3, [pc, #340]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11d      	bne.n	800405a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004022:	e01a      	b.n	800405a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402c:	2b00      	cmp	r3, #0
 800402e:	d116      	bne.n	800405e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004034:	e013      	b.n	800405e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004036:	4b4c      	ldr	r3, [pc, #304]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004042:	4b49      	ldr	r3, [pc, #292]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004052:	e006      	b.n	8004062 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e004      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004062:	bf00      	nop
    }

    if(status == HAL_OK)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	3b01      	subs	r3, #1
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	430b      	orrs	r3, r1
 8004080:	4939      	ldr	r1, [pc, #228]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004082:	4313      	orrs	r3, r2
 8004084:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d167      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800408c:	4b36      	ldr	r3, [pc, #216]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a35      	ldr	r2, [pc, #212]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004098:	f7fe fa4e 	bl	8002538 <HAL_GetTick>
 800409c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800409e:	e009      	b.n	80040b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040a0:	f7fe fa4a 	bl	8002538 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d902      	bls.n	80040b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	73fb      	strb	r3, [r7, #15]
        break;
 80040b2:	e005      	b.n	80040c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040b4:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ef      	bne.n	80040a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d14a      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d111      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040cc:	4b26      	ldr	r3, [pc, #152]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	0211      	lsls	r1, r2, #8
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	0912      	lsrs	r2, r2, #4
 80040e4:	0452      	lsls	r2, r2, #17
 80040e6:	430a      	orrs	r2, r1
 80040e8:	491f      	ldr	r1, [pc, #124]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	614b      	str	r3, [r1, #20]
 80040ee:	e011      	b.n	8004114 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6892      	ldr	r2, [r2, #8]
 8004100:	0211      	lsls	r1, r2, #8
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6912      	ldr	r2, [r2, #16]
 8004106:	0852      	lsrs	r2, r2, #1
 8004108:	3a01      	subs	r2, #1
 800410a:	0652      	lsls	r2, r2, #25
 800410c:	430a      	orrs	r2, r1
 800410e:	4916      	ldr	r1, [pc, #88]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	4313      	orrs	r3, r2
 8004112:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a13      	ldr	r2, [pc, #76]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fe fa0a 	bl	8002538 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004126:	e009      	b.n	800413c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004128:	f7fe fa06 	bl	8002538 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d902      	bls.n	800413c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	73fb      	strb	r3, [r7, #15]
          break;
 800413a:	e005      	b.n	8004148 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ef      	beq.n	8004128 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4904      	ldr	r1, [pc, #16]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	4313      	orrs	r3, r2
 800415a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000

0800416c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e049      	b.n	8004212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd ff72 	bl	800207c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fa9a 	bl	80046e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	d001      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e04f      	b.n	80042d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01d      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425e:	d018      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <HAL_TIM_Base_Start_IT+0xd0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d115      	bne.n	80042be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800429a:	4013      	ands	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b06      	cmp	r3, #6
 80042a2:	d015      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0xb4>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042aa:	d011      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042bc:	e008      	b.n	80042d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e000      	b.n	80042d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	40013400 	.word	0x40013400
 80042f4:	40014000 	.word	0x40014000
 80042f8:	00010007 	.word	0x00010007

080042fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d020      	beq.n	8004360 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01b      	beq.n	8004360 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0202 	mvn.w	r2, #2
 8004330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9ad 	bl	80046a6 <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f99f 	bl	8004692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f9b0 	bl	80046ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d020      	beq.n	80043ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0204 	mvn.w	r2, #4
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f987 	bl	80046a6 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f979 	bl	8004692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f98a 	bl	80046ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d020      	beq.n	80043f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0208 	mvn.w	r2, #8
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f961 	bl	80046a6 <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f953 	bl	8004692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f964 	bl	80046ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d020      	beq.n	8004444 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01b      	beq.n	8004444 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0210 	mvn.w	r2, #16
 8004414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2208      	movs	r2, #8
 800441a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f93b 	bl	80046a6 <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f92d 	bl	8004692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f93e 	bl	80046ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0201 	mvn.w	r2, #1
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fd fce8 	bl	8001e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00c      	beq.n	800448c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 faf2 	bl	8004a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 faea 	bl	8004a84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00c      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f8fd 	bl	80046ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00c      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0220 	mvn.w	r2, #32
 80044f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fab2 	bl	8004a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_TIM_ConfigClockSource+0x1c>
 8004518:	2302      	movs	r3, #2
 800451a:	e0b6      	b.n	800468a <HAL_TIM_ConfigClockSource+0x18a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800453e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004558:	d03e      	beq.n	80045d8 <HAL_TIM_ConfigClockSource+0xd8>
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455e:	f200 8087 	bhi.w	8004670 <HAL_TIM_ConfigClockSource+0x170>
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	f000 8086 	beq.w	8004676 <HAL_TIM_ConfigClockSource+0x176>
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456e:	d87f      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x170>
 8004570:	2b70      	cmp	r3, #112	; 0x70
 8004572:	d01a      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0xaa>
 8004574:	2b70      	cmp	r3, #112	; 0x70
 8004576:	d87b      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x170>
 8004578:	2b60      	cmp	r3, #96	; 0x60
 800457a:	d050      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x11e>
 800457c:	2b60      	cmp	r3, #96	; 0x60
 800457e:	d877      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x170>
 8004580:	2b50      	cmp	r3, #80	; 0x50
 8004582:	d03c      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0xfe>
 8004584:	2b50      	cmp	r3, #80	; 0x50
 8004586:	d873      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x170>
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d058      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x13e>
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d86f      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x170>
 8004590:	2b30      	cmp	r3, #48	; 0x30
 8004592:	d064      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x15e>
 8004594:	2b30      	cmp	r3, #48	; 0x30
 8004596:	d86b      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x170>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d060      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x15e>
 800459c:	2b20      	cmp	r3, #32
 800459e:	d867      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x170>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d05c      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x15e>
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d05a      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x15e>
 80045a8:	e062      	b.n	8004670 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ba:	f000 f9a7 	bl	800490c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	609a      	str	r2, [r3, #8]
      break;
 80045d6:	e04f      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045e8:	f000 f990 	bl	800490c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045fa:	609a      	str	r2, [r3, #8]
      break;
 80045fc:	e03c      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800460a:	461a      	mov	r2, r3
 800460c:	f000 f904 	bl	8004818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2150      	movs	r1, #80	; 0x50
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f95d 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800461c:	e02c      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800462a:	461a      	mov	r2, r3
 800462c:	f000 f923 	bl	8004876 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2160      	movs	r1, #96	; 0x60
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f94d 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800463c:	e01c      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	461a      	mov	r2, r3
 800464c:	f000 f8e4 	bl	8004818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2140      	movs	r1, #64	; 0x40
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f93d 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800465c:	e00c      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f000 f934 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 800466e:	e003      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
      break;
 8004674:	e000      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004688:	7bfb      	ldrb	r3, [r7, #15]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a40      	ldr	r2, [pc, #256]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004702:	d00f      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <TIM_Base_SetConfig+0x118>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00b      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3c      	ldr	r2, [pc, #240]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3b      	ldr	r2, [pc, #236]	; (8004804 <TIM_Base_SetConfig+0x120>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3a      	ldr	r2, [pc, #232]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2f      	ldr	r2, [pc, #188]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01f      	beq.n	800477e <TIM_Base_SetConfig+0x9a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004744:	d01b      	beq.n	800477e <TIM_Base_SetConfig+0x9a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2c      	ldr	r2, [pc, #176]	; (80047fc <TIM_Base_SetConfig+0x118>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d017      	beq.n	800477e <TIM_Base_SetConfig+0x9a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <TIM_Base_SetConfig+0x11c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <TIM_Base_SetConfig+0x9a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <TIM_Base_SetConfig+0x120>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00f      	beq.n	800477e <TIM_Base_SetConfig+0x9a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a29      	ldr	r2, [pc, #164]	; (8004808 <TIM_Base_SetConfig+0x124>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00b      	beq.n	800477e <TIM_Base_SetConfig+0x9a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a28      	ldr	r2, [pc, #160]	; (800480c <TIM_Base_SetConfig+0x128>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <TIM_Base_SetConfig+0x9a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a27      	ldr	r2, [pc, #156]	; (8004810 <TIM_Base_SetConfig+0x12c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_Base_SetConfig+0x9a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a26      	ldr	r2, [pc, #152]	; (8004814 <TIM_Base_SetConfig+0x130>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d108      	bne.n	8004790 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a10      	ldr	r2, [pc, #64]	; (80047f8 <TIM_Base_SetConfig+0x114>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00f      	beq.n	80047dc <TIM_Base_SetConfig+0xf8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <TIM_Base_SetConfig+0x124>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00b      	beq.n	80047dc <TIM_Base_SetConfig+0xf8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a11      	ldr	r2, [pc, #68]	; (800480c <TIM_Base_SetConfig+0x128>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <TIM_Base_SetConfig+0xf8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a10      	ldr	r2, [pc, #64]	; (8004810 <TIM_Base_SetConfig+0x12c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0xf8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a0f      	ldr	r2, [pc, #60]	; (8004814 <TIM_Base_SetConfig+0x130>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d103      	bne.n	80047e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	615a      	str	r2, [r3, #20]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40013400 	.word	0x40013400
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800

08004818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f023 0201 	bic.w	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 030a 	bic.w	r3, r3, #10
 8004854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004876:	b480      	push	{r7}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 0210 	bic.w	r2, r3, #16
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	031b      	lsls	r3, r3, #12
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f043 0307 	orr.w	r3, r3, #7
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	609a      	str	r2, [r3, #8]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	021a      	lsls	r2, r3, #8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	431a      	orrs	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004960:	2302      	movs	r3, #2
 8004962:	e068      	b.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a2e      	ldr	r2, [pc, #184]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2d      	ldr	r2, [pc, #180]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d108      	bne.n	80049aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800499e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01d      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d6:	d018      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1a      	ldr	r2, [pc, #104]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a13      	ldr	r2, [pc, #76]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a14      	ldr	r2, [pc, #80]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10c      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40013400 	.word	0x40013400
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40014000 	.word	0x40014000

08004a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e040      	b.n	8004b2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fd fafc 	bl	80020b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2224      	movs	r2, #36	; 0x24
 8004ac4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fb6a 	bl	80051b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f8af 	bl	8004c48 <UART_SetConfig>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e01b      	b.n	8004b2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fbe9 	bl	80052fc <UART_CheckIdleState>
 8004b2a:	4603      	mov	r3, r0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	; 0x28
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d178      	bne.n	8004c3e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_UART_Transmit+0x24>
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e071      	b.n	8004c40 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2221      	movs	r2, #33	; 0x21
 8004b68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6a:	f7fd fce5 	bl	8002538 <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	d108      	bne.n	8004b9c <HAL_UART_Transmit+0x68>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e003      	b.n	8004ba4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba4:	e030      	b.n	8004c08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2180      	movs	r1, #128	; 0x80
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fc4b 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e03c      	b.n	8004c40 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	881a      	ldrh	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd8:	b292      	uxth	r2, r2
 8004bda:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	3302      	adds	r3, #2
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e008      	b.n	8004bf6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	781a      	ldrb	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	b292      	uxth	r2, r2
 8004bee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1c8      	bne.n	8004ba6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fc14 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e005      	b.n	8004c40 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3720      	adds	r7, #32
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c4c:	b08a      	sub	sp, #40	; 0x28
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4ba4      	ldr	r3, [pc, #656]	; (8004f08 <UART_SetConfig+0x2c0>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a99      	ldr	r2, [pc, #612]	; (8004f0c <UART_SetConfig+0x2c4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a90      	ldr	r2, [pc, #576]	; (8004f10 <UART_SetConfig+0x2c8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d126      	bne.n	8004d20 <UART_SetConfig+0xd8>
 8004cd2:	4b90      	ldr	r3, [pc, #576]	; (8004f14 <UART_SetConfig+0x2cc>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d81b      	bhi.n	8004d18 <UART_SetConfig+0xd0>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <UART_SetConfig+0xa0>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d09 	.word	0x08004d09
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e116      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e112      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e10e      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e10a      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d1e:	e106      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7c      	ldr	r2, [pc, #496]	; (8004f18 <UART_SetConfig+0x2d0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d138      	bne.n	8004d9c <UART_SetConfig+0x154>
 8004d2a:	4b7a      	ldr	r3, [pc, #488]	; (8004f14 <UART_SetConfig+0x2cc>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f003 030c 	and.w	r3, r3, #12
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d82d      	bhi.n	8004d94 <UART_SetConfig+0x14c>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0xf8>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d75 	.word	0x08004d75
 8004d44:	08004d95 	.word	0x08004d95
 8004d48:	08004d95 	.word	0x08004d95
 8004d4c:	08004d95 	.word	0x08004d95
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004d95 	.word	0x08004d95
 8004d58:	08004d95 	.word	0x08004d95
 8004d5c:	08004d95 	.word	0x08004d95
 8004d60:	08004d7d 	.word	0x08004d7d
 8004d64:	08004d95 	.word	0x08004d95
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004d95 	.word	0x08004d95
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7a:	e0d8      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d82:	e0d4      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d84:	2304      	movs	r3, #4
 8004d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d8a:	e0d0      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d92:	e0cc      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d94:	2310      	movs	r3, #16
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e0c8      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5e      	ldr	r2, [pc, #376]	; (8004f1c <UART_SetConfig+0x2d4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d125      	bne.n	8004df2 <UART_SetConfig+0x1aa>
 8004da6:	4b5b      	ldr	r3, [pc, #364]	; (8004f14 <UART_SetConfig+0x2cc>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004db0:	2b30      	cmp	r3, #48	; 0x30
 8004db2:	d016      	beq.n	8004de2 <UART_SetConfig+0x19a>
 8004db4:	2b30      	cmp	r3, #48	; 0x30
 8004db6:	d818      	bhi.n	8004dea <UART_SetConfig+0x1a2>
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d00a      	beq.n	8004dd2 <UART_SetConfig+0x18a>
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d814      	bhi.n	8004dea <UART_SetConfig+0x1a2>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <UART_SetConfig+0x182>
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d008      	beq.n	8004dda <UART_SetConfig+0x192>
 8004dc8:	e00f      	b.n	8004dea <UART_SetConfig+0x1a2>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd0:	e0ad      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd8:	e0a9      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004dda:	2304      	movs	r3, #4
 8004ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de0:	e0a5      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004de2:	2308      	movs	r3, #8
 8004de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de8:	e0a1      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004dea:	2310      	movs	r3, #16
 8004dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df0:	e09d      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a4a      	ldr	r2, [pc, #296]	; (8004f20 <UART_SetConfig+0x2d8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d125      	bne.n	8004e48 <UART_SetConfig+0x200>
 8004dfc:	4b45      	ldr	r3, [pc, #276]	; (8004f14 <UART_SetConfig+0x2cc>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e06:	2bc0      	cmp	r3, #192	; 0xc0
 8004e08:	d016      	beq.n	8004e38 <UART_SetConfig+0x1f0>
 8004e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e0c:	d818      	bhi.n	8004e40 <UART_SetConfig+0x1f8>
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	d00a      	beq.n	8004e28 <UART_SetConfig+0x1e0>
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d814      	bhi.n	8004e40 <UART_SetConfig+0x1f8>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <UART_SetConfig+0x1d8>
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d008      	beq.n	8004e30 <UART_SetConfig+0x1e8>
 8004e1e:	e00f      	b.n	8004e40 <UART_SetConfig+0x1f8>
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e26:	e082      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2e:	e07e      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004e30:	2304      	movs	r3, #4
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e07a      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e076      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e072      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a35      	ldr	r2, [pc, #212]	; (8004f24 <UART_SetConfig+0x2dc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d12a      	bne.n	8004ea8 <UART_SetConfig+0x260>
 8004e52:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <UART_SetConfig+0x2cc>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e60:	d01a      	beq.n	8004e98 <UART_SetConfig+0x250>
 8004e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e66:	d81b      	bhi.n	8004ea0 <UART_SetConfig+0x258>
 8004e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e6c:	d00c      	beq.n	8004e88 <UART_SetConfig+0x240>
 8004e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e72:	d815      	bhi.n	8004ea0 <UART_SetConfig+0x258>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <UART_SetConfig+0x238>
 8004e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e7c:	d008      	beq.n	8004e90 <UART_SetConfig+0x248>
 8004e7e:	e00f      	b.n	8004ea0 <UART_SetConfig+0x258>
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e86:	e052      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8e:	e04e      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004e90:	2304      	movs	r3, #4
 8004e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e96:	e04a      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e9e:	e046      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ea6:	e042      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <UART_SetConfig+0x2c4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d13a      	bne.n	8004f28 <UART_SetConfig+0x2e0>
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <UART_SetConfig+0x2cc>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ebc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec0:	d01a      	beq.n	8004ef8 <UART_SetConfig+0x2b0>
 8004ec2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ec6:	d81b      	bhi.n	8004f00 <UART_SetConfig+0x2b8>
 8004ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ecc:	d00c      	beq.n	8004ee8 <UART_SetConfig+0x2a0>
 8004ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed2:	d815      	bhi.n	8004f00 <UART_SetConfig+0x2b8>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <UART_SetConfig+0x298>
 8004ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004edc:	d008      	beq.n	8004ef0 <UART_SetConfig+0x2a8>
 8004ede:	e00f      	b.n	8004f00 <UART_SetConfig+0x2b8>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e022      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eee:	e01e      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef6:	e01a      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efe:	e016      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004f00:	2310      	movs	r3, #16
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e012      	b.n	8004f2e <UART_SetConfig+0x2e6>
 8004f08:	efff69f3 	.word	0xefff69f3
 8004f0c:	40008000 	.word	0x40008000
 8004f10:	40013800 	.word	0x40013800
 8004f14:	40021000 	.word	0x40021000
 8004f18:	40004400 	.word	0x40004400
 8004f1c:	40004800 	.word	0x40004800
 8004f20:	40004c00 	.word	0x40004c00
 8004f24:	40005000 	.word	0x40005000
 8004f28:	2310      	movs	r3, #16
 8004f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a9f      	ldr	r2, [pc, #636]	; (80051b0 <UART_SetConfig+0x568>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d17a      	bne.n	800502e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d824      	bhi.n	8004f8a <UART_SetConfig+0x342>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0x300>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f6d 	.word	0x08004f6d
 8004f4c:	08004f8b 	.word	0x08004f8b
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f7b 	.word	0x08004f7b
 8004f5c:	08004f8b 	.word	0x08004f8b
 8004f60:	08004f8b 	.word	0x08004f8b
 8004f64:	08004f8b 	.word	0x08004f8b
 8004f68:	08004f83 	.word	0x08004f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f6c:	f7fe fb84 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8004f70:	61f8      	str	r0, [r7, #28]
        break;
 8004f72:	e010      	b.n	8004f96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f74:	4b8f      	ldr	r3, [pc, #572]	; (80051b4 <UART_SetConfig+0x56c>)
 8004f76:	61fb      	str	r3, [r7, #28]
        break;
 8004f78:	e00d      	b.n	8004f96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7fe fae5 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8004f7e:	61f8      	str	r0, [r7, #28]
        break;
 8004f80:	e009      	b.n	8004f96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f86:	61fb      	str	r3, [r7, #28]
        break;
 8004f88:	e005      	b.n	8004f96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80fb 	beq.w	8005194 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	4413      	add	r3, r2
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d305      	bcc.n	8004fba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d903      	bls.n	8004fc2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fc0:	e0e8      	b.n	8005194 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	461c      	mov	r4, r3
 8004fc8:	4615      	mov	r5, r2
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	022b      	lsls	r3, r5, #8
 8004fd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fd8:	0222      	lsls	r2, r4, #8
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	6849      	ldr	r1, [r1, #4]
 8004fde:	0849      	lsrs	r1, r1, #1
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	4688      	mov	r8, r1
 8004fe4:	4681      	mov	r9, r0
 8004fe6:	eb12 0a08 	adds.w	sl, r2, r8
 8004fea:	eb43 0b09 	adc.w	fp, r3, r9
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	4659      	mov	r1, fp
 8005000:	f7fb fdd2 	bl	8000ba8 <__aeabi_uldivmod>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4613      	mov	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005012:	d308      	bcc.n	8005026 <UART_SetConfig+0x3de>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501a:	d204      	bcs.n	8005026 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	60da      	str	r2, [r3, #12]
 8005024:	e0b6      	b.n	8005194 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800502c:	e0b2      	b.n	8005194 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005036:	d15e      	bne.n	80050f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800503c:	2b08      	cmp	r3, #8
 800503e:	d828      	bhi.n	8005092 <UART_SetConfig+0x44a>
 8005040:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <UART_SetConfig+0x400>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	0800506d 	.word	0x0800506d
 800504c:	08005075 	.word	0x08005075
 8005050:	0800507d 	.word	0x0800507d
 8005054:	08005093 	.word	0x08005093
 8005058:	08005083 	.word	0x08005083
 800505c:	08005093 	.word	0x08005093
 8005060:	08005093 	.word	0x08005093
 8005064:	08005093 	.word	0x08005093
 8005068:	0800508b 	.word	0x0800508b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800506c:	f7fe fb04 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8005070:	61f8      	str	r0, [r7, #28]
        break;
 8005072:	e014      	b.n	800509e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005074:	f7fe fb16 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8005078:	61f8      	str	r0, [r7, #28]
        break;
 800507a:	e010      	b.n	800509e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800507c:	4b4d      	ldr	r3, [pc, #308]	; (80051b4 <UART_SetConfig+0x56c>)
 800507e:	61fb      	str	r3, [r7, #28]
        break;
 8005080:	e00d      	b.n	800509e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005082:	f7fe fa61 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8005086:	61f8      	str	r0, [r7, #28]
        break;
 8005088:	e009      	b.n	800509e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508e:	61fb      	str	r3, [r7, #28]
        break;
 8005090:	e005      	b.n	800509e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800509c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d077      	beq.n	8005194 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	005a      	lsls	r2, r3, #1
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	441a      	add	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b0f      	cmp	r3, #15
 80050be:	d916      	bls.n	80050ee <UART_SetConfig+0x4a6>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c6:	d212      	bcs.n	80050ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f023 030f 	bic.w	r3, r3, #15
 80050d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	b29a      	uxth	r2, r3
 80050de:	8afb      	ldrh	r3, [r7, #22]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	8afa      	ldrh	r2, [r7, #22]
 80050ea:	60da      	str	r2, [r3, #12]
 80050ec:	e052      	b.n	8005194 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80050f4:	e04e      	b.n	8005194 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d827      	bhi.n	800514e <UART_SetConfig+0x506>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0x4bc>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	08005129 	.word	0x08005129
 8005108:	08005131 	.word	0x08005131
 800510c:	08005139 	.word	0x08005139
 8005110:	0800514f 	.word	0x0800514f
 8005114:	0800513f 	.word	0x0800513f
 8005118:	0800514f 	.word	0x0800514f
 800511c:	0800514f 	.word	0x0800514f
 8005120:	0800514f 	.word	0x0800514f
 8005124:	08005147 	.word	0x08005147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005128:	f7fe faa6 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800512c:	61f8      	str	r0, [r7, #28]
        break;
 800512e:	e014      	b.n	800515a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005130:	f7fe fab8 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8005134:	61f8      	str	r0, [r7, #28]
        break;
 8005136:	e010      	b.n	800515a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005138:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <UART_SetConfig+0x56c>)
 800513a:	61fb      	str	r3, [r7, #28]
        break;
 800513c:	e00d      	b.n	800515a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513e:	f7fe fa03 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8005142:	61f8      	str	r0, [r7, #28]
        break;
 8005144:	e009      	b.n	800515a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514a:	61fb      	str	r3, [r7, #28]
        break;
 800514c:	e005      	b.n	800515a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005158:	bf00      	nop
    }

    if (pclk != 0U)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d019      	beq.n	8005194 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	085a      	lsrs	r2, r3, #1
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	441a      	add	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b0f      	cmp	r3, #15
 8005178:	d909      	bls.n	800518e <UART_SetConfig+0x546>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d205      	bcs.n	800518e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60da      	str	r2, [r3, #12]
 800518c:	e002      	b.n	8005194 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80051a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3728      	adds	r7, #40	; 0x28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ae:	bf00      	nop
 80051b0:	40008000 	.word	0x40008000
 80051b4:	00f42400 	.word	0x00f42400

080051b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01a      	beq.n	80052ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b6:	d10a      	bne.n	80052ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b098      	sub	sp, #96	; 0x60
 8005300:	af02      	add	r7, sp, #8
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800530c:	f7fd f914 	bl	8002538 <HAL_GetTick>
 8005310:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d12e      	bne.n	800537e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005328:	2200      	movs	r2, #0
 800532a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f88c 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d021      	beq.n	800537e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800534e:	653b      	str	r3, [r7, #80]	; 0x50
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005358:	647b      	str	r3, [r7, #68]	; 0x44
 800535a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800535e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005360:	e841 2300 	strex	r3, r2, [r1]
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1e6      	bne.n	800533a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e062      	b.n	8005444 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b04      	cmp	r3, #4
 800538a:	d149      	bne.n	8005420 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800538c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005394:	2200      	movs	r2, #0
 8005396:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f856 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d03c      	beq.n	8005420 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	623b      	str	r3, [r7, #32]
   return(result);
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	633b      	str	r3, [r7, #48]	; 0x30
 80053c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e6      	bne.n	80053a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f8:	61fa      	str	r2, [r7, #28]
 80053fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	69b9      	ldr	r1, [r7, #24]
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	617b      	str	r3, [r7, #20]
   return(result);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e5      	bne.n	80053d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e011      	b.n	8005444 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3758      	adds	r7, #88	; 0x58
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545c:	e049      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005464:	d045      	beq.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005466:	f7fd f867 	bl	8002538 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <UART_WaitOnFlagUntilTimeout+0x30>
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e048      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d031      	beq.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d110      	bne.n	80054be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2208      	movs	r2, #8
 80054a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f838 	bl	800551a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2208      	movs	r2, #8
 80054ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e029      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054cc:	d111      	bne.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f81e 	bl	800551a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e00f      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	429a      	cmp	r2, r3
 800550e:	d0a6      	beq.n	800545e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800551a:	b480      	push	{r7}
 800551c:	b095      	sub	sp, #84	; 0x54
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	643b      	str	r3, [r7, #64]	; 0x40
 8005542:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e6      	bne.n	8005522 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	61fb      	str	r3, [r7, #28]
   return(result);
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800557a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e5      	bne.n	8005554 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	2b01      	cmp	r3, #1
 800558e:	d118      	bne.n	80055c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	60bb      	str	r3, [r7, #8]
   return(result);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f023 0310 	bic.w	r3, r3, #16
 80055a4:	647b      	str	r3, [r7, #68]	; 0x44
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6979      	ldr	r1, [r7, #20]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	613b      	str	r3, [r7, #16]
   return(result);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e6      	bne.n	8005590 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055d6:	bf00      	nop
 80055d8:	3754      	adds	r7, #84	; 0x54
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <__NVIC_SetPriority>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	6039      	str	r1, [r7, #0]
 80055ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	db0a      	blt.n	800560e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	490c      	ldr	r1, [pc, #48]	; (8005630 <__NVIC_SetPriority+0x4c>)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	0112      	lsls	r2, r2, #4
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	440b      	add	r3, r1
 8005608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800560c:	e00a      	b.n	8005624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	4908      	ldr	r1, [pc, #32]	; (8005634 <__NVIC_SetPriority+0x50>)
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3b04      	subs	r3, #4
 800561c:	0112      	lsls	r2, r2, #4
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	440b      	add	r3, r1
 8005622:	761a      	strb	r2, [r3, #24]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	e000e100 	.word	0xe000e100
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <SysTick_Handler+0x1c>)
 800563e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005640:	f002 fb94 	bl	8007d6c <xTaskGetSchedulerState>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d001      	beq.n	800564e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800564a:	f003 fa7d 	bl	8008b48 <xPortSysTickHandler>
  }
}
 800564e:	bf00      	nop
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	e000e010 	.word	0xe000e010

08005658 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800565c:	2100      	movs	r1, #0
 800565e:	f06f 0004 	mvn.w	r0, #4
 8005662:	f7ff ffbf 	bl	80055e4 <__NVIC_SetPriority>
#endif
}
 8005666:	bf00      	nop
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005672:	f3ef 8305 	mrs	r3, IPSR
 8005676:	603b      	str	r3, [r7, #0]
  return(result);
 8005678:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800567e:	f06f 0305 	mvn.w	r3, #5
 8005682:	607b      	str	r3, [r7, #4]
 8005684:	e00c      	b.n	80056a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <osKernelInitialize+0x44>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800568e:	4b08      	ldr	r3, [pc, #32]	; (80056b0 <osKernelInitialize+0x44>)
 8005690:	2201      	movs	r2, #1
 8005692:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005694:	2300      	movs	r3, #0
 8005696:	607b      	str	r3, [r7, #4]
 8005698:	e002      	b.n	80056a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800569e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056a0:	687b      	ldr	r3, [r7, #4]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	20000abc 	.word	0x20000abc

080056b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ba:	f3ef 8305 	mrs	r3, IPSR
 80056be:	603b      	str	r3, [r7, #0]
  return(result);
 80056c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80056c6:	f06f 0305 	mvn.w	r3, #5
 80056ca:	607b      	str	r3, [r7, #4]
 80056cc:	e010      	b.n	80056f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056ce:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <osKernelStart+0x48>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d109      	bne.n	80056ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056d6:	f7ff ffbf 	bl	8005658 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056da:	4b08      	ldr	r3, [pc, #32]	; (80056fc <osKernelStart+0x48>)
 80056dc:	2202      	movs	r2, #2
 80056de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056e0:	f001 fed6 	bl	8007490 <vTaskStartScheduler>
      stat = osOK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	607b      	str	r3, [r7, #4]
 80056e8:	e002      	b.n	80056f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056f0:	687b      	ldr	r3, [r7, #4]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000abc 	.word	0x20000abc

08005700 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b08e      	sub	sp, #56	; 0x38
 8005704:	af04      	add	r7, sp, #16
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005710:	f3ef 8305 	mrs	r3, IPSR
 8005714:	617b      	str	r3, [r7, #20]
  return(result);
 8005716:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005718:	2b00      	cmp	r3, #0
 800571a:	d17f      	bne.n	800581c <osThreadNew+0x11c>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d07c      	beq.n	800581c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005726:	2318      	movs	r3, #24
 8005728:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800572e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005732:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d046      	beq.n	80057c8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <osThreadNew+0x48>
        name = attr->name;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <osThreadNew+0x6e>
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b38      	cmp	r3, #56	; 0x38
 8005760:	d805      	bhi.n	800576e <osThreadNew+0x6e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <osThreadNew+0x72>
        return (NULL);
 800576e:	2300      	movs	r3, #0
 8005770:	e055      	b.n	800581e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	089b      	lsrs	r3, r3, #2
 8005780:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00f      	beq.n	80057aa <osThreadNew+0xaa>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8005792:	d30a      	bcc.n	80057aa <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005798:	2b00      	cmp	r3, #0
 800579a:	d006      	beq.n	80057aa <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <osThreadNew+0xaa>
        mem = 1;
 80057a4:	2301      	movs	r3, #1
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	e010      	b.n	80057cc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10c      	bne.n	80057cc <osThreadNew+0xcc>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d108      	bne.n	80057cc <osThreadNew+0xcc>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d104      	bne.n	80057cc <osThreadNew+0xcc>
          mem = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e001      	b.n	80057cc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d110      	bne.n	80057f4 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057da:	9202      	str	r2, [sp, #8]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f001 fb5b 	bl	8006ea4 <xTaskCreateStatic>
 80057ee:	4603      	mov	r3, r0
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	e013      	b.n	800581c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d110      	bne.n	800581c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	f107 0310 	add.w	r3, r7, #16
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f001 fba8 	bl	8006f62 <xTaskCreate>
 8005812:	4603      	mov	r3, r0
 8005814:	2b01      	cmp	r3, #1
 8005816:	d001      	beq.n	800581c <osThreadNew+0x11c>
            hTask = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800581c:	693b      	ldr	r3, [r7, #16]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3728      	adds	r7, #40	; 0x28
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005832:	f3ef 8305 	mrs	r3, IPSR
 8005836:	60fb      	str	r3, [r7, #12]
  return(result);
 8005838:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800583e:	f06f 0305 	mvn.w	r3, #5
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e00b      	b.n	800585e <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800584c:	f06f 0303 	mvn.w	r3, #3
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e004      	b.n	800585e <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8005858:	6938      	ldr	r0, [r7, #16]
 800585a:	f001 fda3 	bl	80073a4 <vTaskSuspend>
  }

  return (stat);
 800585e:	697b      	ldr	r3, [r7, #20]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005870:	f3ef 8305 	mrs	r3, IPSR
 8005874:	60bb      	str	r3, [r7, #8]
  return(result);
 8005876:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <osDelay+0x1c>
    stat = osErrorISR;
 800587c:	f06f 0305 	mvn.w	r3, #5
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e007      	b.n	8005894 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <osDelay+0x2c>
      vTaskDelay(ticks);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fcee 	bl	8007270 <vTaskDelay>
    }
  }

  return (stat);
 8005894:	68fb      	ldr	r3, [r7, #12]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800589e:	b580      	push	{r7, lr}
 80058a0:	b088      	sub	sp, #32
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058aa:	f3ef 8305 	mrs	r3, IPSR
 80058ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80058b0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d174      	bne.n	80059a0 <osMutexNew+0x102>
    if (attr != NULL) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	e001      	b.n	80058c8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <osMutexNew+0x3a>
      rmtx = 1U;
 80058d2:	2301      	movs	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e001      	b.n	80058dc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d15c      	bne.n	80059a0 <osMutexNew+0x102>
      mem = -1;
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ea:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d015      	beq.n	800591e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d006      	beq.n	8005908 <osMutexNew+0x6a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b4f      	cmp	r3, #79	; 0x4f
 8005900:	d902      	bls.n	8005908 <osMutexNew+0x6a>
          mem = 1;
 8005902:	2301      	movs	r3, #1
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	e00c      	b.n	8005922 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d108      	bne.n	8005922 <osMutexNew+0x84>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d104      	bne.n	8005922 <osMutexNew+0x84>
            mem = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	e001      	b.n	8005922 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d112      	bne.n	800594e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4619      	mov	r1, r3
 8005934:	2004      	movs	r0, #4
 8005936:	f000 fc68 	bl	800620a <xQueueCreateMutexStatic>
 800593a:	61f8      	str	r0, [r7, #28]
 800593c:	e016      	b.n	800596c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	4619      	mov	r1, r3
 8005944:	2001      	movs	r0, #1
 8005946:	f000 fc60 	bl	800620a <xQueueCreateMutexStatic>
 800594a:	61f8      	str	r0, [r7, #28]
 800594c:	e00e      	b.n	800596c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d004      	beq.n	8005964 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800595a:	2004      	movs	r0, #4
 800595c:	f000 fc3d 	bl	80061da <xQueueCreateMutex>
 8005960:	61f8      	str	r0, [r7, #28]
 8005962:	e003      	b.n	800596c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005964:	2001      	movs	r0, #1
 8005966:	f000 fc38 	bl	80061da <xQueueCreateMutex>
 800596a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00c      	beq.n	800598c <osMutexNew+0xee>
        if (attr != NULL) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <osMutexNew+0xe2>
          name = attr->name;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	e001      	b.n	8005984 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	69f8      	ldr	r0, [r7, #28]
 8005988:	f001 fa2e 	bl	8006de8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d006      	beq.n	80059a0 <osMutexNew+0x102>
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80059a0:	69fb      	ldr	r3, [r7, #28]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b086      	sub	sp, #24
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c8:	f3ef 8305 	mrs	r3, IPSR
 80059cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80059d4:	f06f 0305 	mvn.w	r3, #5
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e02c      	b.n	8005a36 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80059e2:	f06f 0303 	mvn.w	r3, #3
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e025      	b.n	8005a36 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d011      	beq.n	8005a14 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6938      	ldr	r0, [r7, #16]
 80059f4:	f000 fc58 	bl	80062a8 <xQueueTakeMutexRecursive>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d01b      	beq.n	8005a36 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005a04:	f06f 0301 	mvn.w	r3, #1
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e014      	b.n	8005a36 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a0c:	f06f 0302 	mvn.w	r3, #2
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e010      	b.n	8005a36 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	6938      	ldr	r0, [r7, #16]
 8005a18:	f000 fef6 	bl	8006808 <xQueueSemaphoreTake>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d009      	beq.n	8005a36 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005a28:	f06f 0301 	mvn.w	r3, #1
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	e002      	b.n	8005a36 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a30:	f06f 0302 	mvn.w	r3, #2
 8005a34:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005a36:	697b      	ldr	r3, [r7, #20]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a5c:	f3ef 8305 	mrs	r3, IPSR
 8005a60:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a62:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005a68:	f06f 0305 	mvn.w	r3, #5
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e01f      	b.n	8005ab0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005a76:	f06f 0303 	mvn.w	r3, #3
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e018      	b.n	8005ab0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d009      	beq.n	8005a98 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005a84:	6938      	ldr	r0, [r7, #16]
 8005a86:	f000 fbdb 	bl	8006240 <xQueueGiveMutexRecursive>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d00f      	beq.n	8005ab0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a90:	f06f 0302 	mvn.w	r3, #2
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	e00b      	b.n	8005ab0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	6938      	ldr	r0, [r7, #16]
 8005aa0:	f000 fc38 	bl	8006314 <xQueueGenericSend>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d002      	beq.n	8005ab0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005aaa:	f06f 0302 	mvn.w	r3, #2
 8005aae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005ab0:	697b      	ldr	r3, [r7, #20]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b08a      	sub	sp, #40	; 0x28
 8005abe:	af02      	add	r7, sp, #8
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aca:	f3ef 8305 	mrs	r3, IPSR
 8005ace:	613b      	str	r3, [r7, #16]
  return(result);
 8005ad0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d15f      	bne.n	8005b96 <osMessageQueueNew+0xdc>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d05c      	beq.n	8005b96 <osMessageQueueNew+0xdc>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d059      	beq.n	8005b96 <osMessageQueueNew+0xdc>
    mem = -1;
 8005ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ae6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d029      	beq.n	8005b42 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d012      	beq.n	8005b1c <osMessageQueueNew+0x62>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2b4f      	cmp	r3, #79	; 0x4f
 8005afc:	d90e      	bls.n	8005b1c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d302      	bcc.n	8005b1c <osMessageQueueNew+0x62>
        mem = 1;
 8005b16:	2301      	movs	r3, #1
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e014      	b.n	8005b46 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d110      	bne.n	8005b46 <osMessageQueueNew+0x8c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10c      	bne.n	8005b46 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d108      	bne.n	8005b46 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d104      	bne.n	8005b46 <osMessageQueueNew+0x8c>
          mem = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	e001      	b.n	8005b46 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d10b      	bne.n	8005b64 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2100      	movs	r1, #0
 8005b56:	9100      	str	r1, [sp, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fa4e 	bl	8005ffc <xQueueGenericCreateStatic>
 8005b60:	61f8      	str	r0, [r7, #28]
 8005b62:	e008      	b.n	8005b76 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d105      	bne.n	8005b76 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fabc 	bl	80060ec <xQueueGenericCreate>
 8005b74:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00c      	beq.n	8005b96 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	e001      	b.n	8005b8e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b8e:	6979      	ldr	r1, [r7, #20]
 8005b90:	69f8      	ldr	r0, [r7, #28]
 8005b92:	f001 f929 	bl	8006de8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b96:	69fb      	ldr	r3, [r7, #28]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bb8:	f3ef 8305 	mrs	r3, IPSR
 8005bbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005bbe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d028      	beq.n	8005c16 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <osMessageQueuePut+0x36>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <osMessageQueuePut+0x36>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005bd6:	f06f 0303 	mvn.w	r3, #3
 8005bda:	61fb      	str	r3, [r7, #28]
 8005bdc:	e038      	b.n	8005c50 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005be2:	f107 0210 	add.w	r2, r7, #16
 8005be6:	2300      	movs	r3, #0
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	69b8      	ldr	r0, [r7, #24]
 8005bec:	f000 fc90 	bl	8006510 <xQueueGenericSendFromISR>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d003      	beq.n	8005bfe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005bf6:	f06f 0302 	mvn.w	r3, #2
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e028      	b.n	8005c50 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d025      	beq.n	8005c50 <osMessageQueuePut+0xb0>
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <osMessageQueuePut+0xbc>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	e01c      	b.n	8005c50 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <osMessageQueuePut+0x82>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005c22:	f06f 0303 	mvn.w	r3, #3
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	e012      	b.n	8005c50 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	69b8      	ldr	r0, [r7, #24]
 8005c32:	f000 fb6f 	bl	8006314 <xQueueGenericSend>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d009      	beq.n	8005c50 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005c42:	f06f 0301 	mvn.w	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	e002      	b.n	8005c50 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005c4a:	f06f 0302 	mvn.w	r3, #2
 8005c4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c50:	69fb      	ldr	r3, [r7, #28]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3720      	adds	r7, #32
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c76:	f3ef 8305 	mrs	r3, IPSR
 8005c7a:	617b      	str	r3, [r7, #20]
  return(result);
 8005c7c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d028      	beq.n	8005cd4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <osMessageQueueGet+0x34>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <osMessageQueueGet+0x34>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005c94:	f06f 0303 	mvn.w	r3, #3
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	e037      	b.n	8005d0c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005ca0:	f107 0310 	add.w	r3, r7, #16
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	69b8      	ldr	r0, [r7, #24]
 8005caa:	f000 feb9 	bl	8006a20 <xQueueReceiveFromISR>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d003      	beq.n	8005cbc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005cb4:	f06f 0302 	mvn.w	r3, #2
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	e027      	b.n	8005d0c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d024      	beq.n	8005d0c <osMessageQueueGet+0xac>
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <osMessageQueueGet+0xb8>)
 8005cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	e01b      	b.n	8005d0c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <osMessageQueueGet+0x80>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d103      	bne.n	8005ce8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ce0:	f06f 0303 	mvn.w	r3, #3
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	e011      	b.n	8005d0c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	69b8      	ldr	r0, [r7, #24]
 8005cee:	f000 fcab 	bl	8006648 <xQueueReceive>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d009      	beq.n	8005d0c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005cfe:	f06f 0301 	mvn.w	r3, #1
 8005d02:	61fb      	str	r3, [r7, #28]
 8005d04:	e002      	b.n	8005d0c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005d06:	f06f 0302 	mvn.w	r3, #2
 8005d0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d0c:	69fb      	ldr	r3, [r7, #28]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e00e      	b.n	8005d52 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d34:	f3ef 8305 	mrs	r3, IPSR
 8005d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005d40:	6938      	ldr	r0, [r7, #16]
 8005d42:	f000 ff0b 	bl	8006b5c <uxQueueMessagesWaitingFromISR>
 8005d46:	6178      	str	r0, [r7, #20]
 8005d48:	e003      	b.n	8005d52 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005d4a:	6938      	ldr	r0, [r7, #16]
 8005d4c:	f000 fee8 	bl	8006b20 <uxQueueMessagesWaiting>
 8005d50:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005d52:	697b      	ldr	r3, [r7, #20]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	4a06      	ldr	r2, [pc, #24]	; (8005d8c <vApplicationGetIdleTaskMemory+0x30>)
 8005d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2280      	movs	r2, #128	; 0x80
 8005d78:	601a      	str	r2, [r3, #0]
}
 8005d7a:	bf00      	nop
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	20000ac0 	.word	0x20000ac0
 8005d8c:	20000c40 	.word	0x20000c40

08005d90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4a07      	ldr	r2, [pc, #28]	; (8005dbc <vApplicationGetTimerTaskMemory+0x2c>)
 8005da0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <vApplicationGetTimerTaskMemory+0x30>)
 8005da6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dae:	601a      	str	r2, [r3, #0]
}
 8005db0:	bf00      	nop
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	20000e40 	.word	0x20000e40
 8005dc0:	20000fc0 	.word	0x20000fc0

08005dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f103 0208 	add.w	r2, r3, #8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f103 0208 	add.w	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f103 0208 	add.w	r2, r3, #8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	601a      	str	r2, [r3, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e7c:	d103      	bne.n	8005e86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e00c      	b.n	8005ea0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3308      	adds	r3, #8
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	e002      	b.n	8005e94 <vListInsert+0x2e>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d2f6      	bcs.n	8005e8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6892      	ldr	r2, [r2, #8]
 8005eee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6852      	ldr	r2, [r2, #4]
 8005ef8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d103      	bne.n	8005f0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	1e5a      	subs	r2, r3, #1
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f56:	f002 fd65 	bl	8008a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f66:	fb01 f303 	mul.w	r3, r1, r3
 8005f6a:	441a      	add	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f86:	3b01      	subs	r3, #1
 8005f88:	68f9      	ldr	r1, [r7, #12]
 8005f8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	441a      	add	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	22ff      	movs	r2, #255	; 0xff
 8005f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	22ff      	movs	r2, #255	; 0xff
 8005fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d114      	bne.n	8005fd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01a      	beq.n	8005fea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3310      	adds	r3, #16
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 fd03 	bl	80079c4 <xTaskRemoveFromEventList>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d012      	beq.n	8005fea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <xQueueGenericReset+0xcc>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	e009      	b.n	8005fea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3310      	adds	r3, #16
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fef2 	bl	8005dc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3324      	adds	r3, #36	; 0x24
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff feed 	bl	8005dc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fea:	f002 fd4b 	bl	8008a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fee:	2301      	movs	r3, #1
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08e      	sub	sp, #56	; 0x38
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <xQueueGenericCreateStatic+0x52>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <xQueueGenericCreateStatic+0x56>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <xQueueGenericCreateStatic+0x58>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	623b      	str	r3, [r7, #32]
}
 800606a:	bf00      	nop
 800606c:	e7fe      	b.n	800606c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <xQueueGenericCreateStatic+0x7e>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <xQueueGenericCreateStatic+0x82>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <xQueueGenericCreateStatic+0x84>
 800607e:	2300      	movs	r3, #0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	61fb      	str	r3, [r7, #28]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800609a:	2350      	movs	r3, #80	; 0x50
 800609c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b50      	cmp	r3, #80	; 0x50
 80060a2:	d00a      	beq.n	80060ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	61bb      	str	r3, [r7, #24]
}
 80060b6:	bf00      	nop
 80060b8:	e7fe      	b.n	80060b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	4613      	mov	r3, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f83f 	bl	8006160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3730      	adds	r7, #48	; 0x30
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	613b      	str	r3, [r7, #16]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3350      	adds	r3, #80	; 0x50
 8006124:	4618      	mov	r0, r3
 8006126:	f002 fd9f 	bl	8008c68 <pvPortMalloc>
 800612a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d011      	beq.n	8006156 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	3350      	adds	r3, #80	; 0x50
 800613a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006144:	79fa      	ldrb	r2, [r7, #7]
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	4613      	mov	r3, r2
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f805 	bl	8006160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006156:	69bb      	ldr	r3, [r7, #24]
	}
 8006158:	4618      	mov	r0, r3
 800615a:	3720      	adds	r7, #32
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d103      	bne.n	800617c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	e002      	b.n	8006182 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800618e:	2101      	movs	r1, #1
 8006190:	69b8      	ldr	r0, [r7, #24]
 8006192:	f7ff fecb 	bl	8005f2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80061c6:	2300      	movs	r3, #0
 80061c8:	2200      	movs	r2, #0
 80061ca:	2100      	movs	r1, #0
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f8a1 	bl	8006314 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b086      	sub	sp, #24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	4603      	mov	r3, r0
 80061e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	2300      	movs	r3, #0
 80061ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	461a      	mov	r2, r3
 80061f0:	6939      	ldr	r1, [r7, #16]
 80061f2:	6978      	ldr	r0, [r7, #20]
 80061f4:	f7ff ff7a 	bl	80060ec <xQueueGenericCreate>
 80061f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff ffd3 	bl	80061a6 <prvInitialiseMutex>

		return xNewQueue;
 8006200:	68fb      	ldr	r3, [r7, #12]
	}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800620a:	b580      	push	{r7, lr}
 800620c:	b088      	sub	sp, #32
 800620e:	af02      	add	r7, sp, #8
 8006210:	4603      	mov	r3, r0
 8006212:	6039      	str	r1, [r7, #0]
 8006214:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006216:	2301      	movs	r3, #1
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	2300      	movs	r3, #0
 800621c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2200      	movs	r2, #0
 8006226:	6939      	ldr	r1, [r7, #16]
 8006228:	6978      	ldr	r0, [r7, #20]
 800622a:	f7ff fee7 	bl	8005ffc <xQueueGenericCreateStatic>
 800622e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff ffb8 	bl	80061a6 <prvInitialiseMutex>

		return xNewQueue;
 8006236:	68fb      	ldr	r3, [r7, #12]
	}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	60fb      	str	r3, [r7, #12]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	689c      	ldr	r4, [r3, #8]
 800626c:	f001 fd6e 	bl	8007d4c <xTaskGetCurrentTaskHandle>
 8006270:	4603      	mov	r3, r0
 8006272:	429c      	cmp	r4, r3
 8006274:	d111      	bne.n	800629a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	1e5a      	subs	r2, r3, #1
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d105      	bne.n	8006294 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006288:	2300      	movs	r3, #0
 800628a:	2200      	movs	r2, #0
 800628c:	2100      	movs	r1, #0
 800628e:	6938      	ldr	r0, [r7, #16]
 8006290:	f000 f840 	bl	8006314 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006294:	2301      	movs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e001      	b.n	800629e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800629e:	697b      	ldr	r3, [r7, #20]
	}
 80062a0:	4618      	mov	r0, r3
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd90      	pop	{r4, r7, pc}

080062a8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	60fb      	str	r3, [r7, #12]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	689c      	ldr	r4, [r3, #8]
 80062d6:	f001 fd39 	bl	8007d4c <xTaskGetCurrentTaskHandle>
 80062da:	4603      	mov	r3, r0
 80062dc:	429c      	cmp	r4, r3
 80062de:	d107      	bne.n	80062f0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80062ea:	2301      	movs	r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e00c      	b.n	800630a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	6938      	ldr	r0, [r7, #16]
 80062f4:	f000 fa88 	bl	8006808 <xQueueSemaphoreTake>
 80062f8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800630a:	697b      	ldr	r3, [r7, #20]
	}
 800630c:	4618      	mov	r0, r3
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	bd90      	pop	{r4, r7, pc}

08006314 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08e      	sub	sp, #56	; 0x38
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006322:	2300      	movs	r3, #0
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xQueueGenericSend+0x32>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <xQueueGenericSend+0x40>
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <xQueueGenericSend+0x44>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <xQueueGenericSend+0x46>
 8006358:	2300      	movs	r3, #0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <xQueueGenericSend+0x60>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d103      	bne.n	8006382 <xQueueGenericSend+0x6e>
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <xQueueGenericSend+0x72>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <xQueueGenericSend+0x74>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	623b      	str	r3, [r7, #32]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a2:	f001 fce3 	bl	8007d6c <xTaskGetSchedulerState>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <xQueueGenericSend+0x9e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <xQueueGenericSend+0xa2>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <xQueueGenericSend+0xa4>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	61fb      	str	r3, [r7, #28]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063d2:	f002 fb27 	bl	8008a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <xQueueGenericSend+0xd4>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d129      	bne.n	800643c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	68b9      	ldr	r1, [r7, #8]
 80063ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ee:	f000 fbeb 	bl	8006bc8 <prvCopyDataToQueue>
 80063f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d010      	beq.n	800641e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	3324      	adds	r3, #36	; 0x24
 8006400:	4618      	mov	r0, r3
 8006402:	f001 fadf 	bl	80079c4 <xTaskRemoveFromEventList>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d013      	beq.n	8006434 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800640c:	4b3f      	ldr	r3, [pc, #252]	; (800650c <xQueueGenericSend+0x1f8>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	e00a      	b.n	8006434 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006424:	4b39      	ldr	r3, [pc, #228]	; (800650c <xQueueGenericSend+0x1f8>)
 8006426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006434:	f002 fb26 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006438:	2301      	movs	r3, #1
 800643a:	e063      	b.n	8006504 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d103      	bne.n	800644a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006442:	f002 fb1f 	bl	8008a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006446:	2300      	movs	r3, #0
 8006448:	e05c      	b.n	8006504 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800644a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006450:	f107 0314 	add.w	r3, r7, #20
 8006454:	4618      	mov	r0, r3
 8006456:	f001 fb19 	bl	8007a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800645a:	2301      	movs	r3, #1
 800645c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800645e:	f002 fb11 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006462:	f001 f885 	bl	8007570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006466:	f002 fadd 	bl	8008a24 <vPortEnterCritical>
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006470:	b25b      	sxtb	r3, r3
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006476:	d103      	bne.n	8006480 <xQueueGenericSend+0x16c>
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006486:	b25b      	sxtb	r3, r3
 8006488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800648c:	d103      	bne.n	8006496 <xQueueGenericSend+0x182>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006496:	f002 faf5 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800649a:	1d3a      	adds	r2, r7, #4
 800649c:	f107 0314 	add.w	r3, r7, #20
 80064a0:	4611      	mov	r1, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 fb08 	bl	8007ab8 <xTaskCheckForTimeOut>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d124      	bne.n	80064f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b0:	f000 fc82 	bl	8006db8 <prvIsQueueFull>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d018      	beq.n	80064ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	3310      	adds	r3, #16
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	4611      	mov	r1, r2
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 fa2e 	bl	8007924 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ca:	f000 fc0d 	bl	8006ce8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064ce:	f001 f85d 	bl	800758c <xTaskResumeAll>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f47f af7c 	bne.w	80063d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064da:	4b0c      	ldr	r3, [pc, #48]	; (800650c <xQueueGenericSend+0x1f8>)
 80064dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	e772      	b.n	80063d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ee:	f000 fbfb 	bl	8006ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064f2:	f001 f84b 	bl	800758c <xTaskResumeAll>
 80064f6:	e76c      	b.n	80063d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064fa:	f000 fbf5 	bl	8006ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064fe:	f001 f845 	bl	800758c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006502:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006504:	4618      	mov	r0, r3
 8006506:	3738      	adds	r7, #56	; 0x38
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b090      	sub	sp, #64	; 0x40
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800653a:	bf00      	nop
 800653c:	e7fe      	b.n	800653c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <xQueueGenericSendFromISR+0x3c>
 8006544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <xQueueGenericSendFromISR+0x40>
 800654c:	2301      	movs	r3, #1
 800654e:	e000      	b.n	8006552 <xQueueGenericSendFromISR+0x42>
 8006550:	2300      	movs	r3, #0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d103      	bne.n	800657a <xQueueGenericSendFromISR+0x6a>
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <xQueueGenericSendFromISR+0x6e>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueGenericSendFromISR+0x70>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	623b      	str	r3, [r7, #32]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800659a:	f002 fb25 	bl	8008be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800659e:	f3ef 8211 	mrs	r2, BASEPRI
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	61fa      	str	r2, [r7, #28]
 80065b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d302      	bcc.n	80065cc <xQueueGenericSendFromISR+0xbc>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d12f      	bne.n	800662c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065e2:	f000 faf1 	bl	8006bc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ee:	d112      	bne.n	8006616 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d016      	beq.n	8006626 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	3324      	adds	r3, #36	; 0x24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 f9e1 	bl	80079c4 <xTaskRemoveFromEventList>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00e      	beq.n	8006626 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00b      	beq.n	8006626 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e007      	b.n	8006626 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006616:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800661a:	3301      	adds	r3, #1
 800661c:	b2db      	uxtb	r3, r3
 800661e:	b25a      	sxtb	r2, r3
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006626:	2301      	movs	r3, #1
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800662a:	e001      	b.n	8006630 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800662c:	2300      	movs	r3, #0
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006632:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800663a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800663c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800663e:	4618      	mov	r0, r3
 8006640:	3740      	adds	r7, #64	; 0x40
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08c      	sub	sp, #48	; 0x30
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006654:	2300      	movs	r3, #0
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <xQueueReceive+0x30>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	623b      	str	r3, [r7, #32]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d103      	bne.n	8006686 <xQueueReceive+0x3e>
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <xQueueReceive+0x42>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <xQueueReceive+0x44>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <xQueueReceive+0x5e>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	61fb      	str	r3, [r7, #28]
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066a6:	f001 fb61 	bl	8007d6c <xTaskGetSchedulerState>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <xQueueReceive+0x6e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <xQueueReceive+0x72>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <xQueueReceive+0x74>
 80066ba:	2300      	movs	r3, #0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <xQueueReceive+0x8e>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	61bb      	str	r3, [r7, #24]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066d6:	f002 f9a5 	bl	8008a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d01f      	beq.n	8006726 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066e6:	68b9      	ldr	r1, [r7, #8]
 80066e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ea:	f000 fad7 	bl	8006c9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	1e5a      	subs	r2, r3, #1
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00f      	beq.n	800671e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006700:	3310      	adds	r3, #16
 8006702:	4618      	mov	r0, r3
 8006704:	f001 f95e 	bl	80079c4 <xTaskRemoveFromEventList>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800670e:	4b3d      	ldr	r3, [pc, #244]	; (8006804 <xQueueReceive+0x1bc>)
 8006710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800671e:	f002 f9b1 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006722:	2301      	movs	r3, #1
 8006724:	e069      	b.n	80067fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d103      	bne.n	8006734 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800672c:	f002 f9aa 	bl	8008a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006730:	2300      	movs	r3, #0
 8006732:	e062      	b.n	80067fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800673a:	f107 0310 	add.w	r3, r7, #16
 800673e:	4618      	mov	r0, r3
 8006740:	f001 f9a4 	bl	8007a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006744:	2301      	movs	r3, #1
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006748:	f002 f99c 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800674c:	f000 ff10 	bl	8007570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006750:	f002 f968 	bl	8008a24 <vPortEnterCritical>
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800675a:	b25b      	sxtb	r3, r3
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006760:	d103      	bne.n	800676a <xQueueReceive+0x122>
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006770:	b25b      	sxtb	r3, r3
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006776:	d103      	bne.n	8006780 <xQueueReceive+0x138>
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006780:	f002 f980 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006784:	1d3a      	adds	r2, r7, #4
 8006786:	f107 0310 	add.w	r3, r7, #16
 800678a:	4611      	mov	r1, r2
 800678c:	4618      	mov	r0, r3
 800678e:	f001 f993 	bl	8007ab8 <xTaskCheckForTimeOut>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d123      	bne.n	80067e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679a:	f000 faf7 	bl	8006d8c <prvIsQueueEmpty>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d017      	beq.n	80067d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	3324      	adds	r3, #36	; 0x24
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4611      	mov	r1, r2
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 f8b9 	bl	8007924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b4:	f000 fa98 	bl	8006ce8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067b8:	f000 fee8 	bl	800758c <xTaskResumeAll>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d189      	bne.n	80066d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80067c2:	4b10      	ldr	r3, [pc, #64]	; (8006804 <xQueueReceive+0x1bc>)
 80067c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	e780      	b.n	80066d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d6:	f000 fa87 	bl	8006ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067da:	f000 fed7 	bl	800758c <xTaskResumeAll>
 80067de:	e77a      	b.n	80066d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e2:	f000 fa81 	bl	8006ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067e6:	f000 fed1 	bl	800758c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067ec:	f000 face 	bl	8006d8c <prvIsQueueEmpty>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f43f af6f 	beq.w	80066d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3730      	adds	r7, #48	; 0x30
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08e      	sub	sp, #56	; 0x38
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800681a:	2300      	movs	r3, #0
 800681c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	623b      	str	r3, [r7, #32]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	61fb      	str	r3, [r7, #28]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006858:	f001 fa88 	bl	8007d6c <xTaskGetSchedulerState>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d102      	bne.n	8006868 <xQueueSemaphoreTake+0x60>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <xQueueSemaphoreTake+0x64>
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <xQueueSemaphoreTake+0x66>
 800686c:	2300      	movs	r3, #0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	61bb      	str	r3, [r7, #24]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006888:	f002 f8cc 	bl	8008a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006890:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	2b00      	cmp	r3, #0
 8006896:	d024      	beq.n	80068e2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	1e5a      	subs	r2, r3, #1
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d104      	bne.n	80068b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80068a8:	f001 fbd6 	bl	8008058 <pvTaskIncrementMutexHeldCount>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00f      	beq.n	80068da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	3310      	adds	r3, #16
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 f880 	bl	80079c4 <xTaskRemoveFromEventList>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068ca:	4b54      	ldr	r3, [pc, #336]	; (8006a1c <xQueueSemaphoreTake+0x214>)
 80068cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068da:	f002 f8d3 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 80068de:	2301      	movs	r3, #1
 80068e0:	e097      	b.n	8006a12 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d111      	bne.n	800690c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	617b      	str	r3, [r7, #20]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006904:	f002 f8be 	bl	8008a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006908:	2300      	movs	r3, #0
 800690a:	e082      	b.n	8006a12 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800690c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006912:	f107 030c 	add.w	r3, r7, #12
 8006916:	4618      	mov	r0, r3
 8006918:	f001 f8b8 	bl	8007a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800691c:	2301      	movs	r3, #1
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006920:	f002 f8b0 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006924:	f000 fe24 	bl	8007570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006928:	f002 f87c 	bl	8008a24 <vPortEnterCritical>
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006932:	b25b      	sxtb	r3, r3
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006938:	d103      	bne.n	8006942 <xQueueSemaphoreTake+0x13a>
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006948:	b25b      	sxtb	r3, r3
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800694e:	d103      	bne.n	8006958 <xQueueSemaphoreTake+0x150>
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006958:	f002 f894 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800695c:	463a      	mov	r2, r7
 800695e:	f107 030c 	add.w	r3, r7, #12
 8006962:	4611      	mov	r1, r2
 8006964:	4618      	mov	r0, r3
 8006966:	f001 f8a7 	bl	8007ab8 <xTaskCheckForTimeOut>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d132      	bne.n	80069d6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006972:	f000 fa0b 	bl	8006d8c <prvIsQueueEmpty>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d026      	beq.n	80069ca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006984:	f002 f84e 	bl	8008a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4618      	mov	r0, r3
 800698e:	f001 fa0b 	bl	8007da8 <xTaskPriorityInherit>
 8006992:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006994:	f002 f876 	bl	8008a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699a:	3324      	adds	r3, #36	; 0x24
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	4611      	mov	r1, r2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 ffbf 	bl	8007924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069a8:	f000 f99e 	bl	8006ce8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069ac:	f000 fdee 	bl	800758c <xTaskResumeAll>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f47f af68 	bne.w	8006888 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80069b8:	4b18      	ldr	r3, [pc, #96]	; (8006a1c <xQueueSemaphoreTake+0x214>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	e75e      	b.n	8006888 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80069ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069cc:	f000 f98c 	bl	8006ce8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069d0:	f000 fddc 	bl	800758c <xTaskResumeAll>
 80069d4:	e758      	b.n	8006888 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80069d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069d8:	f000 f986 	bl	8006ce8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069dc:	f000 fdd6 	bl	800758c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069e2:	f000 f9d3 	bl	8006d8c <prvIsQueueEmpty>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f43f af4d 	beq.w	8006888 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80069f4:	f002 f816 	bl	8008a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80069f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069fa:	f000 f8cd 	bl	8006b98 <prvGetDisinheritPriorityAfterTimeout>
 80069fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 faa4 	bl	8007f54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a0c:	f002 f83a 	bl	8008a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3738      	adds	r7, #56	; 0x38
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	e000ed04 	.word	0xe000ed04

08006a20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08e      	sub	sp, #56	; 0x38
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	623b      	str	r3, [r7, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <xQueueReceiveFromISR+0x3a>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <xQueueReceiveFromISR+0x3e>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <xQueueReceiveFromISR+0x40>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	61fb      	str	r3, [r7, #28]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a7a:	f002 f8b5 	bl	8008be8 <vPortValidateInterruptPriority>
	__asm volatile
 8006a7e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	61ba      	str	r2, [r7, #24]
 8006a94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d02f      	beq.n	8006b06 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ab4:	f000 f8f2 	bl	8006c9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	1e5a      	subs	r2, r3, #1
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ac0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac8:	d112      	bne.n	8006af0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	3310      	adds	r3, #16
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 ff74 	bl	80079c4 <xTaskRemoveFromEventList>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e007      	b.n	8006b00 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af4:	3301      	adds	r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	b25a      	sxtb	r2, r3
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b00:	2301      	movs	r3, #1
 8006b02:	637b      	str	r3, [r7, #52]	; 0x34
 8006b04:	e001      	b.n	8006b0a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f383 8811 	msr	BASEPRI, r3
}
 8006b14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3738      	adds	r7, #56	; 0x38
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	60bb      	str	r3, [r7, #8]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006b44:	f001 ff6e 	bl	8008a24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006b4e:	f001 ff99 	bl	8008a84 <vPortExitCritical>

	return uxReturn;
 8006b52:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	60fb      	str	r3, [r7, #12]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006b8a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d006      	beq.n	8006bb6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	e001      	b.n	8006bba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006bba:	68fb      	ldr	r3, [r7, #12]
	}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10d      	bne.n	8006c02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d14d      	bne.n	8006c8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 f940 	bl	8007e78 <xTaskPriorityDisinherit>
 8006bf8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	609a      	str	r2, [r3, #8]
 8006c00:	e043      	b.n	8006c8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d119      	bne.n	8006c3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6858      	ldr	r0, [r3, #4]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	461a      	mov	r2, r3
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	f002 fbd0 	bl	80093b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	441a      	add	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d32b      	bcc.n	8006c8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	e026      	b.n	8006c8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68d8      	ldr	r0, [r3, #12]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	461a      	mov	r2, r3
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	f002 fbb6 	bl	80093b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	425b      	negs	r3, r3
 8006c56:	441a      	add	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d207      	bcs.n	8006c78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	425b      	negs	r3, r3
 8006c72:	441a      	add	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d105      	bne.n	8006c8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c92:	697b      	ldr	r3, [r7, #20]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d018      	beq.n	8006ce0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	441a      	add	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d303      	bcc.n	8006cd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68d9      	ldr	r1, [r3, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6838      	ldr	r0, [r7, #0]
 8006cdc:	f002 fb6c 	bl	80093b8 <memcpy>
	}
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006cf0:	f001 fe98 	bl	8008a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cfc:	e011      	b.n	8006d22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d012      	beq.n	8006d2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3324      	adds	r3, #36	; 0x24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fe5a 	bl	80079c4 <xTaskRemoveFromEventList>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d16:	f000 ff31 	bl	8007b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dce9      	bgt.n	8006cfe <prvUnlockQueue+0x16>
 8006d2a:	e000      	b.n	8006d2e <prvUnlockQueue+0x46>
					break;
 8006d2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	22ff      	movs	r2, #255	; 0xff
 8006d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006d36:	f001 fea5 	bl	8008a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d3a:	f001 fe73 	bl	8008a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d46:	e011      	b.n	8006d6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d012      	beq.n	8006d76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3310      	adds	r3, #16
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fe35 	bl	80079c4 <xTaskRemoveFromEventList>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d60:	f000 ff0c 	bl	8007b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dce9      	bgt.n	8006d48 <prvUnlockQueue+0x60>
 8006d74:	e000      	b.n	8006d78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	22ff      	movs	r2, #255	; 0xff
 8006d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d80:	f001 fe80 	bl	8008a84 <vPortExitCritical>
}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d94:	f001 fe46 	bl	8008a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d102      	bne.n	8006da6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e001      	b.n	8006daa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006daa:	f001 fe6b 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 8006dae:	68fb      	ldr	r3, [r7, #12]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006dc0:	f001 fe30 	bl	8008a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d102      	bne.n	8006dd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e001      	b.n	8006dda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dda:	f001 fe53 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	e014      	b.n	8006e22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006df8:	4a0f      	ldr	r2, [pc, #60]	; (8006e38 <vQueueAddToRegistry+0x50>)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10b      	bne.n	8006e1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e04:	490c      	ldr	r1, [pc, #48]	; (8006e38 <vQueueAddToRegistry+0x50>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e0e:	4a0a      	ldr	r2, [pc, #40]	; (8006e38 <vQueueAddToRegistry+0x50>)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e1a:	e006      	b.n	8006e2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b07      	cmp	r3, #7
 8006e26:	d9e7      	bls.n	8006df8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	200013c0 	.word	0x200013c0

08006e3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e4c:	f001 fdea 	bl	8008a24 <vPortEnterCritical>
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e5c:	d103      	bne.n	8006e66 <vQueueWaitForMessageRestricted+0x2a>
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e6c:	b25b      	sxtb	r3, r3
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e72:	d103      	bne.n	8006e7c <vQueueWaitForMessageRestricted+0x40>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7c:	f001 fe02 	bl	8008a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	3324      	adds	r3, #36	; 0x24
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fd6b 	bl	800796c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e96:	6978      	ldr	r0, [r7, #20]
 8006e98:	f7ff ff26 	bl	8006ce8 <prvUnlockQueue>
	}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08e      	sub	sp, #56	; 0x38
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <xTaskCreateStatic+0x2a>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	623b      	str	r3, [r7, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <xTaskCreateStatic+0x46>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	61fb      	str	r3, [r7, #28]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006eee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8006ef6:	d00a      	beq.n	8006f0e <xTaskCreateStatic+0x6a>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	61bb      	str	r3, [r7, #24]
}
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01e      	beq.n	8006f54 <xTaskCreateStatic+0xb0>
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01b      	beq.n	8006f54 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	2202      	movs	r2, #2
 8006f2a:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f2e:	2300      	movs	r3, #0
 8006f30:	9303      	str	r3, [sp, #12]
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	9302      	str	r3, [sp, #8]
 8006f36:	f107 0314 	add.w	r3, r7, #20
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 f852 	bl	8006ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f4e:	f000 f91f 	bl	8007190 <prvAddNewTaskToReadyList>
 8006f52:	e001      	b.n	8006f58 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f58:	697b      	ldr	r3, [r7, #20]
	}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3728      	adds	r7, #40	; 0x28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b08c      	sub	sp, #48	; 0x30
 8006f66:	af04      	add	r7, sp, #16
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	603b      	str	r3, [r7, #0]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 fe76 	bl	8008c68 <pvPortMalloc>
 8006f7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00f      	beq.n	8006fa4 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f84:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8006f88:	f001 fe6e 	bl	8008c68 <pvPortMalloc>
 8006f8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
 8006f9a:	e005      	b.n	8006fa8 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f9c:	6978      	ldr	r0, [r7, #20]
 8006f9e:	f001 ff2f 	bl	8008e00 <vPortFree>
 8006fa2:	e001      	b.n	8006fa8 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d017      	beq.n	8006fde <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9303      	str	r3, [sp, #12]
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	9302      	str	r3, [sp, #8]
 8006fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f80f 	bl	8006ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fd2:	69f8      	ldr	r0, [r7, #28]
 8006fd4:	f000 f8dc 	bl	8007190 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	61bb      	str	r3, [r7, #24]
 8006fdc:	e002      	b.n	8006fe4 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fe2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
	}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3720      	adds	r7, #32
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	461a      	mov	r2, r3
 8007008:	21a5      	movs	r1, #165	; 0xa5
 800700a:	f002 f92a 	bl	8009262 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007018:	3b01      	subs	r3, #1
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f023 0307 	bic.w	r3, r3, #7
 8007026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	617b      	str	r3, [r7, #20]
}
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d01f      	beq.n	800708e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	e012      	b.n	800707a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	7819      	ldrb	r1, [r3, #0]
 800705c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	3334      	adds	r3, #52	; 0x34
 8007064:	460a      	mov	r2, r1
 8007066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d006      	beq.n	8007082 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	3301      	adds	r3, #1
 8007078:	61fb      	str	r3, [r7, #28]
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	2b0f      	cmp	r3, #15
 800707e:	d9e9      	bls.n	8007054 <prvInitialiseNewTask+0x64>
 8007080:	e000      	b.n	8007084 <prvInitialiseNewTask+0x94>
			{
				break;
 8007082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800708c:	e003      	b.n	8007096 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	2b37      	cmp	r3, #55	; 0x37
 800709a:	d901      	bls.n	80070a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800709c:	2337      	movs	r3, #55	; 0x37
 800709e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	2200      	movs	r2, #0
 80070b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b4:	3304      	adds	r3, #4
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fea4 	bl	8005e04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070be:	3318      	adds	r3, #24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fe9f 	bl	8005e04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	3358      	adds	r3, #88	; 0x58
 80070f0:	f44f 7290 	mov.w	r2, #288	; 0x120
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f002 f8b3 	bl	8009262 <memset>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	4a21      	ldr	r2, [pc, #132]	; (8007184 <prvInitialiseNewTask+0x194>)
 8007100:	65da      	str	r2, [r3, #92]	; 0x5c
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	4a20      	ldr	r2, [pc, #128]	; (8007188 <prvInitialiseNewTask+0x198>)
 8007106:	661a      	str	r2, [r3, #96]	; 0x60
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	4a20      	ldr	r2, [pc, #128]	; (800718c <prvInitialiseNewTask+0x19c>)
 800710c:	665a      	str	r2, [r3, #100]	; 0x64
 800710e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007110:	f04f 0201 	mov.w	r2, #1
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	f243 320e 	movw	r2, #13070	; 0x330e
 8007122:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 800712c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	f241 2234 	movw	r2, #4660	; 0x1234
 8007136:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	f24e 626d 	movw	r2, #58989	; 0xe66d
 8007140:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 800714a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	2205      	movs	r2, #5
 8007152:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	220b      	movs	r2, #11
 800715a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	68f9      	ldr	r1, [r7, #12]
 8007162:	69b8      	ldr	r0, [r7, #24]
 8007164:	f001 fb2e 	bl	80087c4 <pxPortInitialiseStack>
 8007168:	4602      	mov	r2, r0
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <prvInitialiseNewTask+0x18a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800717a:	bf00      	nop
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20004164 	.word	0x20004164
 8007188:	200041cc 	.word	0x200041cc
 800718c:	20004234 	.word	0x20004234

08007190 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007198:	f001 fc44 	bl	8008a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800719c:	4b2d      	ldr	r3, [pc, #180]	; (8007254 <prvAddNewTaskToReadyList+0xc4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3301      	adds	r3, #1
 80071a2:	4a2c      	ldr	r2, [pc, #176]	; (8007254 <prvAddNewTaskToReadyList+0xc4>)
 80071a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071a6:	4b2c      	ldr	r3, [pc, #176]	; (8007258 <prvAddNewTaskToReadyList+0xc8>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071ae:	4a2a      	ldr	r2, [pc, #168]	; (8007258 <prvAddNewTaskToReadyList+0xc8>)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071b4:	4b27      	ldr	r3, [pc, #156]	; (8007254 <prvAddNewTaskToReadyList+0xc4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d110      	bne.n	80071de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071bc:	f000 fd04 	bl	8007bc8 <prvInitialiseTaskLists>
 80071c0:	e00d      	b.n	80071de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071c2:	4b26      	ldr	r3, [pc, #152]	; (800725c <prvAddNewTaskToReadyList+0xcc>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071ca:	4b23      	ldr	r3, [pc, #140]	; (8007258 <prvAddNewTaskToReadyList+0xc8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d802      	bhi.n	80071de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <prvAddNewTaskToReadyList+0xc8>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071de:	4b20      	ldr	r3, [pc, #128]	; (8007260 <prvAddNewTaskToReadyList+0xd0>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <prvAddNewTaskToReadyList+0xd0>)
 80071e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071e8:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <prvAddNewTaskToReadyList+0xd0>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	4b1b      	ldr	r3, [pc, #108]	; (8007264 <prvAddNewTaskToReadyList+0xd4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d903      	bls.n	8007204 <prvAddNewTaskToReadyList+0x74>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a18      	ldr	r2, [pc, #96]	; (8007264 <prvAddNewTaskToReadyList+0xd4>)
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4a15      	ldr	r2, [pc, #84]	; (8007268 <prvAddNewTaskToReadyList+0xd8>)
 8007212:	441a      	add	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3304      	adds	r3, #4
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f7fe fdff 	bl	8005e1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007220:	f001 fc30 	bl	8008a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007224:	4b0d      	ldr	r3, [pc, #52]	; (800725c <prvAddNewTaskToReadyList+0xcc>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00e      	beq.n	800724a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <prvAddNewTaskToReadyList+0xc8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	429a      	cmp	r2, r3
 8007238:	d207      	bcs.n	800724a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <prvAddNewTaskToReadyList+0xdc>)
 800723c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200018d4 	.word	0x200018d4
 8007258:	20001400 	.word	0x20001400
 800725c:	200018e0 	.word	0x200018e0
 8007260:	200018f0 	.word	0x200018f0
 8007264:	200018dc 	.word	0x200018dc
 8007268:	20001404 	.word	0x20001404
 800726c:	e000ed04 	.word	0xe000ed04

08007270 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d017      	beq.n	80072b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007282:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <vTaskDelay+0x60>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <vTaskDelay+0x30>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60bb      	str	r3, [r7, #8]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072a0:	f000 f966 	bl	8007570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072a4:	2100      	movs	r1, #0
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 feea 	bl	8008080 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072ac:	f000 f96e 	bl	800758c <xTaskResumeAll>
 80072b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d107      	bne.n	80072c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80072b8:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <vTaskDelay+0x64>)
 80072ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072c8:	bf00      	nop
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	200018fc 	.word	0x200018fc
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10a      	bne.n	8007300 <eTaskGetState+0x28>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	60bb      	str	r3, [r7, #8]
}
 80072fc:	bf00      	nop
 80072fe:	e7fe      	b.n	80072fe <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007300:	4b23      	ldr	r3, [pc, #140]	; (8007390 <eTaskGetState+0xb8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	429a      	cmp	r2, r3
 8007308:	d102      	bne.n	8007310 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800730a:	2300      	movs	r3, #0
 800730c:	77fb      	strb	r3, [r7, #31]
 800730e:	e03a      	b.n	8007386 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8007310:	f001 fb88 	bl	8008a24 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <eTaskGetState+0xbc>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8007320:	4b1d      	ldr	r3, [pc, #116]	; (8007398 <eTaskGetState+0xc0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007326:	f001 fbad 	bl	8008a84 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	429a      	cmp	r2, r3
 8007330:	d003      	beq.n	800733a <eTaskGetState+0x62>
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	429a      	cmp	r2, r3
 8007338:	d102      	bne.n	8007340 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800733a:	2302      	movs	r3, #2
 800733c:	77fb      	strb	r3, [r7, #31]
 800733e:	e022      	b.n	8007386 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	4a16      	ldr	r2, [pc, #88]	; (800739c <eTaskGetState+0xc4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d112      	bne.n	800736e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10b      	bne.n	8007368 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b01      	cmp	r3, #1
 800735a:	d102      	bne.n	8007362 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800735c:	2302      	movs	r3, #2
 800735e:	77fb      	strb	r3, [r7, #31]
 8007360:	e011      	b.n	8007386 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8007362:	2303      	movs	r3, #3
 8007364:	77fb      	strb	r3, [r7, #31]
 8007366:	e00e      	b.n	8007386 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8007368:	2302      	movs	r3, #2
 800736a:	77fb      	strb	r3, [r7, #31]
 800736c:	e00b      	b.n	8007386 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	4a0b      	ldr	r2, [pc, #44]	; (80073a0 <eTaskGetState+0xc8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d002      	beq.n	800737c <eTaskGetState+0xa4>
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800737c:	2304      	movs	r3, #4
 800737e:	77fb      	strb	r3, [r7, #31]
 8007380:	e001      	b.n	8007386 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007382:	2301      	movs	r3, #1
 8007384:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8007386:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007388:	4618      	mov	r0, r3
 800738a:	3720      	adds	r7, #32
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20001400 	.word	0x20001400
 8007394:	2000188c 	.word	0x2000188c
 8007398:	20001890 	.word	0x20001890
 800739c:	200018c0 	.word	0x200018c0
 80073a0:	200018a8 	.word	0x200018a8

080073a4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80073ac:	f001 fb3a 	bl	8008a24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d102      	bne.n	80073bc <vTaskSuspend+0x18>
 80073b6:	4b30      	ldr	r3, [pc, #192]	; (8007478 <vTaskSuspend+0xd4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	e000      	b.n	80073be <vTaskSuspend+0x1a>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fd87 	bl	8005ed8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d004      	beq.n	80073dc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3318      	adds	r3, #24
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe fd7e 	bl	8005ed8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3304      	adds	r3, #4
 80073e0:	4619      	mov	r1, r3
 80073e2:	4826      	ldr	r0, [pc, #152]	; (800747c <vTaskSuspend+0xd8>)
 80073e4:	f7fe fd1b 	bl	8005e1e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d103      	bne.n	80073fc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80073fc:	f001 fb42 	bl	8008a84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007400:	4b1f      	ldr	r3, [pc, #124]	; (8007480 <vTaskSuspend+0xdc>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007408:	f001 fb0c 	bl	8008a24 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800740c:	f000 fc7e 	bl	8007d0c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007410:	f001 fb38 	bl	8008a84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007414:	4b18      	ldr	r3, [pc, #96]	; (8007478 <vTaskSuspend+0xd4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	429a      	cmp	r2, r3
 800741c:	d127      	bne.n	800746e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800741e:	4b18      	ldr	r3, [pc, #96]	; (8007480 <vTaskSuspend+0xdc>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d017      	beq.n	8007456 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007426:	4b17      	ldr	r3, [pc, #92]	; (8007484 <vTaskSuspend+0xe0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <vTaskSuspend+0xa0>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	60bb      	str	r3, [r7, #8]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8007444:	4b10      	ldr	r3, [pc, #64]	; (8007488 <vTaskSuspend+0xe4>)
 8007446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007454:	e00b      	b.n	800746e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007456:	4b09      	ldr	r3, [pc, #36]	; (800747c <vTaskSuspend+0xd8>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	4b0c      	ldr	r3, [pc, #48]	; (800748c <vTaskSuspend+0xe8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d103      	bne.n	800746a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <vTaskSuspend+0xd4>)
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
	}
 8007468:	e001      	b.n	800746e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800746a:	f000 f9f7 	bl	800785c <vTaskSwitchContext>
	}
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20001400 	.word	0x20001400
 800747c:	200018c0 	.word	0x200018c0
 8007480:	200018e0 	.word	0x200018e0
 8007484:	200018fc 	.word	0x200018fc
 8007488:	e000ed04 	.word	0xe000ed04
 800748c:	200018d4 	.word	0x200018d4

08007490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800749e:	463a      	mov	r2, r7
 80074a0:	1d39      	adds	r1, r7, #4
 80074a2:	f107 0308 	add.w	r3, r7, #8
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fc58 	bl	8005d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	9202      	str	r2, [sp, #8]
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	2300      	movs	r3, #0
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	2300      	movs	r3, #0
 80074bc:	460a      	mov	r2, r1
 80074be:	4924      	ldr	r1, [pc, #144]	; (8007550 <vTaskStartScheduler+0xc0>)
 80074c0:	4824      	ldr	r0, [pc, #144]	; (8007554 <vTaskStartScheduler+0xc4>)
 80074c2:	f7ff fcef 	bl	8006ea4 <xTaskCreateStatic>
 80074c6:	4603      	mov	r3, r0
 80074c8:	4a23      	ldr	r2, [pc, #140]	; (8007558 <vTaskStartScheduler+0xc8>)
 80074ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074cc:	4b22      	ldr	r3, [pc, #136]	; (8007558 <vTaskStartScheduler+0xc8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074d4:	2301      	movs	r3, #1
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e001      	b.n	80074de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d102      	bne.n	80074ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074e4:	f000 fe20 	bl	8008128 <xTimerCreateTimerTask>
 80074e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d11b      	bne.n	8007528 <vTaskStartScheduler+0x98>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	613b      	str	r3, [r7, #16]
}
 8007502:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007504:	4b15      	ldr	r3, [pc, #84]	; (800755c <vTaskStartScheduler+0xcc>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3358      	adds	r3, #88	; 0x58
 800750a:	4a15      	ldr	r2, [pc, #84]	; (8007560 <vTaskStartScheduler+0xd0>)
 800750c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800750e:	4b15      	ldr	r3, [pc, #84]	; (8007564 <vTaskStartScheduler+0xd4>)
 8007510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007516:	4b14      	ldr	r3, [pc, #80]	; (8007568 <vTaskStartScheduler+0xd8>)
 8007518:	2201      	movs	r2, #1
 800751a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800751c:	4b13      	ldr	r3, [pc, #76]	; (800756c <vTaskStartScheduler+0xdc>)
 800751e:	2200      	movs	r2, #0
 8007520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007522:	f001 f9dd 	bl	80088e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007526:	e00e      	b.n	8007546 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800752e:	d10a      	bne.n	8007546 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	60fb      	str	r3, [r7, #12]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <vTaskStartScheduler+0xb4>
}
 8007546:	bf00      	nop
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	0800e06c 	.word	0x0800e06c
 8007554:	08007b95 	.word	0x08007b95
 8007558:	200018f8 	.word	0x200018f8
 800755c:	20001400 	.word	0x20001400
 8007560:	20000160 	.word	0x20000160
 8007564:	200018f4 	.word	0x200018f4
 8007568:	200018e0 	.word	0x200018e0
 800756c:	200018d8 	.word	0x200018d8

08007570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007574:	4b04      	ldr	r3, [pc, #16]	; (8007588 <vTaskSuspendAll+0x18>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	4a03      	ldr	r2, [pc, #12]	; (8007588 <vTaskSuspendAll+0x18>)
 800757c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800757e:	bf00      	nop
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	200018fc 	.word	0x200018fc

0800758c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800759a:	4b42      	ldr	r3, [pc, #264]	; (80076a4 <xTaskResumeAll+0x118>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	603b      	str	r3, [r7, #0]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075b8:	f001 fa34 	bl	8008a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075bc:	4b39      	ldr	r3, [pc, #228]	; (80076a4 <xTaskResumeAll+0x118>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	4a38      	ldr	r2, [pc, #224]	; (80076a4 <xTaskResumeAll+0x118>)
 80075c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c6:	4b37      	ldr	r3, [pc, #220]	; (80076a4 <xTaskResumeAll+0x118>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d162      	bne.n	8007694 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075ce:	4b36      	ldr	r3, [pc, #216]	; (80076a8 <xTaskResumeAll+0x11c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d05e      	beq.n	8007694 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075d6:	e02f      	b.n	8007638 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d8:	4b34      	ldr	r3, [pc, #208]	; (80076ac <xTaskResumeAll+0x120>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3318      	adds	r3, #24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe fc77 	bl	8005ed8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fc72 	bl	8005ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f8:	4b2d      	ldr	r3, [pc, #180]	; (80076b0 <xTaskResumeAll+0x124>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d903      	bls.n	8007608 <xTaskResumeAll+0x7c>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	4a2a      	ldr	r2, [pc, #168]	; (80076b0 <xTaskResumeAll+0x124>)
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4a27      	ldr	r2, [pc, #156]	; (80076b4 <xTaskResumeAll+0x128>)
 8007616:	441a      	add	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3304      	adds	r3, #4
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f7fe fbfd 	bl	8005e1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	4b23      	ldr	r3, [pc, #140]	; (80076b8 <xTaskResumeAll+0x12c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	429a      	cmp	r2, r3
 8007630:	d302      	bcc.n	8007638 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007632:	4b22      	ldr	r3, [pc, #136]	; (80076bc <xTaskResumeAll+0x130>)
 8007634:	2201      	movs	r2, #1
 8007636:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007638:	4b1c      	ldr	r3, [pc, #112]	; (80076ac <xTaskResumeAll+0x120>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1cb      	bne.n	80075d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007646:	f000 fb61 	bl	8007d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800764a:	4b1d      	ldr	r3, [pc, #116]	; (80076c0 <xTaskResumeAll+0x134>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d010      	beq.n	8007678 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007656:	f000 f847 	bl	80076e8 <xTaskIncrementTick>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007660:	4b16      	ldr	r3, [pc, #88]	; (80076bc <xTaskResumeAll+0x130>)
 8007662:	2201      	movs	r2, #1
 8007664:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3b01      	subs	r3, #1
 800766a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f1      	bne.n	8007656 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <xTaskResumeAll+0x134>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007678:	4b10      	ldr	r3, [pc, #64]	; (80076bc <xTaskResumeAll+0x130>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d009      	beq.n	8007694 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007684:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <xTaskResumeAll+0x138>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007694:	f001 f9f6 	bl	8008a84 <vPortExitCritical>

	return xAlreadyYielded;
 8007698:	68bb      	ldr	r3, [r7, #8]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	200018fc 	.word	0x200018fc
 80076a8:	200018d4 	.word	0x200018d4
 80076ac:	20001894 	.word	0x20001894
 80076b0:	200018dc 	.word	0x200018dc
 80076b4:	20001404 	.word	0x20001404
 80076b8:	20001400 	.word	0x20001400
 80076bc:	200018e8 	.word	0x200018e8
 80076c0:	200018e4 	.word	0x200018e4
 80076c4:	e000ed04 	.word	0xe000ed04

080076c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <xTaskGetTickCount+0x1c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076d4:	687b      	ldr	r3, [r7, #4]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	200018d8 	.word	0x200018d8

080076e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f2:	4b4f      	ldr	r3, [pc, #316]	; (8007830 <xTaskIncrementTick+0x148>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f040 808f 	bne.w	800781a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076fc:	4b4d      	ldr	r3, [pc, #308]	; (8007834 <xTaskIncrementTick+0x14c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3301      	adds	r3, #1
 8007702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007704:	4a4b      	ldr	r2, [pc, #300]	; (8007834 <xTaskIncrementTick+0x14c>)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d120      	bne.n	8007752 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007710:	4b49      	ldr	r3, [pc, #292]	; (8007838 <xTaskIncrementTick+0x150>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <xTaskIncrementTick+0x48>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	603b      	str	r3, [r7, #0]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <xTaskIncrementTick+0x46>
 8007730:	4b41      	ldr	r3, [pc, #260]	; (8007838 <xTaskIncrementTick+0x150>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	4b41      	ldr	r3, [pc, #260]	; (800783c <xTaskIncrementTick+0x154>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a3f      	ldr	r2, [pc, #252]	; (8007838 <xTaskIncrementTick+0x150>)
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	4a3f      	ldr	r2, [pc, #252]	; (800783c <xTaskIncrementTick+0x154>)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	4b3e      	ldr	r3, [pc, #248]	; (8007840 <xTaskIncrementTick+0x158>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3301      	adds	r3, #1
 800774a:	4a3d      	ldr	r2, [pc, #244]	; (8007840 <xTaskIncrementTick+0x158>)
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	f000 fadd 	bl	8007d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007752:	4b3c      	ldr	r3, [pc, #240]	; (8007844 <xTaskIncrementTick+0x15c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	429a      	cmp	r2, r3
 800775a:	d349      	bcc.n	80077f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800775c:	4b36      	ldr	r3, [pc, #216]	; (8007838 <xTaskIncrementTick+0x150>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d104      	bne.n	8007770 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007766:	4b37      	ldr	r3, [pc, #220]	; (8007844 <xTaskIncrementTick+0x15c>)
 8007768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800776c:	601a      	str	r2, [r3, #0]
					break;
 800776e:	e03f      	b.n	80077f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007770:	4b31      	ldr	r3, [pc, #196]	; (8007838 <xTaskIncrementTick+0x150>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	d203      	bcs.n	8007790 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007788:	4a2e      	ldr	r2, [pc, #184]	; (8007844 <xTaskIncrementTick+0x15c>)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800778e:	e02f      	b.n	80077f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	3304      	adds	r3, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe fb9f 	bl	8005ed8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d004      	beq.n	80077ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	3318      	adds	r3, #24
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fb96 	bl	8005ed8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b0:	4b25      	ldr	r3, [pc, #148]	; (8007848 <xTaskIncrementTick+0x160>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d903      	bls.n	80077c0 <xTaskIncrementTick+0xd8>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	4a22      	ldr	r2, [pc, #136]	; (8007848 <xTaskIncrementTick+0x160>)
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4a1f      	ldr	r2, [pc, #124]	; (800784c <xTaskIncrementTick+0x164>)
 80077ce:	441a      	add	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fe fb21 	bl	8005e1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e0:	4b1b      	ldr	r3, [pc, #108]	; (8007850 <xTaskIncrementTick+0x168>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d3b8      	bcc.n	800775c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077ea:	2301      	movs	r3, #1
 80077ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077ee:	e7b5      	b.n	800775c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077f0:	4b17      	ldr	r3, [pc, #92]	; (8007850 <xTaskIncrementTick+0x168>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f6:	4915      	ldr	r1, [pc, #84]	; (800784c <xTaskIncrementTick+0x164>)
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d901      	bls.n	800780c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007808:	2301      	movs	r3, #1
 800780a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800780c:	4b11      	ldr	r3, [pc, #68]	; (8007854 <xTaskIncrementTick+0x16c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	617b      	str	r3, [r7, #20]
 8007818:	e004      	b.n	8007824 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800781a:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <xTaskIncrementTick+0x170>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3301      	adds	r3, #1
 8007820:	4a0d      	ldr	r2, [pc, #52]	; (8007858 <xTaskIncrementTick+0x170>)
 8007822:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007824:	697b      	ldr	r3, [r7, #20]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	200018fc 	.word	0x200018fc
 8007834:	200018d8 	.word	0x200018d8
 8007838:	2000188c 	.word	0x2000188c
 800783c:	20001890 	.word	0x20001890
 8007840:	200018ec 	.word	0x200018ec
 8007844:	200018f4 	.word	0x200018f4
 8007848:	200018dc 	.word	0x200018dc
 800784c:	20001404 	.word	0x20001404
 8007850:	20001400 	.word	0x20001400
 8007854:	200018e8 	.word	0x200018e8
 8007858:	200018e4 	.word	0x200018e4

0800785c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007862:	4b2a      	ldr	r3, [pc, #168]	; (800790c <vTaskSwitchContext+0xb0>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800786a:	4b29      	ldr	r3, [pc, #164]	; (8007910 <vTaskSwitchContext+0xb4>)
 800786c:	2201      	movs	r2, #1
 800786e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007870:	e046      	b.n	8007900 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007872:	4b27      	ldr	r3, [pc, #156]	; (8007910 <vTaskSwitchContext+0xb4>)
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007878:	4b26      	ldr	r3, [pc, #152]	; (8007914 <vTaskSwitchContext+0xb8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	e010      	b.n	80078a2 <vTaskSwitchContext+0x46>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <vTaskSwitchContext+0x40>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	607b      	str	r3, [r7, #4]
}
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <vTaskSwitchContext+0x3e>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3b01      	subs	r3, #1
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	491d      	ldr	r1, [pc, #116]	; (8007918 <vTaskSwitchContext+0xbc>)
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0e4      	beq.n	8007880 <vTaskSwitchContext+0x24>
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4a15      	ldr	r2, [pc, #84]	; (8007918 <vTaskSwitchContext+0xbc>)
 80078c2:	4413      	add	r3, r2
 80078c4:	60bb      	str	r3, [r7, #8]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	605a      	str	r2, [r3, #4]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	3308      	adds	r3, #8
 80078d8:	429a      	cmp	r2, r3
 80078da:	d104      	bne.n	80078e6 <vTaskSwitchContext+0x8a>
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	605a      	str	r2, [r3, #4]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4a0b      	ldr	r2, [pc, #44]	; (800791c <vTaskSwitchContext+0xc0>)
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	4a08      	ldr	r2, [pc, #32]	; (8007914 <vTaskSwitchContext+0xb8>)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078f6:	4b09      	ldr	r3, [pc, #36]	; (800791c <vTaskSwitchContext+0xc0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3358      	adds	r3, #88	; 0x58
 80078fc:	4a08      	ldr	r2, [pc, #32]	; (8007920 <vTaskSwitchContext+0xc4>)
 80078fe:	6013      	str	r3, [r2, #0]
}
 8007900:	bf00      	nop
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	200018fc 	.word	0x200018fc
 8007910:	200018e8 	.word	0x200018e8
 8007914:	200018dc 	.word	0x200018dc
 8007918:	20001404 	.word	0x20001404
 800791c:	20001400 	.word	0x20001400
 8007920:	20000160 	.word	0x20000160

08007924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	60fb      	str	r3, [r7, #12]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800794a:	4b07      	ldr	r3, [pc, #28]	; (8007968 <vTaskPlaceOnEventList+0x44>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3318      	adds	r3, #24
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fe fa87 	bl	8005e66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007958:	2101      	movs	r1, #1
 800795a:	6838      	ldr	r0, [r7, #0]
 800795c:	f000 fb90 	bl	8008080 <prvAddCurrentTaskToDelayedList>
}
 8007960:	bf00      	nop
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20001400 	.word	0x20001400

0800796c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	617b      	str	r3, [r7, #20]
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007994:	4b0a      	ldr	r3, [pc, #40]	; (80079c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3318      	adds	r3, #24
 800799a:	4619      	mov	r1, r3
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7fe fa3e 	bl	8005e1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	68b8      	ldr	r0, [r7, #8]
 80079b2:	f000 fb65 	bl	8008080 <prvAddCurrentTaskToDelayedList>
	}
 80079b6:	bf00      	nop
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20001400 	.word	0x20001400

080079c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10a      	bne.n	80079f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	60fb      	str	r3, [r7, #12]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	3318      	adds	r3, #24
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe fa6f 	bl	8005ed8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079fa:	4b1e      	ldr	r3, [pc, #120]	; (8007a74 <xTaskRemoveFromEventList+0xb0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d11d      	bne.n	8007a3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fa66 	bl	8005ed8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	4b19      	ldr	r3, [pc, #100]	; (8007a78 <xTaskRemoveFromEventList+0xb4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d903      	bls.n	8007a20 <xTaskRemoveFromEventList+0x5c>
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	4a16      	ldr	r2, [pc, #88]	; (8007a78 <xTaskRemoveFromEventList+0xb4>)
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4a13      	ldr	r2, [pc, #76]	; (8007a7c <xTaskRemoveFromEventList+0xb8>)
 8007a2e:	441a      	add	r2, r3
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4619      	mov	r1, r3
 8007a36:	4610      	mov	r0, r2
 8007a38:	f7fe f9f1 	bl	8005e1e <vListInsertEnd>
 8007a3c:	e005      	b.n	8007a4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	3318      	adds	r3, #24
 8007a42:	4619      	mov	r1, r3
 8007a44:	480e      	ldr	r0, [pc, #56]	; (8007a80 <xTaskRemoveFromEventList+0xbc>)
 8007a46:	f7fe f9ea 	bl	8005e1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	; (8007a84 <xTaskRemoveFromEventList+0xc0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d905      	bls.n	8007a64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <xTaskRemoveFromEventList+0xc4>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e001      	b.n	8007a68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a68:	697b      	ldr	r3, [r7, #20]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	200018fc 	.word	0x200018fc
 8007a78:	200018dc 	.word	0x200018dc
 8007a7c:	20001404 	.word	0x20001404
 8007a80:	20001894 	.word	0x20001894
 8007a84:	20001400 	.word	0x20001400
 8007a88:	200018e8 	.word	0x200018e8

08007a8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a94:	4b06      	ldr	r3, [pc, #24]	; (8007ab0 <vTaskInternalSetTimeOutState+0x24>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <vTaskInternalSetTimeOutState+0x28>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	605a      	str	r2, [r3, #4]
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	200018ec 	.word	0x200018ec
 8007ab4:	200018d8 	.word	0x200018d8

08007ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	613b      	str	r3, [r7, #16]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10a      	bne.n	8007afa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	60fb      	str	r3, [r7, #12]
}
 8007af6:	bf00      	nop
 8007af8:	e7fe      	b.n	8007af8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007afa:	f000 ff93 	bl	8008a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007afe:	4b1d      	ldr	r3, [pc, #116]	; (8007b74 <xTaskCheckForTimeOut+0xbc>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b16:	d102      	bne.n	8007b1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61fb      	str	r3, [r7, #28]
 8007b1c:	e023      	b.n	8007b66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <xTaskCheckForTimeOut+0xc0>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d007      	beq.n	8007b3a <xTaskCheckForTimeOut+0x82>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d302      	bcc.n	8007b3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	61fb      	str	r3, [r7, #28]
 8007b38:	e015      	b.n	8007b66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d20b      	bcs.n	8007b5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	1ad2      	subs	r2, r2, r3
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff ff9b 	bl	8007a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61fb      	str	r3, [r7, #28]
 8007b5a:	e004      	b.n	8007b66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b62:	2301      	movs	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b66:	f000 ff8d 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	200018d8 	.word	0x200018d8
 8007b78:	200018ec 	.word	0x200018ec

08007b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b80:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <vTaskMissedYield+0x14>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	601a      	str	r2, [r3, #0]
}
 8007b86:	bf00      	nop
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	200018e8 	.word	0x200018e8

08007b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b9c:	f000 f854 	bl	8007c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ba0:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <prvIdleTask+0x2c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d907      	bls.n	8007bb8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007ba8:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <prvIdleTask+0x30>)
 8007baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007bb8:	f7f9 f974 	bl	8000ea4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007bbc:	e7ee      	b.n	8007b9c <prvIdleTask+0x8>
 8007bbe:	bf00      	nop
 8007bc0:	20001404 	.word	0x20001404
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bce:	2300      	movs	r3, #0
 8007bd0:	607b      	str	r3, [r7, #4]
 8007bd2:	e00c      	b.n	8007bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4a12      	ldr	r2, [pc, #72]	; (8007c28 <prvInitialiseTaskLists+0x60>)
 8007be0:	4413      	add	r3, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe f8ee 	bl	8005dc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3301      	adds	r3, #1
 8007bec:	607b      	str	r3, [r7, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b37      	cmp	r3, #55	; 0x37
 8007bf2:	d9ef      	bls.n	8007bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bf4:	480d      	ldr	r0, [pc, #52]	; (8007c2c <prvInitialiseTaskLists+0x64>)
 8007bf6:	f7fe f8e5 	bl	8005dc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bfa:	480d      	ldr	r0, [pc, #52]	; (8007c30 <prvInitialiseTaskLists+0x68>)
 8007bfc:	f7fe f8e2 	bl	8005dc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c00:	480c      	ldr	r0, [pc, #48]	; (8007c34 <prvInitialiseTaskLists+0x6c>)
 8007c02:	f7fe f8df 	bl	8005dc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c06:	480c      	ldr	r0, [pc, #48]	; (8007c38 <prvInitialiseTaskLists+0x70>)
 8007c08:	f7fe f8dc 	bl	8005dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c0c:	480b      	ldr	r0, [pc, #44]	; (8007c3c <prvInitialiseTaskLists+0x74>)
 8007c0e:	f7fe f8d9 	bl	8005dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c12:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <prvInitialiseTaskLists+0x78>)
 8007c14:	4a05      	ldr	r2, [pc, #20]	; (8007c2c <prvInitialiseTaskLists+0x64>)
 8007c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c18:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <prvInitialiseTaskLists+0x7c>)
 8007c1a:	4a05      	ldr	r2, [pc, #20]	; (8007c30 <prvInitialiseTaskLists+0x68>)
 8007c1c:	601a      	str	r2, [r3, #0]
}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20001404 	.word	0x20001404
 8007c2c:	20001864 	.word	0x20001864
 8007c30:	20001878 	.word	0x20001878
 8007c34:	20001894 	.word	0x20001894
 8007c38:	200018a8 	.word	0x200018a8
 8007c3c:	200018c0 	.word	0x200018c0
 8007c40:	2000188c 	.word	0x2000188c
 8007c44:	20001890 	.word	0x20001890

08007c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c4e:	e019      	b.n	8007c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c50:	f000 fee8 	bl	8008a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c54:	4b10      	ldr	r3, [pc, #64]	; (8007c98 <prvCheckTasksWaitingTermination+0x50>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe f939 	bl	8005ed8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <prvCheckTasksWaitingTermination+0x54>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a0b      	ldr	r2, [pc, #44]	; (8007c9c <prvCheckTasksWaitingTermination+0x54>)
 8007c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <prvCheckTasksWaitingTermination+0x58>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <prvCheckTasksWaitingTermination+0x58>)
 8007c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c7a:	f000 ff03 	bl	8008a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f810 	bl	8007ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c84:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <prvCheckTasksWaitingTermination+0x58>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e1      	bne.n	8007c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	200018a8 	.word	0x200018a8
 8007c9c:	200018d4 	.word	0x200018d4
 8007ca0:	200018bc 	.word	0x200018bc

08007ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3358      	adds	r3, #88	; 0x58
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 faef 	bl	8009294 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d108      	bne.n	8007cd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f001 f89b 	bl	8008e00 <vPortFree>
				vPortFree( pxTCB );
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 f898 	bl	8008e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cd0:	e018      	b.n	8007d04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d103      	bne.n	8007ce4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f001 f88f 	bl	8008e00 <vPortFree>
	}
 8007ce2:	e00f      	b.n	8007d04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d00a      	beq.n	8007d04 <prvDeleteTCB+0x60>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60fb      	str	r3, [r7, #12]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <prvDeleteTCB+0x5e>
	}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <prvResetNextTaskUnblockTime+0x38>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <prvResetNextTaskUnblockTime+0x3c>)
 8007d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d24:	e008      	b.n	8007d38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d26:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <prvResetNextTaskUnblockTime+0x38>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <prvResetNextTaskUnblockTime+0x3c>)
 8007d36:	6013      	str	r3, [r2, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	2000188c 	.word	0x2000188c
 8007d48:	200018f4 	.word	0x200018f4

08007d4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007d52:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <xTaskGetCurrentTaskHandle+0x1c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007d58:	687b      	ldr	r3, [r7, #4]
	}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20001400 	.word	0x20001400

08007d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d72:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <xTaskGetSchedulerState+0x34>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	607b      	str	r3, [r7, #4]
 8007d7e:	e008      	b.n	8007d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d80:	4b08      	ldr	r3, [pc, #32]	; (8007da4 <xTaskGetSchedulerState+0x38>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d102      	bne.n	8007d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	607b      	str	r3, [r7, #4]
 8007d8c:	e001      	b.n	8007d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d92:	687b      	ldr	r3, [r7, #4]
	}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	200018e0 	.word	0x200018e0
 8007da4:	200018fc 	.word	0x200018fc

08007da8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d051      	beq.n	8007e62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	4b2a      	ldr	r3, [pc, #168]	; (8007e6c <xTaskPriorityInherit+0xc4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d241      	bcs.n	8007e50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	db06      	blt.n	8007de2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dd4:	4b25      	ldr	r3, [pc, #148]	; (8007e6c <xTaskPriorityInherit+0xc4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	6959      	ldr	r1, [r3, #20]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4a1f      	ldr	r2, [pc, #124]	; (8007e70 <xTaskPriorityInherit+0xc8>)
 8007df4:	4413      	add	r3, r2
 8007df6:	4299      	cmp	r1, r3
 8007df8:	d122      	bne.n	8007e40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe f86a 	bl	8005ed8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e04:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <xTaskPriorityInherit+0xc4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e12:	4b18      	ldr	r3, [pc, #96]	; (8007e74 <xTaskPriorityInherit+0xcc>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d903      	bls.n	8007e22 <xTaskPriorityInherit+0x7a>
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	4a15      	ldr	r2, [pc, #84]	; (8007e74 <xTaskPriorityInherit+0xcc>)
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4a10      	ldr	r2, [pc, #64]	; (8007e70 <xTaskPriorityInherit+0xc8>)
 8007e30:	441a      	add	r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4619      	mov	r1, r3
 8007e38:	4610      	mov	r0, r2
 8007e3a:	f7fd fff0 	bl	8005e1e <vListInsertEnd>
 8007e3e:	e004      	b.n	8007e4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e40:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <xTaskPriorityInherit+0xc4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e008      	b.n	8007e62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e54:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <xTaskPriorityInherit+0xc4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d201      	bcs.n	8007e62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e62:	68fb      	ldr	r3, [r7, #12]
	}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	20001400 	.word	0x20001400
 8007e70:	20001404 	.word	0x20001404
 8007e74:	200018dc 	.word	0x200018dc

08007e78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e84:	2300      	movs	r3, #0
 8007e86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d056      	beq.n	8007f3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e8e:	4b2e      	ldr	r3, [pc, #184]	; (8007f48 <xTaskPriorityDisinherit+0xd0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d00a      	beq.n	8007eae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	60fb      	str	r3, [r7, #12]
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10a      	bne.n	8007ecc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60bb      	str	r3, [r7, #8]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed0:	1e5a      	subs	r2, r3, #1
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d02c      	beq.n	8007f3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d128      	bne.n	8007f3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fd fff2 	bl	8005ed8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0c:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <xTaskPriorityDisinherit+0xd4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d903      	bls.n	8007f1c <xTaskPriorityDisinherit+0xa4>
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	4a0c      	ldr	r2, [pc, #48]	; (8007f4c <xTaskPriorityDisinherit+0xd4>)
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <xTaskPriorityDisinherit+0xd8>)
 8007f2a:	441a      	add	r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f7fd ff73 	bl	8005e1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f3c:	697b      	ldr	r3, [r7, #20]
	}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20001400 	.word	0x20001400
 8007f4c:	200018dc 	.word	0x200018dc
 8007f50:	20001404 	.word	0x20001404

08007f54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f62:	2301      	movs	r3, #1
 8007f64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d06a      	beq.n	8008042 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	60fb      	str	r3, [r7, #12]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d902      	bls.n	8007f9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e002      	b.n	8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	69fa      	ldr	r2, [r7, #28]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d04b      	beq.n	8008042 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d146      	bne.n	8008042 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007fb4:	4b25      	ldr	r3, [pc, #148]	; (800804c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d10a      	bne.n	8007fd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60bb      	str	r3, [r7, #8]
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	db04      	blt.n	8007ff2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	6959      	ldr	r1, [r3, #20]
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4a13      	ldr	r2, [pc, #76]	; (8008050 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008002:	4413      	add	r3, r2
 8008004:	4299      	cmp	r1, r3
 8008006:	d11c      	bne.n	8008042 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	3304      	adds	r3, #4
 800800c:	4618      	mov	r0, r3
 800800e:	f7fd ff63 	bl	8005ed8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d903      	bls.n	8008026 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	4a0c      	ldr	r2, [pc, #48]	; (8008054 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4a07      	ldr	r2, [pc, #28]	; (8008050 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008034:	441a      	add	r2, r3
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	3304      	adds	r3, #4
 800803a:	4619      	mov	r1, r3
 800803c:	4610      	mov	r0, r2
 800803e:	f7fd feee 	bl	8005e1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008042:	bf00      	nop
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20001400 	.word	0x20001400
 8008050:	20001404 	.word	0x20001404
 8008054:	200018dc 	.word	0x200018dc

08008058 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008058:	b480      	push	{r7}
 800805a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800805c:	4b07      	ldr	r3, [pc, #28]	; (800807c <pvTaskIncrementMutexHeldCount+0x24>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <pvTaskIncrementMutexHeldCount+0x24>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800806a:	3201      	adds	r2, #1
 800806c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800806e:	4b03      	ldr	r3, [pc, #12]	; (800807c <pvTaskIncrementMutexHeldCount+0x24>)
 8008070:	681b      	ldr	r3, [r3, #0]
	}
 8008072:	4618      	mov	r0, r3
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20001400 	.word	0x20001400

08008080 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800808a:	4b21      	ldr	r3, [pc, #132]	; (8008110 <prvAddCurrentTaskToDelayedList+0x90>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008090:	4b20      	ldr	r3, [pc, #128]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3304      	adds	r3, #4
 8008096:	4618      	mov	r0, r3
 8008098:	f7fd ff1e 	bl	8005ed8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080a2:	d10a      	bne.n	80080ba <prvAddCurrentTaskToDelayedList+0x3a>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080aa:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	4819      	ldr	r0, [pc, #100]	; (8008118 <prvAddCurrentTaskToDelayedList+0x98>)
 80080b4:	f7fd feb3 	bl	8005e1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080b8:	e026      	b.n	8008108 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080c2:	4b14      	ldr	r3, [pc, #80]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d209      	bcs.n	80080e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080d2:	4b12      	ldr	r3, [pc, #72]	; (800811c <prvAddCurrentTaskToDelayedList+0x9c>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3304      	adds	r3, #4
 80080dc:	4619      	mov	r1, r3
 80080de:	4610      	mov	r0, r2
 80080e0:	f7fd fec1 	bl	8005e66 <vListInsert>
}
 80080e4:	e010      	b.n	8008108 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e6:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <prvAddCurrentTaskToDelayedList+0x94>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3304      	adds	r3, #4
 80080f0:	4619      	mov	r1, r3
 80080f2:	4610      	mov	r0, r2
 80080f4:	f7fd feb7 	bl	8005e66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d202      	bcs.n	8008108 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008102:	4a08      	ldr	r2, [pc, #32]	; (8008124 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	6013      	str	r3, [r2, #0]
}
 8008108:	bf00      	nop
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	200018d8 	.word	0x200018d8
 8008114:	20001400 	.word	0x20001400
 8008118:	200018c0 	.word	0x200018c0
 800811c:	20001890 	.word	0x20001890
 8008120:	2000188c 	.word	0x2000188c
 8008124:	200018f4 	.word	0x200018f4

08008128 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08a      	sub	sp, #40	; 0x28
 800812c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008132:	f000 fb07 	bl	8008744 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008136:	4b1c      	ldr	r3, [pc, #112]	; (80081a8 <xTimerCreateTimerTask+0x80>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d021      	beq.n	8008182 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008146:	1d3a      	adds	r2, r7, #4
 8008148:	f107 0108 	add.w	r1, r7, #8
 800814c:	f107 030c 	add.w	r3, r7, #12
 8008150:	4618      	mov	r0, r3
 8008152:	f7fd fe1d 	bl	8005d90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008156:	6879      	ldr	r1, [r7, #4]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	9202      	str	r2, [sp, #8]
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	2302      	movs	r3, #2
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	2300      	movs	r3, #0
 8008166:	460a      	mov	r2, r1
 8008168:	4910      	ldr	r1, [pc, #64]	; (80081ac <xTimerCreateTimerTask+0x84>)
 800816a:	4811      	ldr	r0, [pc, #68]	; (80081b0 <xTimerCreateTimerTask+0x88>)
 800816c:	f7fe fe9a 	bl	8006ea4 <xTaskCreateStatic>
 8008170:	4603      	mov	r3, r0
 8008172:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <xTimerCreateTimerTask+0x8c>)
 8008174:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008176:	4b0f      	ldr	r3, [pc, #60]	; (80081b4 <xTimerCreateTimerTask+0x8c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800817e:	2301      	movs	r3, #1
 8008180:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	613b      	str	r3, [r7, #16]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800819e:	697b      	ldr	r3, [r7, #20]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20001930 	.word	0x20001930
 80081ac:	0800e074 	.word	0x0800e074
 80081b0:	080082ed 	.word	0x080082ed
 80081b4:	20001934 	.word	0x20001934

080081b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	623b      	str	r3, [r7, #32]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081e6:	4b1a      	ldr	r3, [pc, #104]	; (8008250 <xTimerGenericCommand+0x98>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d02a      	beq.n	8008244 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b05      	cmp	r3, #5
 80081fe:	dc18      	bgt.n	8008232 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008200:	f7ff fdb4 	bl	8007d6c <xTaskGetSchedulerState>
 8008204:	4603      	mov	r3, r0
 8008206:	2b02      	cmp	r3, #2
 8008208:	d109      	bne.n	800821e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800820a:	4b11      	ldr	r3, [pc, #68]	; (8008250 <xTimerGenericCommand+0x98>)
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	f107 0110 	add.w	r1, r7, #16
 8008212:	2300      	movs	r3, #0
 8008214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008216:	f7fe f87d 	bl	8006314 <xQueueGenericSend>
 800821a:	6278      	str	r0, [r7, #36]	; 0x24
 800821c:	e012      	b.n	8008244 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <xTimerGenericCommand+0x98>)
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	f107 0110 	add.w	r1, r7, #16
 8008226:	2300      	movs	r3, #0
 8008228:	2200      	movs	r2, #0
 800822a:	f7fe f873 	bl	8006314 <xQueueGenericSend>
 800822e:	6278      	str	r0, [r7, #36]	; 0x24
 8008230:	e008      	b.n	8008244 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008232:	4b07      	ldr	r3, [pc, #28]	; (8008250 <xTimerGenericCommand+0x98>)
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	f107 0110 	add.w	r1, r7, #16
 800823a:	2300      	movs	r3, #0
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	f7fe f967 	bl	8006510 <xQueueGenericSendFromISR>
 8008242:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008246:	4618      	mov	r0, r3
 8008248:	3728      	adds	r7, #40	; 0x28
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20001930 	.word	0x20001930

08008254 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af02      	add	r7, sp, #8
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825e:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <prvProcessExpiredTimer+0x94>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	3304      	adds	r3, #4
 800826c:	4618      	mov	r0, r3
 800826e:	f7fd fe33 	bl	8005ed8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d022      	beq.n	80082c6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	699a      	ldr	r2, [r3, #24]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	18d1      	adds	r1, r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	6978      	ldr	r0, [r7, #20]
 800828e:	f000 f8d1 	bl	8008434 <prvInsertTimerInActiveList>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01f      	beq.n	80082d8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008298:	2300      	movs	r3, #0
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	2300      	movs	r3, #0
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	2100      	movs	r1, #0
 80082a2:	6978      	ldr	r0, [r7, #20]
 80082a4:	f7ff ff88 	bl	80081b8 <xTimerGenericCommand>
 80082a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d113      	bne.n	80082d8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	60fb      	str	r3, [r7, #12]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082cc:	f023 0301 	bic.w	r3, r3, #1
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	6978      	ldr	r0, [r7, #20]
 80082de:	4798      	blx	r3
}
 80082e0:	bf00      	nop
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20001928 	.word	0x20001928

080082ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082f4:	f107 0308 	add.w	r3, r7, #8
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 f857 	bl	80083ac <prvGetNextExpireTime>
 80082fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4619      	mov	r1, r3
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f803 	bl	8008310 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800830a:	f000 f8d5 	bl	80084b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800830e:	e7f1      	b.n	80082f4 <prvTimerTask+0x8>

08008310 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800831a:	f7ff f929 	bl	8007570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800831e:	f107 0308 	add.w	r3, r7, #8
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f866 	bl	80083f4 <prvSampleTimeNow>
 8008328:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d130      	bne.n	8008392 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10a      	bne.n	800834c <prvProcessTimerOrBlockTask+0x3c>
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	429a      	cmp	r2, r3
 800833c:	d806      	bhi.n	800834c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800833e:	f7ff f925 	bl	800758c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008342:	68f9      	ldr	r1, [r7, #12]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff85 	bl	8008254 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800834a:	e024      	b.n	8008396 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d008      	beq.n	8008364 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008352:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <prvProcessTimerOrBlockTask+0x90>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <prvProcessTimerOrBlockTask+0x50>
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <prvProcessTimerOrBlockTask+0x52>
 8008360:	2300      	movs	r3, #0
 8008362:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008364:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <prvProcessTimerOrBlockTask+0x94>)
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	4619      	mov	r1, r3
 8008372:	f7fe fd63 	bl	8006e3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008376:	f7ff f909 	bl	800758c <xTaskResumeAll>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <prvProcessTimerOrBlockTask+0x98>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
}
 8008390:	e001      	b.n	8008396 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008392:	f7ff f8fb 	bl	800758c <xTaskResumeAll>
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	2000192c 	.word	0x2000192c
 80083a4:	20001930 	.word	0x20001930
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083b4:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <prvGetNextExpireTime+0x44>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <prvGetNextExpireTime+0x16>
 80083be:	2201      	movs	r2, #1
 80083c0:	e000      	b.n	80083c4 <prvGetNextExpireTime+0x18>
 80083c2:	2200      	movs	r2, #0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d105      	bne.n	80083dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <prvGetNextExpireTime+0x44>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e001      	b.n	80083e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083e0:	68fb      	ldr	r3, [r7, #12]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	20001928 	.word	0x20001928

080083f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083fc:	f7ff f964 	bl	80076c8 <xTaskGetTickCount>
 8008400:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008402:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <prvSampleTimeNow+0x3c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	429a      	cmp	r2, r3
 800840a:	d205      	bcs.n	8008418 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800840c:	f000 f936 	bl	800867c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e002      	b.n	800841e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800841e:	4a04      	ldr	r2, [pc, #16]	; (8008430 <prvSampleTimeNow+0x3c>)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008424:	68fb      	ldr	r3, [r7, #12]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20001938 	.word	0x20001938

08008434 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d812      	bhi.n	8008480 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	429a      	cmp	r2, r3
 8008466:	d302      	bcc.n	800846e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008468:	2301      	movs	r3, #1
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	e01b      	b.n	80084a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <prvInsertTimerInActiveList+0x7c>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3304      	adds	r3, #4
 8008476:	4619      	mov	r1, r3
 8008478:	4610      	mov	r0, r2
 800847a:	f7fd fcf4 	bl	8005e66 <vListInsert>
 800847e:	e012      	b.n	80084a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d206      	bcs.n	8008496 <prvInsertTimerInActiveList+0x62>
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	429a      	cmp	r2, r3
 800848e:	d302      	bcc.n	8008496 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008490:	2301      	movs	r3, #1
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	e007      	b.n	80084a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008496:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <prvInsertTimerInActiveList+0x80>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	4610      	mov	r0, r2
 80084a2:	f7fd fce0 	bl	8005e66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084a6:	697b      	ldr	r3, [r7, #20]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	2000192c 	.word	0x2000192c
 80084b4:	20001928 	.word	0x20001928

080084b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	; 0x38
 80084bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084be:	e0ca      	b.n	8008656 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da18      	bge.n	80084f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084c6:	1d3b      	adds	r3, r7, #4
 80084c8:	3304      	adds	r3, #4
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	61fb      	str	r3, [r7, #28]
}
 80084e4:	bf00      	nop
 80084e6:	e7fe      	b.n	80084e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ee:	6850      	ldr	r0, [r2, #4]
 80084f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f2:	6892      	ldr	r2, [r2, #8]
 80084f4:	4611      	mov	r1, r2
 80084f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f2c0 80ab 	blt.w	8008656 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d004      	beq.n	8008516 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	3304      	adds	r3, #4
 8008510:	4618      	mov	r0, r3
 8008512:	f7fd fce1 	bl	8005ed8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008516:	463b      	mov	r3, r7
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff ff6b 	bl	80083f4 <prvSampleTimeNow>
 800851e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b09      	cmp	r3, #9
 8008524:	f200 8096 	bhi.w	8008654 <prvProcessReceivedCommands+0x19c>
 8008528:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <prvProcessReceivedCommands+0x78>)
 800852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852e:	bf00      	nop
 8008530:	08008559 	.word	0x08008559
 8008534:	08008559 	.word	0x08008559
 8008538:	08008559 	.word	0x08008559
 800853c:	080085cd 	.word	0x080085cd
 8008540:	080085e1 	.word	0x080085e1
 8008544:	0800862b 	.word	0x0800862b
 8008548:	08008559 	.word	0x08008559
 800854c:	08008559 	.word	0x08008559
 8008550:	080085cd 	.word	0x080085cd
 8008554:	080085e1 	.word	0x080085e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	b2da      	uxtb	r2, r3
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	18d1      	adds	r1, r2, r3
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008578:	f7ff ff5c 	bl	8008434 <prvInsertTimerInActiveList>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d069      	beq.n	8008656 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008588:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d05e      	beq.n	8008656 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	441a      	add	r2, r3
 80085a0:	2300      	movs	r3, #0
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	2300      	movs	r3, #0
 80085a6:	2100      	movs	r1, #0
 80085a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085aa:	f7ff fe05 	bl	80081b8 <xTimerGenericCommand>
 80085ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d14f      	bne.n	8008656 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	61bb      	str	r3, [r7, #24]
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80085de:	e03a      	b.n	8008656 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e6:	f043 0301 	orr.w	r3, r3, #1
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	617b      	str	r3, [r7, #20]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	699a      	ldr	r2, [r3, #24]
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	18d1      	adds	r1, r2, r3
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008624:	f7ff ff06 	bl	8008434 <prvInsertTimerInActiveList>
					break;
 8008628:	e015      	b.n	8008656 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d103      	bne.n	8008640 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800863a:	f000 fbe1 	bl	8008e00 <vPortFree>
 800863e:	e00a      	b.n	8008656 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008646:	f023 0301 	bic.w	r3, r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008652:	e000      	b.n	8008656 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008654:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008656:	4b08      	ldr	r3, [pc, #32]	; (8008678 <prvProcessReceivedCommands+0x1c0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	1d39      	adds	r1, r7, #4
 800865c:	2200      	movs	r2, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f7fd fff2 	bl	8006648 <xQueueReceive>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	f47f af2a 	bne.w	80084c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	3730      	adds	r7, #48	; 0x30
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20001930 	.word	0x20001930

0800867c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008682:	e048      	b.n	8008716 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008684:	4b2d      	ldr	r3, [pc, #180]	; (800873c <prvSwitchTimerLists+0xc0>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800868e:	4b2b      	ldr	r3, [pc, #172]	; (800873c <prvSwitchTimerLists+0xc0>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3304      	adds	r3, #4
 800869c:	4618      	mov	r0, r3
 800869e:	f7fd fc1b 	bl	8005ed8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d02e      	beq.n	8008716 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4413      	add	r3, r2
 80086c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d90e      	bls.n	80086e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086d6:	4b19      	ldr	r3, [pc, #100]	; (800873c <prvSwitchTimerLists+0xc0>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3304      	adds	r3, #4
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f7fd fbc0 	bl	8005e66 <vListInsert>
 80086e6:	e016      	b.n	8008716 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086e8:	2300      	movs	r3, #0
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	2300      	movs	r3, #0
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	2100      	movs	r1, #0
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fd60 	bl	80081b8 <xTimerGenericCommand>
 80086f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	603b      	str	r3, [r7, #0]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008716:	4b09      	ldr	r3, [pc, #36]	; (800873c <prvSwitchTimerLists+0xc0>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1b1      	bne.n	8008684 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008720:	4b06      	ldr	r3, [pc, #24]	; (800873c <prvSwitchTimerLists+0xc0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008726:	4b06      	ldr	r3, [pc, #24]	; (8008740 <prvSwitchTimerLists+0xc4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a04      	ldr	r2, [pc, #16]	; (800873c <prvSwitchTimerLists+0xc0>)
 800872c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800872e:	4a04      	ldr	r2, [pc, #16]	; (8008740 <prvSwitchTimerLists+0xc4>)
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	6013      	str	r3, [r2, #0]
}
 8008734:	bf00      	nop
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20001928 	.word	0x20001928
 8008740:	2000192c 	.word	0x2000192c

08008744 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800874a:	f000 f96b 	bl	8008a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800874e:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d120      	bne.n	8008798 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008756:	4814      	ldr	r0, [pc, #80]	; (80087a8 <prvCheckForValidListAndQueue+0x64>)
 8008758:	f7fd fb34 	bl	8005dc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800875c:	4813      	ldr	r0, [pc, #76]	; (80087ac <prvCheckForValidListAndQueue+0x68>)
 800875e:	f7fd fb31 	bl	8005dc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008762:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <prvCheckForValidListAndQueue+0x6c>)
 8008764:	4a10      	ldr	r2, [pc, #64]	; (80087a8 <prvCheckForValidListAndQueue+0x64>)
 8008766:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008768:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <prvCheckForValidListAndQueue+0x70>)
 800876a:	4a10      	ldr	r2, [pc, #64]	; (80087ac <prvCheckForValidListAndQueue+0x68>)
 800876c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800876e:	2300      	movs	r3, #0
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <prvCheckForValidListAndQueue+0x74>)
 8008774:	4a11      	ldr	r2, [pc, #68]	; (80087bc <prvCheckForValidListAndQueue+0x78>)
 8008776:	2110      	movs	r1, #16
 8008778:	200a      	movs	r0, #10
 800877a:	f7fd fc3f 	bl	8005ffc <xQueueGenericCreateStatic>
 800877e:	4603      	mov	r3, r0
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 8008782:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008784:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <prvCheckForValidListAndQueue+0x60>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	490b      	ldr	r1, [pc, #44]	; (80087c0 <prvCheckForValidListAndQueue+0x7c>)
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fb28 	bl	8006de8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008798:	f000 f974 	bl	8008a84 <vPortExitCritical>
}
 800879c:	bf00      	nop
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20001930 	.word	0x20001930
 80087a8:	20001900 	.word	0x20001900
 80087ac:	20001914 	.word	0x20001914
 80087b0:	20001928 	.word	0x20001928
 80087b4:	2000192c 	.word	0x2000192c
 80087b8:	200019dc 	.word	0x200019dc
 80087bc:	2000193c 	.word	0x2000193c
 80087c0:	0800e07c 	.word	0x0800e07c

080087c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3b04      	subs	r3, #4
 80087d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b04      	subs	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f023 0201 	bic.w	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3b04      	subs	r3, #4
 80087f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087f4:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <pxPortInitialiseStack+0x64>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3b14      	subs	r3, #20
 80087fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3b04      	subs	r3, #4
 800880a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f06f 0202 	mvn.w	r2, #2
 8008812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3b20      	subs	r3, #32
 8008818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800881a:	68fb      	ldr	r3, [r7, #12]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	0800882d 	.word	0x0800882d

0800882c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <prvTaskExitError+0x54>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800883e:	d00a      	beq.n	8008856 <prvTaskExitError+0x2a>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	60fb      	str	r3, [r7, #12]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <prvTaskExitError+0x28>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	60bb      	str	r3, [r7, #8]
}
 8008868:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800886a:	bf00      	nop
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0fc      	beq.n	800886c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	2000002c 	.word	0x2000002c
	...

08008890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <pxCurrentTCBConst2>)
 8008892:	6819      	ldr	r1, [r3, #0]
 8008894:	6808      	ldr	r0, [r1, #0]
 8008896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	f380 8809 	msr	PSP, r0
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8811 	msr	BASEPRI, r0
 80088aa:	4770      	bx	lr
 80088ac:	f3af 8000 	nop.w

080088b0 <pxCurrentTCBConst2>:
 80088b0:	20001400 	.word	0x20001400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop

080088b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088b8:	4808      	ldr	r0, [pc, #32]	; (80088dc <prvPortStartFirstTask+0x24>)
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	6800      	ldr	r0, [r0, #0]
 80088be:	f380 8808 	msr	MSP, r0
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8814 	msr	CONTROL, r0
 80088ca:	b662      	cpsie	i
 80088cc:	b661      	cpsie	f
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	df00      	svc	0
 80088d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088da:	bf00      	nop
 80088dc:	e000ed08 	.word	0xe000ed08

080088e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088e6:	4b46      	ldr	r3, [pc, #280]	; (8008a00 <xPortStartScheduler+0x120>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a46      	ldr	r2, [pc, #280]	; (8008a04 <xPortStartScheduler+0x124>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10a      	bne.n	8008906 <xPortStartScheduler+0x26>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	613b      	str	r3, [r7, #16]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008906:	4b3e      	ldr	r3, [pc, #248]	; (8008a00 <xPortStartScheduler+0x120>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a3f      	ldr	r2, [pc, #252]	; (8008a08 <xPortStartScheduler+0x128>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d10a      	bne.n	8008926 <xPortStartScheduler+0x46>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	60fb      	str	r3, [r7, #12]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008926:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <xPortStartScheduler+0x12c>)
 8008928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	22ff      	movs	r2, #255	; 0xff
 8008936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008948:	b2da      	uxtb	r2, r3
 800894a:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <xPortStartScheduler+0x130>)
 800894c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800894e:	4b31      	ldr	r3, [pc, #196]	; (8008a14 <xPortStartScheduler+0x134>)
 8008950:	2207      	movs	r2, #7
 8008952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008954:	e009      	b.n	800896a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008956:	4b2f      	ldr	r3, [pc, #188]	; (8008a14 <xPortStartScheduler+0x134>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3b01      	subs	r3, #1
 800895c:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <xPortStartScheduler+0x134>)
 800895e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	b2db      	uxtb	r3, r3
 8008968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d0ef      	beq.n	8008956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008976:	4b27      	ldr	r3, [pc, #156]	; (8008a14 <xPortStartScheduler+0x134>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1c3 0307 	rsb	r3, r3, #7
 800897e:	2b04      	cmp	r3, #4
 8008980:	d00a      	beq.n	8008998 <xPortStartScheduler+0xb8>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	60bb      	str	r3, [r7, #8]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008998:	4b1e      	ldr	r3, [pc, #120]	; (8008a14 <xPortStartScheduler+0x134>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <xPortStartScheduler+0x134>)
 80089a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <xPortStartScheduler+0x134>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089aa:	4a1a      	ldr	r2, [pc, #104]	; (8008a14 <xPortStartScheduler+0x134>)
 80089ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089b6:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <xPortStartScheduler+0x138>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a17      	ldr	r2, [pc, #92]	; (8008a18 <xPortStartScheduler+0x138>)
 80089bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089c2:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <xPortStartScheduler+0x138>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a14      	ldr	r2, [pc, #80]	; (8008a18 <xPortStartScheduler+0x138>)
 80089c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089ce:	f000 f8dd 	bl	8008b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089d2:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <xPortStartScheduler+0x13c>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089d8:	f000 f8fc 	bl	8008bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <xPortStartScheduler+0x140>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a0f      	ldr	r2, [pc, #60]	; (8008a20 <xPortStartScheduler+0x140>)
 80089e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089e8:	f7ff ff66 	bl	80088b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089ec:	f7fe ff36 	bl	800785c <vTaskSwitchContext>
	prvTaskExitError();
 80089f0:	f7ff ff1c 	bl	800882c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	e000ed00 	.word	0xe000ed00
 8008a04:	410fc271 	.word	0x410fc271
 8008a08:	410fc270 	.word	0x410fc270
 8008a0c:	e000e400 	.word	0xe000e400
 8008a10:	20001a2c 	.word	0x20001a2c
 8008a14:	20001a30 	.word	0x20001a30
 8008a18:	e000ed20 	.word	0xe000ed20
 8008a1c:	2000002c 	.word	0x2000002c
 8008a20:	e000ef34 	.word	0xe000ef34

08008a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	607b      	str	r3, [r7, #4]
}
 8008a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	4a0d      	ldr	r2, [pc, #52]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d10f      	bne.n	8008a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a50:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <vPortEnterCritical+0x5c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	603b      	str	r3, [r7, #0]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <vPortEnterCritical+0x4a>
	}
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	2000002c 	.word	0x2000002c
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a8a:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <vPortExitCritical+0x50>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <vPortExitCritical+0x24>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	607b      	str	r3, [r7, #4]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <vPortExitCritical+0x50>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <vPortExitCritical+0x50>)
 8008ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <vPortExitCritical+0x50>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <vPortExitCritical+0x42>
 8008aba:	2300      	movs	r3, #0
 8008abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f383 8811 	msr	BASEPRI, r3
}
 8008ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	2000002c 	.word	0x2000002c
	...

08008ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ae0:	f3ef 8009 	mrs	r0, PSP
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <pxCurrentTCBConst>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	f01e 0f10 	tst.w	lr, #16
 8008af0:	bf08      	it	eq
 8008af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afa:	6010      	str	r0, [r2, #0]
 8008afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b04:	f380 8811 	msr	BASEPRI, r0
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f7fe fea4 	bl	800785c <vTaskSwitchContext>
 8008b14:	f04f 0000 	mov.w	r0, #0
 8008b18:	f380 8811 	msr	BASEPRI, r0
 8008b1c:	bc09      	pop	{r0, r3}
 8008b1e:	6819      	ldr	r1, [r3, #0]
 8008b20:	6808      	ldr	r0, [r1, #0]
 8008b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b26:	f01e 0f10 	tst.w	lr, #16
 8008b2a:	bf08      	it	eq
 8008b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b30:	f380 8809 	msr	PSP, r0
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	f3af 8000 	nop.w

08008b40 <pxCurrentTCBConst>:
 8008b40:	20001400 	.word	0x20001400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop

08008b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	607b      	str	r3, [r7, #4]
}
 8008b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b62:	f7fe fdc1 	bl	80076e8 <xTaskIncrementTick>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <xPortSysTickHandler+0x40>)
 8008b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	2300      	movs	r3, #0
 8008b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f383 8811 	msr	BASEPRI, r3
}
 8008b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b96:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <vPortSetupTimerInterrupt+0x38>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <vPortSetupTimerInterrupt+0x3c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <vPortSetupTimerInterrupt+0x40>)
 8008ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba6:	099b      	lsrs	r3, r3, #6
 8008ba8:	4a09      	ldr	r2, [pc, #36]	; (8008bd0 <vPortSetupTimerInterrupt+0x44>)
 8008baa:	3b01      	subs	r3, #1
 8008bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bae:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008bb0:	2207      	movs	r2, #7
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	e000e010 	.word	0xe000e010
 8008bc4:	e000e018 	.word	0xe000e018
 8008bc8:	20000020 	.word	0x20000020
 8008bcc:	10624dd3 	.word	0x10624dd3
 8008bd0:	e000e014 	.word	0xe000e014

08008bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008be4 <vPortEnableVFP+0x10>
 8008bd8:	6801      	ldr	r1, [r0, #0]
 8008bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bde:	6001      	str	r1, [r0, #0]
 8008be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008be2:	bf00      	nop
 8008be4:	e000ed88 	.word	0xe000ed88

08008be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bee:	f3ef 8305 	mrs	r3, IPSR
 8008bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b0f      	cmp	r3, #15
 8008bf8:	d914      	bls.n	8008c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bfa:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <vPortValidateInterruptPriority+0x70>)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c04:	4b15      	ldr	r3, [pc, #84]	; (8008c5c <vPortValidateInterruptPriority+0x74>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	7afa      	ldrb	r2, [r7, #11]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d20a      	bcs.n	8008c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
}
 8008c20:	bf00      	nop
 8008c22:	e7fe      	b.n	8008c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c24:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <vPortValidateInterruptPriority+0x78>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <vPortValidateInterruptPriority+0x7c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d90a      	bls.n	8008c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	603b      	str	r3, [r7, #0]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <vPortValidateInterruptPriority+0x60>
	}
 8008c4a:	bf00      	nop
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	e000e3f0 	.word	0xe000e3f0
 8008c5c:	20001a2c 	.word	0x20001a2c
 8008c60:	e000ed0c 	.word	0xe000ed0c
 8008c64:	20001a30 	.word	0x20001a30

08008c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c74:	f7fe fc7c 	bl	8007570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c78:	4b5b      	ldr	r3, [pc, #364]	; (8008de8 <pvPortMalloc+0x180>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c80:	f000 f920 	bl	8008ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c84:	4b59      	ldr	r3, [pc, #356]	; (8008dec <pvPortMalloc+0x184>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f040 8093 	bne.w	8008db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01d      	beq.n	8008cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c98:	2208      	movs	r2, #8
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d014      	beq.n	8008cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f023 0307 	bic.w	r3, r3, #7
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	617b      	str	r3, [r7, #20]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d06e      	beq.n	8008db8 <pvPortMalloc+0x150>
 8008cda:	4b45      	ldr	r3, [pc, #276]	; (8008df0 <pvPortMalloc+0x188>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d869      	bhi.n	8008db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ce4:	4b43      	ldr	r3, [pc, #268]	; (8008df4 <pvPortMalloc+0x18c>)
 8008ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ce8:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <pvPortMalloc+0x18c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cee:	e004      	b.n	8008cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d903      	bls.n	8008d0c <pvPortMalloc+0xa4>
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f1      	bne.n	8008cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d0c:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <pvPortMalloc+0x180>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d050      	beq.n	8008db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2208      	movs	r2, #8
 8008d1c:	4413      	add	r3, r2
 8008d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	2308      	movs	r3, #8
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d91f      	bls.n	8008d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <pvPortMalloc+0xf8>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	613b      	str	r3, [r7, #16]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	1ad2      	subs	r2, r2, r3
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d72:	69b8      	ldr	r0, [r7, #24]
 8008d74:	f000 f908 	bl	8008f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d78:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <pvPortMalloc+0x188>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	4a1b      	ldr	r2, [pc, #108]	; (8008df0 <pvPortMalloc+0x188>)
 8008d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d86:	4b1a      	ldr	r3, [pc, #104]	; (8008df0 <pvPortMalloc+0x188>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <pvPortMalloc+0x190>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d203      	bcs.n	8008d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d92:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <pvPortMalloc+0x188>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <pvPortMalloc+0x190>)
 8008d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	4b13      	ldr	r3, [pc, #76]	; (8008dec <pvPortMalloc+0x184>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <pvPortMalloc+0x194>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3301      	adds	r3, #1
 8008db4:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <pvPortMalloc+0x194>)
 8008db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008db8:	f7fe fbe8 	bl	800758c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	f003 0307 	and.w	r3, r3, #7
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <pvPortMalloc+0x174>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	60fb      	str	r3, [r7, #12]
}
 8008dd8:	bf00      	nop
 8008dda:	e7fe      	b.n	8008dda <pvPortMalloc+0x172>
	return pvReturn;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3728      	adds	r7, #40	; 0x28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	2000414c 	.word	0x2000414c
 8008dec:	20004160 	.word	0x20004160
 8008df0:	20004150 	.word	0x20004150
 8008df4:	20004144 	.word	0x20004144
 8008df8:	20004154 	.word	0x20004154
 8008dfc:	20004158 	.word	0x20004158

08008e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d04d      	beq.n	8008eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e12:	2308      	movs	r3, #8
 8008e14:	425b      	negs	r3, r3
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	4413      	add	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <vPortFree+0xb8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <vPortFree+0x44>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	60fb      	str	r3, [r7, #12]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <vPortFree+0x62>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60bb      	str	r3, [r7, #8]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	4b14      	ldr	r3, [pc, #80]	; (8008eb8 <vPortFree+0xb8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01e      	beq.n	8008eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d11a      	bne.n	8008eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <vPortFree+0xb8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	43db      	mvns	r3, r3
 8008e82:	401a      	ands	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e88:	f7fe fb72 	bl	8007570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <vPortFree+0xbc>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4413      	add	r3, r2
 8008e96:	4a09      	ldr	r2, [pc, #36]	; (8008ebc <vPortFree+0xbc>)
 8008e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e9a:	6938      	ldr	r0, [r7, #16]
 8008e9c:	f000 f874 	bl	8008f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <vPortFree+0xc0>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	4a06      	ldr	r2, [pc, #24]	; (8008ec0 <vPortFree+0xc0>)
 8008ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008eaa:	f7fe fb6f 	bl	800758c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008eae:	bf00      	nop
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20004160 	.word	0x20004160
 8008ebc:	20004150 	.word	0x20004150
 8008ec0:	2000415c 	.word	0x2000415c

08008ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eca:	f242 7310 	movw	r3, #10000	; 0x2710
 8008ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ed0:	4b27      	ldr	r3, [pc, #156]	; (8008f70 <prvHeapInit+0xac>)
 8008ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00c      	beq.n	8008ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0307 	bic.w	r3, r3, #7
 8008eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	4a1f      	ldr	r2, [pc, #124]	; (8008f70 <prvHeapInit+0xac>)
 8008ef4:	4413      	add	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008efc:	4a1d      	ldr	r2, [pc, #116]	; (8008f74 <prvHeapInit+0xb0>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <prvHeapInit+0xb0>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f10:	2208      	movs	r2, #8
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4a15      	ldr	r2, [pc, #84]	; (8008f78 <prvHeapInit+0xb4>)
 8008f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f26:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <prvHeapInit+0xb4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f2e:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <prvHeapInit+0xb4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <prvHeapInit+0xb4>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	4a0a      	ldr	r2, [pc, #40]	; (8008f7c <prvHeapInit+0xb8>)
 8008f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4a09      	ldr	r2, [pc, #36]	; (8008f80 <prvHeapInit+0xbc>)
 8008f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f5c:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <prvHeapInit+0xc0>)
 8008f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f62:	601a      	str	r2, [r3, #0]
}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	20001a34 	.word	0x20001a34
 8008f74:	20004144 	.word	0x20004144
 8008f78:	2000414c 	.word	0x2000414c
 8008f7c:	20004154 	.word	0x20004154
 8008f80:	20004150 	.word	0x20004150
 8008f84:	20004160 	.word	0x20004160

08008f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f90:	4b28      	ldr	r3, [pc, #160]	; (8009034 <prvInsertBlockIntoFreeList+0xac>)
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	e002      	b.n	8008f9c <prvInsertBlockIntoFreeList+0x14>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d8f7      	bhi.n	8008f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d108      	bne.n	8008fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	441a      	add	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d118      	bne.n	8009010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d00d      	beq.n	8009006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	441a      	add	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	e008      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009006:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e003      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d002      	beq.n	8009026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	20004144 	.word	0x20004144
 8009038:	2000414c 	.word	0x2000414c

0800903c <std>:
 800903c:	2300      	movs	r3, #0
 800903e:	b510      	push	{r4, lr}
 8009040:	4604      	mov	r4, r0
 8009042:	e9c0 3300 	strd	r3, r3, [r0]
 8009046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800904a:	6083      	str	r3, [r0, #8]
 800904c:	8181      	strh	r1, [r0, #12]
 800904e:	6643      	str	r3, [r0, #100]	; 0x64
 8009050:	81c2      	strh	r2, [r0, #14]
 8009052:	6183      	str	r3, [r0, #24]
 8009054:	4619      	mov	r1, r3
 8009056:	2208      	movs	r2, #8
 8009058:	305c      	adds	r0, #92	; 0x5c
 800905a:	f000 f902 	bl	8009262 <memset>
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <std+0x38>)
 8009060:	6223      	str	r3, [r4, #32]
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <std+0x3c>)
 8009064:	6263      	str	r3, [r4, #36]	; 0x24
 8009066:	4b05      	ldr	r3, [pc, #20]	; (800907c <std+0x40>)
 8009068:	62a3      	str	r3, [r4, #40]	; 0x28
 800906a:	4b05      	ldr	r3, [pc, #20]	; (8009080 <std+0x44>)
 800906c:	61e4      	str	r4, [r4, #28]
 800906e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009070:	bd10      	pop	{r4, pc}
 8009072:	bf00      	nop
 8009074:	080091dd 	.word	0x080091dd
 8009078:	080091ff 	.word	0x080091ff
 800907c:	08009237 	.word	0x08009237
 8009080:	0800925b 	.word	0x0800925b

08009084 <stdio_exit_handler>:
 8009084:	4a02      	ldr	r2, [pc, #8]	; (8009090 <stdio_exit_handler+0xc>)
 8009086:	4903      	ldr	r1, [pc, #12]	; (8009094 <stdio_exit_handler+0x10>)
 8009088:	4803      	ldr	r0, [pc, #12]	; (8009098 <stdio_exit_handler+0x14>)
 800908a:	f000 b869 	b.w	8009160 <_fwalk_sglue>
 800908e:	bf00      	nop
 8009090:	20000030 	.word	0x20000030
 8009094:	0800ae85 	.word	0x0800ae85
 8009098:	20000040 	.word	0x20000040

0800909c <cleanup_stdio>:
 800909c:	6841      	ldr	r1, [r0, #4]
 800909e:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <cleanup_stdio+0x34>)
 80090a0:	4299      	cmp	r1, r3
 80090a2:	b510      	push	{r4, lr}
 80090a4:	4604      	mov	r4, r0
 80090a6:	d001      	beq.n	80090ac <cleanup_stdio+0x10>
 80090a8:	f001 feec 	bl	800ae84 <_fclose_r>
 80090ac:	68a1      	ldr	r1, [r4, #8]
 80090ae:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <cleanup_stdio+0x38>)
 80090b0:	4299      	cmp	r1, r3
 80090b2:	d002      	beq.n	80090ba <cleanup_stdio+0x1e>
 80090b4:	4620      	mov	r0, r4
 80090b6:	f001 fee5 	bl	800ae84 <_fclose_r>
 80090ba:	68e1      	ldr	r1, [r4, #12]
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <cleanup_stdio+0x3c>)
 80090be:	4299      	cmp	r1, r3
 80090c0:	d004      	beq.n	80090cc <cleanup_stdio+0x30>
 80090c2:	4620      	mov	r0, r4
 80090c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c8:	f001 bedc 	b.w	800ae84 <_fclose_r>
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	bf00      	nop
 80090d0:	20004164 	.word	0x20004164
 80090d4:	200041cc 	.word	0x200041cc
 80090d8:	20004234 	.word	0x20004234

080090dc <global_stdio_init.part.0>:
 80090dc:	b510      	push	{r4, lr}
 80090de:	4b0b      	ldr	r3, [pc, #44]	; (800910c <global_stdio_init.part.0+0x30>)
 80090e0:	4c0b      	ldr	r4, [pc, #44]	; (8009110 <global_stdio_init.part.0+0x34>)
 80090e2:	4a0c      	ldr	r2, [pc, #48]	; (8009114 <global_stdio_init.part.0+0x38>)
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	4620      	mov	r0, r4
 80090e8:	2200      	movs	r2, #0
 80090ea:	2104      	movs	r1, #4
 80090ec:	f7ff ffa6 	bl	800903c <std>
 80090f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80090f4:	2201      	movs	r2, #1
 80090f6:	2109      	movs	r1, #9
 80090f8:	f7ff ffa0 	bl	800903c <std>
 80090fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009100:	2202      	movs	r2, #2
 8009102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009106:	2112      	movs	r1, #18
 8009108:	f7ff bf98 	b.w	800903c <std>
 800910c:	2000429c 	.word	0x2000429c
 8009110:	20004164 	.word	0x20004164
 8009114:	08009085 	.word	0x08009085

08009118 <__sfp_lock_acquire>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__sfp_lock_acquire+0x8>)
 800911a:	f000 b94b 	b.w	80093b4 <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	200042a6 	.word	0x200042a6

08009124 <__sfp_lock_release>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__sfp_lock_release+0x8>)
 8009126:	f000 b946 	b.w	80093b6 <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	200042a6 	.word	0x200042a6

08009130 <__sinit>:
 8009130:	b510      	push	{r4, lr}
 8009132:	4604      	mov	r4, r0
 8009134:	f7ff fff0 	bl	8009118 <__sfp_lock_acquire>
 8009138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800913a:	b11b      	cbz	r3, 8009144 <__sinit+0x14>
 800913c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009140:	f7ff bff0 	b.w	8009124 <__sfp_lock_release>
 8009144:	4b04      	ldr	r3, [pc, #16]	; (8009158 <__sinit+0x28>)
 8009146:	6363      	str	r3, [r4, #52]	; 0x34
 8009148:	4b04      	ldr	r3, [pc, #16]	; (800915c <__sinit+0x2c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1f5      	bne.n	800913c <__sinit+0xc>
 8009150:	f7ff ffc4 	bl	80090dc <global_stdio_init.part.0>
 8009154:	e7f2      	b.n	800913c <__sinit+0xc>
 8009156:	bf00      	nop
 8009158:	0800909d 	.word	0x0800909d
 800915c:	2000429c 	.word	0x2000429c

08009160 <_fwalk_sglue>:
 8009160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009164:	4607      	mov	r7, r0
 8009166:	4688      	mov	r8, r1
 8009168:	4614      	mov	r4, r2
 800916a:	2600      	movs	r6, #0
 800916c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009170:	f1b9 0901 	subs.w	r9, r9, #1
 8009174:	d505      	bpl.n	8009182 <_fwalk_sglue+0x22>
 8009176:	6824      	ldr	r4, [r4, #0]
 8009178:	2c00      	cmp	r4, #0
 800917a:	d1f7      	bne.n	800916c <_fwalk_sglue+0xc>
 800917c:	4630      	mov	r0, r6
 800917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009182:	89ab      	ldrh	r3, [r5, #12]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d907      	bls.n	8009198 <_fwalk_sglue+0x38>
 8009188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800918c:	3301      	adds	r3, #1
 800918e:	d003      	beq.n	8009198 <_fwalk_sglue+0x38>
 8009190:	4629      	mov	r1, r5
 8009192:	4638      	mov	r0, r7
 8009194:	47c0      	blx	r8
 8009196:	4306      	orrs	r6, r0
 8009198:	3568      	adds	r5, #104	; 0x68
 800919a:	e7e9      	b.n	8009170 <_fwalk_sglue+0x10>

0800919c <sprintf>:
 800919c:	b40e      	push	{r1, r2, r3}
 800919e:	b500      	push	{lr}
 80091a0:	b09c      	sub	sp, #112	; 0x70
 80091a2:	ab1d      	add	r3, sp, #116	; 0x74
 80091a4:	9002      	str	r0, [sp, #8]
 80091a6:	9006      	str	r0, [sp, #24]
 80091a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091ac:	4809      	ldr	r0, [pc, #36]	; (80091d4 <sprintf+0x38>)
 80091ae:	9107      	str	r1, [sp, #28]
 80091b0:	9104      	str	r1, [sp, #16]
 80091b2:	4909      	ldr	r1, [pc, #36]	; (80091d8 <sprintf+0x3c>)
 80091b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b8:	9105      	str	r1, [sp, #20]
 80091ba:	6800      	ldr	r0, [r0, #0]
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	a902      	add	r1, sp, #8
 80091c0:	f000 fc72 	bl	8009aa8 <_svfprintf_r>
 80091c4:	9b02      	ldr	r3, [sp, #8]
 80091c6:	2200      	movs	r2, #0
 80091c8:	701a      	strb	r2, [r3, #0]
 80091ca:	b01c      	add	sp, #112	; 0x70
 80091cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80091d0:	b003      	add	sp, #12
 80091d2:	4770      	bx	lr
 80091d4:	20000160 	.word	0x20000160
 80091d8:	ffff0208 	.word	0xffff0208

080091dc <__sread>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	460c      	mov	r4, r1
 80091e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e4:	f000 f896 	bl	8009314 <_read_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	bfab      	itete	ge
 80091ec:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80091ee:	89a3      	ldrhlt	r3, [r4, #12]
 80091f0:	181b      	addge	r3, r3, r0
 80091f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091f6:	bfac      	ite	ge
 80091f8:	6523      	strge	r3, [r4, #80]	; 0x50
 80091fa:	81a3      	strhlt	r3, [r4, #12]
 80091fc:	bd10      	pop	{r4, pc}

080091fe <__swrite>:
 80091fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	461f      	mov	r7, r3
 8009204:	898b      	ldrh	r3, [r1, #12]
 8009206:	05db      	lsls	r3, r3, #23
 8009208:	4605      	mov	r5, r0
 800920a:	460c      	mov	r4, r1
 800920c:	4616      	mov	r6, r2
 800920e:	d505      	bpl.n	800921c <__swrite+0x1e>
 8009210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009214:	2302      	movs	r3, #2
 8009216:	2200      	movs	r2, #0
 8009218:	f000 f86a 	bl	80092f0 <_lseek_r>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009226:	81a3      	strh	r3, [r4, #12]
 8009228:	4632      	mov	r2, r6
 800922a:	463b      	mov	r3, r7
 800922c:	4628      	mov	r0, r5
 800922e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009232:	f000 b881 	b.w	8009338 <_write_r>

08009236 <__sseek>:
 8009236:	b510      	push	{r4, lr}
 8009238:	460c      	mov	r4, r1
 800923a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923e:	f000 f857 	bl	80092f0 <_lseek_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	bf15      	itete	ne
 8009248:	6520      	strne	r0, [r4, #80]	; 0x50
 800924a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800924e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009252:	81a3      	strheq	r3, [r4, #12]
 8009254:	bf18      	it	ne
 8009256:	81a3      	strhne	r3, [r4, #12]
 8009258:	bd10      	pop	{r4, pc}

0800925a <__sclose>:
 800925a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925e:	f000 b809 	b.w	8009274 <_close_r>

08009262 <memset>:
 8009262:	4402      	add	r2, r0
 8009264:	4603      	mov	r3, r0
 8009266:	4293      	cmp	r3, r2
 8009268:	d100      	bne.n	800926c <memset+0xa>
 800926a:	4770      	bx	lr
 800926c:	f803 1b01 	strb.w	r1, [r3], #1
 8009270:	e7f9      	b.n	8009266 <memset+0x4>
	...

08009274 <_close_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	4d06      	ldr	r5, [pc, #24]	; (8009290 <_close_r+0x1c>)
 8009278:	2300      	movs	r3, #0
 800927a:	4604      	mov	r4, r0
 800927c:	4608      	mov	r0, r1
 800927e:	602b      	str	r3, [r5, #0]
 8009280:	f7f9 f880 	bl	8002384 <_close>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_close_r+0x1a>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	b103      	cbz	r3, 800928e <_close_r+0x1a>
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	200042a0 	.word	0x200042a0

08009294 <_reclaim_reent>:
 8009294:	4b15      	ldr	r3, [pc, #84]	; (80092ec <_reclaim_reent+0x58>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4283      	cmp	r3, r0
 800929a:	b570      	push	{r4, r5, r6, lr}
 800929c:	4604      	mov	r4, r0
 800929e:	d023      	beq.n	80092e8 <_reclaim_reent+0x54>
 80092a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80092a2:	b9fb      	cbnz	r3, 80092e4 <_reclaim_reent+0x50>
 80092a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092a6:	b111      	cbz	r1, 80092ae <_reclaim_reent+0x1a>
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 f8f7 	bl	800949c <_free_r>
 80092ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80092b0:	b111      	cbz	r1, 80092b8 <_reclaim_reent+0x24>
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 f8f2 	bl	800949c <_free_r>
 80092b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092ba:	b1ab      	cbz	r3, 80092e8 <_reclaim_reent+0x54>
 80092bc:	4620      	mov	r0, r4
 80092be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092c2:	4718      	bx	r3
 80092c4:	5949      	ldr	r1, [r1, r5]
 80092c6:	b939      	cbnz	r1, 80092d8 <_reclaim_reent+0x44>
 80092c8:	3504      	adds	r5, #4
 80092ca:	2d80      	cmp	r5, #128	; 0x80
 80092cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80092ce:	d1f9      	bne.n	80092c4 <_reclaim_reent+0x30>
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 f8e3 	bl	800949c <_free_r>
 80092d6:	e7e5      	b.n	80092a4 <_reclaim_reent+0x10>
 80092d8:	680e      	ldr	r6, [r1, #0]
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 f8de 	bl	800949c <_free_r>
 80092e0:	4631      	mov	r1, r6
 80092e2:	e7f0      	b.n	80092c6 <_reclaim_reent+0x32>
 80092e4:	2500      	movs	r5, #0
 80092e6:	e7f0      	b.n	80092ca <_reclaim_reent+0x36>
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
 80092ea:	bf00      	nop
 80092ec:	20000160 	.word	0x20000160

080092f0 <_lseek_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4d07      	ldr	r5, [pc, #28]	; (8009310 <_lseek_r+0x20>)
 80092f4:	4604      	mov	r4, r0
 80092f6:	4608      	mov	r0, r1
 80092f8:	4611      	mov	r1, r2
 80092fa:	2200      	movs	r2, #0
 80092fc:	602a      	str	r2, [r5, #0]
 80092fe:	461a      	mov	r2, r3
 8009300:	f7f9 f867 	bl	80023d2 <_lseek>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d102      	bne.n	800930e <_lseek_r+0x1e>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	b103      	cbz	r3, 800930e <_lseek_r+0x1e>
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	200042a0 	.word	0x200042a0

08009314 <_read_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d07      	ldr	r5, [pc, #28]	; (8009334 <_read_r+0x20>)
 8009318:	4604      	mov	r4, r0
 800931a:	4608      	mov	r0, r1
 800931c:	4611      	mov	r1, r2
 800931e:	2200      	movs	r2, #0
 8009320:	602a      	str	r2, [r5, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	f7f8 fff5 	bl	8002312 <_read>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_read_r+0x1e>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_read_r+0x1e>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	200042a0 	.word	0x200042a0

08009338 <_write_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d07      	ldr	r5, [pc, #28]	; (8009358 <_write_r+0x20>)
 800933c:	4604      	mov	r4, r0
 800933e:	4608      	mov	r0, r1
 8009340:	4611      	mov	r1, r2
 8009342:	2200      	movs	r2, #0
 8009344:	602a      	str	r2, [r5, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	f7f9 f800 	bl	800234c <_write>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_write_r+0x1e>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_write_r+0x1e>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	200042a0 	.word	0x200042a0

0800935c <__errno>:
 800935c:	4b01      	ldr	r3, [pc, #4]	; (8009364 <__errno+0x8>)
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	20000160 	.word	0x20000160

08009368 <__libc_init_array>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	4d0d      	ldr	r5, [pc, #52]	; (80093a0 <__libc_init_array+0x38>)
 800936c:	4c0d      	ldr	r4, [pc, #52]	; (80093a4 <__libc_init_array+0x3c>)
 800936e:	1b64      	subs	r4, r4, r5
 8009370:	10a4      	asrs	r4, r4, #2
 8009372:	2600      	movs	r6, #0
 8009374:	42a6      	cmp	r6, r4
 8009376:	d109      	bne.n	800938c <__libc_init_array+0x24>
 8009378:	4d0b      	ldr	r5, [pc, #44]	; (80093a8 <__libc_init_array+0x40>)
 800937a:	4c0c      	ldr	r4, [pc, #48]	; (80093ac <__libc_init_array+0x44>)
 800937c:	f004 fbe6 	bl	800db4c <_init>
 8009380:	1b64      	subs	r4, r4, r5
 8009382:	10a4      	asrs	r4, r4, #2
 8009384:	2600      	movs	r6, #0
 8009386:	42a6      	cmp	r6, r4
 8009388:	d105      	bne.n	8009396 <__libc_init_array+0x2e>
 800938a:	bd70      	pop	{r4, r5, r6, pc}
 800938c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009390:	4798      	blx	r3
 8009392:	3601      	adds	r6, #1
 8009394:	e7ee      	b.n	8009374 <__libc_init_array+0xc>
 8009396:	f855 3b04 	ldr.w	r3, [r5], #4
 800939a:	4798      	blx	r3
 800939c:	3601      	adds	r6, #1
 800939e:	e7f2      	b.n	8009386 <__libc_init_array+0x1e>
 80093a0:	0800e56c 	.word	0x0800e56c
 80093a4:	0800e56c 	.word	0x0800e56c
 80093a8:	0800e56c 	.word	0x0800e56c
 80093ac:	0800e574 	.word	0x0800e574

080093b0 <__retarget_lock_init_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <__retarget_lock_close_recursive>:
 80093b2:	4770      	bx	lr

080093b4 <__retarget_lock_acquire_recursive>:
 80093b4:	4770      	bx	lr

080093b6 <__retarget_lock_release_recursive>:
 80093b6:	4770      	bx	lr

080093b8 <memcpy>:
 80093b8:	440a      	add	r2, r1
 80093ba:	4291      	cmp	r1, r2
 80093bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093c0:	d100      	bne.n	80093c4 <memcpy+0xc>
 80093c2:	4770      	bx	lr
 80093c4:	b510      	push	{r4, lr}
 80093c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ce:	4291      	cmp	r1, r2
 80093d0:	d1f9      	bne.n	80093c6 <memcpy+0xe>
 80093d2:	bd10      	pop	{r4, pc}

080093d4 <register_fini>:
 80093d4:	4b02      	ldr	r3, [pc, #8]	; (80093e0 <register_fini+0xc>)
 80093d6:	b113      	cbz	r3, 80093de <register_fini+0xa>
 80093d8:	4802      	ldr	r0, [pc, #8]	; (80093e4 <register_fini+0x10>)
 80093da:	f000 b805 	b.w	80093e8 <atexit>
 80093de:	4770      	bx	lr
 80093e0:	00000000 	.word	0x00000000
 80093e4:	0800b0e9 	.word	0x0800b0e9

080093e8 <atexit>:
 80093e8:	2300      	movs	r3, #0
 80093ea:	4601      	mov	r1, r0
 80093ec:	461a      	mov	r2, r3
 80093ee:	4618      	mov	r0, r3
 80093f0:	f001 bed2 	b.w	800b198 <__register_exitproc>

080093f4 <_malloc_trim_r>:
 80093f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f8:	4606      	mov	r6, r0
 80093fa:	2008      	movs	r0, #8
 80093fc:	460c      	mov	r4, r1
 80093fe:	f001 fe87 	bl	800b110 <sysconf>
 8009402:	4f23      	ldr	r7, [pc, #140]	; (8009490 <_malloc_trim_r+0x9c>)
 8009404:	4680      	mov	r8, r0
 8009406:	4630      	mov	r0, r6
 8009408:	f000 fb42 	bl	8009a90 <__malloc_lock>
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	685d      	ldr	r5, [r3, #4]
 8009410:	f025 0503 	bic.w	r5, r5, #3
 8009414:	1b2c      	subs	r4, r5, r4
 8009416:	3c11      	subs	r4, #17
 8009418:	4444      	add	r4, r8
 800941a:	fbb4 f4f8 	udiv	r4, r4, r8
 800941e:	3c01      	subs	r4, #1
 8009420:	fb08 f404 	mul.w	r4, r8, r4
 8009424:	45a0      	cmp	r8, r4
 8009426:	dd05      	ble.n	8009434 <_malloc_trim_r+0x40>
 8009428:	4630      	mov	r0, r6
 800942a:	f000 fb37 	bl	8009a9c <__malloc_unlock>
 800942e:	2000      	movs	r0, #0
 8009430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009434:	2100      	movs	r1, #0
 8009436:	4630      	mov	r0, r6
 8009438:	f001 fe46 	bl	800b0c8 <_sbrk_r>
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	442b      	add	r3, r5
 8009440:	4298      	cmp	r0, r3
 8009442:	d1f1      	bne.n	8009428 <_malloc_trim_r+0x34>
 8009444:	4261      	negs	r1, r4
 8009446:	4630      	mov	r0, r6
 8009448:	f001 fe3e 	bl	800b0c8 <_sbrk_r>
 800944c:	3001      	adds	r0, #1
 800944e:	d110      	bne.n	8009472 <_malloc_trim_r+0x7e>
 8009450:	2100      	movs	r1, #0
 8009452:	4630      	mov	r0, r6
 8009454:	f001 fe38 	bl	800b0c8 <_sbrk_r>
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	1a83      	subs	r3, r0, r2
 800945c:	2b0f      	cmp	r3, #15
 800945e:	dde3      	ble.n	8009428 <_malloc_trim_r+0x34>
 8009460:	490c      	ldr	r1, [pc, #48]	; (8009494 <_malloc_trim_r+0xa0>)
 8009462:	6809      	ldr	r1, [r1, #0]
 8009464:	1a40      	subs	r0, r0, r1
 8009466:	490c      	ldr	r1, [pc, #48]	; (8009498 <_malloc_trim_r+0xa4>)
 8009468:	f043 0301 	orr.w	r3, r3, #1
 800946c:	6008      	str	r0, [r1, #0]
 800946e:	6053      	str	r3, [r2, #4]
 8009470:	e7da      	b.n	8009428 <_malloc_trim_r+0x34>
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	4a08      	ldr	r2, [pc, #32]	; (8009498 <_malloc_trim_r+0xa4>)
 8009476:	1b2d      	subs	r5, r5, r4
 8009478:	f045 0501 	orr.w	r5, r5, #1
 800947c:	605d      	str	r5, [r3, #4]
 800947e:	6813      	ldr	r3, [r2, #0]
 8009480:	4630      	mov	r0, r6
 8009482:	1b1b      	subs	r3, r3, r4
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	f000 fb09 	bl	8009a9c <__malloc_unlock>
 800948a:	2001      	movs	r0, #1
 800948c:	e7d0      	b.n	8009430 <_malloc_trim_r+0x3c>
 800948e:	bf00      	nop
 8009490:	20000168 	.word	0x20000168
 8009494:	20000570 	.word	0x20000570
 8009498:	200042ac 	.word	0x200042ac

0800949c <_free_r>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	4605      	mov	r5, r0
 80094a0:	460f      	mov	r7, r1
 80094a2:	2900      	cmp	r1, #0
 80094a4:	f000 80b1 	beq.w	800960a <_free_r+0x16e>
 80094a8:	f000 faf2 	bl	8009a90 <__malloc_lock>
 80094ac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80094b0:	4856      	ldr	r0, [pc, #344]	; (800960c <_free_r+0x170>)
 80094b2:	f022 0401 	bic.w	r4, r2, #1
 80094b6:	f1a7 0308 	sub.w	r3, r7, #8
 80094ba:	eb03 0c04 	add.w	ip, r3, r4
 80094be:	6881      	ldr	r1, [r0, #8]
 80094c0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80094c4:	4561      	cmp	r1, ip
 80094c6:	f026 0603 	bic.w	r6, r6, #3
 80094ca:	f002 0201 	and.w	r2, r2, #1
 80094ce:	d11b      	bne.n	8009508 <_free_r+0x6c>
 80094d0:	4426      	add	r6, r4
 80094d2:	b93a      	cbnz	r2, 80094e4 <_free_r+0x48>
 80094d4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	4416      	add	r6, r2
 80094dc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80094e0:	60ca      	str	r2, [r1, #12]
 80094e2:	6091      	str	r1, [r2, #8]
 80094e4:	f046 0201 	orr.w	r2, r6, #1
 80094e8:	605a      	str	r2, [r3, #4]
 80094ea:	6083      	str	r3, [r0, #8]
 80094ec:	4b48      	ldr	r3, [pc, #288]	; (8009610 <_free_r+0x174>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	42b3      	cmp	r3, r6
 80094f2:	d804      	bhi.n	80094fe <_free_r+0x62>
 80094f4:	4b47      	ldr	r3, [pc, #284]	; (8009614 <_free_r+0x178>)
 80094f6:	4628      	mov	r0, r5
 80094f8:	6819      	ldr	r1, [r3, #0]
 80094fa:	f7ff ff7b 	bl	80093f4 <_malloc_trim_r>
 80094fe:	4628      	mov	r0, r5
 8009500:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009504:	f000 baca 	b.w	8009a9c <__malloc_unlock>
 8009508:	f8cc 6004 	str.w	r6, [ip, #4]
 800950c:	2a00      	cmp	r2, #0
 800950e:	d138      	bne.n	8009582 <_free_r+0xe6>
 8009510:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8009514:	1a5b      	subs	r3, r3, r1
 8009516:	440c      	add	r4, r1
 8009518:	6899      	ldr	r1, [r3, #8]
 800951a:	f100 0708 	add.w	r7, r0, #8
 800951e:	42b9      	cmp	r1, r7
 8009520:	d031      	beq.n	8009586 <_free_r+0xea>
 8009522:	68df      	ldr	r7, [r3, #12]
 8009524:	60cf      	str	r7, [r1, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	eb0c 0106 	add.w	r1, ip, r6
 800952c:	6849      	ldr	r1, [r1, #4]
 800952e:	07c9      	lsls	r1, r1, #31
 8009530:	d40b      	bmi.n	800954a <_free_r+0xae>
 8009532:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009536:	4434      	add	r4, r6
 8009538:	bb3a      	cbnz	r2, 800958a <_free_r+0xee>
 800953a:	4e37      	ldr	r6, [pc, #220]	; (8009618 <_free_r+0x17c>)
 800953c:	42b1      	cmp	r1, r6
 800953e:	d124      	bne.n	800958a <_free_r+0xee>
 8009540:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009544:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009548:	2201      	movs	r2, #1
 800954a:	f044 0101 	orr.w	r1, r4, #1
 800954e:	6059      	str	r1, [r3, #4]
 8009550:	511c      	str	r4, [r3, r4]
 8009552:	2a00      	cmp	r2, #0
 8009554:	d1d3      	bne.n	80094fe <_free_r+0x62>
 8009556:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800955a:	d21b      	bcs.n	8009594 <_free_r+0xf8>
 800955c:	08e2      	lsrs	r2, r4, #3
 800955e:	2101      	movs	r1, #1
 8009560:	0964      	lsrs	r4, r4, #5
 8009562:	40a1      	lsls	r1, r4
 8009564:	6844      	ldr	r4, [r0, #4]
 8009566:	3201      	adds	r2, #1
 8009568:	4321      	orrs	r1, r4
 800956a:	6041      	str	r1, [r0, #4]
 800956c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8009570:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8009574:	3908      	subs	r1, #8
 8009576:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800957a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800957e:	60e3      	str	r3, [r4, #12]
 8009580:	e7bd      	b.n	80094fe <_free_r+0x62>
 8009582:	2200      	movs	r2, #0
 8009584:	e7d0      	b.n	8009528 <_free_r+0x8c>
 8009586:	2201      	movs	r2, #1
 8009588:	e7ce      	b.n	8009528 <_free_r+0x8c>
 800958a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800958e:	60ce      	str	r6, [r1, #12]
 8009590:	60b1      	str	r1, [r6, #8]
 8009592:	e7da      	b.n	800954a <_free_r+0xae>
 8009594:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8009598:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800959c:	d214      	bcs.n	80095c8 <_free_r+0x12c>
 800959e:	09a2      	lsrs	r2, r4, #6
 80095a0:	3238      	adds	r2, #56	; 0x38
 80095a2:	1c51      	adds	r1, r2, #1
 80095a4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80095a8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80095ac:	428e      	cmp	r6, r1
 80095ae:	d125      	bne.n	80095fc <_free_r+0x160>
 80095b0:	2401      	movs	r4, #1
 80095b2:	1092      	asrs	r2, r2, #2
 80095b4:	fa04 f202 	lsl.w	r2, r4, r2
 80095b8:	6844      	ldr	r4, [r0, #4]
 80095ba:	4322      	orrs	r2, r4
 80095bc:	6042      	str	r2, [r0, #4]
 80095be:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80095c2:	60b3      	str	r3, [r6, #8]
 80095c4:	60cb      	str	r3, [r1, #12]
 80095c6:	e79a      	b.n	80094fe <_free_r+0x62>
 80095c8:	2a14      	cmp	r2, #20
 80095ca:	d801      	bhi.n	80095d0 <_free_r+0x134>
 80095cc:	325b      	adds	r2, #91	; 0x5b
 80095ce:	e7e8      	b.n	80095a2 <_free_r+0x106>
 80095d0:	2a54      	cmp	r2, #84	; 0x54
 80095d2:	d802      	bhi.n	80095da <_free_r+0x13e>
 80095d4:	0b22      	lsrs	r2, r4, #12
 80095d6:	326e      	adds	r2, #110	; 0x6e
 80095d8:	e7e3      	b.n	80095a2 <_free_r+0x106>
 80095da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80095de:	d802      	bhi.n	80095e6 <_free_r+0x14a>
 80095e0:	0be2      	lsrs	r2, r4, #15
 80095e2:	3277      	adds	r2, #119	; 0x77
 80095e4:	e7dd      	b.n	80095a2 <_free_r+0x106>
 80095e6:	f240 5154 	movw	r1, #1364	; 0x554
 80095ea:	428a      	cmp	r2, r1
 80095ec:	bf9a      	itte	ls
 80095ee:	0ca2      	lsrls	r2, r4, #18
 80095f0:	327c      	addls	r2, #124	; 0x7c
 80095f2:	227e      	movhi	r2, #126	; 0x7e
 80095f4:	e7d5      	b.n	80095a2 <_free_r+0x106>
 80095f6:	6889      	ldr	r1, [r1, #8]
 80095f8:	428e      	cmp	r6, r1
 80095fa:	d004      	beq.n	8009606 <_free_r+0x16a>
 80095fc:	684a      	ldr	r2, [r1, #4]
 80095fe:	f022 0203 	bic.w	r2, r2, #3
 8009602:	42a2      	cmp	r2, r4
 8009604:	d8f7      	bhi.n	80095f6 <_free_r+0x15a>
 8009606:	68ce      	ldr	r6, [r1, #12]
 8009608:	e7d9      	b.n	80095be <_free_r+0x122>
 800960a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960c:	20000168 	.word	0x20000168
 8009610:	20000574 	.word	0x20000574
 8009614:	200042dc 	.word	0x200042dc
 8009618:	20000170 	.word	0x20000170

0800961c <_malloc_r>:
 800961c:	f101 030b 	add.w	r3, r1, #11
 8009620:	2b16      	cmp	r3, #22
 8009622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009626:	4605      	mov	r5, r0
 8009628:	d906      	bls.n	8009638 <_malloc_r+0x1c>
 800962a:	f033 0707 	bics.w	r7, r3, #7
 800962e:	d504      	bpl.n	800963a <_malloc_r+0x1e>
 8009630:	230c      	movs	r3, #12
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	2400      	movs	r4, #0
 8009636:	e1a3      	b.n	8009980 <_malloc_r+0x364>
 8009638:	2710      	movs	r7, #16
 800963a:	42b9      	cmp	r1, r7
 800963c:	d8f8      	bhi.n	8009630 <_malloc_r+0x14>
 800963e:	4628      	mov	r0, r5
 8009640:	f000 fa26 	bl	8009a90 <__malloc_lock>
 8009644:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8009648:	4eaf      	ldr	r6, [pc, #700]	; (8009908 <_malloc_r+0x2ec>)
 800964a:	d237      	bcs.n	80096bc <_malloc_r+0xa0>
 800964c:	f107 0208 	add.w	r2, r7, #8
 8009650:	4432      	add	r2, r6
 8009652:	f1a2 0108 	sub.w	r1, r2, #8
 8009656:	6854      	ldr	r4, [r2, #4]
 8009658:	428c      	cmp	r4, r1
 800965a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800965e:	d102      	bne.n	8009666 <_malloc_r+0x4a>
 8009660:	68d4      	ldr	r4, [r2, #12]
 8009662:	42a2      	cmp	r2, r4
 8009664:	d010      	beq.n	8009688 <_malloc_r+0x6c>
 8009666:	6863      	ldr	r3, [r4, #4]
 8009668:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800966c:	f023 0303 	bic.w	r3, r3, #3
 8009670:	60ca      	str	r2, [r1, #12]
 8009672:	4423      	add	r3, r4
 8009674:	6091      	str	r1, [r2, #8]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	f042 0201 	orr.w	r2, r2, #1
 800967c:	605a      	str	r2, [r3, #4]
 800967e:	4628      	mov	r0, r5
 8009680:	f000 fa0c 	bl	8009a9c <__malloc_unlock>
 8009684:	3408      	adds	r4, #8
 8009686:	e17b      	b.n	8009980 <_malloc_r+0x364>
 8009688:	3302      	adds	r3, #2
 800968a:	6934      	ldr	r4, [r6, #16]
 800968c:	499f      	ldr	r1, [pc, #636]	; (800990c <_malloc_r+0x2f0>)
 800968e:	428c      	cmp	r4, r1
 8009690:	d077      	beq.n	8009782 <_malloc_r+0x166>
 8009692:	6862      	ldr	r2, [r4, #4]
 8009694:	f022 0c03 	bic.w	ip, r2, #3
 8009698:	ebac 0007 	sub.w	r0, ip, r7
 800969c:	280f      	cmp	r0, #15
 800969e:	dd48      	ble.n	8009732 <_malloc_r+0x116>
 80096a0:	19e2      	adds	r2, r4, r7
 80096a2:	f040 0301 	orr.w	r3, r0, #1
 80096a6:	f047 0701 	orr.w	r7, r7, #1
 80096aa:	6067      	str	r7, [r4, #4]
 80096ac:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80096b0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80096b4:	6053      	str	r3, [r2, #4]
 80096b6:	f844 000c 	str.w	r0, [r4, ip]
 80096ba:	e7e0      	b.n	800967e <_malloc_r+0x62>
 80096bc:	0a7b      	lsrs	r3, r7, #9
 80096be:	d02a      	beq.n	8009716 <_malloc_r+0xfa>
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d812      	bhi.n	80096ea <_malloc_r+0xce>
 80096c4:	09bb      	lsrs	r3, r7, #6
 80096c6:	3338      	adds	r3, #56	; 0x38
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80096ce:	f1a2 0c08 	sub.w	ip, r2, #8
 80096d2:	6854      	ldr	r4, [r2, #4]
 80096d4:	4564      	cmp	r4, ip
 80096d6:	d006      	beq.n	80096e6 <_malloc_r+0xca>
 80096d8:	6862      	ldr	r2, [r4, #4]
 80096da:	f022 0203 	bic.w	r2, r2, #3
 80096de:	1bd0      	subs	r0, r2, r7
 80096e0:	280f      	cmp	r0, #15
 80096e2:	dd1c      	ble.n	800971e <_malloc_r+0x102>
 80096e4:	3b01      	subs	r3, #1
 80096e6:	3301      	adds	r3, #1
 80096e8:	e7cf      	b.n	800968a <_malloc_r+0x6e>
 80096ea:	2b14      	cmp	r3, #20
 80096ec:	d801      	bhi.n	80096f2 <_malloc_r+0xd6>
 80096ee:	335b      	adds	r3, #91	; 0x5b
 80096f0:	e7ea      	b.n	80096c8 <_malloc_r+0xac>
 80096f2:	2b54      	cmp	r3, #84	; 0x54
 80096f4:	d802      	bhi.n	80096fc <_malloc_r+0xe0>
 80096f6:	0b3b      	lsrs	r3, r7, #12
 80096f8:	336e      	adds	r3, #110	; 0x6e
 80096fa:	e7e5      	b.n	80096c8 <_malloc_r+0xac>
 80096fc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009700:	d802      	bhi.n	8009708 <_malloc_r+0xec>
 8009702:	0bfb      	lsrs	r3, r7, #15
 8009704:	3377      	adds	r3, #119	; 0x77
 8009706:	e7df      	b.n	80096c8 <_malloc_r+0xac>
 8009708:	f240 5254 	movw	r2, #1364	; 0x554
 800970c:	4293      	cmp	r3, r2
 800970e:	d804      	bhi.n	800971a <_malloc_r+0xfe>
 8009710:	0cbb      	lsrs	r3, r7, #18
 8009712:	337c      	adds	r3, #124	; 0x7c
 8009714:	e7d8      	b.n	80096c8 <_malloc_r+0xac>
 8009716:	233f      	movs	r3, #63	; 0x3f
 8009718:	e7d6      	b.n	80096c8 <_malloc_r+0xac>
 800971a:	237e      	movs	r3, #126	; 0x7e
 800971c:	e7d4      	b.n	80096c8 <_malloc_r+0xac>
 800971e:	2800      	cmp	r0, #0
 8009720:	68e1      	ldr	r1, [r4, #12]
 8009722:	db04      	blt.n	800972e <_malloc_r+0x112>
 8009724:	68a3      	ldr	r3, [r4, #8]
 8009726:	60d9      	str	r1, [r3, #12]
 8009728:	608b      	str	r3, [r1, #8]
 800972a:	18a3      	adds	r3, r4, r2
 800972c:	e7a3      	b.n	8009676 <_malloc_r+0x5a>
 800972e:	460c      	mov	r4, r1
 8009730:	e7d0      	b.n	80096d4 <_malloc_r+0xb8>
 8009732:	2800      	cmp	r0, #0
 8009734:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8009738:	db07      	blt.n	800974a <_malloc_r+0x12e>
 800973a:	44a4      	add	ip, r4
 800973c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009740:	f043 0301 	orr.w	r3, r3, #1
 8009744:	f8cc 3004 	str.w	r3, [ip, #4]
 8009748:	e799      	b.n	800967e <_malloc_r+0x62>
 800974a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800974e:	6870      	ldr	r0, [r6, #4]
 8009750:	f080 8095 	bcs.w	800987e <_malloc_r+0x262>
 8009754:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009758:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800975c:	f04f 0c01 	mov.w	ip, #1
 8009760:	3201      	adds	r2, #1
 8009762:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009766:	ea4c 0000 	orr.w	r0, ip, r0
 800976a:	6070      	str	r0, [r6, #4]
 800976c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8009770:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009774:	3808      	subs	r0, #8
 8009776:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800977a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800977e:	f8cc 400c 	str.w	r4, [ip, #12]
 8009782:	1098      	asrs	r0, r3, #2
 8009784:	2201      	movs	r2, #1
 8009786:	4082      	lsls	r2, r0
 8009788:	6870      	ldr	r0, [r6, #4]
 800978a:	4290      	cmp	r0, r2
 800978c:	d326      	bcc.n	80097dc <_malloc_r+0x1c0>
 800978e:	4210      	tst	r0, r2
 8009790:	d106      	bne.n	80097a0 <_malloc_r+0x184>
 8009792:	f023 0303 	bic.w	r3, r3, #3
 8009796:	0052      	lsls	r2, r2, #1
 8009798:	4210      	tst	r0, r2
 800979a:	f103 0304 	add.w	r3, r3, #4
 800979e:	d0fa      	beq.n	8009796 <_malloc_r+0x17a>
 80097a0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80097a4:	46c1      	mov	r9, r8
 80097a6:	469e      	mov	lr, r3
 80097a8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80097ac:	454c      	cmp	r4, r9
 80097ae:	f040 80b9 	bne.w	8009924 <_malloc_r+0x308>
 80097b2:	f10e 0e01 	add.w	lr, lr, #1
 80097b6:	f01e 0f03 	tst.w	lr, #3
 80097ba:	f109 0908 	add.w	r9, r9, #8
 80097be:	d1f3      	bne.n	80097a8 <_malloc_r+0x18c>
 80097c0:	0798      	lsls	r0, r3, #30
 80097c2:	f040 80e3 	bne.w	800998c <_malloc_r+0x370>
 80097c6:	6873      	ldr	r3, [r6, #4]
 80097c8:	ea23 0302 	bic.w	r3, r3, r2
 80097cc:	6073      	str	r3, [r6, #4]
 80097ce:	6870      	ldr	r0, [r6, #4]
 80097d0:	0052      	lsls	r2, r2, #1
 80097d2:	4290      	cmp	r0, r2
 80097d4:	d302      	bcc.n	80097dc <_malloc_r+0x1c0>
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	f040 80e5 	bne.w	80099a6 <_malloc_r+0x38a>
 80097dc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80097e0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80097e4:	f023 0903 	bic.w	r9, r3, #3
 80097e8:	45b9      	cmp	r9, r7
 80097ea:	d304      	bcc.n	80097f6 <_malloc_r+0x1da>
 80097ec:	eba9 0207 	sub.w	r2, r9, r7
 80097f0:	2a0f      	cmp	r2, #15
 80097f2:	f300 8141 	bgt.w	8009a78 <_malloc_r+0x45c>
 80097f6:	4b46      	ldr	r3, [pc, #280]	; (8009910 <_malloc_r+0x2f4>)
 80097f8:	6819      	ldr	r1, [r3, #0]
 80097fa:	3110      	adds	r1, #16
 80097fc:	4439      	add	r1, r7
 80097fe:	2008      	movs	r0, #8
 8009800:	9101      	str	r1, [sp, #4]
 8009802:	f001 fc85 	bl	800b110 <sysconf>
 8009806:	4a43      	ldr	r2, [pc, #268]	; (8009914 <_malloc_r+0x2f8>)
 8009808:	9901      	ldr	r1, [sp, #4]
 800980a:	6813      	ldr	r3, [r2, #0]
 800980c:	3301      	adds	r3, #1
 800980e:	bf1f      	itttt	ne
 8009810:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 8009814:	1809      	addne	r1, r1, r0
 8009816:	4243      	negne	r3, r0
 8009818:	4019      	andne	r1, r3
 800981a:	4680      	mov	r8, r0
 800981c:	4628      	mov	r0, r5
 800981e:	9101      	str	r1, [sp, #4]
 8009820:	f001 fc52 	bl	800b0c8 <_sbrk_r>
 8009824:	1c42      	adds	r2, r0, #1
 8009826:	eb0a 0b09 	add.w	fp, sl, r9
 800982a:	4604      	mov	r4, r0
 800982c:	f000 80f7 	beq.w	8009a1e <_malloc_r+0x402>
 8009830:	4583      	cmp	fp, r0
 8009832:	9901      	ldr	r1, [sp, #4]
 8009834:	4a37      	ldr	r2, [pc, #220]	; (8009914 <_malloc_r+0x2f8>)
 8009836:	d902      	bls.n	800983e <_malloc_r+0x222>
 8009838:	45b2      	cmp	sl, r6
 800983a:	f040 80f0 	bne.w	8009a1e <_malloc_r+0x402>
 800983e:	4b36      	ldr	r3, [pc, #216]	; (8009918 <_malloc_r+0x2fc>)
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	45a3      	cmp	fp, r4
 8009844:	eb00 0e01 	add.w	lr, r0, r1
 8009848:	f8c3 e000 	str.w	lr, [r3]
 800984c:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8009850:	f040 80ab 	bne.w	80099aa <_malloc_r+0x38e>
 8009854:	ea1b 0f0c 	tst.w	fp, ip
 8009858:	f040 80a7 	bne.w	80099aa <_malloc_r+0x38e>
 800985c:	68b2      	ldr	r2, [r6, #8]
 800985e:	4449      	add	r1, r9
 8009860:	f041 0101 	orr.w	r1, r1, #1
 8009864:	6051      	str	r1, [r2, #4]
 8009866:	4a2d      	ldr	r2, [pc, #180]	; (800991c <_malloc_r+0x300>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6811      	ldr	r1, [r2, #0]
 800986c:	428b      	cmp	r3, r1
 800986e:	bf88      	it	hi
 8009870:	6013      	strhi	r3, [r2, #0]
 8009872:	4a2b      	ldr	r2, [pc, #172]	; (8009920 <_malloc_r+0x304>)
 8009874:	6811      	ldr	r1, [r2, #0]
 8009876:	428b      	cmp	r3, r1
 8009878:	bf88      	it	hi
 800987a:	6013      	strhi	r3, [r2, #0]
 800987c:	e0cf      	b.n	8009a1e <_malloc_r+0x402>
 800987e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8009882:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009886:	d218      	bcs.n	80098ba <_malloc_r+0x29e>
 8009888:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800988c:	3238      	adds	r2, #56	; 0x38
 800988e:	f102 0e01 	add.w	lr, r2, #1
 8009892:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009896:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800989a:	45f0      	cmp	r8, lr
 800989c:	d12b      	bne.n	80098f6 <_malloc_r+0x2da>
 800989e:	1092      	asrs	r2, r2, #2
 80098a0:	f04f 0c01 	mov.w	ip, #1
 80098a4:	fa0c f202 	lsl.w	r2, ip, r2
 80098a8:	4302      	orrs	r2, r0
 80098aa:	6072      	str	r2, [r6, #4]
 80098ac:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80098b0:	f8c8 4008 	str.w	r4, [r8, #8]
 80098b4:	f8ce 400c 	str.w	r4, [lr, #12]
 80098b8:	e763      	b.n	8009782 <_malloc_r+0x166>
 80098ba:	2a14      	cmp	r2, #20
 80098bc:	d801      	bhi.n	80098c2 <_malloc_r+0x2a6>
 80098be:	325b      	adds	r2, #91	; 0x5b
 80098c0:	e7e5      	b.n	800988e <_malloc_r+0x272>
 80098c2:	2a54      	cmp	r2, #84	; 0x54
 80098c4:	d803      	bhi.n	80098ce <_malloc_r+0x2b2>
 80098c6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80098ca:	326e      	adds	r2, #110	; 0x6e
 80098cc:	e7df      	b.n	800988e <_malloc_r+0x272>
 80098ce:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80098d2:	d803      	bhi.n	80098dc <_malloc_r+0x2c0>
 80098d4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80098d8:	3277      	adds	r2, #119	; 0x77
 80098da:	e7d8      	b.n	800988e <_malloc_r+0x272>
 80098dc:	f240 5e54 	movw	lr, #1364	; 0x554
 80098e0:	4572      	cmp	r2, lr
 80098e2:	bf9a      	itte	ls
 80098e4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80098e8:	327c      	addls	r2, #124	; 0x7c
 80098ea:	227e      	movhi	r2, #126	; 0x7e
 80098ec:	e7cf      	b.n	800988e <_malloc_r+0x272>
 80098ee:	f8de e008 	ldr.w	lr, [lr, #8]
 80098f2:	45f0      	cmp	r8, lr
 80098f4:	d005      	beq.n	8009902 <_malloc_r+0x2e6>
 80098f6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80098fa:	f022 0203 	bic.w	r2, r2, #3
 80098fe:	4562      	cmp	r2, ip
 8009900:	d8f5      	bhi.n	80098ee <_malloc_r+0x2d2>
 8009902:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009906:	e7d1      	b.n	80098ac <_malloc_r+0x290>
 8009908:	20000168 	.word	0x20000168
 800990c:	20000170 	.word	0x20000170
 8009910:	200042dc 	.word	0x200042dc
 8009914:	20000570 	.word	0x20000570
 8009918:	200042ac 	.word	0x200042ac
 800991c:	200042d4 	.word	0x200042d4
 8009920:	200042d8 	.word	0x200042d8
 8009924:	6860      	ldr	r0, [r4, #4]
 8009926:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800992a:	f020 0003 	bic.w	r0, r0, #3
 800992e:	eba0 0a07 	sub.w	sl, r0, r7
 8009932:	f1ba 0f0f 	cmp.w	sl, #15
 8009936:	dd12      	ble.n	800995e <_malloc_r+0x342>
 8009938:	68a3      	ldr	r3, [r4, #8]
 800993a:	19e2      	adds	r2, r4, r7
 800993c:	f047 0701 	orr.w	r7, r7, #1
 8009940:	6067      	str	r7, [r4, #4]
 8009942:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009946:	f8cc 3008 	str.w	r3, [ip, #8]
 800994a:	f04a 0301 	orr.w	r3, sl, #1
 800994e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009952:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009956:	6053      	str	r3, [r2, #4]
 8009958:	f844 a000 	str.w	sl, [r4, r0]
 800995c:	e68f      	b.n	800967e <_malloc_r+0x62>
 800995e:	f1ba 0f00 	cmp.w	sl, #0
 8009962:	db11      	blt.n	8009988 <_malloc_r+0x36c>
 8009964:	4420      	add	r0, r4
 8009966:	6843      	ldr	r3, [r0, #4]
 8009968:	f043 0301 	orr.w	r3, r3, #1
 800996c:	6043      	str	r3, [r0, #4]
 800996e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009972:	4628      	mov	r0, r5
 8009974:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009978:	f8cc 3008 	str.w	r3, [ip, #8]
 800997c:	f000 f88e 	bl	8009a9c <__malloc_unlock>
 8009980:	4620      	mov	r0, r4
 8009982:	b003      	add	sp, #12
 8009984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009988:	4664      	mov	r4, ip
 800998a:	e70f      	b.n	80097ac <_malloc_r+0x190>
 800998c:	f858 0908 	ldr.w	r0, [r8], #-8
 8009990:	4540      	cmp	r0, r8
 8009992:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009996:	f43f af13 	beq.w	80097c0 <_malloc_r+0x1a4>
 800999a:	e718      	b.n	80097ce <_malloc_r+0x1b2>
 800999c:	3304      	adds	r3, #4
 800999e:	0052      	lsls	r2, r2, #1
 80099a0:	4210      	tst	r0, r2
 80099a2:	d0fb      	beq.n	800999c <_malloc_r+0x380>
 80099a4:	e6fc      	b.n	80097a0 <_malloc_r+0x184>
 80099a6:	4673      	mov	r3, lr
 80099a8:	e7fa      	b.n	80099a0 <_malloc_r+0x384>
 80099aa:	6810      	ldr	r0, [r2, #0]
 80099ac:	3001      	adds	r0, #1
 80099ae:	bf1b      	ittet	ne
 80099b0:	eba4 0b0b 	subne.w	fp, r4, fp
 80099b4:	eb0b 020e 	addne.w	r2, fp, lr
 80099b8:	6014      	streq	r4, [r2, #0]
 80099ba:	601a      	strne	r2, [r3, #0]
 80099bc:	f014 0b07 	ands.w	fp, r4, #7
 80099c0:	bf1a      	itte	ne
 80099c2:	f1cb 0008 	rsbne	r0, fp, #8
 80099c6:	1824      	addne	r4, r4, r0
 80099c8:	4658      	moveq	r0, fp
 80099ca:	1862      	adds	r2, r4, r1
 80099cc:	ea02 010c 	and.w	r1, r2, ip
 80099d0:	4480      	add	r8, r0
 80099d2:	eba8 0801 	sub.w	r8, r8, r1
 80099d6:	ea08 080c 	and.w	r8, r8, ip
 80099da:	4641      	mov	r1, r8
 80099dc:	4628      	mov	r0, r5
 80099de:	9201      	str	r2, [sp, #4]
 80099e0:	f001 fb72 	bl	800b0c8 <_sbrk_r>
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	9a01      	ldr	r2, [sp, #4]
 80099e8:	4b28      	ldr	r3, [pc, #160]	; (8009a8c <_malloc_r+0x470>)
 80099ea:	d107      	bne.n	80099fc <_malloc_r+0x3e0>
 80099ec:	f1bb 0f00 	cmp.w	fp, #0
 80099f0:	d023      	beq.n	8009a3a <_malloc_r+0x41e>
 80099f2:	f1ab 0008 	sub.w	r0, fp, #8
 80099f6:	4410      	add	r0, r2
 80099f8:	f04f 0800 	mov.w	r8, #0
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	60b4      	str	r4, [r6, #8]
 8009a00:	1b00      	subs	r0, r0, r4
 8009a02:	4440      	add	r0, r8
 8009a04:	4442      	add	r2, r8
 8009a06:	f040 0001 	orr.w	r0, r0, #1
 8009a0a:	45b2      	cmp	sl, r6
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	6060      	str	r0, [r4, #4]
 8009a10:	f43f af29 	beq.w	8009866 <_malloc_r+0x24a>
 8009a14:	f1b9 0f0f 	cmp.w	r9, #15
 8009a18:	d812      	bhi.n	8009a40 <_malloc_r+0x424>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	6063      	str	r3, [r4, #4]
 8009a1e:	68b3      	ldr	r3, [r6, #8]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	f023 0303 	bic.w	r3, r3, #3
 8009a26:	42bb      	cmp	r3, r7
 8009a28:	eba3 0207 	sub.w	r2, r3, r7
 8009a2c:	d301      	bcc.n	8009a32 <_malloc_r+0x416>
 8009a2e:	2a0f      	cmp	r2, #15
 8009a30:	dc22      	bgt.n	8009a78 <_malloc_r+0x45c>
 8009a32:	4628      	mov	r0, r5
 8009a34:	f000 f832 	bl	8009a9c <__malloc_unlock>
 8009a38:	e5fc      	b.n	8009634 <_malloc_r+0x18>
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	46d8      	mov	r8, fp
 8009a3e:	e7dd      	b.n	80099fc <_malloc_r+0x3e0>
 8009a40:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009a44:	f1a9 090c 	sub.w	r9, r9, #12
 8009a48:	f029 0907 	bic.w	r9, r9, #7
 8009a4c:	f002 0201 	and.w	r2, r2, #1
 8009a50:	ea42 0209 	orr.w	r2, r2, r9
 8009a54:	f8ca 2004 	str.w	r2, [sl, #4]
 8009a58:	2105      	movs	r1, #5
 8009a5a:	eb0a 0209 	add.w	r2, sl, r9
 8009a5e:	f1b9 0f0f 	cmp.w	r9, #15
 8009a62:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8009a66:	f67f aefe 	bls.w	8009866 <_malloc_r+0x24a>
 8009a6a:	f10a 0108 	add.w	r1, sl, #8
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f7ff fd14 	bl	800949c <_free_r>
 8009a74:	4b05      	ldr	r3, [pc, #20]	; (8009a8c <_malloc_r+0x470>)
 8009a76:	e6f6      	b.n	8009866 <_malloc_r+0x24a>
 8009a78:	68b4      	ldr	r4, [r6, #8]
 8009a7a:	f047 0301 	orr.w	r3, r7, #1
 8009a7e:	4427      	add	r7, r4
 8009a80:	f042 0201 	orr.w	r2, r2, #1
 8009a84:	6063      	str	r3, [r4, #4]
 8009a86:	60b7      	str	r7, [r6, #8]
 8009a88:	607a      	str	r2, [r7, #4]
 8009a8a:	e5f8      	b.n	800967e <_malloc_r+0x62>
 8009a8c:	200042ac 	.word	0x200042ac

08009a90 <__malloc_lock>:
 8009a90:	4801      	ldr	r0, [pc, #4]	; (8009a98 <__malloc_lock+0x8>)
 8009a92:	f7ff bc8f 	b.w	80093b4 <__retarget_lock_acquire_recursive>
 8009a96:	bf00      	nop
 8009a98:	200042a5 	.word	0x200042a5

08009a9c <__malloc_unlock>:
 8009a9c:	4801      	ldr	r0, [pc, #4]	; (8009aa4 <__malloc_unlock+0x8>)
 8009a9e:	f7ff bc8a 	b.w	80093b6 <__retarget_lock_release_recursive>
 8009aa2:	bf00      	nop
 8009aa4:	200042a5 	.word	0x200042a5

08009aa8 <_svfprintf_r>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	ed2d 8b04 	vpush	{d8-d9}
 8009ab0:	b0cf      	sub	sp, #316	; 0x13c
 8009ab2:	4689      	mov	r9, r1
 8009ab4:	9203      	str	r2, [sp, #12]
 8009ab6:	461d      	mov	r5, r3
 8009ab8:	4682      	mov	sl, r0
 8009aba:	f001 fb01 	bl	800b0c0 <_localeconv_r>
 8009abe:	6803      	ldr	r3, [r0, #0]
 8009ac0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7f6 fbd4 	bl	8000270 <strlen>
 8009ac8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009acc:	900e      	str	r0, [sp, #56]	; 0x38
 8009ace:	0619      	lsls	r1, r3, #24
 8009ad0:	d51a      	bpl.n	8009b08 <_svfprintf_r+0x60>
 8009ad2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ad6:	b9bb      	cbnz	r3, 8009b08 <_svfprintf_r+0x60>
 8009ad8:	2140      	movs	r1, #64	; 0x40
 8009ada:	4650      	mov	r0, sl
 8009adc:	f7ff fd9e 	bl	800961c <_malloc_r>
 8009ae0:	f8c9 0000 	str.w	r0, [r9]
 8009ae4:	f8c9 0010 	str.w	r0, [r9, #16]
 8009ae8:	b958      	cbnz	r0, 8009b02 <_svfprintf_r+0x5a>
 8009aea:	230c      	movs	r3, #12
 8009aec:	f8ca 3000 	str.w	r3, [sl]
 8009af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009af6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009af8:	b04f      	add	sp, #316	; 0x13c
 8009afa:	ecbd 8b04 	vpop	{d8-d9}
 8009afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b02:	2340      	movs	r3, #64	; 0x40
 8009b04:	f8c9 3014 	str.w	r3, [r9, #20]
 8009b08:	ed9f 7b91 	vldr	d7, [pc, #580]	; 8009d50 <_svfprintf_r+0x2a8>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 8009b12:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009b16:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8009b1a:	ac25      	add	r4, sp, #148	; 0x94
 8009b1c:	9422      	str	r4, [sp, #136]	; 0x88
 8009b1e:	9305      	str	r3, [sp, #20]
 8009b20:	9309      	str	r3, [sp, #36]	; 0x24
 8009b22:	9311      	str	r3, [sp, #68]	; 0x44
 8009b24:	9314      	str	r3, [sp, #80]	; 0x50
 8009b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	461e      	mov	r6, r3
 8009b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b30:	b10a      	cbz	r2, 8009b36 <_svfprintf_r+0x8e>
 8009b32:	2a25      	cmp	r2, #37	; 0x25
 8009b34:	d1f9      	bne.n	8009b2a <_svfprintf_r+0x82>
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	1af7      	subs	r7, r6, r3
 8009b3a:	d00d      	beq.n	8009b58 <_svfprintf_r+0xb0>
 8009b3c:	e9c4 3700 	strd	r3, r7, [r4]
 8009b40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009b42:	443b      	add	r3, r7
 8009b44:	9324      	str	r3, [sp, #144]	; 0x90
 8009b46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b48:	3301      	adds	r3, #1
 8009b4a:	2b07      	cmp	r3, #7
 8009b4c:	9323      	str	r3, [sp, #140]	; 0x8c
 8009b4e:	dc78      	bgt.n	8009c42 <_svfprintf_r+0x19a>
 8009b50:	3408      	adds	r4, #8
 8009b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b54:	443b      	add	r3, r7
 8009b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b58:	7833      	ldrb	r3, [r6, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f001 815a 	beq.w	800ae14 <_svfprintf_r+0x136c>
 8009b60:	2300      	movs	r3, #0
 8009b62:	3601      	adds	r6, #1
 8009b64:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009b68:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009b6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b6e:	469b      	mov	fp, r3
 8009b70:	270a      	movs	r7, #10
 8009b72:	212b      	movs	r1, #43	; 0x2b
 8009b74:	4633      	mov	r3, r6
 8009b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b7a:	9207      	str	r2, [sp, #28]
 8009b7c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b7e:	9b07      	ldr	r3, [sp, #28]
 8009b80:	3b20      	subs	r3, #32
 8009b82:	2b5a      	cmp	r3, #90	; 0x5a
 8009b84:	f200 85c6 	bhi.w	800a714 <_svfprintf_r+0xc6c>
 8009b88:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009b8c:	05c4007e 	.word	0x05c4007e
 8009b90:	008605c4 	.word	0x008605c4
 8009b94:	05c405c4 	.word	0x05c405c4
 8009b98:	006505c4 	.word	0x006505c4
 8009b9c:	05c405c4 	.word	0x05c405c4
 8009ba0:	00930089 	.word	0x00930089
 8009ba4:	009005c4 	.word	0x009005c4
 8009ba8:	05c40096 	.word	0x05c40096
 8009bac:	00b200af 	.word	0x00b200af
 8009bb0:	00b200b2 	.word	0x00b200b2
 8009bb4:	00b200b2 	.word	0x00b200b2
 8009bb8:	00b200b2 	.word	0x00b200b2
 8009bbc:	00b200b2 	.word	0x00b200b2
 8009bc0:	05c405c4 	.word	0x05c405c4
 8009bc4:	05c405c4 	.word	0x05c405c4
 8009bc8:	05c405c4 	.word	0x05c405c4
 8009bcc:	012905c4 	.word	0x012905c4
 8009bd0:	00e605c4 	.word	0x00e605c4
 8009bd4:	012900f9 	.word	0x012900f9
 8009bd8:	01290129 	.word	0x01290129
 8009bdc:	05c405c4 	.word	0x05c405c4
 8009be0:	05c405c4 	.word	0x05c405c4
 8009be4:	05c400c2 	.word	0x05c400c2
 8009be8:	049105c4 	.word	0x049105c4
 8009bec:	05c405c4 	.word	0x05c405c4
 8009bf0:	04db05c4 	.word	0x04db05c4
 8009bf4:	050105c4 	.word	0x050105c4
 8009bf8:	05c405c4 	.word	0x05c405c4
 8009bfc:	05c40523 	.word	0x05c40523
 8009c00:	05c405c4 	.word	0x05c405c4
 8009c04:	05c405c4 	.word	0x05c405c4
 8009c08:	05c405c4 	.word	0x05c405c4
 8009c0c:	012905c4 	.word	0x012905c4
 8009c10:	00e605c4 	.word	0x00e605c4
 8009c14:	012900fb 	.word	0x012900fb
 8009c18:	01290129 	.word	0x01290129
 8009c1c:	00fb00c5 	.word	0x00fb00c5
 8009c20:	05c400d9 	.word	0x05c400d9
 8009c24:	05c400d2 	.word	0x05c400d2
 8009c28:	0493046c 	.word	0x0493046c
 8009c2c:	00d904ca 	.word	0x00d904ca
 8009c30:	04db05c4 	.word	0x04db05c4
 8009c34:	0503007c 	.word	0x0503007c
 8009c38:	05c405c4 	.word	0x05c405c4
 8009c3c:	05c40542 	.word	0x05c40542
 8009c40:	007c      	.short	0x007c
 8009c42:	aa22      	add	r2, sp, #136	; 0x88
 8009c44:	4649      	mov	r1, r9
 8009c46:	4650      	mov	r0, sl
 8009c48:	f002 fc72 	bl	800c530 <__ssprint_r>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f040 8137 	bne.w	8009ec0 <_svfprintf_r+0x418>
 8009c52:	ac25      	add	r4, sp, #148	; 0x94
 8009c54:	e77d      	b.n	8009b52 <_svfprintf_r+0xaa>
 8009c56:	4650      	mov	r0, sl
 8009c58:	f001 fa32 	bl	800b0c0 <_localeconv_r>
 8009c5c:	6843      	ldr	r3, [r0, #4]
 8009c5e:	9314      	str	r3, [sp, #80]	; 0x50
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f6 fb05 	bl	8000270 <strlen>
 8009c66:	9011      	str	r0, [sp, #68]	; 0x44
 8009c68:	4650      	mov	r0, sl
 8009c6a:	f001 fa29 	bl	800b0c0 <_localeconv_r>
 8009c6e:	6883      	ldr	r3, [r0, #8]
 8009c70:	9309      	str	r3, [sp, #36]	; 0x24
 8009c72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c74:	212b      	movs	r1, #43	; 0x2b
 8009c76:	b12b      	cbz	r3, 8009c84 <_svfprintf_r+0x1dc>
 8009c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7a:	b11b      	cbz	r3, 8009c84 <_svfprintf_r+0x1dc>
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b10b      	cbz	r3, 8009c84 <_svfprintf_r+0x1dc>
 8009c80:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8009c84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009c86:	e775      	b.n	8009b74 <_svfprintf_r+0xcc>
 8009c88:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1f9      	bne.n	8009c84 <_svfprintf_r+0x1dc>
 8009c90:	2320      	movs	r3, #32
 8009c92:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009c96:	e7f5      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009c98:	f04b 0b01 	orr.w	fp, fp, #1
 8009c9c:	e7f2      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	daed      	bge.n	8009c84 <_svfprintf_r+0x1dc>
 8009ca8:	425b      	negs	r3, r3
 8009caa:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cac:	f04b 0b04 	orr.w	fp, fp, #4
 8009cb0:	e7e8      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009cb2:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8009cb6:	e7e5      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cbe:	9207      	str	r2, [sp, #28]
 8009cc0:	2a2a      	cmp	r2, #42	; 0x2a
 8009cc2:	d10f      	bne.n	8009ce4 <_svfprintf_r+0x23c>
 8009cc4:	f855 2b04 	ldr.w	r2, [r5], #4
 8009cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8009cca:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8009cce:	e7d9      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009cd0:	fb07 2808 	mla	r8, r7, r8, r2
 8009cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd8:	9207      	str	r2, [sp, #28]
 8009cda:	9a07      	ldr	r2, [sp, #28]
 8009cdc:	3a30      	subs	r2, #48	; 0x30
 8009cde:	2a09      	cmp	r2, #9
 8009ce0:	d9f6      	bls.n	8009cd0 <_svfprintf_r+0x228>
 8009ce2:	e74b      	b.n	8009b7c <_svfprintf_r+0xd4>
 8009ce4:	f04f 0800 	mov.w	r8, #0
 8009ce8:	e7f7      	b.n	8009cda <_svfprintf_r+0x232>
 8009cea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8009cee:	e7c9      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf4:	920f      	str	r2, [sp, #60]	; 0x3c
 8009cf6:	9a07      	ldr	r2, [sp, #28]
 8009cf8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009cfa:	3a30      	subs	r2, #48	; 0x30
 8009cfc:	fb07 2200 	mla	r2, r7, r0, r2
 8009d00:	920f      	str	r2, [sp, #60]	; 0x3c
 8009d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d06:	9207      	str	r2, [sp, #28]
 8009d08:	3a30      	subs	r2, #48	; 0x30
 8009d0a:	2a09      	cmp	r2, #9
 8009d0c:	d9f3      	bls.n	8009cf6 <_svfprintf_r+0x24e>
 8009d0e:	e735      	b.n	8009b7c <_svfprintf_r+0xd4>
 8009d10:	f04b 0b08 	orr.w	fp, fp, #8
 8009d14:	e7b6      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	2b68      	cmp	r3, #104	; 0x68
 8009d1c:	bf01      	itttt	eq
 8009d1e:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8009d20:	3301      	addeq	r3, #1
 8009d22:	930a      	streq	r3, [sp, #40]	; 0x28
 8009d24:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8009d28:	bf18      	it	ne
 8009d2a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8009d2e:	e7a9      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b6c      	cmp	r3, #108	; 0x6c
 8009d36:	d105      	bne.n	8009d44 <_svfprintf_r+0x29c>
 8009d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8009d3e:	f04b 0b20 	orr.w	fp, fp, #32
 8009d42:	e79f      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009d44:	f04b 0b10 	orr.w	fp, fp, #16
 8009d48:	e79c      	b.n	8009c84 <_svfprintf_r+0x1dc>
 8009d4a:	bf00      	nop
 8009d4c:	f3af 8000 	nop.w
	...
 8009d58:	462a      	mov	r2, r5
 8009d5a:	f852 3b04 	ldr.w	r3, [r2], #4
 8009d5e:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009d62:	2300      	movs	r3, #0
 8009d64:	9206      	str	r2, [sp, #24]
 8009d66:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	461f      	mov	r7, r3
 8009d6e:	461e      	mov	r6, r3
 8009d70:	9308      	str	r3, [sp, #32]
 8009d72:	461d      	mov	r5, r3
 8009d74:	ab35      	add	r3, sp, #212	; 0xd4
 8009d76:	f04f 0801 	mov.w	r8, #1
 8009d7a:	9303      	str	r3, [sp, #12]
 8009d7c:	e1b9      	b.n	800a0f2 <_svfprintf_r+0x64a>
 8009d7e:	f04b 0b10 	orr.w	fp, fp, #16
 8009d82:	f01b 0f20 	tst.w	fp, #32
 8009d86:	d012      	beq.n	8009dae <_svfprintf_r+0x306>
 8009d88:	3507      	adds	r5, #7
 8009d8a:	f025 0307 	bic.w	r3, r5, #7
 8009d8e:	461a      	mov	r2, r3
 8009d90:	685e      	ldr	r6, [r3, #4]
 8009d92:	f852 5b08 	ldr.w	r5, [r2], #8
 8009d96:	9206      	str	r2, [sp, #24]
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	da06      	bge.n	8009daa <_svfprintf_r+0x302>
 8009d9c:	426d      	negs	r5, r5
 8009d9e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009da2:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8009da6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009daa:	2301      	movs	r3, #1
 8009dac:	e392      	b.n	800a4d4 <_svfprintf_r+0xa2c>
 8009dae:	462b      	mov	r3, r5
 8009db0:	f01b 0f10 	tst.w	fp, #16
 8009db4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009db8:	9306      	str	r3, [sp, #24]
 8009dba:	d002      	beq.n	8009dc2 <_svfprintf_r+0x31a>
 8009dbc:	4635      	mov	r5, r6
 8009dbe:	17f6      	asrs	r6, r6, #31
 8009dc0:	e7ea      	b.n	8009d98 <_svfprintf_r+0x2f0>
 8009dc2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8009dc6:	d003      	beq.n	8009dd0 <_svfprintf_r+0x328>
 8009dc8:	b235      	sxth	r5, r6
 8009dca:	f346 36c0 	sbfx	r6, r6, #15, #1
 8009dce:	e7e3      	b.n	8009d98 <_svfprintf_r+0x2f0>
 8009dd0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8009dd4:	d0f2      	beq.n	8009dbc <_svfprintf_r+0x314>
 8009dd6:	b275      	sxtb	r5, r6
 8009dd8:	f346 16c0 	sbfx	r6, r6, #7, #1
 8009ddc:	e7dc      	b.n	8009d98 <_svfprintf_r+0x2f0>
 8009dde:	3507      	adds	r5, #7
 8009de0:	f025 0307 	bic.w	r3, r5, #7
 8009de4:	ecb3 7b02 	vldmia	r3!, {d7}
 8009de8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009dec:	9306      	str	r3, [sp, #24]
 8009dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009df0:	ee09 3a10 	vmov	s18, r3
 8009df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009df6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dfa:	ee09 3a90 	vmov	s19, r3
 8009dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e02:	4b34      	ldr	r3, [pc, #208]	; (8009ed4 <_svfprintf_r+0x42c>)
 8009e04:	ec51 0b19 	vmov	r0, r1, d9
 8009e08:	f7f6 fe90 	bl	8000b2c <__aeabi_dcmpun>
 8009e0c:	bb18      	cbnz	r0, 8009e56 <_svfprintf_r+0x3ae>
 8009e0e:	4b31      	ldr	r3, [pc, #196]	; (8009ed4 <_svfprintf_r+0x42c>)
 8009e10:	ec51 0b19 	vmov	r0, r1, d9
 8009e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e18:	f7f6 fe6a 	bl	8000af0 <__aeabi_dcmple>
 8009e1c:	b9d8      	cbnz	r0, 8009e56 <_svfprintf_r+0x3ae>
 8009e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e22:	2200      	movs	r2, #0
 8009e24:	2300      	movs	r3, #0
 8009e26:	f7f6 fe59 	bl	8000adc <__aeabi_dcmplt>
 8009e2a:	b110      	cbz	r0, 8009e32 <_svfprintf_r+0x38a>
 8009e2c:	232d      	movs	r3, #45	; 0x2d
 8009e2e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009e32:	4a29      	ldr	r2, [pc, #164]	; (8009ed8 <_svfprintf_r+0x430>)
 8009e34:	4b29      	ldr	r3, [pc, #164]	; (8009edc <_svfprintf_r+0x434>)
 8009e36:	9907      	ldr	r1, [sp, #28]
 8009e38:	2947      	cmp	r1, #71	; 0x47
 8009e3a:	bfc8      	it	gt
 8009e3c:	461a      	movgt	r2, r3
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9203      	str	r2, [sp, #12]
 8009e42:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8009e46:	9304      	str	r3, [sp, #16]
 8009e48:	f04f 0803 	mov.w	r8, #3
 8009e4c:	461f      	mov	r7, r3
 8009e4e:	461e      	mov	r6, r3
 8009e50:	9308      	str	r3, [sp, #32]
 8009e52:	461d      	mov	r5, r3
 8009e54:	e14d      	b.n	800a0f2 <_svfprintf_r+0x64a>
 8009e56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f7f6 fe65 	bl	8000b2c <__aeabi_dcmpun>
 8009e62:	b140      	cbz	r0, 8009e76 <_svfprintf_r+0x3ce>
 8009e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e66:	4a1e      	ldr	r2, [pc, #120]	; (8009ee0 <_svfprintf_r+0x438>)
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bfbc      	itt	lt
 8009e6c:	232d      	movlt	r3, #45	; 0x2d
 8009e6e:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8009e72:	4b1c      	ldr	r3, [pc, #112]	; (8009ee4 <_svfprintf_r+0x43c>)
 8009e74:	e7df      	b.n	8009e36 <_svfprintf_r+0x38e>
 8009e76:	9b07      	ldr	r3, [sp, #28]
 8009e78:	f023 0320 	bic.w	r3, r3, #32
 8009e7c:	2b41      	cmp	r3, #65	; 0x41
 8009e7e:	9308      	str	r3, [sp, #32]
 8009e80:	d132      	bne.n	8009ee8 <_svfprintf_r+0x440>
 8009e82:	2330      	movs	r3, #48	; 0x30
 8009e84:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8009e88:	9b07      	ldr	r3, [sp, #28]
 8009e8a:	2b61      	cmp	r3, #97	; 0x61
 8009e8c:	bf0c      	ite	eq
 8009e8e:	2378      	moveq	r3, #120	; 0x78
 8009e90:	2358      	movne	r3, #88	; 0x58
 8009e92:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8009e96:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8009e9a:	f04b 0b02 	orr.w	fp, fp, #2
 8009e9e:	f340 8204 	ble.w	800a2aa <_svfprintf_r+0x802>
 8009ea2:	f108 0101 	add.w	r1, r8, #1
 8009ea6:	4650      	mov	r0, sl
 8009ea8:	f7ff fbb8 	bl	800961c <_malloc_r>
 8009eac:	9003      	str	r0, [sp, #12]
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f040 81ff 	bne.w	800a2b2 <_svfprintf_r+0x80a>
 8009eb4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ebc:	f8a9 300c 	strh.w	r3, [r9, #12]
 8009ec0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009ec4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eca:	bf18      	it	ne
 8009ecc:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8009ed0:	e610      	b.n	8009af4 <_svfprintf_r+0x4c>
 8009ed2:	bf00      	nop
 8009ed4:	7fefffff 	.word	0x7fefffff
 8009ed8:	0800e1dc 	.word	0x0800e1dc
 8009edc:	0800e1e0 	.word	0x0800e1e0
 8009ee0:	0800e1e4 	.word	0x0800e1e4
 8009ee4:	0800e1e8 	.word	0x0800e1e8
 8009ee8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009eec:	f000 81e4 	beq.w	800a2b8 <_svfprintf_r+0x810>
 8009ef0:	9b08      	ldr	r3, [sp, #32]
 8009ef2:	2b47      	cmp	r3, #71	; 0x47
 8009ef4:	f040 81e4 	bne.w	800a2c0 <_svfprintf_r+0x818>
 8009ef8:	f1b8 0f00 	cmp.w	r8, #0
 8009efc:	f040 81e0 	bne.w	800a2c0 <_svfprintf_r+0x818>
 8009f00:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f04:	f04f 0801 	mov.w	r8, #1
 8009f08:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8009f0c:	9310      	str	r3, [sp, #64]	; 0x40
 8009f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f280 81d7 	bge.w	800a2c4 <_svfprintf_r+0x81c>
 8009f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f18:	ee08 3a10 	vmov	s16, r3
 8009f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009f22:	ee08 3a90 	vmov	s17, r3
 8009f26:	232d      	movs	r3, #45	; 0x2d
 8009f28:	9318      	str	r3, [sp, #96]	; 0x60
 8009f2a:	9b08      	ldr	r3, [sp, #32]
 8009f2c:	2b41      	cmp	r3, #65	; 0x41
 8009f2e:	f040 81e7 	bne.w	800a300 <_svfprintf_r+0x858>
 8009f32:	eeb0 0a48 	vmov.f32	s0, s16
 8009f36:	eef0 0a68 	vmov.f32	s1, s17
 8009f3a:	a81c      	add	r0, sp, #112	; 0x70
 8009f3c:	f001 f8f4 	bl	800b128 <frexp>
 8009f40:	2200      	movs	r2, #0
 8009f42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009f46:	ec51 0b10 	vmov	r0, r1, d0
 8009f4a:	f7f6 fb55 	bl	80005f8 <__aeabi_dmul>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2300      	movs	r3, #0
 8009f52:	4606      	mov	r6, r0
 8009f54:	460f      	mov	r7, r1
 8009f56:	f7f6 fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f5a:	b108      	cbz	r0, 8009f60 <_svfprintf_r+0x4b8>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	931c      	str	r3, [sp, #112]	; 0x70
 8009f60:	4bac      	ldr	r3, [pc, #688]	; (800a214 <_svfprintf_r+0x76c>)
 8009f62:	4aad      	ldr	r2, [pc, #692]	; (800a218 <_svfprintf_r+0x770>)
 8009f64:	9907      	ldr	r1, [sp, #28]
 8009f66:	9d03      	ldr	r5, [sp, #12]
 8009f68:	2961      	cmp	r1, #97	; 0x61
 8009f6a:	bf18      	it	ne
 8009f6c:	461a      	movne	r2, r3
 8009f6e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009f72:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f74:	9305      	str	r3, [sp, #20]
 8009f76:	4ba9      	ldr	r3, [pc, #676]	; (800a21c <_svfprintf_r+0x774>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	4639      	mov	r1, r7
 8009f7e:	f7f6 fb3b 	bl	80005f8 <__aeabi_dmul>
 8009f82:	460f      	mov	r7, r1
 8009f84:	4606      	mov	r6, r0
 8009f86:	f7f6 fde7 	bl	8000b58 <__aeabi_d2iz>
 8009f8a:	9019      	str	r0, [sp, #100]	; 0x64
 8009f8c:	f7f6 faca 	bl	8000524 <__aeabi_i2d>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4630      	mov	r0, r6
 8009f96:	4639      	mov	r1, r7
 8009f98:	f7f6 f976 	bl	8000288 <__aeabi_dsub>
 8009f9c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fa0:	5c9b      	ldrb	r3, [r3, r2]
 8009fa2:	f805 3b01 	strb.w	r3, [r5], #1
 8009fa6:	9b05      	ldr	r3, [sp, #20]
 8009fa8:	9312      	str	r3, [sp, #72]	; 0x48
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	4606      	mov	r6, r0
 8009fae:	460f      	mov	r7, r1
 8009fb0:	d007      	beq.n	8009fc2 <_svfprintf_r+0x51a>
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	9305      	str	r3, [sp, #20]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f7f6 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d0d9      	beq.n	8009f76 <_svfprintf_r+0x4ce>
 8009fc2:	4b97      	ldr	r3, [pc, #604]	; (800a220 <_svfprintf_r+0x778>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	4639      	mov	r1, r7
 8009fca:	f7f6 fda5 	bl	8000b18 <__aeabi_dcmpgt>
 8009fce:	b960      	cbnz	r0, 8009fea <_svfprintf_r+0x542>
 8009fd0:	4b93      	ldr	r3, [pc, #588]	; (800a220 <_svfprintf_r+0x778>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	f7f6 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	f000 818a 	beq.w	800a2f6 <_svfprintf_r+0x84e>
 8009fe2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009fe4:	07de      	lsls	r6, r3, #31
 8009fe6:	f140 8186 	bpl.w	800a2f6 <_svfprintf_r+0x84e>
 8009fea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fec:	9520      	str	r5, [sp, #128]	; 0x80
 8009fee:	7bd9      	ldrb	r1, [r3, #15]
 8009ff0:	2030      	movs	r0, #48	; 0x30
 8009ff2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009ff4:	1e53      	subs	r3, r2, #1
 8009ff6:	9320      	str	r3, [sp, #128]	; 0x80
 8009ff8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8009ffc:	428b      	cmp	r3, r1
 8009ffe:	f000 8169 	beq.w	800a2d4 <_svfprintf_r+0x82c>
 800a002:	2b39      	cmp	r3, #57	; 0x39
 800a004:	bf0b      	itete	eq
 800a006:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800a008:	3301      	addne	r3, #1
 800a00a:	7a9b      	ldrbeq	r3, [r3, #10]
 800a00c:	b2db      	uxtbne	r3, r3
 800a00e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	1aeb      	subs	r3, r5, r3
 800a016:	9305      	str	r3, [sp, #20]
 800a018:	9b08      	ldr	r3, [sp, #32]
 800a01a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800a01c:	2b47      	cmp	r3, #71	; 0x47
 800a01e:	f040 81b9 	bne.w	800a394 <_svfprintf_r+0x8ec>
 800a022:	1ce8      	adds	r0, r5, #3
 800a024:	db02      	blt.n	800a02c <_svfprintf_r+0x584>
 800a026:	45a8      	cmp	r8, r5
 800a028:	f280 81d7 	bge.w	800a3da <_svfprintf_r+0x932>
 800a02c:	9b07      	ldr	r3, [sp, #28]
 800a02e:	3b02      	subs	r3, #2
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	9907      	ldr	r1, [sp, #28]
 800a034:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800a038:	f021 0120 	bic.w	r1, r1, #32
 800a03c:	2941      	cmp	r1, #65	; 0x41
 800a03e:	bf08      	it	eq
 800a040:	320f      	addeq	r2, #15
 800a042:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800a046:	bf06      	itte	eq
 800a048:	b2d2      	uxtbeq	r2, r2
 800a04a:	2101      	moveq	r1, #1
 800a04c:	2100      	movne	r1, #0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	931c      	str	r3, [sp, #112]	; 0x70
 800a052:	bfb8      	it	lt
 800a054:	f1c5 0301 	rsblt	r3, r5, #1
 800a058:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800a05c:	bfb4      	ite	lt
 800a05e:	222d      	movlt	r2, #45	; 0x2d
 800a060:	222b      	movge	r2, #43	; 0x2b
 800a062:	2b09      	cmp	r3, #9
 800a064:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800a068:	f340 81aa 	ble.w	800a3c0 <_svfprintf_r+0x918>
 800a06c:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800a070:	260a      	movs	r6, #10
 800a072:	4602      	mov	r2, r0
 800a074:	fb93 f5f6 	sdiv	r5, r3, r6
 800a078:	fb06 3115 	mls	r1, r6, r5, r3
 800a07c:	3130      	adds	r1, #48	; 0x30
 800a07e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a082:	4619      	mov	r1, r3
 800a084:	2963      	cmp	r1, #99	; 0x63
 800a086:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800a08a:	462b      	mov	r3, r5
 800a08c:	dcf1      	bgt.n	800a072 <_svfprintf_r+0x5ca>
 800a08e:	3330      	adds	r3, #48	; 0x30
 800a090:	1e91      	subs	r1, r2, #2
 800a092:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a096:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 800a09a:	460b      	mov	r3, r1
 800a09c:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800a0a0:	4283      	cmp	r3, r0
 800a0a2:	f0c0 8188 	bcc.w	800a3b6 <_svfprintf_r+0x90e>
 800a0a6:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 800a0aa:	1a9b      	subs	r3, r3, r2
 800a0ac:	4281      	cmp	r1, r0
 800a0ae:	bf88      	it	hi
 800a0b0:	2300      	movhi	r3, #0
 800a0b2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800a0b6:	441a      	add	r2, r3
 800a0b8:	ab1e      	add	r3, sp, #120	; 0x78
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	9a05      	ldr	r2, [sp, #20]
 800a0be:	9315      	str	r3, [sp, #84]	; 0x54
 800a0c0:	2a01      	cmp	r2, #1
 800a0c2:	eb03 0802 	add.w	r8, r3, r2
 800a0c6:	dc02      	bgt.n	800a0ce <_svfprintf_r+0x626>
 800a0c8:	f01b 0f01 	tst.w	fp, #1
 800a0cc:	d001      	beq.n	800a0d2 <_svfprintf_r+0x62a>
 800a0ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0d0:	4498      	add	r8, r3
 800a0d2:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800a0d6:	2600      	movs	r6, #0
 800a0d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0dc:	9310      	str	r3, [sp, #64]	; 0x40
 800a0de:	9608      	str	r6, [sp, #32]
 800a0e0:	4635      	mov	r5, r6
 800a0e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a0e4:	b113      	cbz	r3, 800a0ec <_svfprintf_r+0x644>
 800a0e6:	232d      	movs	r3, #45	; 0x2d
 800a0e8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a0ec:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800a0f0:	2700      	movs	r7, #0
 800a0f2:	4547      	cmp	r7, r8
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	bfb8      	it	lt
 800a0f8:	4643      	movlt	r3, r8
 800a0fa:	9310      	str	r3, [sp, #64]	; 0x40
 800a0fc:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800a100:	b113      	cbz	r3, 800a108 <_svfprintf_r+0x660>
 800a102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a104:	3301      	adds	r3, #1
 800a106:	9310      	str	r3, [sp, #64]	; 0x40
 800a108:	f01b 0302 	ands.w	r3, fp, #2
 800a10c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a10e:	bf1e      	ittt	ne
 800a110:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800a112:	3302      	addne	r3, #2
 800a114:	9310      	strne	r3, [sp, #64]	; 0x40
 800a116:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800a11a:	9318      	str	r3, [sp, #96]	; 0x60
 800a11c:	d122      	bne.n	800a164 <_svfprintf_r+0x6bc>
 800a11e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800a122:	1a9b      	subs	r3, r3, r2
 800a124:	2b00      	cmp	r3, #0
 800a126:	9312      	str	r3, [sp, #72]	; 0x48
 800a128:	dd1c      	ble.n	800a164 <_svfprintf_r+0x6bc>
 800a12a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a12c:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800a130:	2810      	cmp	r0, #16
 800a132:	483c      	ldr	r0, [pc, #240]	; (800a224 <_svfprintf_r+0x77c>)
 800a134:	6020      	str	r0, [r4, #0]
 800a136:	f102 0201 	add.w	r2, r2, #1
 800a13a:	f104 0108 	add.w	r1, r4, #8
 800a13e:	f300 82f7 	bgt.w	800a730 <_svfprintf_r+0xc88>
 800a142:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a144:	6060      	str	r0, [r4, #4]
 800a146:	4403      	add	r3, r0
 800a148:	2a07      	cmp	r2, #7
 800a14a:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a14e:	f340 8304 	ble.w	800a75a <_svfprintf_r+0xcb2>
 800a152:	aa22      	add	r2, sp, #136	; 0x88
 800a154:	4649      	mov	r1, r9
 800a156:	4650      	mov	r0, sl
 800a158:	f002 f9ea 	bl	800c530 <__ssprint_r>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f040 8637 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a162:	ac25      	add	r4, sp, #148	; 0x94
 800a164:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800a168:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a16a:	b16a      	cbz	r2, 800a188 <_svfprintf_r+0x6e0>
 800a16c:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800a170:	6022      	str	r2, [r4, #0]
 800a172:	2201      	movs	r2, #1
 800a174:	4413      	add	r3, r2
 800a176:	9324      	str	r3, [sp, #144]	; 0x90
 800a178:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a17a:	6062      	str	r2, [r4, #4]
 800a17c:	4413      	add	r3, r2
 800a17e:	2b07      	cmp	r3, #7
 800a180:	9323      	str	r3, [sp, #140]	; 0x8c
 800a182:	f300 82ec 	bgt.w	800a75e <_svfprintf_r+0xcb6>
 800a186:	3408      	adds	r4, #8
 800a188:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a18a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a18c:	b162      	cbz	r2, 800a1a8 <_svfprintf_r+0x700>
 800a18e:	aa1b      	add	r2, sp, #108	; 0x6c
 800a190:	6022      	str	r2, [r4, #0]
 800a192:	2202      	movs	r2, #2
 800a194:	4413      	add	r3, r2
 800a196:	9324      	str	r3, [sp, #144]	; 0x90
 800a198:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a19a:	6062      	str	r2, [r4, #4]
 800a19c:	3301      	adds	r3, #1
 800a19e:	2b07      	cmp	r3, #7
 800a1a0:	9323      	str	r3, [sp, #140]	; 0x8c
 800a1a2:	f300 82e6 	bgt.w	800a772 <_svfprintf_r+0xcca>
 800a1a6:	3408      	adds	r4, #8
 800a1a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a1aa:	2b80      	cmp	r3, #128	; 0x80
 800a1ac:	d122      	bne.n	800a1f4 <_svfprintf_r+0x74c>
 800a1ae:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	9312      	str	r3, [sp, #72]	; 0x48
 800a1b8:	dd1c      	ble.n	800a1f4 <_svfprintf_r+0x74c>
 800a1ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a1bc:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800a1c0:	2810      	cmp	r0, #16
 800a1c2:	4819      	ldr	r0, [pc, #100]	; (800a228 <_svfprintf_r+0x780>)
 800a1c4:	6020      	str	r0, [r4, #0]
 800a1c6:	f102 0201 	add.w	r2, r2, #1
 800a1ca:	f104 0108 	add.w	r1, r4, #8
 800a1ce:	f300 82da 	bgt.w	800a786 <_svfprintf_r+0xcde>
 800a1d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a1d4:	6060      	str	r0, [r4, #4]
 800a1d6:	4403      	add	r3, r0
 800a1d8:	2a07      	cmp	r2, #7
 800a1da:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a1de:	f340 82e7 	ble.w	800a7b0 <_svfprintf_r+0xd08>
 800a1e2:	aa22      	add	r2, sp, #136	; 0x88
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	4650      	mov	r0, sl
 800a1e8:	f002 f9a2 	bl	800c530 <__ssprint_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f040 85ef 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a1f2:	ac25      	add	r4, sp, #148	; 0x94
 800a1f4:	eba7 0708 	sub.w	r7, r7, r8
 800a1f8:	2f00      	cmp	r7, #0
 800a1fa:	dd27      	ble.n	800a24c <_svfprintf_r+0x7a4>
 800a1fc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a200:	4809      	ldr	r0, [pc, #36]	; (800a228 <_svfprintf_r+0x780>)
 800a202:	6020      	str	r0, [r4, #0]
 800a204:	2f10      	cmp	r7, #16
 800a206:	f103 0301 	add.w	r3, r3, #1
 800a20a:	f104 0108 	add.w	r1, r4, #8
 800a20e:	f300 82d1 	bgt.w	800a7b4 <_svfprintf_r+0xd0c>
 800a212:	e00b      	b.n	800a22c <_svfprintf_r+0x784>
 800a214:	0800e1fd 	.word	0x0800e1fd
 800a218:	0800e1ec 	.word	0x0800e1ec
 800a21c:	40300000 	.word	0x40300000
 800a220:	3fe00000 	.word	0x3fe00000
 800a224:	0800e210 	.word	0x0800e210
 800a228:	0800e220 	.word	0x0800e220
 800a22c:	6067      	str	r7, [r4, #4]
 800a22e:	2b07      	cmp	r3, #7
 800a230:	4417      	add	r7, r2
 800a232:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800a236:	f340 82d0 	ble.w	800a7da <_svfprintf_r+0xd32>
 800a23a:	aa22      	add	r2, sp, #136	; 0x88
 800a23c:	4649      	mov	r1, r9
 800a23e:	4650      	mov	r0, sl
 800a240:	f002 f976 	bl	800c530 <__ssprint_r>
 800a244:	2800      	cmp	r0, #0
 800a246:	f040 85c3 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a24a:	ac25      	add	r4, sp, #148	; 0x94
 800a24c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a250:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800a252:	f040 82c9 	bne.w	800a7e8 <_svfprintf_r+0xd40>
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	e9c4 3800 	strd	r3, r8, [r4]
 800a25c:	4447      	add	r7, r8
 800a25e:	9724      	str	r7, [sp, #144]	; 0x90
 800a260:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a262:	3301      	adds	r3, #1
 800a264:	2b07      	cmp	r3, #7
 800a266:	9323      	str	r3, [sp, #140]	; 0x8c
 800a268:	f300 8303 	bgt.w	800a872 <_svfprintf_r+0xdca>
 800a26c:	3408      	adds	r4, #8
 800a26e:	f01b 0f04 	tst.w	fp, #4
 800a272:	f040 858f 	bne.w	800ad94 <_svfprintf_r+0x12ec>
 800a276:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800a27a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a27c:	428a      	cmp	r2, r1
 800a27e:	bfac      	ite	ge
 800a280:	189b      	addge	r3, r3, r2
 800a282:	185b      	addlt	r3, r3, r1
 800a284:	930b      	str	r3, [sp, #44]	; 0x2c
 800a286:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a288:	b13b      	cbz	r3, 800a29a <_svfprintf_r+0x7f2>
 800a28a:	aa22      	add	r2, sp, #136	; 0x88
 800a28c:	4649      	mov	r1, r9
 800a28e:	4650      	mov	r0, sl
 800a290:	f002 f94e 	bl	800c530 <__ssprint_r>
 800a294:	2800      	cmp	r0, #0
 800a296:	f040 859b 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a29a:	2300      	movs	r3, #0
 800a29c:	9323      	str	r3, [sp, #140]	; 0x8c
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f040 85b1 	bne.w	800ae08 <_svfprintf_r+0x1360>
 800a2a6:	ac25      	add	r4, sp, #148	; 0x94
 800a2a8:	e0e7      	b.n	800a47a <_svfprintf_r+0x9d2>
 800a2aa:	ab35      	add	r3, sp, #212	; 0xd4
 800a2ac:	9004      	str	r0, [sp, #16]
 800a2ae:	9303      	str	r3, [sp, #12]
 800a2b0:	e62a      	b.n	8009f08 <_svfprintf_r+0x460>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	e627      	b.n	8009f08 <_svfprintf_r+0x460>
 800a2b8:	9004      	str	r0, [sp, #16]
 800a2ba:	f04f 0806 	mov.w	r8, #6
 800a2be:	e623      	b.n	8009f08 <_svfprintf_r+0x460>
 800a2c0:	9004      	str	r0, [sp, #16]
 800a2c2:	e621      	b.n	8009f08 <_svfprintf_r+0x460>
 800a2c4:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	eeb0 8a47 	vmov.f32	s16, s14
 800a2ce:	eef0 8a67 	vmov.f32	s17, s15
 800a2d2:	e629      	b.n	8009f28 <_svfprintf_r+0x480>
 800a2d4:	f802 0c01 	strb.w	r0, [r2, #-1]
 800a2d8:	e68b      	b.n	8009ff2 <_svfprintf_r+0x54a>
 800a2da:	f803 0b01 	strb.w	r0, [r3], #1
 800a2de:	1aca      	subs	r2, r1, r3
 800a2e0:	2a00      	cmp	r2, #0
 800a2e2:	dafa      	bge.n	800a2da <_svfprintf_r+0x832>
 800a2e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2e8:	3201      	adds	r2, #1
 800a2ea:	f103 0301 	add.w	r3, r3, #1
 800a2ee:	bfb8      	it	lt
 800a2f0:	2300      	movlt	r3, #0
 800a2f2:	441d      	add	r5, r3
 800a2f4:	e68d      	b.n	800a012 <_svfprintf_r+0x56a>
 800a2f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2f8:	462b      	mov	r3, r5
 800a2fa:	18a9      	adds	r1, r5, r2
 800a2fc:	2030      	movs	r0, #48	; 0x30
 800a2fe:	e7ee      	b.n	800a2de <_svfprintf_r+0x836>
 800a300:	9b08      	ldr	r3, [sp, #32]
 800a302:	2b46      	cmp	r3, #70	; 0x46
 800a304:	d005      	beq.n	800a312 <_svfprintf_r+0x86a>
 800a306:	2b45      	cmp	r3, #69	; 0x45
 800a308:	d11d      	bne.n	800a346 <_svfprintf_r+0x89e>
 800a30a:	f108 0501 	add.w	r5, r8, #1
 800a30e:	2102      	movs	r1, #2
 800a310:	e001      	b.n	800a316 <_svfprintf_r+0x86e>
 800a312:	4645      	mov	r5, r8
 800a314:	2103      	movs	r1, #3
 800a316:	ab20      	add	r3, sp, #128	; 0x80
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	ab1d      	add	r3, sp, #116	; 0x74
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	462a      	mov	r2, r5
 800a320:	ab1c      	add	r3, sp, #112	; 0x70
 800a322:	4650      	mov	r0, sl
 800a324:	eeb0 0a48 	vmov.f32	s0, s16
 800a328:	eef0 0a68 	vmov.f32	s1, s17
 800a32c:	f000 fffc 	bl	800b328 <_dtoa_r>
 800a330:	9b08      	ldr	r3, [sp, #32]
 800a332:	9003      	str	r0, [sp, #12]
 800a334:	2b47      	cmp	r3, #71	; 0x47
 800a336:	d108      	bne.n	800a34a <_svfprintf_r+0x8a2>
 800a338:	f01b 0f01 	tst.w	fp, #1
 800a33c:	d105      	bne.n	800a34a <_svfprintf_r+0x8a2>
 800a33e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a340:	9a03      	ldr	r2, [sp, #12]
 800a342:	1a9b      	subs	r3, r3, r2
 800a344:	e667      	b.n	800a016 <_svfprintf_r+0x56e>
 800a346:	4645      	mov	r5, r8
 800a348:	e7e1      	b.n	800a30e <_svfprintf_r+0x866>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	195e      	adds	r6, r3, r5
 800a34e:	9b08      	ldr	r3, [sp, #32]
 800a350:	2b46      	cmp	r3, #70	; 0x46
 800a352:	d10f      	bne.n	800a374 <_svfprintf_r+0x8cc>
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b30      	cmp	r3, #48	; 0x30
 800a35a:	d109      	bne.n	800a370 <_svfprintf_r+0x8c8>
 800a35c:	ec51 0b18 	vmov	r0, r1, d8
 800a360:	2200      	movs	r2, #0
 800a362:	2300      	movs	r3, #0
 800a364:	f7f6 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a368:	b910      	cbnz	r0, 800a370 <_svfprintf_r+0x8c8>
 800a36a:	f1c5 0501 	rsb	r5, r5, #1
 800a36e:	951c      	str	r5, [sp, #112]	; 0x70
 800a370:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a372:	441e      	add	r6, r3
 800a374:	ec51 0b18 	vmov	r0, r1, d8
 800a378:	2200      	movs	r2, #0
 800a37a:	2300      	movs	r3, #0
 800a37c:	f7f6 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a380:	b100      	cbz	r0, 800a384 <_svfprintf_r+0x8dc>
 800a382:	9620      	str	r6, [sp, #128]	; 0x80
 800a384:	2230      	movs	r2, #48	; 0x30
 800a386:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a388:	429e      	cmp	r6, r3
 800a38a:	d9d8      	bls.n	800a33e <_svfprintf_r+0x896>
 800a38c:	1c59      	adds	r1, r3, #1
 800a38e:	9120      	str	r1, [sp, #128]	; 0x80
 800a390:	701a      	strb	r2, [r3, #0]
 800a392:	e7f8      	b.n	800a386 <_svfprintf_r+0x8de>
 800a394:	9b08      	ldr	r3, [sp, #32]
 800a396:	2b46      	cmp	r3, #70	; 0x46
 800a398:	f47f ae4b 	bne.w	800a032 <_svfprintf_r+0x58a>
 800a39c:	f00b 0301 	and.w	r3, fp, #1
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	ea43 0308 	orr.w	r3, r3, r8
 800a3a6:	dd25      	ble.n	800a3f4 <_svfprintf_r+0x94c>
 800a3a8:	b383      	cbz	r3, 800a40c <_svfprintf_r+0x964>
 800a3aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3ac:	18eb      	adds	r3, r5, r3
 800a3ae:	4498      	add	r8, r3
 800a3b0:	2366      	movs	r3, #102	; 0x66
 800a3b2:	9307      	str	r3, [sp, #28]
 800a3b4:	e030      	b.n	800a418 <_svfprintf_r+0x970>
 800a3b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a3ba:	f805 6f01 	strb.w	r6, [r5, #1]!
 800a3be:	e66f      	b.n	800a0a0 <_svfprintf_r+0x5f8>
 800a3c0:	b941      	cbnz	r1, 800a3d4 <_svfprintf_r+0x92c>
 800a3c2:	2230      	movs	r2, #48	; 0x30
 800a3c4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800a3c8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800a3cc:	3330      	adds	r3, #48	; 0x30
 800a3ce:	f802 3b01 	strb.w	r3, [r2], #1
 800a3d2:	e671      	b.n	800a0b8 <_svfprintf_r+0x610>
 800a3d4:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800a3d8:	e7f8      	b.n	800a3cc <_svfprintf_r+0x924>
 800a3da:	9b05      	ldr	r3, [sp, #20]
 800a3dc:	42ab      	cmp	r3, r5
 800a3de:	dd0d      	ble.n	800a3fc <_svfprintf_r+0x954>
 800a3e0:	9b05      	ldr	r3, [sp, #20]
 800a3e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3e4:	2d00      	cmp	r5, #0
 800a3e6:	eb03 0802 	add.w	r8, r3, r2
 800a3ea:	dc0d      	bgt.n	800a408 <_svfprintf_r+0x960>
 800a3ec:	f1c5 0301 	rsb	r3, r5, #1
 800a3f0:	4498      	add	r8, r3
 800a3f2:	e009      	b.n	800a408 <_svfprintf_r+0x960>
 800a3f4:	b163      	cbz	r3, 800a410 <_svfprintf_r+0x968>
 800a3f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	e7d8      	b.n	800a3ae <_svfprintf_r+0x906>
 800a3fc:	f01b 0f01 	tst.w	fp, #1
 800a400:	d01d      	beq.n	800a43e <_svfprintf_r+0x996>
 800a402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a404:	eb05 0803 	add.w	r8, r5, r3
 800a408:	2367      	movs	r3, #103	; 0x67
 800a40a:	e7d2      	b.n	800a3b2 <_svfprintf_r+0x90a>
 800a40c:	46a8      	mov	r8, r5
 800a40e:	e7cf      	b.n	800a3b0 <_svfprintf_r+0x908>
 800a410:	2366      	movs	r3, #102	; 0x66
 800a412:	9307      	str	r3, [sp, #28]
 800a414:	f04f 0801 	mov.w	r8, #1
 800a418:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800a41c:	9308      	str	r3, [sp, #32]
 800a41e:	d01f      	beq.n	800a460 <_svfprintf_r+0x9b8>
 800a420:	2600      	movs	r6, #0
 800a422:	2d00      	cmp	r5, #0
 800a424:	9608      	str	r6, [sp, #32]
 800a426:	f77f ae5c 	ble.w	800a0e2 <_svfprintf_r+0x63a>
 800a42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2bff      	cmp	r3, #255	; 0xff
 800a430:	d107      	bne.n	800a442 <_svfprintf_r+0x99a>
 800a432:	9b08      	ldr	r3, [sp, #32]
 800a434:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a436:	4433      	add	r3, r6
 800a438:	fb02 8803 	mla	r8, r2, r3, r8
 800a43c:	e651      	b.n	800a0e2 <_svfprintf_r+0x63a>
 800a43e:	46a8      	mov	r8, r5
 800a440:	e7e2      	b.n	800a408 <_svfprintf_r+0x960>
 800a442:	42ab      	cmp	r3, r5
 800a444:	daf5      	bge.n	800a432 <_svfprintf_r+0x98a>
 800a446:	1aed      	subs	r5, r5, r3
 800a448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a44a:	785b      	ldrb	r3, [r3, #1]
 800a44c:	b133      	cbz	r3, 800a45c <_svfprintf_r+0x9b4>
 800a44e:	9b08      	ldr	r3, [sp, #32]
 800a450:	3301      	adds	r3, #1
 800a452:	9308      	str	r3, [sp, #32]
 800a454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a456:	3301      	adds	r3, #1
 800a458:	9309      	str	r3, [sp, #36]	; 0x24
 800a45a:	e7e6      	b.n	800a42a <_svfprintf_r+0x982>
 800a45c:	3601      	adds	r6, #1
 800a45e:	e7e4      	b.n	800a42a <_svfprintf_r+0x982>
 800a460:	9e08      	ldr	r6, [sp, #32]
 800a462:	e63e      	b.n	800a0e2 <_svfprintf_r+0x63a>
 800a464:	1d2b      	adds	r3, r5, #4
 800a466:	f01b 0f20 	tst.w	fp, #32
 800a46a:	9306      	str	r3, [sp, #24]
 800a46c:	d00a      	beq.n	800a484 <_svfprintf_r+0x9dc>
 800a46e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a474:	17d2      	asrs	r2, r2, #31
 800a476:	e9c3 1200 	strd	r1, r2, [r3]
 800a47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47c:	9d06      	ldr	r5, [sp, #24]
 800a47e:	9303      	str	r3, [sp, #12]
 800a480:	f7ff bb52 	b.w	8009b28 <_svfprintf_r+0x80>
 800a484:	f01b 0f10 	tst.w	fp, #16
 800a488:	d003      	beq.n	800a492 <_svfprintf_r+0x9ea>
 800a48a:	682b      	ldr	r3, [r5, #0]
 800a48c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a48e:	601a      	str	r2, [r3, #0]
 800a490:	e7f3      	b.n	800a47a <_svfprintf_r+0x9d2>
 800a492:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a496:	d003      	beq.n	800a4a0 <_svfprintf_r+0x9f8>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a49c:	801a      	strh	r2, [r3, #0]
 800a49e:	e7ec      	b.n	800a47a <_svfprintf_r+0x9d2>
 800a4a0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800a4a4:	d0f1      	beq.n	800a48a <_svfprintf_r+0x9e2>
 800a4a6:	682b      	ldr	r3, [r5, #0]
 800a4a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4aa:	701a      	strb	r2, [r3, #0]
 800a4ac:	e7e5      	b.n	800a47a <_svfprintf_r+0x9d2>
 800a4ae:	f04b 0b10 	orr.w	fp, fp, #16
 800a4b2:	f01b 0320 	ands.w	r3, fp, #32
 800a4b6:	d020      	beq.n	800a4fa <_svfprintf_r+0xa52>
 800a4b8:	3507      	adds	r5, #7
 800a4ba:	f025 0307 	bic.w	r3, r5, #7
 800a4be:	461a      	mov	r2, r3
 800a4c0:	685e      	ldr	r6, [r3, #4]
 800a4c2:	f852 5b08 	ldr.w	r5, [r2], #8
 800a4c6:	9206      	str	r2, [sp, #24]
 800a4c8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800a4d4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a4d8:	f000 84a7 	beq.w	800ae2a <_svfprintf_r+0x1382>
 800a4dc:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800a4e0:	9204      	str	r2, [sp, #16]
 800a4e2:	ea55 0206 	orrs.w	r2, r5, r6
 800a4e6:	f040 84a6 	bne.w	800ae36 <_svfprintf_r+0x138e>
 800a4ea:	f1b8 0f00 	cmp.w	r8, #0
 800a4ee:	f000 8107 	beq.w	800a700 <_svfprintf_r+0xc58>
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	f040 84a2 	bne.w	800ae3c <_svfprintf_r+0x1394>
 800a4f8:	e0a3      	b.n	800a642 <_svfprintf_r+0xb9a>
 800a4fa:	462a      	mov	r2, r5
 800a4fc:	f01b 0610 	ands.w	r6, fp, #16
 800a500:	f852 5b04 	ldr.w	r5, [r2], #4
 800a504:	9206      	str	r2, [sp, #24]
 800a506:	d001      	beq.n	800a50c <_svfprintf_r+0xa64>
 800a508:	461e      	mov	r6, r3
 800a50a:	e7dd      	b.n	800a4c8 <_svfprintf_r+0xa20>
 800a50c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800a510:	d001      	beq.n	800a516 <_svfprintf_r+0xa6e>
 800a512:	b2ad      	uxth	r5, r5
 800a514:	e7d8      	b.n	800a4c8 <_svfprintf_r+0xa20>
 800a516:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800a51a:	d0d5      	beq.n	800a4c8 <_svfprintf_r+0xa20>
 800a51c:	b2ed      	uxtb	r5, r5
 800a51e:	e7f3      	b.n	800a508 <_svfprintf_r+0xa60>
 800a520:	462b      	mov	r3, r5
 800a522:	2278      	movs	r2, #120	; 0x78
 800a524:	f853 5b04 	ldr.w	r5, [r3], #4
 800a528:	9306      	str	r3, [sp, #24]
 800a52a:	f647 0330 	movw	r3, #30768	; 0x7830
 800a52e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800a532:	4bab      	ldr	r3, [pc, #684]	; (800a7e0 <_svfprintf_r+0xd38>)
 800a534:	9316      	str	r3, [sp, #88]	; 0x58
 800a536:	2600      	movs	r6, #0
 800a538:	f04b 0b02 	orr.w	fp, fp, #2
 800a53c:	2302      	movs	r3, #2
 800a53e:	9207      	str	r2, [sp, #28]
 800a540:	e7c5      	b.n	800a4ce <_svfprintf_r+0xa26>
 800a542:	462b      	mov	r3, r5
 800a544:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a548:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54c:	9203      	str	r2, [sp, #12]
 800a54e:	f04f 0500 	mov.w	r5, #0
 800a552:	9306      	str	r3, [sp, #24]
 800a554:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800a558:	d010      	beq.n	800a57c <_svfprintf_r+0xad4>
 800a55a:	9803      	ldr	r0, [sp, #12]
 800a55c:	4642      	mov	r2, r8
 800a55e:	4629      	mov	r1, r5
 800a560:	f7f5 fe36 	bl	80001d0 <memchr>
 800a564:	9004      	str	r0, [sp, #16]
 800a566:	2800      	cmp	r0, #0
 800a568:	f000 80e0 	beq.w	800a72c <_svfprintf_r+0xc84>
 800a56c:	9a03      	ldr	r2, [sp, #12]
 800a56e:	9504      	str	r5, [sp, #16]
 800a570:	eba0 0802 	sub.w	r8, r0, r2
 800a574:	462f      	mov	r7, r5
 800a576:	462e      	mov	r6, r5
 800a578:	9508      	str	r5, [sp, #32]
 800a57a:	e5ba      	b.n	800a0f2 <_svfprintf_r+0x64a>
 800a57c:	9803      	ldr	r0, [sp, #12]
 800a57e:	f7f5 fe77 	bl	8000270 <strlen>
 800a582:	462f      	mov	r7, r5
 800a584:	4680      	mov	r8, r0
 800a586:	9504      	str	r5, [sp, #16]
 800a588:	463e      	mov	r6, r7
 800a58a:	463b      	mov	r3, r7
 800a58c:	e460      	b.n	8009e50 <_svfprintf_r+0x3a8>
 800a58e:	f04b 0b10 	orr.w	fp, fp, #16
 800a592:	f01b 0320 	ands.w	r3, fp, #32
 800a596:	d009      	beq.n	800a5ac <_svfprintf_r+0xb04>
 800a598:	3507      	adds	r5, #7
 800a59a:	f025 0307 	bic.w	r3, r5, #7
 800a59e:	461a      	mov	r2, r3
 800a5a0:	685e      	ldr	r6, [r3, #4]
 800a5a2:	f852 5b08 	ldr.w	r5, [r2], #8
 800a5a6:	9206      	str	r2, [sp, #24]
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e790      	b.n	800a4ce <_svfprintf_r+0xa26>
 800a5ac:	462a      	mov	r2, r5
 800a5ae:	f01b 0610 	ands.w	r6, fp, #16
 800a5b2:	f852 5b04 	ldr.w	r5, [r2], #4
 800a5b6:	9206      	str	r2, [sp, #24]
 800a5b8:	d001      	beq.n	800a5be <_svfprintf_r+0xb16>
 800a5ba:	461e      	mov	r6, r3
 800a5bc:	e7f4      	b.n	800a5a8 <_svfprintf_r+0xb00>
 800a5be:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800a5c2:	d001      	beq.n	800a5c8 <_svfprintf_r+0xb20>
 800a5c4:	b2ad      	uxth	r5, r5
 800a5c6:	e7ef      	b.n	800a5a8 <_svfprintf_r+0xb00>
 800a5c8:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800a5cc:	d0ec      	beq.n	800a5a8 <_svfprintf_r+0xb00>
 800a5ce:	b2ed      	uxtb	r5, r5
 800a5d0:	e7f3      	b.n	800a5ba <_svfprintf_r+0xb12>
 800a5d2:	4b84      	ldr	r3, [pc, #528]	; (800a7e4 <_svfprintf_r+0xd3c>)
 800a5d4:	9316      	str	r3, [sp, #88]	; 0x58
 800a5d6:	f01b 0320 	ands.w	r3, fp, #32
 800a5da:	d01b      	beq.n	800a614 <_svfprintf_r+0xb6c>
 800a5dc:	3507      	adds	r5, #7
 800a5de:	f025 0307 	bic.w	r3, r5, #7
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	685e      	ldr	r6, [r3, #4]
 800a5e6:	f852 5b08 	ldr.w	r5, [r2], #8
 800a5ea:	9206      	str	r2, [sp, #24]
 800a5ec:	f01b 0f01 	tst.w	fp, #1
 800a5f0:	d00a      	beq.n	800a608 <_svfprintf_r+0xb60>
 800a5f2:	ea55 0306 	orrs.w	r3, r5, r6
 800a5f6:	d007      	beq.n	800a608 <_svfprintf_r+0xb60>
 800a5f8:	2330      	movs	r3, #48	; 0x30
 800a5fa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800a5fe:	9b07      	ldr	r3, [sp, #28]
 800a600:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800a604:	f04b 0b02 	orr.w	fp, fp, #2
 800a608:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800a60c:	2302      	movs	r3, #2
 800a60e:	e75e      	b.n	800a4ce <_svfprintf_r+0xa26>
 800a610:	4b73      	ldr	r3, [pc, #460]	; (800a7e0 <_svfprintf_r+0xd38>)
 800a612:	e7df      	b.n	800a5d4 <_svfprintf_r+0xb2c>
 800a614:	462a      	mov	r2, r5
 800a616:	f01b 0610 	ands.w	r6, fp, #16
 800a61a:	f852 5b04 	ldr.w	r5, [r2], #4
 800a61e:	9206      	str	r2, [sp, #24]
 800a620:	d001      	beq.n	800a626 <_svfprintf_r+0xb7e>
 800a622:	461e      	mov	r6, r3
 800a624:	e7e2      	b.n	800a5ec <_svfprintf_r+0xb44>
 800a626:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800a62a:	d001      	beq.n	800a630 <_svfprintf_r+0xb88>
 800a62c:	b2ad      	uxth	r5, r5
 800a62e:	e7dd      	b.n	800a5ec <_svfprintf_r+0xb44>
 800a630:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800a634:	d0da      	beq.n	800a5ec <_svfprintf_r+0xb44>
 800a636:	b2ed      	uxtb	r5, r5
 800a638:	e7f3      	b.n	800a622 <_svfprintf_r+0xb7a>
 800a63a:	2d0a      	cmp	r5, #10
 800a63c:	f176 0300 	sbcs.w	r3, r6, #0
 800a640:	d206      	bcs.n	800a650 <_svfprintf_r+0xba8>
 800a642:	3530      	adds	r5, #48	; 0x30
 800a644:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 800a648:	f20d 1337 	addw	r3, sp, #311	; 0x137
 800a64c:	f000 bc16 	b.w	800ae7c <_svfprintf_r+0x13d4>
 800a650:	2300      	movs	r3, #0
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	9b04      	ldr	r3, [sp, #16]
 800a656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a65a:	af4e      	add	r7, sp, #312	; 0x138
 800a65c:	9308      	str	r3, [sp, #32]
 800a65e:	220a      	movs	r2, #10
 800a660:	2300      	movs	r3, #0
 800a662:	4628      	mov	r0, r5
 800a664:	4631      	mov	r1, r6
 800a666:	f7f6 fa9f 	bl	8000ba8 <__aeabi_uldivmod>
 800a66a:	1e7b      	subs	r3, r7, #1
 800a66c:	9303      	str	r3, [sp, #12]
 800a66e:	9b05      	ldr	r3, [sp, #20]
 800a670:	9010      	str	r0, [sp, #64]	; 0x40
 800a672:	3301      	adds	r3, #1
 800a674:	9305      	str	r3, [sp, #20]
 800a676:	9b08      	ldr	r3, [sp, #32]
 800a678:	3230      	adds	r2, #48	; 0x30
 800a67a:	468b      	mov	fp, r1
 800a67c:	f807 2c01 	strb.w	r2, [r7, #-1]
 800a680:	b1d3      	cbz	r3, 800a6b8 <_svfprintf_r+0xc10>
 800a682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a684:	9a05      	ldr	r2, [sp, #20]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d115      	bne.n	800a6b8 <_svfprintf_r+0xc10>
 800a68c:	2aff      	cmp	r2, #255	; 0xff
 800a68e:	d013      	beq.n	800a6b8 <_svfprintf_r+0xc10>
 800a690:	2d0a      	cmp	r5, #10
 800a692:	f176 0300 	sbcs.w	r3, r6, #0
 800a696:	d30f      	bcc.n	800a6b8 <_svfprintf_r+0xc10>
 800a698:	9b03      	ldr	r3, [sp, #12]
 800a69a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a69c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a69e:	1a9b      	subs	r3, r3, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	9303      	str	r3, [sp, #12]
 800a6a4:	f000 fcf9 	bl	800b09a <strncpy>
 800a6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6aa:	785b      	ldrb	r3, [r3, #1]
 800a6ac:	b11b      	cbz	r3, 800a6b6 <_svfprintf_r+0xc0e>
 800a6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	9305      	str	r3, [sp, #20]
 800a6b8:	2d0a      	cmp	r5, #10
 800a6ba:	f176 0600 	sbcs.w	r6, r6, #0
 800a6be:	d20b      	bcs.n	800a6d8 <_svfprintf_r+0xc30>
 800a6c0:	9b03      	ldr	r3, [sp, #12]
 800a6c2:	f8dd b010 	ldr.w	fp, [sp, #16]
 800a6c6:	aa4e      	add	r2, sp, #312	; 0x138
 800a6c8:	4647      	mov	r7, r8
 800a6ca:	eba2 0803 	sub.w	r8, r2, r3
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9304      	str	r3, [sp, #16]
 800a6d2:	461e      	mov	r6, r3
 800a6d4:	f7ff bbbc 	b.w	8009e50 <_svfprintf_r+0x3a8>
 800a6d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a6da:	9f03      	ldr	r7, [sp, #12]
 800a6dc:	465e      	mov	r6, fp
 800a6de:	e7be      	b.n	800a65e <_svfprintf_r+0xbb6>
 800a6e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a6e2:	f005 030f 	and.w	r3, r5, #15
 800a6e6:	092d      	lsrs	r5, r5, #4
 800a6e8:	5cd3      	ldrb	r3, [r2, r3]
 800a6ea:	9a03      	ldr	r2, [sp, #12]
 800a6ec:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 800a6f0:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800a6f4:	0936      	lsrs	r6, r6, #4
 800a6f6:	ea55 0306 	orrs.w	r3, r5, r6
 800a6fa:	9203      	str	r2, [sp, #12]
 800a6fc:	d1f0      	bne.n	800a6e0 <_svfprintf_r+0xc38>
 800a6fe:	e7df      	b.n	800a6c0 <_svfprintf_r+0xc18>
 800a700:	b933      	cbnz	r3, 800a710 <_svfprintf_r+0xc68>
 800a702:	f01b 0f01 	tst.w	fp, #1
 800a706:	d003      	beq.n	800a710 <_svfprintf_r+0xc68>
 800a708:	2330      	movs	r3, #48	; 0x30
 800a70a:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800a70e:	e79b      	b.n	800a648 <_svfprintf_r+0xba0>
 800a710:	ab4e      	add	r3, sp, #312	; 0x138
 800a712:	e3b3      	b.n	800ae7c <_svfprintf_r+0x13d4>
 800a714:	9b07      	ldr	r3, [sp, #28]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 837c 	beq.w	800ae14 <_svfprintf_r+0x136c>
 800a71c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800a720:	2300      	movs	r3, #0
 800a722:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a726:	9506      	str	r5, [sp, #24]
 800a728:	f7ff bb1f 	b.w	8009d6a <_svfprintf_r+0x2c2>
 800a72c:	9f04      	ldr	r7, [sp, #16]
 800a72e:	e72b      	b.n	800a588 <_svfprintf_r+0xae0>
 800a730:	2010      	movs	r0, #16
 800a732:	4403      	add	r3, r0
 800a734:	2a07      	cmp	r2, #7
 800a736:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a73a:	6060      	str	r0, [r4, #4]
 800a73c:	dd08      	ble.n	800a750 <_svfprintf_r+0xca8>
 800a73e:	aa22      	add	r2, sp, #136	; 0x88
 800a740:	4649      	mov	r1, r9
 800a742:	4650      	mov	r0, sl
 800a744:	f001 fef4 	bl	800c530 <__ssprint_r>
 800a748:	2800      	cmp	r0, #0
 800a74a:	f040 8341 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a74e:	a925      	add	r1, sp, #148	; 0x94
 800a750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a752:	3b10      	subs	r3, #16
 800a754:	9312      	str	r3, [sp, #72]	; 0x48
 800a756:	460c      	mov	r4, r1
 800a758:	e4e7      	b.n	800a12a <_svfprintf_r+0x682>
 800a75a:	460c      	mov	r4, r1
 800a75c:	e502      	b.n	800a164 <_svfprintf_r+0x6bc>
 800a75e:	aa22      	add	r2, sp, #136	; 0x88
 800a760:	4649      	mov	r1, r9
 800a762:	4650      	mov	r0, sl
 800a764:	f001 fee4 	bl	800c530 <__ssprint_r>
 800a768:	2800      	cmp	r0, #0
 800a76a:	f040 8331 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a76e:	ac25      	add	r4, sp, #148	; 0x94
 800a770:	e50a      	b.n	800a188 <_svfprintf_r+0x6e0>
 800a772:	aa22      	add	r2, sp, #136	; 0x88
 800a774:	4649      	mov	r1, r9
 800a776:	4650      	mov	r0, sl
 800a778:	f001 feda 	bl	800c530 <__ssprint_r>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	f040 8327 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a782:	ac25      	add	r4, sp, #148	; 0x94
 800a784:	e510      	b.n	800a1a8 <_svfprintf_r+0x700>
 800a786:	2010      	movs	r0, #16
 800a788:	4403      	add	r3, r0
 800a78a:	2a07      	cmp	r2, #7
 800a78c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a790:	6060      	str	r0, [r4, #4]
 800a792:	dd08      	ble.n	800a7a6 <_svfprintf_r+0xcfe>
 800a794:	aa22      	add	r2, sp, #136	; 0x88
 800a796:	4649      	mov	r1, r9
 800a798:	4650      	mov	r0, sl
 800a79a:	f001 fec9 	bl	800c530 <__ssprint_r>
 800a79e:	2800      	cmp	r0, #0
 800a7a0:	f040 8316 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a7a4:	a925      	add	r1, sp, #148	; 0x94
 800a7a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7a8:	3b10      	subs	r3, #16
 800a7aa:	9312      	str	r3, [sp, #72]	; 0x48
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	e504      	b.n	800a1ba <_svfprintf_r+0x712>
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	e51f      	b.n	800a1f4 <_svfprintf_r+0x74c>
 800a7b4:	2010      	movs	r0, #16
 800a7b6:	4402      	add	r2, r0
 800a7b8:	2b07      	cmp	r3, #7
 800a7ba:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a7be:	6060      	str	r0, [r4, #4]
 800a7c0:	dd08      	ble.n	800a7d4 <_svfprintf_r+0xd2c>
 800a7c2:	aa22      	add	r2, sp, #136	; 0x88
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	4650      	mov	r0, sl
 800a7c8:	f001 feb2 	bl	800c530 <__ssprint_r>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	f040 82ff 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a7d2:	a925      	add	r1, sp, #148	; 0x94
 800a7d4:	3f10      	subs	r7, #16
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	e510      	b.n	800a1fc <_svfprintf_r+0x754>
 800a7da:	460c      	mov	r4, r1
 800a7dc:	e536      	b.n	800a24c <_svfprintf_r+0x7a4>
 800a7de:	bf00      	nop
 800a7e0:	0800e1ec 	.word	0x0800e1ec
 800a7e4:	0800e1fd 	.word	0x0800e1fd
 800a7e8:	9b07      	ldr	r3, [sp, #28]
 800a7ea:	2b65      	cmp	r3, #101	; 0x65
 800a7ec:	f340 823a 	ble.w	800ac64 <_svfprintf_r+0x11bc>
 800a7f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f7f6 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d068      	beq.n	800a8d2 <_svfprintf_r+0xe2a>
 800a800:	4b6d      	ldr	r3, [pc, #436]	; (800a9b8 <_svfprintf_r+0xf10>)
 800a802:	6023      	str	r3, [r4, #0]
 800a804:	2301      	movs	r3, #1
 800a806:	441f      	add	r7, r3
 800a808:	6063      	str	r3, [r4, #4]
 800a80a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a80c:	9724      	str	r7, [sp, #144]	; 0x90
 800a80e:	3301      	adds	r3, #1
 800a810:	2b07      	cmp	r3, #7
 800a812:	9323      	str	r3, [sp, #140]	; 0x8c
 800a814:	dc37      	bgt.n	800a886 <_svfprintf_r+0xdde>
 800a816:	3408      	adds	r4, #8
 800a818:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a81a:	9a05      	ldr	r2, [sp, #20]
 800a81c:	4293      	cmp	r3, r2
 800a81e:	db03      	blt.n	800a828 <_svfprintf_r+0xd80>
 800a820:	f01b 0f01 	tst.w	fp, #1
 800a824:	f43f ad23 	beq.w	800a26e <_svfprintf_r+0x7c6>
 800a828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a82e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a830:	6063      	str	r3, [r4, #4]
 800a832:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a834:	4413      	add	r3, r2
 800a836:	9324      	str	r3, [sp, #144]	; 0x90
 800a838:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a83a:	3301      	adds	r3, #1
 800a83c:	2b07      	cmp	r3, #7
 800a83e:	9323      	str	r3, [sp, #140]	; 0x8c
 800a840:	dc2b      	bgt.n	800a89a <_svfprintf_r+0xdf2>
 800a842:	3408      	adds	r4, #8
 800a844:	9b05      	ldr	r3, [sp, #20]
 800a846:	1e5d      	subs	r5, r3, #1
 800a848:	2d00      	cmp	r5, #0
 800a84a:	f77f ad10 	ble.w	800a26e <_svfprintf_r+0x7c6>
 800a84e:	4e5b      	ldr	r6, [pc, #364]	; (800a9bc <_svfprintf_r+0xf14>)
 800a850:	2710      	movs	r7, #16
 800a852:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a856:	2d10      	cmp	r5, #16
 800a858:	f103 0301 	add.w	r3, r3, #1
 800a85c:	f104 0108 	add.w	r1, r4, #8
 800a860:	6026      	str	r6, [r4, #0]
 800a862:	dc24      	bgt.n	800a8ae <_svfprintf_r+0xe06>
 800a864:	6065      	str	r5, [r4, #4]
 800a866:	4415      	add	r5, r2
 800a868:	9524      	str	r5, [sp, #144]	; 0x90
 800a86a:	2b07      	cmp	r3, #7
 800a86c:	9323      	str	r3, [sp, #140]	; 0x8c
 800a86e:	f340 828e 	ble.w	800ad8e <_svfprintf_r+0x12e6>
 800a872:	aa22      	add	r2, sp, #136	; 0x88
 800a874:	4649      	mov	r1, r9
 800a876:	4650      	mov	r0, sl
 800a878:	f001 fe5a 	bl	800c530 <__ssprint_r>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	f040 82a7 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a882:	ac25      	add	r4, sp, #148	; 0x94
 800a884:	e4f3      	b.n	800a26e <_svfprintf_r+0x7c6>
 800a886:	aa22      	add	r2, sp, #136	; 0x88
 800a888:	4649      	mov	r1, r9
 800a88a:	4650      	mov	r0, sl
 800a88c:	f001 fe50 	bl	800c530 <__ssprint_r>
 800a890:	2800      	cmp	r0, #0
 800a892:	f040 829d 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a896:	ac25      	add	r4, sp, #148	; 0x94
 800a898:	e7be      	b.n	800a818 <_svfprintf_r+0xd70>
 800a89a:	aa22      	add	r2, sp, #136	; 0x88
 800a89c:	4649      	mov	r1, r9
 800a89e:	4650      	mov	r0, sl
 800a8a0:	f001 fe46 	bl	800c530 <__ssprint_r>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	f040 8293 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a8aa:	ac25      	add	r4, sp, #148	; 0x94
 800a8ac:	e7ca      	b.n	800a844 <_svfprintf_r+0xd9c>
 800a8ae:	3210      	adds	r2, #16
 800a8b0:	2b07      	cmp	r3, #7
 800a8b2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a8b6:	6067      	str	r7, [r4, #4]
 800a8b8:	dd08      	ble.n	800a8cc <_svfprintf_r+0xe24>
 800a8ba:	aa22      	add	r2, sp, #136	; 0x88
 800a8bc:	4649      	mov	r1, r9
 800a8be:	4650      	mov	r0, sl
 800a8c0:	f001 fe36 	bl	800c530 <__ssprint_r>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	f040 8283 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a8ca:	a925      	add	r1, sp, #148	; 0x94
 800a8cc:	3d10      	subs	r5, #16
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	e7bf      	b.n	800a852 <_svfprintf_r+0xdaa>
 800a8d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dc73      	bgt.n	800a9c0 <_svfprintf_r+0xf18>
 800a8d8:	4b37      	ldr	r3, [pc, #220]	; (800a9b8 <_svfprintf_r+0xf10>)
 800a8da:	6023      	str	r3, [r4, #0]
 800a8dc:	2301      	movs	r3, #1
 800a8de:	441f      	add	r7, r3
 800a8e0:	6063      	str	r3, [r4, #4]
 800a8e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8e4:	9724      	str	r7, [sp, #144]	; 0x90
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	2b07      	cmp	r3, #7
 800a8ea:	9323      	str	r3, [sp, #140]	; 0x8c
 800a8ec:	dc3d      	bgt.n	800a96a <_svfprintf_r+0xec2>
 800a8ee:	3408      	adds	r4, #8
 800a8f0:	9905      	ldr	r1, [sp, #20]
 800a8f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a8f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a8f6:	430b      	orrs	r3, r1
 800a8f8:	f00b 0101 	and.w	r1, fp, #1
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	f43f acb6 	beq.w	800a26e <_svfprintf_r+0x7c6>
 800a902:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a908:	6063      	str	r3, [r4, #4]
 800a90a:	441a      	add	r2, r3
 800a90c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a90e:	9224      	str	r2, [sp, #144]	; 0x90
 800a910:	3301      	adds	r3, #1
 800a912:	2b07      	cmp	r3, #7
 800a914:	9323      	str	r3, [sp, #140]	; 0x8c
 800a916:	dc32      	bgt.n	800a97e <_svfprintf_r+0xed6>
 800a918:	3408      	adds	r4, #8
 800a91a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800a91c:	2d00      	cmp	r5, #0
 800a91e:	da1b      	bge.n	800a958 <_svfprintf_r+0xeb0>
 800a920:	4e26      	ldr	r6, [pc, #152]	; (800a9bc <_svfprintf_r+0xf14>)
 800a922:	426d      	negs	r5, r5
 800a924:	4623      	mov	r3, r4
 800a926:	2710      	movs	r7, #16
 800a928:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800a92c:	2d10      	cmp	r5, #16
 800a92e:	f102 0201 	add.w	r2, r2, #1
 800a932:	f104 0408 	add.w	r4, r4, #8
 800a936:	601e      	str	r6, [r3, #0]
 800a938:	dc2b      	bgt.n	800a992 <_svfprintf_r+0xeea>
 800a93a:	605d      	str	r5, [r3, #4]
 800a93c:	2a07      	cmp	r2, #7
 800a93e:	440d      	add	r5, r1
 800a940:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800a944:	dd08      	ble.n	800a958 <_svfprintf_r+0xeb0>
 800a946:	aa22      	add	r2, sp, #136	; 0x88
 800a948:	4649      	mov	r1, r9
 800a94a:	4650      	mov	r0, sl
 800a94c:	f001 fdf0 	bl	800c530 <__ssprint_r>
 800a950:	2800      	cmp	r0, #0
 800a952:	f040 823d 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a956:	ac25      	add	r4, sp, #148	; 0x94
 800a958:	9b03      	ldr	r3, [sp, #12]
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	9b05      	ldr	r3, [sp, #20]
 800a95e:	9a05      	ldr	r2, [sp, #20]
 800a960:	6063      	str	r3, [r4, #4]
 800a962:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a964:	4413      	add	r3, r2
 800a966:	9324      	str	r3, [sp, #144]	; 0x90
 800a968:	e47a      	b.n	800a260 <_svfprintf_r+0x7b8>
 800a96a:	aa22      	add	r2, sp, #136	; 0x88
 800a96c:	4649      	mov	r1, r9
 800a96e:	4650      	mov	r0, sl
 800a970:	f001 fdde 	bl	800c530 <__ssprint_r>
 800a974:	2800      	cmp	r0, #0
 800a976:	f040 822b 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a97a:	ac25      	add	r4, sp, #148	; 0x94
 800a97c:	e7b8      	b.n	800a8f0 <_svfprintf_r+0xe48>
 800a97e:	aa22      	add	r2, sp, #136	; 0x88
 800a980:	4649      	mov	r1, r9
 800a982:	4650      	mov	r0, sl
 800a984:	f001 fdd4 	bl	800c530 <__ssprint_r>
 800a988:	2800      	cmp	r0, #0
 800a98a:	f040 8221 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a98e:	ac25      	add	r4, sp, #148	; 0x94
 800a990:	e7c3      	b.n	800a91a <_svfprintf_r+0xe72>
 800a992:	3110      	adds	r1, #16
 800a994:	2a07      	cmp	r2, #7
 800a996:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800a99a:	605f      	str	r7, [r3, #4]
 800a99c:	dd08      	ble.n	800a9b0 <_svfprintf_r+0xf08>
 800a99e:	aa22      	add	r2, sp, #136	; 0x88
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	4650      	mov	r0, sl
 800a9a4:	f001 fdc4 	bl	800c530 <__ssprint_r>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	f040 8211 	bne.w	800add0 <_svfprintf_r+0x1328>
 800a9ae:	ac25      	add	r4, sp, #148	; 0x94
 800a9b0:	3d10      	subs	r5, #16
 800a9b2:	4623      	mov	r3, r4
 800a9b4:	e7b8      	b.n	800a928 <_svfprintf_r+0xe80>
 800a9b6:	bf00      	nop
 800a9b8:	0800e20e 	.word	0x0800e20e
 800a9bc:	0800e220 	.word	0x0800e220
 800a9c0:	9b05      	ldr	r3, [sp, #20]
 800a9c2:	42ab      	cmp	r3, r5
 800a9c4:	bfa8      	it	ge
 800a9c6:	462b      	movge	r3, r5
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	4698      	mov	r8, r3
 800a9cc:	dd0a      	ble.n	800a9e4 <_svfprintf_r+0xf3c>
 800a9ce:	9b03      	ldr	r3, [sp, #12]
 800a9d0:	e9c4 3800 	strd	r3, r8, [r4]
 800a9d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	4447      	add	r7, r8
 800a9da:	2b07      	cmp	r3, #7
 800a9dc:	9724      	str	r7, [sp, #144]	; 0x90
 800a9de:	9323      	str	r3, [sp, #140]	; 0x8c
 800a9e0:	dc7b      	bgt.n	800aada <_svfprintf_r+0x1032>
 800a9e2:	3408      	adds	r4, #8
 800a9e4:	f1b8 0f00 	cmp.w	r8, #0
 800a9e8:	bfac      	ite	ge
 800a9ea:	eba5 0708 	subge.w	r7, r5, r8
 800a9ee:	462f      	movlt	r7, r5
 800a9f0:	2f00      	cmp	r7, #0
 800a9f2:	dd1a      	ble.n	800aa2a <_svfprintf_r+0xf82>
 800a9f4:	f8df 8368 	ldr.w	r8, [pc, #872]	; 800ad60 <_svfprintf_r+0x12b8>
 800a9f8:	f8c4 8000 	str.w	r8, [r4]
 800a9fc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800aa00:	2f10      	cmp	r7, #16
 800aa02:	f103 0301 	add.w	r3, r3, #1
 800aa06:	f104 0108 	add.w	r1, r4, #8
 800aa0a:	dc70      	bgt.n	800aaee <_svfprintf_r+0x1046>
 800aa0c:	6067      	str	r7, [r4, #4]
 800aa0e:	2b07      	cmp	r3, #7
 800aa10:	4417      	add	r7, r2
 800aa12:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800aa16:	dd7d      	ble.n	800ab14 <_svfprintf_r+0x106c>
 800aa18:	aa22      	add	r2, sp, #136	; 0x88
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	4650      	mov	r0, sl
 800aa1e:	f001 fd87 	bl	800c530 <__ssprint_r>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f040 81d4 	bne.w	800add0 <_svfprintf_r+0x1328>
 800aa28:	ac25      	add	r4, sp, #148	; 0x94
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800aa30:	441d      	add	r5, r3
 800aa32:	d00a      	beq.n	800aa4a <_svfprintf_r+0xfa2>
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d16e      	bne.n	800ab18 <_svfprintf_r+0x1070>
 800aa3a:	2e00      	cmp	r6, #0
 800aa3c:	d16e      	bne.n	800ab1c <_svfprintf_r+0x1074>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	9a05      	ldr	r2, [sp, #20]
 800aa42:	4413      	add	r3, r2
 800aa44:	429d      	cmp	r5, r3
 800aa46:	bf28      	it	cs
 800aa48:	461d      	movcs	r5, r3
 800aa4a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aa4c:	9a05      	ldr	r2, [sp, #20]
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	db02      	blt.n	800aa58 <_svfprintf_r+0xfb0>
 800aa52:	f01b 0f01 	tst.w	fp, #1
 800aa56:	d00e      	beq.n	800aa76 <_svfprintf_r+0xfce>
 800aa58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa60:	6063      	str	r3, [r4, #4]
 800aa62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aa64:	4413      	add	r3, r2
 800aa66:	9324      	str	r3, [sp, #144]	; 0x90
 800aa68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	2b07      	cmp	r3, #7
 800aa6e:	9323      	str	r3, [sp, #140]	; 0x8c
 800aa70:	f300 80d2 	bgt.w	800ac18 <_svfprintf_r+0x1170>
 800aa74:	3408      	adds	r4, #8
 800aa76:	9b05      	ldr	r3, [sp, #20]
 800aa78:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800aa7a:	9a05      	ldr	r2, [sp, #20]
 800aa7c:	1b9e      	subs	r6, r3, r6
 800aa7e:	9b03      	ldr	r3, [sp, #12]
 800aa80:	4413      	add	r3, r2
 800aa82:	1b5b      	subs	r3, r3, r5
 800aa84:	429e      	cmp	r6, r3
 800aa86:	bfa8      	it	ge
 800aa88:	461e      	movge	r6, r3
 800aa8a:	2e00      	cmp	r6, #0
 800aa8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aa8e:	dd0a      	ble.n	800aaa6 <_svfprintf_r+0xffe>
 800aa90:	4433      	add	r3, r6
 800aa92:	9324      	str	r3, [sp, #144]	; 0x90
 800aa94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa96:	3301      	adds	r3, #1
 800aa98:	2b07      	cmp	r3, #7
 800aa9a:	e9c4 5600 	strd	r5, r6, [r4]
 800aa9e:	9323      	str	r3, [sp, #140]	; 0x8c
 800aaa0:	f300 80c4 	bgt.w	800ac2c <_svfprintf_r+0x1184>
 800aaa4:	3408      	adds	r4, #8
 800aaa6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800aaa8:	9b05      	ldr	r3, [sp, #20]
 800aaaa:	2e00      	cmp	r6, #0
 800aaac:	eba3 0505 	sub.w	r5, r3, r5
 800aab0:	bfa8      	it	ge
 800aab2:	1bad      	subge	r5, r5, r6
 800aab4:	2d00      	cmp	r5, #0
 800aab6:	f77f abda 	ble.w	800a26e <_svfprintf_r+0x7c6>
 800aaba:	4ea9      	ldr	r6, [pc, #676]	; (800ad60 <_svfprintf_r+0x12b8>)
 800aabc:	2710      	movs	r7, #16
 800aabe:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800aac2:	2d10      	cmp	r5, #16
 800aac4:	f103 0301 	add.w	r3, r3, #1
 800aac8:	f104 0108 	add.w	r1, r4, #8
 800aacc:	6026      	str	r6, [r4, #0]
 800aace:	f300 80b7 	bgt.w	800ac40 <_svfprintf_r+0x1198>
 800aad2:	442a      	add	r2, r5
 800aad4:	6065      	str	r5, [r4, #4]
 800aad6:	9224      	str	r2, [sp, #144]	; 0x90
 800aad8:	e6c7      	b.n	800a86a <_svfprintf_r+0xdc2>
 800aada:	aa22      	add	r2, sp, #136	; 0x88
 800aadc:	4649      	mov	r1, r9
 800aade:	4650      	mov	r0, sl
 800aae0:	f001 fd26 	bl	800c530 <__ssprint_r>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	f040 8173 	bne.w	800add0 <_svfprintf_r+0x1328>
 800aaea:	ac25      	add	r4, sp, #148	; 0x94
 800aaec:	e77a      	b.n	800a9e4 <_svfprintf_r+0xf3c>
 800aaee:	2010      	movs	r0, #16
 800aaf0:	4402      	add	r2, r0
 800aaf2:	2b07      	cmp	r3, #7
 800aaf4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800aaf8:	6060      	str	r0, [r4, #4]
 800aafa:	dd08      	ble.n	800ab0e <_svfprintf_r+0x1066>
 800aafc:	aa22      	add	r2, sp, #136	; 0x88
 800aafe:	4649      	mov	r1, r9
 800ab00:	4650      	mov	r0, sl
 800ab02:	f001 fd15 	bl	800c530 <__ssprint_r>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f040 8162 	bne.w	800add0 <_svfprintf_r+0x1328>
 800ab0c:	a925      	add	r1, sp, #148	; 0x94
 800ab0e:	3f10      	subs	r7, #16
 800ab10:	460c      	mov	r4, r1
 800ab12:	e771      	b.n	800a9f8 <_svfprintf_r+0xf50>
 800ab14:	460c      	mov	r4, r1
 800ab16:	e788      	b.n	800aa2a <_svfprintf_r+0xf82>
 800ab18:	2e00      	cmp	r6, #0
 800ab1a:	d04d      	beq.n	800abb8 <_svfprintf_r+0x1110>
 800ab1c:	3e01      	subs	r6, #1
 800ab1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab26:	6063      	str	r3, [r4, #4]
 800ab28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ab2a:	4413      	add	r3, r2
 800ab2c:	9324      	str	r3, [sp, #144]	; 0x90
 800ab2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab30:	3301      	adds	r3, #1
 800ab32:	2b07      	cmp	r3, #7
 800ab34:	9323      	str	r3, [sp, #140]	; 0x8c
 800ab36:	dc46      	bgt.n	800abc6 <_svfprintf_r+0x111e>
 800ab38:	3408      	adds	r4, #8
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	9a05      	ldr	r2, [sp, #20]
 800ab3e:	eb03 0802 	add.w	r8, r3, r2
 800ab42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	eba8 0805 	sub.w	r8, r8, r5
 800ab4a:	4598      	cmp	r8, r3
 800ab4c:	bfa8      	it	ge
 800ab4e:	4698      	movge	r8, r3
 800ab50:	f1b8 0f00 	cmp.w	r8, #0
 800ab54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ab56:	dd09      	ble.n	800ab6c <_svfprintf_r+0x10c4>
 800ab58:	4443      	add	r3, r8
 800ab5a:	9324      	str	r3, [sp, #144]	; 0x90
 800ab5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab5e:	3301      	adds	r3, #1
 800ab60:	2b07      	cmp	r3, #7
 800ab62:	e9c4 5800 	strd	r5, r8, [r4]
 800ab66:	9323      	str	r3, [sp, #140]	; 0x8c
 800ab68:	dc37      	bgt.n	800abda <_svfprintf_r+0x1132>
 800ab6a:	3408      	adds	r4, #8
 800ab6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6e:	781f      	ldrb	r7, [r3, #0]
 800ab70:	f1b8 0f00 	cmp.w	r8, #0
 800ab74:	bfa8      	it	ge
 800ab76:	eba7 0708 	subge.w	r7, r7, r8
 800ab7a:	2f00      	cmp	r7, #0
 800ab7c:	dd18      	ble.n	800abb0 <_svfprintf_r+0x1108>
 800ab7e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ab82:	4877      	ldr	r0, [pc, #476]	; (800ad60 <_svfprintf_r+0x12b8>)
 800ab84:	6020      	str	r0, [r4, #0]
 800ab86:	2f10      	cmp	r7, #16
 800ab88:	f103 0301 	add.w	r3, r3, #1
 800ab8c:	f104 0108 	add.w	r1, r4, #8
 800ab90:	dc2d      	bgt.n	800abee <_svfprintf_r+0x1146>
 800ab92:	443a      	add	r2, r7
 800ab94:	2b07      	cmp	r3, #7
 800ab96:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ab9a:	6067      	str	r7, [r4, #4]
 800ab9c:	dd3a      	ble.n	800ac14 <_svfprintf_r+0x116c>
 800ab9e:	aa22      	add	r2, sp, #136	; 0x88
 800aba0:	4649      	mov	r1, r9
 800aba2:	4650      	mov	r0, sl
 800aba4:	f001 fcc4 	bl	800c530 <__ssprint_r>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	f040 8111 	bne.w	800add0 <_svfprintf_r+0x1328>
 800abae:	ac25      	add	r4, sp, #148	; 0x94
 800abb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	441d      	add	r5, r3
 800abb6:	e73d      	b.n	800aa34 <_svfprintf_r+0xf8c>
 800abb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abba:	3b01      	subs	r3, #1
 800abbc:	9309      	str	r3, [sp, #36]	; 0x24
 800abbe:	9b08      	ldr	r3, [sp, #32]
 800abc0:	3b01      	subs	r3, #1
 800abc2:	9308      	str	r3, [sp, #32]
 800abc4:	e7ab      	b.n	800ab1e <_svfprintf_r+0x1076>
 800abc6:	aa22      	add	r2, sp, #136	; 0x88
 800abc8:	4649      	mov	r1, r9
 800abca:	4650      	mov	r0, sl
 800abcc:	f001 fcb0 	bl	800c530 <__ssprint_r>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	f040 80fd 	bne.w	800add0 <_svfprintf_r+0x1328>
 800abd6:	ac25      	add	r4, sp, #148	; 0x94
 800abd8:	e7af      	b.n	800ab3a <_svfprintf_r+0x1092>
 800abda:	aa22      	add	r2, sp, #136	; 0x88
 800abdc:	4649      	mov	r1, r9
 800abde:	4650      	mov	r0, sl
 800abe0:	f001 fca6 	bl	800c530 <__ssprint_r>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	f040 80f3 	bne.w	800add0 <_svfprintf_r+0x1328>
 800abea:	ac25      	add	r4, sp, #148	; 0x94
 800abec:	e7be      	b.n	800ab6c <_svfprintf_r+0x10c4>
 800abee:	2010      	movs	r0, #16
 800abf0:	4402      	add	r2, r0
 800abf2:	2b07      	cmp	r3, #7
 800abf4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800abf8:	6060      	str	r0, [r4, #4]
 800abfa:	dd08      	ble.n	800ac0e <_svfprintf_r+0x1166>
 800abfc:	aa22      	add	r2, sp, #136	; 0x88
 800abfe:	4649      	mov	r1, r9
 800ac00:	4650      	mov	r0, sl
 800ac02:	f001 fc95 	bl	800c530 <__ssprint_r>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f040 80e2 	bne.w	800add0 <_svfprintf_r+0x1328>
 800ac0c:	a925      	add	r1, sp, #148	; 0x94
 800ac0e:	3f10      	subs	r7, #16
 800ac10:	460c      	mov	r4, r1
 800ac12:	e7b4      	b.n	800ab7e <_svfprintf_r+0x10d6>
 800ac14:	460c      	mov	r4, r1
 800ac16:	e7cb      	b.n	800abb0 <_svfprintf_r+0x1108>
 800ac18:	aa22      	add	r2, sp, #136	; 0x88
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	4650      	mov	r0, sl
 800ac1e:	f001 fc87 	bl	800c530 <__ssprint_r>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f040 80d4 	bne.w	800add0 <_svfprintf_r+0x1328>
 800ac28:	ac25      	add	r4, sp, #148	; 0x94
 800ac2a:	e724      	b.n	800aa76 <_svfprintf_r+0xfce>
 800ac2c:	aa22      	add	r2, sp, #136	; 0x88
 800ac2e:	4649      	mov	r1, r9
 800ac30:	4650      	mov	r0, sl
 800ac32:	f001 fc7d 	bl	800c530 <__ssprint_r>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	f040 80ca 	bne.w	800add0 <_svfprintf_r+0x1328>
 800ac3c:	ac25      	add	r4, sp, #148	; 0x94
 800ac3e:	e732      	b.n	800aaa6 <_svfprintf_r+0xffe>
 800ac40:	3210      	adds	r2, #16
 800ac42:	2b07      	cmp	r3, #7
 800ac44:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ac48:	6067      	str	r7, [r4, #4]
 800ac4a:	dd08      	ble.n	800ac5e <_svfprintf_r+0x11b6>
 800ac4c:	aa22      	add	r2, sp, #136	; 0x88
 800ac4e:	4649      	mov	r1, r9
 800ac50:	4650      	mov	r0, sl
 800ac52:	f001 fc6d 	bl	800c530 <__ssprint_r>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f040 80ba 	bne.w	800add0 <_svfprintf_r+0x1328>
 800ac5c:	a925      	add	r1, sp, #148	; 0x94
 800ac5e:	3d10      	subs	r5, #16
 800ac60:	460c      	mov	r4, r1
 800ac62:	e72c      	b.n	800aabe <_svfprintf_r+0x1016>
 800ac64:	9a05      	ldr	r2, [sp, #20]
 800ac66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac68:	2a01      	cmp	r2, #1
 800ac6a:	9a03      	ldr	r2, [sp, #12]
 800ac6c:	6022      	str	r2, [r4, #0]
 800ac6e:	f107 0701 	add.w	r7, r7, #1
 800ac72:	f103 0301 	add.w	r3, r3, #1
 800ac76:	f04f 0201 	mov.w	r2, #1
 800ac7a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800ac7e:	f104 0508 	add.w	r5, r4, #8
 800ac82:	6062      	str	r2, [r4, #4]
 800ac84:	dc02      	bgt.n	800ac8c <_svfprintf_r+0x11e4>
 800ac86:	f01b 0f01 	tst.w	fp, #1
 800ac8a:	d07b      	beq.n	800ad84 <_svfprintf_r+0x12dc>
 800ac8c:	2b07      	cmp	r3, #7
 800ac8e:	dd08      	ble.n	800aca2 <_svfprintf_r+0x11fa>
 800ac90:	aa22      	add	r2, sp, #136	; 0x88
 800ac92:	4649      	mov	r1, r9
 800ac94:	4650      	mov	r0, sl
 800ac96:	f001 fc4b 	bl	800c530 <__ssprint_r>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	f040 8098 	bne.w	800add0 <_svfprintf_r+0x1328>
 800aca0:	ad25      	add	r5, sp, #148	; 0x94
 800aca2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aca4:	602b      	str	r3, [r5, #0]
 800aca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acaa:	606b      	str	r3, [r5, #4]
 800acac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800acae:	4413      	add	r3, r2
 800acb0:	9324      	str	r3, [sp, #144]	; 0x90
 800acb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800acb4:	3301      	adds	r3, #1
 800acb6:	2b07      	cmp	r3, #7
 800acb8:	9323      	str	r3, [sp, #140]	; 0x8c
 800acba:	dc32      	bgt.n	800ad22 <_svfprintf_r+0x127a>
 800acbc:	3508      	adds	r5, #8
 800acbe:	9b05      	ldr	r3, [sp, #20]
 800acc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acc4:	1e5c      	subs	r4, r3, #1
 800acc6:	2200      	movs	r2, #0
 800acc8:	2300      	movs	r3, #0
 800acca:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 800acce:	f7f5 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d12e      	bne.n	800ad34 <_svfprintf_r+0x128c>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	3301      	adds	r3, #1
 800acda:	e9c5 3400 	strd	r3, r4, [r5]
 800acde:	9b05      	ldr	r3, [sp, #20]
 800ace0:	3701      	adds	r7, #1
 800ace2:	3e01      	subs	r6, #1
 800ace4:	441e      	add	r6, r3
 800ace6:	2f07      	cmp	r7, #7
 800ace8:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 800acec:	dd4d      	ble.n	800ad8a <_svfprintf_r+0x12e2>
 800acee:	aa22      	add	r2, sp, #136	; 0x88
 800acf0:	4649      	mov	r1, r9
 800acf2:	4650      	mov	r0, sl
 800acf4:	f001 fc1c 	bl	800c530 <__ssprint_r>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d169      	bne.n	800add0 <_svfprintf_r+0x1328>
 800acfc:	ad25      	add	r5, sp, #148	; 0x94
 800acfe:	ab1e      	add	r3, sp, #120	; 0x78
 800ad00:	602b      	str	r3, [r5, #0]
 800ad02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad06:	606b      	str	r3, [r5, #4]
 800ad08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad0a:	4413      	add	r3, r2
 800ad0c:	9324      	str	r3, [sp, #144]	; 0x90
 800ad0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad10:	3301      	adds	r3, #1
 800ad12:	2b07      	cmp	r3, #7
 800ad14:	9323      	str	r3, [sp, #140]	; 0x8c
 800ad16:	f73f adac 	bgt.w	800a872 <_svfprintf_r+0xdca>
 800ad1a:	f105 0408 	add.w	r4, r5, #8
 800ad1e:	f7ff baa6 	b.w	800a26e <_svfprintf_r+0x7c6>
 800ad22:	aa22      	add	r2, sp, #136	; 0x88
 800ad24:	4649      	mov	r1, r9
 800ad26:	4650      	mov	r0, sl
 800ad28:	f001 fc02 	bl	800c530 <__ssprint_r>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d14f      	bne.n	800add0 <_svfprintf_r+0x1328>
 800ad30:	ad25      	add	r5, sp, #148	; 0x94
 800ad32:	e7c4      	b.n	800acbe <_svfprintf_r+0x1216>
 800ad34:	2c00      	cmp	r4, #0
 800ad36:	dde2      	ble.n	800acfe <_svfprintf_r+0x1256>
 800ad38:	4e09      	ldr	r6, [pc, #36]	; (800ad60 <_svfprintf_r+0x12b8>)
 800ad3a:	2710      	movs	r7, #16
 800ad3c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ad40:	2c10      	cmp	r4, #16
 800ad42:	f103 0301 	add.w	r3, r3, #1
 800ad46:	f105 0108 	add.w	r1, r5, #8
 800ad4a:	602e      	str	r6, [r5, #0]
 800ad4c:	dc0a      	bgt.n	800ad64 <_svfprintf_r+0x12bc>
 800ad4e:	606c      	str	r4, [r5, #4]
 800ad50:	2b07      	cmp	r3, #7
 800ad52:	4414      	add	r4, r2
 800ad54:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800ad58:	dcc9      	bgt.n	800acee <_svfprintf_r+0x1246>
 800ad5a:	460d      	mov	r5, r1
 800ad5c:	e7cf      	b.n	800acfe <_svfprintf_r+0x1256>
 800ad5e:	bf00      	nop
 800ad60:	0800e220 	.word	0x0800e220
 800ad64:	3210      	adds	r2, #16
 800ad66:	2b07      	cmp	r3, #7
 800ad68:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ad6c:	606f      	str	r7, [r5, #4]
 800ad6e:	dd06      	ble.n	800ad7e <_svfprintf_r+0x12d6>
 800ad70:	aa22      	add	r2, sp, #136	; 0x88
 800ad72:	4649      	mov	r1, r9
 800ad74:	4650      	mov	r0, sl
 800ad76:	f001 fbdb 	bl	800c530 <__ssprint_r>
 800ad7a:	bb48      	cbnz	r0, 800add0 <_svfprintf_r+0x1328>
 800ad7c:	a925      	add	r1, sp, #148	; 0x94
 800ad7e:	3c10      	subs	r4, #16
 800ad80:	460d      	mov	r5, r1
 800ad82:	e7db      	b.n	800ad3c <_svfprintf_r+0x1294>
 800ad84:	2b07      	cmp	r3, #7
 800ad86:	ddba      	ble.n	800acfe <_svfprintf_r+0x1256>
 800ad88:	e7b1      	b.n	800acee <_svfprintf_r+0x1246>
 800ad8a:	3508      	adds	r5, #8
 800ad8c:	e7b7      	b.n	800acfe <_svfprintf_r+0x1256>
 800ad8e:	460c      	mov	r4, r1
 800ad90:	f7ff ba6d 	b.w	800a26e <_svfprintf_r+0x7c6>
 800ad94:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800ad98:	1a9d      	subs	r5, r3, r2
 800ad9a:	2d00      	cmp	r5, #0
 800ad9c:	f77f aa6b 	ble.w	800a276 <_svfprintf_r+0x7ce>
 800ada0:	4e37      	ldr	r6, [pc, #220]	; (800ae80 <_svfprintf_r+0x13d8>)
 800ada2:	2710      	movs	r7, #16
 800ada4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ada8:	2d10      	cmp	r5, #16
 800adaa:	f103 0301 	add.w	r3, r3, #1
 800adae:	6026      	str	r6, [r4, #0]
 800adb0:	dc18      	bgt.n	800ade4 <_svfprintf_r+0x133c>
 800adb2:	6065      	str	r5, [r4, #4]
 800adb4:	2b07      	cmp	r3, #7
 800adb6:	4415      	add	r5, r2
 800adb8:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800adbc:	f77f aa5b 	ble.w	800a276 <_svfprintf_r+0x7ce>
 800adc0:	aa22      	add	r2, sp, #136	; 0x88
 800adc2:	4649      	mov	r1, r9
 800adc4:	4650      	mov	r0, sl
 800adc6:	f001 fbb3 	bl	800c530 <__ssprint_r>
 800adca:	2800      	cmp	r0, #0
 800adcc:	f43f aa53 	beq.w	800a276 <_svfprintf_r+0x7ce>
 800add0:	9b04      	ldr	r3, [sp, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	f43f a874 	beq.w	8009ec0 <_svfprintf_r+0x418>
 800add8:	4619      	mov	r1, r3
 800adda:	4650      	mov	r0, sl
 800addc:	f7fe fb5e 	bl	800949c <_free_r>
 800ade0:	f7ff b86e 	b.w	8009ec0 <_svfprintf_r+0x418>
 800ade4:	3210      	adds	r2, #16
 800ade6:	2b07      	cmp	r3, #7
 800ade8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800adec:	6067      	str	r7, [r4, #4]
 800adee:	dc02      	bgt.n	800adf6 <_svfprintf_r+0x134e>
 800adf0:	3408      	adds	r4, #8
 800adf2:	3d10      	subs	r5, #16
 800adf4:	e7d6      	b.n	800ada4 <_svfprintf_r+0x12fc>
 800adf6:	aa22      	add	r2, sp, #136	; 0x88
 800adf8:	4649      	mov	r1, r9
 800adfa:	4650      	mov	r0, sl
 800adfc:	f001 fb98 	bl	800c530 <__ssprint_r>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d1e5      	bne.n	800add0 <_svfprintf_r+0x1328>
 800ae04:	ac25      	add	r4, sp, #148	; 0x94
 800ae06:	e7f4      	b.n	800adf2 <_svfprintf_r+0x134a>
 800ae08:	9904      	ldr	r1, [sp, #16]
 800ae0a:	4650      	mov	r0, sl
 800ae0c:	f7fe fb46 	bl	800949c <_free_r>
 800ae10:	f7ff ba49 	b.w	800a2a6 <_svfprintf_r+0x7fe>
 800ae14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f43f a852 	beq.w	8009ec0 <_svfprintf_r+0x418>
 800ae1c:	aa22      	add	r2, sp, #136	; 0x88
 800ae1e:	4649      	mov	r1, r9
 800ae20:	4650      	mov	r0, sl
 800ae22:	f001 fb85 	bl	800c530 <__ssprint_r>
 800ae26:	f7ff b84b 	b.w	8009ec0 <_svfprintf_r+0x418>
 800ae2a:	ea55 0206 	orrs.w	r2, r5, r6
 800ae2e:	f8cd b010 	str.w	fp, [sp, #16]
 800ae32:	f43f ab5e 	beq.w	800a4f2 <_svfprintf_r+0xa4a>
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	f43f abff 	beq.w	800a63a <_svfprintf_r+0xb92>
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	ab4e      	add	r3, sp, #312	; 0x138
 800ae40:	9303      	str	r3, [sp, #12]
 800ae42:	f43f ac4d 	beq.w	800a6e0 <_svfprintf_r+0xc38>
 800ae46:	9a03      	ldr	r2, [sp, #12]
 800ae48:	f005 0307 	and.w	r3, r5, #7
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	3330      	adds	r3, #48	; 0x30
 800ae50:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800ae54:	08ed      	lsrs	r5, r5, #3
 800ae56:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 800ae5a:	08f6      	lsrs	r6, r6, #3
 800ae5c:	9103      	str	r1, [sp, #12]
 800ae5e:	ea55 0106 	orrs.w	r1, r5, r6
 800ae62:	d1f0      	bne.n	800ae46 <_svfprintf_r+0x139e>
 800ae64:	9904      	ldr	r1, [sp, #16]
 800ae66:	07c9      	lsls	r1, r1, #31
 800ae68:	f57f ac2a 	bpl.w	800a6c0 <_svfprintf_r+0xc18>
 800ae6c:	2b30      	cmp	r3, #48	; 0x30
 800ae6e:	f43f ac27 	beq.w	800a6c0 <_svfprintf_r+0xc18>
 800ae72:	9903      	ldr	r1, [sp, #12]
 800ae74:	2330      	movs	r3, #48	; 0x30
 800ae76:	f801 3c01 	strb.w	r3, [r1, #-1]
 800ae7a:	1e93      	subs	r3, r2, #2
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	e41f      	b.n	800a6c0 <_svfprintf_r+0xc18>
 800ae80:	0800e210 	.word	0x0800e210

0800ae84 <_fclose_r>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	4606      	mov	r6, r0
 800ae88:	460c      	mov	r4, r1
 800ae8a:	b911      	cbnz	r1, 800ae92 <_fclose_r+0xe>
 800ae8c:	2500      	movs	r5, #0
 800ae8e:	4628      	mov	r0, r5
 800ae90:	bd70      	pop	{r4, r5, r6, pc}
 800ae92:	b118      	cbz	r0, 800ae9c <_fclose_r+0x18>
 800ae94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ae96:	b90b      	cbnz	r3, 800ae9c <_fclose_r+0x18>
 800ae98:	f7fe f94a 	bl	8009130 <__sinit>
 800ae9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae9e:	07d8      	lsls	r0, r3, #31
 800aea0:	d405      	bmi.n	800aeae <_fclose_r+0x2a>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	0599      	lsls	r1, r3, #22
 800aea6:	d402      	bmi.n	800aeae <_fclose_r+0x2a>
 800aea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeaa:	f7fe fa83 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800aeae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb2:	b93b      	cbnz	r3, 800aec4 <_fclose_r+0x40>
 800aeb4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800aeb6:	f015 0501 	ands.w	r5, r5, #1
 800aeba:	d1e7      	bne.n	800ae8c <_fclose_r+0x8>
 800aebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aebe:	f7fe fa7a 	bl	80093b6 <__retarget_lock_release_recursive>
 800aec2:	e7e4      	b.n	800ae8e <_fclose_r+0xa>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4630      	mov	r0, r6
 800aec8:	f000 f834 	bl	800af34 <__sflush_r>
 800aecc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aece:	4605      	mov	r5, r0
 800aed0:	b133      	cbz	r3, 800aee0 <_fclose_r+0x5c>
 800aed2:	69e1      	ldr	r1, [r4, #28]
 800aed4:	4630      	mov	r0, r6
 800aed6:	4798      	blx	r3
 800aed8:	2800      	cmp	r0, #0
 800aeda:	bfb8      	it	lt
 800aedc:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	061a      	lsls	r2, r3, #24
 800aee4:	d503      	bpl.n	800aeee <_fclose_r+0x6a>
 800aee6:	6921      	ldr	r1, [r4, #16]
 800aee8:	4630      	mov	r0, r6
 800aeea:	f7fe fad7 	bl	800949c <_free_r>
 800aeee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aef0:	b141      	cbz	r1, 800af04 <_fclose_r+0x80>
 800aef2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800aef6:	4299      	cmp	r1, r3
 800aef8:	d002      	beq.n	800af00 <_fclose_r+0x7c>
 800aefa:	4630      	mov	r0, r6
 800aefc:	f7fe face 	bl	800949c <_free_r>
 800af00:	2300      	movs	r3, #0
 800af02:	6323      	str	r3, [r4, #48]	; 0x30
 800af04:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800af06:	b121      	cbz	r1, 800af12 <_fclose_r+0x8e>
 800af08:	4630      	mov	r0, r6
 800af0a:	f7fe fac7 	bl	800949c <_free_r>
 800af0e:	2300      	movs	r3, #0
 800af10:	6463      	str	r3, [r4, #68]	; 0x44
 800af12:	f7fe f901 	bl	8009118 <__sfp_lock_acquire>
 800af16:	2300      	movs	r3, #0
 800af18:	81a3      	strh	r3, [r4, #12]
 800af1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af1c:	07db      	lsls	r3, r3, #31
 800af1e:	d402      	bmi.n	800af26 <_fclose_r+0xa2>
 800af20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af22:	f7fe fa48 	bl	80093b6 <__retarget_lock_release_recursive>
 800af26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af28:	f7fe fa43 	bl	80093b2 <__retarget_lock_close_recursive>
 800af2c:	f7fe f8fa 	bl	8009124 <__sfp_lock_release>
 800af30:	e7ad      	b.n	800ae8e <_fclose_r+0xa>
	...

0800af34 <__sflush_r>:
 800af34:	898b      	ldrh	r3, [r1, #12]
 800af36:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	4605      	mov	r5, r0
 800af40:	0718      	lsls	r0, r3, #28
 800af42:	460c      	mov	r4, r1
 800af44:	d45f      	bmi.n	800b006 <__sflush_r+0xd2>
 800af46:	684b      	ldr	r3, [r1, #4]
 800af48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	818a      	strh	r2, [r1, #12]
 800af50:	dc05      	bgt.n	800af5e <__sflush_r+0x2a>
 800af52:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800af54:	2b00      	cmp	r3, #0
 800af56:	dc02      	bgt.n	800af5e <__sflush_r+0x2a>
 800af58:	2000      	movs	r0, #0
 800af5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af60:	2e00      	cmp	r6, #0
 800af62:	d0f9      	beq.n	800af58 <__sflush_r+0x24>
 800af64:	2300      	movs	r3, #0
 800af66:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af6a:	682f      	ldr	r7, [r5, #0]
 800af6c:	69e1      	ldr	r1, [r4, #28]
 800af6e:	602b      	str	r3, [r5, #0]
 800af70:	d036      	beq.n	800afe0 <__sflush_r+0xac>
 800af72:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800af74:	89a3      	ldrh	r3, [r4, #12]
 800af76:	075a      	lsls	r2, r3, #29
 800af78:	d505      	bpl.n	800af86 <__sflush_r+0x52>
 800af7a:	6863      	ldr	r3, [r4, #4]
 800af7c:	1ac0      	subs	r0, r0, r3
 800af7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af80:	b10b      	cbz	r3, 800af86 <__sflush_r+0x52>
 800af82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af84:	1ac0      	subs	r0, r0, r3
 800af86:	2300      	movs	r3, #0
 800af88:	4602      	mov	r2, r0
 800af8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af8c:	69e1      	ldr	r1, [r4, #28]
 800af8e:	4628      	mov	r0, r5
 800af90:	47b0      	blx	r6
 800af92:	1c43      	adds	r3, r0, #1
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	d106      	bne.n	800afa6 <__sflush_r+0x72>
 800af98:	6829      	ldr	r1, [r5, #0]
 800af9a:	291d      	cmp	r1, #29
 800af9c:	d82f      	bhi.n	800affe <__sflush_r+0xca>
 800af9e:	4a2b      	ldr	r2, [pc, #172]	; (800b04c <__sflush_r+0x118>)
 800afa0:	410a      	asrs	r2, r1
 800afa2:	07d6      	lsls	r6, r2, #31
 800afa4:	d42b      	bmi.n	800affe <__sflush_r+0xca>
 800afa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afaa:	b21b      	sxth	r3, r3
 800afac:	2200      	movs	r2, #0
 800afae:	6062      	str	r2, [r4, #4]
 800afb0:	04d9      	lsls	r1, r3, #19
 800afb2:	6922      	ldr	r2, [r4, #16]
 800afb4:	81a3      	strh	r3, [r4, #12]
 800afb6:	6022      	str	r2, [r4, #0]
 800afb8:	d504      	bpl.n	800afc4 <__sflush_r+0x90>
 800afba:	1c42      	adds	r2, r0, #1
 800afbc:	d101      	bne.n	800afc2 <__sflush_r+0x8e>
 800afbe:	682b      	ldr	r3, [r5, #0]
 800afc0:	b903      	cbnz	r3, 800afc4 <__sflush_r+0x90>
 800afc2:	6520      	str	r0, [r4, #80]	; 0x50
 800afc4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800afc6:	602f      	str	r7, [r5, #0]
 800afc8:	2900      	cmp	r1, #0
 800afca:	d0c5      	beq.n	800af58 <__sflush_r+0x24>
 800afcc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800afd0:	4299      	cmp	r1, r3
 800afd2:	d002      	beq.n	800afda <__sflush_r+0xa6>
 800afd4:	4628      	mov	r0, r5
 800afd6:	f7fe fa61 	bl	800949c <_free_r>
 800afda:	2000      	movs	r0, #0
 800afdc:	6320      	str	r0, [r4, #48]	; 0x30
 800afde:	e7bc      	b.n	800af5a <__sflush_r+0x26>
 800afe0:	2301      	movs	r3, #1
 800afe2:	4628      	mov	r0, r5
 800afe4:	47b0      	blx	r6
 800afe6:	1c41      	adds	r1, r0, #1
 800afe8:	d1c4      	bne.n	800af74 <__sflush_r+0x40>
 800afea:	682b      	ldr	r3, [r5, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d0c1      	beq.n	800af74 <__sflush_r+0x40>
 800aff0:	2b1d      	cmp	r3, #29
 800aff2:	d001      	beq.n	800aff8 <__sflush_r+0xc4>
 800aff4:	2b16      	cmp	r3, #22
 800aff6:	d101      	bne.n	800affc <__sflush_r+0xc8>
 800aff8:	602f      	str	r7, [r5, #0]
 800affa:	e7ad      	b.n	800af58 <__sflush_r+0x24>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	e7a9      	b.n	800af5a <__sflush_r+0x26>
 800b006:	690f      	ldr	r7, [r1, #16]
 800b008:	2f00      	cmp	r7, #0
 800b00a:	d0a5      	beq.n	800af58 <__sflush_r+0x24>
 800b00c:	079b      	lsls	r3, r3, #30
 800b00e:	680e      	ldr	r6, [r1, #0]
 800b010:	bf08      	it	eq
 800b012:	694b      	ldreq	r3, [r1, #20]
 800b014:	600f      	str	r7, [r1, #0]
 800b016:	bf18      	it	ne
 800b018:	2300      	movne	r3, #0
 800b01a:	eba6 0807 	sub.w	r8, r6, r7
 800b01e:	608b      	str	r3, [r1, #8]
 800b020:	f1b8 0f00 	cmp.w	r8, #0
 800b024:	dd98      	ble.n	800af58 <__sflush_r+0x24>
 800b026:	69e1      	ldr	r1, [r4, #28]
 800b028:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b02a:	4643      	mov	r3, r8
 800b02c:	463a      	mov	r2, r7
 800b02e:	4628      	mov	r0, r5
 800b030:	47b0      	blx	r6
 800b032:	2800      	cmp	r0, #0
 800b034:	dc06      	bgt.n	800b044 <__sflush_r+0x110>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b042:	e78a      	b.n	800af5a <__sflush_r+0x26>
 800b044:	4407      	add	r7, r0
 800b046:	eba8 0800 	sub.w	r8, r8, r0
 800b04a:	e7e9      	b.n	800b020 <__sflush_r+0xec>
 800b04c:	dfbffffe 	.word	0xdfbffffe

0800b050 <_fflush_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	460c      	mov	r4, r1
 800b054:	4605      	mov	r5, r0
 800b056:	b118      	cbz	r0, 800b060 <_fflush_r+0x10>
 800b058:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b05a:	b90b      	cbnz	r3, 800b060 <_fflush_r+0x10>
 800b05c:	f7fe f868 	bl	8009130 <__sinit>
 800b060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b064:	b1bb      	cbz	r3, 800b096 <_fflush_r+0x46>
 800b066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b068:	07d0      	lsls	r0, r2, #31
 800b06a:	d404      	bmi.n	800b076 <_fflush_r+0x26>
 800b06c:	0599      	lsls	r1, r3, #22
 800b06e:	d402      	bmi.n	800b076 <_fflush_r+0x26>
 800b070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b072:	f7fe f99f 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800b076:	4628      	mov	r0, r5
 800b078:	4621      	mov	r1, r4
 800b07a:	f7ff ff5b 	bl	800af34 <__sflush_r>
 800b07e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b080:	07da      	lsls	r2, r3, #31
 800b082:	4605      	mov	r5, r0
 800b084:	d405      	bmi.n	800b092 <_fflush_r+0x42>
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	059b      	lsls	r3, r3, #22
 800b08a:	d402      	bmi.n	800b092 <_fflush_r+0x42>
 800b08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b08e:	f7fe f992 	bl	80093b6 <__retarget_lock_release_recursive>
 800b092:	4628      	mov	r0, r5
 800b094:	bd38      	pop	{r3, r4, r5, pc}
 800b096:	461d      	mov	r5, r3
 800b098:	e7fb      	b.n	800b092 <_fflush_r+0x42>

0800b09a <strncpy>:
 800b09a:	b510      	push	{r4, lr}
 800b09c:	3901      	subs	r1, #1
 800b09e:	4603      	mov	r3, r0
 800b0a0:	b132      	cbz	r2, 800b0b0 <strncpy+0x16>
 800b0a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b0a6:	f803 4b01 	strb.w	r4, [r3], #1
 800b0aa:	3a01      	subs	r2, #1
 800b0ac:	2c00      	cmp	r4, #0
 800b0ae:	d1f7      	bne.n	800b0a0 <strncpy+0x6>
 800b0b0:	441a      	add	r2, r3
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d100      	bne.n	800b0ba <strncpy+0x20>
 800b0b8:	bd10      	pop	{r4, pc}
 800b0ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b0be:	e7f9      	b.n	800b0b4 <strncpy+0x1a>

0800b0c0 <_localeconv_r>:
 800b0c0:	4800      	ldr	r0, [pc, #0]	; (800b0c4 <_localeconv_r+0x4>)
 800b0c2:	4770      	bx	lr
 800b0c4:	20000668 	.word	0x20000668

0800b0c8 <_sbrk_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	4d06      	ldr	r5, [pc, #24]	; (800b0e4 <_sbrk_r+0x1c>)
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	4608      	mov	r0, r1
 800b0d2:	602b      	str	r3, [r5, #0]
 800b0d4:	f7f7 f98a 	bl	80023ec <_sbrk>
 800b0d8:	1c43      	adds	r3, r0, #1
 800b0da:	d102      	bne.n	800b0e2 <_sbrk_r+0x1a>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	b103      	cbz	r3, 800b0e2 <_sbrk_r+0x1a>
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
 800b0e4:	200042a0 	.word	0x200042a0

0800b0e8 <__libc_fini_array>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d07      	ldr	r5, [pc, #28]	; (800b108 <__libc_fini_array+0x20>)
 800b0ec:	4c07      	ldr	r4, [pc, #28]	; (800b10c <__libc_fini_array+0x24>)
 800b0ee:	1b64      	subs	r4, r4, r5
 800b0f0:	10a4      	asrs	r4, r4, #2
 800b0f2:	b91c      	cbnz	r4, 800b0fc <__libc_fini_array+0x14>
 800b0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0f8:	f002 bd2e 	b.w	800db58 <_fini>
 800b0fc:	3c01      	subs	r4, #1
 800b0fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b102:	4798      	blx	r3
 800b104:	e7f5      	b.n	800b0f2 <__libc_fini_array+0xa>
 800b106:	bf00      	nop
 800b108:	0800e574 	.word	0x0800e574
 800b10c:	0800e578 	.word	0x0800e578

0800b110 <sysconf>:
 800b110:	2808      	cmp	r0, #8
 800b112:	b508      	push	{r3, lr}
 800b114:	d006      	beq.n	800b124 <sysconf+0x14>
 800b116:	f7fe f921 	bl	800935c <__errno>
 800b11a:	2316      	movs	r3, #22
 800b11c:	6003      	str	r3, [r0, #0]
 800b11e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b122:	bd08      	pop	{r3, pc}
 800b124:	2080      	movs	r0, #128	; 0x80
 800b126:	e7fc      	b.n	800b122 <sysconf+0x12>

0800b128 <frexp>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	2100      	movs	r1, #0
 800b12c:	ec55 4b10 	vmov	r4, r5, d0
 800b130:	6001      	str	r1, [r0, #0]
 800b132:	4916      	ldr	r1, [pc, #88]	; (800b18c <frexp+0x64>)
 800b134:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b138:	428a      	cmp	r2, r1
 800b13a:	4606      	mov	r6, r0
 800b13c:	462b      	mov	r3, r5
 800b13e:	dc22      	bgt.n	800b186 <frexp+0x5e>
 800b140:	ee10 1a10 	vmov	r1, s0
 800b144:	4311      	orrs	r1, r2
 800b146:	d01e      	beq.n	800b186 <frexp+0x5e>
 800b148:	4911      	ldr	r1, [pc, #68]	; (800b190 <frexp+0x68>)
 800b14a:	4029      	ands	r1, r5
 800b14c:	b969      	cbnz	r1, 800b16a <frexp+0x42>
 800b14e:	4b11      	ldr	r3, [pc, #68]	; (800b194 <frexp+0x6c>)
 800b150:	2200      	movs	r2, #0
 800b152:	ee10 0a10 	vmov	r0, s0
 800b156:	4629      	mov	r1, r5
 800b158:	f7f5 fa4e 	bl	80005f8 <__aeabi_dmul>
 800b15c:	460b      	mov	r3, r1
 800b15e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b162:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b166:	4604      	mov	r4, r0
 800b168:	6031      	str	r1, [r6, #0]
 800b16a:	6831      	ldr	r1, [r6, #0]
 800b16c:	1512      	asrs	r2, r2, #20
 800b16e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b172:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800b176:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b17a:	4411      	add	r1, r2
 800b17c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800b180:	6031      	str	r1, [r6, #0]
 800b182:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b186:	ec45 4b10 	vmov	d0, r4, r5
 800b18a:	bd70      	pop	{r4, r5, r6, pc}
 800b18c:	7fefffff 	.word	0x7fefffff
 800b190:	7ff00000 	.word	0x7ff00000
 800b194:	43500000 	.word	0x43500000

0800b198 <__register_exitproc>:
 800b198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b19c:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b214 <__register_exitproc+0x7c>
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	f8da 0000 	ldr.w	r0, [sl]
 800b1a6:	4698      	mov	r8, r3
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	4691      	mov	r9, r2
 800b1ac:	f7fe f902 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800b1b0:	4b16      	ldr	r3, [pc, #88]	; (800b20c <__register_exitproc+0x74>)
 800b1b2:	681c      	ldr	r4, [r3, #0]
 800b1b4:	b90c      	cbnz	r4, 800b1ba <__register_exitproc+0x22>
 800b1b6:	4c16      	ldr	r4, [pc, #88]	; (800b210 <__register_exitproc+0x78>)
 800b1b8:	601c      	str	r4, [r3, #0]
 800b1ba:	6865      	ldr	r5, [r4, #4]
 800b1bc:	f8da 0000 	ldr.w	r0, [sl]
 800b1c0:	2d1f      	cmp	r5, #31
 800b1c2:	dd05      	ble.n	800b1d0 <__register_exitproc+0x38>
 800b1c4:	f7fe f8f7 	bl	80093b6 <__retarget_lock_release_recursive>
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d0:	b19e      	cbz	r6, 800b1fa <__register_exitproc+0x62>
 800b1d2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800b1dc:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800b1e0:	40aa      	lsls	r2, r5
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800b1e8:	2e02      	cmp	r6, #2
 800b1ea:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800b1ee:	bf02      	ittt	eq
 800b1f0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800b1f4:	4313      	orreq	r3, r2
 800b1f6:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800b1fa:	1c6b      	adds	r3, r5, #1
 800b1fc:	3502      	adds	r5, #2
 800b1fe:	6063      	str	r3, [r4, #4]
 800b200:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800b204:	f7fe f8d7 	bl	80093b6 <__retarget_lock_release_recursive>
 800b208:	2000      	movs	r0, #0
 800b20a:	e7df      	b.n	800b1cc <__register_exitproc+0x34>
 800b20c:	200042a8 	.word	0x200042a8
 800b210:	200042e0 	.word	0x200042e0
 800b214:	20000164 	.word	0x20000164

0800b218 <quorem>:
 800b218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	6903      	ldr	r3, [r0, #16]
 800b21e:	690c      	ldr	r4, [r1, #16]
 800b220:	42a3      	cmp	r3, r4
 800b222:	4607      	mov	r7, r0
 800b224:	db7e      	blt.n	800b324 <quorem+0x10c>
 800b226:	3c01      	subs	r4, #1
 800b228:	f101 0814 	add.w	r8, r1, #20
 800b22c:	f100 0514 	add.w	r5, r0, #20
 800b230:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b23a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b23e:	3301      	adds	r3, #1
 800b240:	429a      	cmp	r2, r3
 800b242:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b246:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b24a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b24e:	d331      	bcc.n	800b2b4 <quorem+0x9c>
 800b250:	f04f 0e00 	mov.w	lr, #0
 800b254:	4640      	mov	r0, r8
 800b256:	46ac      	mov	ip, r5
 800b258:	46f2      	mov	sl, lr
 800b25a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b25e:	b293      	uxth	r3, r2
 800b260:	fb06 e303 	mla	r3, r6, r3, lr
 800b264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b268:	0c1a      	lsrs	r2, r3, #16
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	ebaa 0303 	sub.w	r3, sl, r3
 800b270:	f8dc a000 	ldr.w	sl, [ip]
 800b274:	fa13 f38a 	uxtah	r3, r3, sl
 800b278:	fb06 220e 	mla	r2, r6, lr, r2
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	9b00      	ldr	r3, [sp, #0]
 800b280:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b284:	b292      	uxth	r2, r2
 800b286:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b28a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b28e:	f8bd 3000 	ldrh.w	r3, [sp]
 800b292:	4581      	cmp	r9, r0
 800b294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b298:	f84c 3b04 	str.w	r3, [ip], #4
 800b29c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b2a0:	d2db      	bcs.n	800b25a <quorem+0x42>
 800b2a2:	f855 300b 	ldr.w	r3, [r5, fp]
 800b2a6:	b92b      	cbnz	r3, 800b2b4 <quorem+0x9c>
 800b2a8:	9b01      	ldr	r3, [sp, #4]
 800b2aa:	3b04      	subs	r3, #4
 800b2ac:	429d      	cmp	r5, r3
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	d32c      	bcc.n	800b30c <quorem+0xf4>
 800b2b2:	613c      	str	r4, [r7, #16]
 800b2b4:	4638      	mov	r0, r7
 800b2b6:	f001 f83b 	bl	800c330 <__mcmp>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	db22      	blt.n	800b304 <quorem+0xec>
 800b2be:	3601      	adds	r6, #1
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2c8:	f8d1 c000 	ldr.w	ip, [r1]
 800b2cc:	b293      	uxth	r3, r2
 800b2ce:	1ac3      	subs	r3, r0, r3
 800b2d0:	0c12      	lsrs	r2, r2, #16
 800b2d2:	fa13 f38c 	uxtah	r3, r3, ip
 800b2d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b2da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2e4:	45c1      	cmp	r9, r8
 800b2e6:	f841 3b04 	str.w	r3, [r1], #4
 800b2ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b2ee:	d2e9      	bcs.n	800b2c4 <quorem+0xac>
 800b2f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2f8:	b922      	cbnz	r2, 800b304 <quorem+0xec>
 800b2fa:	3b04      	subs	r3, #4
 800b2fc:	429d      	cmp	r5, r3
 800b2fe:	461a      	mov	r2, r3
 800b300:	d30a      	bcc.n	800b318 <quorem+0x100>
 800b302:	613c      	str	r4, [r7, #16]
 800b304:	4630      	mov	r0, r6
 800b306:	b003      	add	sp, #12
 800b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30c:	6812      	ldr	r2, [r2, #0]
 800b30e:	3b04      	subs	r3, #4
 800b310:	2a00      	cmp	r2, #0
 800b312:	d1ce      	bne.n	800b2b2 <quorem+0x9a>
 800b314:	3c01      	subs	r4, #1
 800b316:	e7c9      	b.n	800b2ac <quorem+0x94>
 800b318:	6812      	ldr	r2, [r2, #0]
 800b31a:	3b04      	subs	r3, #4
 800b31c:	2a00      	cmp	r2, #0
 800b31e:	d1f0      	bne.n	800b302 <quorem+0xea>
 800b320:	3c01      	subs	r4, #1
 800b322:	e7eb      	b.n	800b2fc <quorem+0xe4>
 800b324:	2000      	movs	r0, #0
 800b326:	e7ee      	b.n	800b306 <quorem+0xee>

0800b328 <_dtoa_r>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	ed2d 8b04 	vpush	{d8-d9}
 800b330:	b093      	sub	sp, #76	; 0x4c
 800b332:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b336:	9107      	str	r1, [sp, #28]
 800b338:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b33a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b33c:	920a      	str	r2, [sp, #40]	; 0x28
 800b33e:	ec57 6b10 	vmov	r6, r7, d0
 800b342:	4604      	mov	r4, r0
 800b344:	930d      	str	r3, [sp, #52]	; 0x34
 800b346:	b141      	cbz	r1, 800b35a <_dtoa_r+0x32>
 800b348:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b34a:	604a      	str	r2, [r1, #4]
 800b34c:	2301      	movs	r3, #1
 800b34e:	4093      	lsls	r3, r2
 800b350:	608b      	str	r3, [r1, #8]
 800b352:	f000 fde4 	bl	800bf1e <_Bfree>
 800b356:	2300      	movs	r3, #0
 800b358:	63a3      	str	r3, [r4, #56]	; 0x38
 800b35a:	1e3b      	subs	r3, r7, #0
 800b35c:	bfb9      	ittee	lt
 800b35e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b362:	9303      	strlt	r3, [sp, #12]
 800b364:	2300      	movge	r3, #0
 800b366:	602b      	strge	r3, [r5, #0]
 800b368:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b36c:	4ba2      	ldr	r3, [pc, #648]	; (800b5f8 <_dtoa_r+0x2d0>)
 800b36e:	bfbc      	itt	lt
 800b370:	2201      	movlt	r2, #1
 800b372:	602a      	strlt	r2, [r5, #0]
 800b374:	ea33 0308 	bics.w	r3, r3, r8
 800b378:	d11b      	bne.n	800b3b2 <_dtoa_r+0x8a>
 800b37a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b37c:	f242 730f 	movw	r3, #9999	; 0x270f
 800b380:	6013      	str	r3, [r2, #0]
 800b382:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b386:	4333      	orrs	r3, r6
 800b388:	f000 858f 	beq.w	800beaa <_dtoa_r+0xb82>
 800b38c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b38e:	b90b      	cbnz	r3, 800b394 <_dtoa_r+0x6c>
 800b390:	4b9a      	ldr	r3, [pc, #616]	; (800b5fc <_dtoa_r+0x2d4>)
 800b392:	e027      	b.n	800b3e4 <_dtoa_r+0xbc>
 800b394:	4b99      	ldr	r3, [pc, #612]	; (800b5fc <_dtoa_r+0x2d4>)
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	3303      	adds	r3, #3
 800b39a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	9800      	ldr	r0, [sp, #0]
 800b3a0:	b013      	add	sp, #76	; 0x4c
 800b3a2:	ecbd 8b04 	vpop	{d8-d9}
 800b3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3aa:	4b95      	ldr	r3, [pc, #596]	; (800b600 <_dtoa_r+0x2d8>)
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	e7f3      	b.n	800b39a <_dtoa_r+0x72>
 800b3b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	ec51 0b17 	vmov	r0, r1, d7
 800b3bc:	eeb0 8a47 	vmov.f32	s16, s14
 800b3c0:	eef0 8a67 	vmov.f32	s17, s15
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f7f5 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3ca:	4681      	mov	r9, r0
 800b3cc:	b160      	cbz	r0, 800b3e8 <_dtoa_r+0xc0>
 800b3ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f000 8564 	beq.w	800bea4 <_dtoa_r+0xb7c>
 800b3dc:	4b89      	ldr	r3, [pc, #548]	; (800b604 <_dtoa_r+0x2dc>)
 800b3de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	e7da      	b.n	800b39e <_dtoa_r+0x76>
 800b3e8:	aa10      	add	r2, sp, #64	; 0x40
 800b3ea:	a911      	add	r1, sp, #68	; 0x44
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	eeb0 0a48 	vmov.f32	s0, s16
 800b3f2:	eef0 0a68 	vmov.f32	s1, s17
 800b3f6:	f001 f841 	bl	800c47c <__d2b>
 800b3fa:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b3fe:	4682      	mov	sl, r0
 800b400:	2d00      	cmp	r5, #0
 800b402:	d07e      	beq.n	800b502 <_dtoa_r+0x1da>
 800b404:	ee18 3a90 	vmov	r3, s17
 800b408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b40c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b410:	ec51 0b18 	vmov	r0, r1, d8
 800b414:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b418:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b41c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b420:	4619      	mov	r1, r3
 800b422:	2200      	movs	r2, #0
 800b424:	4b78      	ldr	r3, [pc, #480]	; (800b608 <_dtoa_r+0x2e0>)
 800b426:	f7f4 ff2f 	bl	8000288 <__aeabi_dsub>
 800b42a:	a36d      	add	r3, pc, #436	; (adr r3, 800b5e0 <_dtoa_r+0x2b8>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	f7f5 f8e2 	bl	80005f8 <__aeabi_dmul>
 800b434:	a36c      	add	r3, pc, #432	; (adr r3, 800b5e8 <_dtoa_r+0x2c0>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f7f4 ff27 	bl	800028c <__adddf3>
 800b43e:	4606      	mov	r6, r0
 800b440:	4628      	mov	r0, r5
 800b442:	460f      	mov	r7, r1
 800b444:	f7f5 f86e 	bl	8000524 <__aeabi_i2d>
 800b448:	a369      	add	r3, pc, #420	; (adr r3, 800b5f0 <_dtoa_r+0x2c8>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f7f5 f8d3 	bl	80005f8 <__aeabi_dmul>
 800b452:	4602      	mov	r2, r0
 800b454:	460b      	mov	r3, r1
 800b456:	4630      	mov	r0, r6
 800b458:	4639      	mov	r1, r7
 800b45a:	f7f4 ff17 	bl	800028c <__adddf3>
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	f7f5 fb79 	bl	8000b58 <__aeabi_d2iz>
 800b466:	2200      	movs	r2, #0
 800b468:	4683      	mov	fp, r0
 800b46a:	2300      	movs	r3, #0
 800b46c:	4630      	mov	r0, r6
 800b46e:	4639      	mov	r1, r7
 800b470:	f7f5 fb34 	bl	8000adc <__aeabi_dcmplt>
 800b474:	b148      	cbz	r0, 800b48a <_dtoa_r+0x162>
 800b476:	4658      	mov	r0, fp
 800b478:	f7f5 f854 	bl	8000524 <__aeabi_i2d>
 800b47c:	4632      	mov	r2, r6
 800b47e:	463b      	mov	r3, r7
 800b480:	f7f5 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 800b484:	b908      	cbnz	r0, 800b48a <_dtoa_r+0x162>
 800b486:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b48a:	f1bb 0f16 	cmp.w	fp, #22
 800b48e:	d856      	bhi.n	800b53e <_dtoa_r+0x216>
 800b490:	4b5e      	ldr	r3, [pc, #376]	; (800b60c <_dtoa_r+0x2e4>)
 800b492:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	ec51 0b18 	vmov	r0, r1, d8
 800b49e:	f7f5 fb1d 	bl	8000adc <__aeabi_dcmplt>
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d04d      	beq.n	800b542 <_dtoa_r+0x21a>
 800b4a6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	930c      	str	r3, [sp, #48]	; 0x30
 800b4ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4b0:	1b5b      	subs	r3, r3, r5
 800b4b2:	1e5a      	subs	r2, r3, #1
 800b4b4:	bf45      	ittet	mi
 800b4b6:	f1c3 0301 	rsbmi	r3, r3, #1
 800b4ba:	9305      	strmi	r3, [sp, #20]
 800b4bc:	2300      	movpl	r3, #0
 800b4be:	2300      	movmi	r3, #0
 800b4c0:	9206      	str	r2, [sp, #24]
 800b4c2:	bf54      	ite	pl
 800b4c4:	9305      	strpl	r3, [sp, #20]
 800b4c6:	9306      	strmi	r3, [sp, #24]
 800b4c8:	f1bb 0f00 	cmp.w	fp, #0
 800b4cc:	db3b      	blt.n	800b546 <_dtoa_r+0x21e>
 800b4ce:	9b06      	ldr	r3, [sp, #24]
 800b4d0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b4d4:	445b      	add	r3, fp
 800b4d6:	9306      	str	r3, [sp, #24]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	9308      	str	r3, [sp, #32]
 800b4dc:	9b07      	ldr	r3, [sp, #28]
 800b4de:	2b09      	cmp	r3, #9
 800b4e0:	d868      	bhi.n	800b5b4 <_dtoa_r+0x28c>
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	bfc4      	itt	gt
 800b4e6:	3b04      	subgt	r3, #4
 800b4e8:	9307      	strgt	r3, [sp, #28]
 800b4ea:	9b07      	ldr	r3, [sp, #28]
 800b4ec:	f1a3 0302 	sub.w	r3, r3, #2
 800b4f0:	bfcc      	ite	gt
 800b4f2:	2500      	movgt	r5, #0
 800b4f4:	2501      	movle	r5, #1
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d867      	bhi.n	800b5ca <_dtoa_r+0x2a2>
 800b4fa:	e8df f003 	tbb	[pc, r3]
 800b4fe:	3b2e      	.short	0x3b2e
 800b500:	5939      	.short	0x5939
 800b502:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b506:	441d      	add	r5, r3
 800b508:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b50c:	2b20      	cmp	r3, #32
 800b50e:	bfc1      	itttt	gt
 800b510:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b514:	fa08 f803 	lslgt.w	r8, r8, r3
 800b518:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b51c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b520:	bfd6      	itet	le
 800b522:	f1c3 0320 	rsble	r3, r3, #32
 800b526:	ea48 0003 	orrgt.w	r0, r8, r3
 800b52a:	fa06 f003 	lslle.w	r0, r6, r3
 800b52e:	f7f4 ffe9 	bl	8000504 <__aeabi_ui2d>
 800b532:	2201      	movs	r2, #1
 800b534:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b538:	3d01      	subs	r5, #1
 800b53a:	920e      	str	r2, [sp, #56]	; 0x38
 800b53c:	e770      	b.n	800b420 <_dtoa_r+0xf8>
 800b53e:	2301      	movs	r3, #1
 800b540:	e7b4      	b.n	800b4ac <_dtoa_r+0x184>
 800b542:	900c      	str	r0, [sp, #48]	; 0x30
 800b544:	e7b3      	b.n	800b4ae <_dtoa_r+0x186>
 800b546:	9b05      	ldr	r3, [sp, #20]
 800b548:	eba3 030b 	sub.w	r3, r3, fp
 800b54c:	9305      	str	r3, [sp, #20]
 800b54e:	f1cb 0300 	rsb	r3, fp, #0
 800b552:	9308      	str	r3, [sp, #32]
 800b554:	2300      	movs	r3, #0
 800b556:	930b      	str	r3, [sp, #44]	; 0x2c
 800b558:	e7c0      	b.n	800b4dc <_dtoa_r+0x1b4>
 800b55a:	2300      	movs	r3, #0
 800b55c:	9309      	str	r3, [sp, #36]	; 0x24
 800b55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b560:	2b00      	cmp	r3, #0
 800b562:	dc35      	bgt.n	800b5d0 <_dtoa_r+0x2a8>
 800b564:	2301      	movs	r3, #1
 800b566:	9301      	str	r3, [sp, #4]
 800b568:	9304      	str	r3, [sp, #16]
 800b56a:	461a      	mov	r2, r3
 800b56c:	920a      	str	r2, [sp, #40]	; 0x28
 800b56e:	e00b      	b.n	800b588 <_dtoa_r+0x260>
 800b570:	2301      	movs	r3, #1
 800b572:	e7f3      	b.n	800b55c <_dtoa_r+0x234>
 800b574:	2300      	movs	r3, #0
 800b576:	9309      	str	r3, [sp, #36]	; 0x24
 800b578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b57a:	445b      	add	r3, fp
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	3301      	adds	r3, #1
 800b580:	2b01      	cmp	r3, #1
 800b582:	9304      	str	r3, [sp, #16]
 800b584:	bfb8      	it	lt
 800b586:	2301      	movlt	r3, #1
 800b588:	2100      	movs	r1, #0
 800b58a:	2204      	movs	r2, #4
 800b58c:	f102 0014 	add.w	r0, r2, #20
 800b590:	4298      	cmp	r0, r3
 800b592:	d921      	bls.n	800b5d8 <_dtoa_r+0x2b0>
 800b594:	63e1      	str	r1, [r4, #60]	; 0x3c
 800b596:	4620      	mov	r0, r4
 800b598:	f000 fc9c 	bl	800bed4 <_Balloc>
 800b59c:	9000      	str	r0, [sp, #0]
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d13a      	bne.n	800b618 <_dtoa_r+0x2f0>
 800b5a2:	4b1b      	ldr	r3, [pc, #108]	; (800b610 <_dtoa_r+0x2e8>)
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	f240 11af 	movw	r1, #431	; 0x1af
 800b5aa:	481a      	ldr	r0, [pc, #104]	; (800b614 <_dtoa_r+0x2ec>)
 800b5ac:	f001 f85e 	bl	800c66c <__assert_func>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e7e0      	b.n	800b576 <_dtoa_r+0x24e>
 800b5b4:	2501      	movs	r5, #1
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	9307      	str	r3, [sp, #28]
 800b5ba:	9509      	str	r5, [sp, #36]	; 0x24
 800b5bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2312      	movs	r3, #18
 800b5c8:	e7d0      	b.n	800b56c <_dtoa_r+0x244>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ce:	e7f5      	b.n	800b5bc <_dtoa_r+0x294>
 800b5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	9304      	str	r3, [sp, #16]
 800b5d6:	e7d7      	b.n	800b588 <_dtoa_r+0x260>
 800b5d8:	3101      	adds	r1, #1
 800b5da:	0052      	lsls	r2, r2, #1
 800b5dc:	e7d6      	b.n	800b58c <_dtoa_r+0x264>
 800b5de:	bf00      	nop
 800b5e0:	636f4361 	.word	0x636f4361
 800b5e4:	3fd287a7 	.word	0x3fd287a7
 800b5e8:	8b60c8b3 	.word	0x8b60c8b3
 800b5ec:	3fc68a28 	.word	0x3fc68a28
 800b5f0:	509f79fb 	.word	0x509f79fb
 800b5f4:	3fd34413 	.word	0x3fd34413
 800b5f8:	7ff00000 	.word	0x7ff00000
 800b5fc:	0800e239 	.word	0x0800e239
 800b600:	0800e230 	.word	0x0800e230
 800b604:	0800e20f 	.word	0x0800e20f
 800b608:	3ff80000 	.word	0x3ff80000
 800b60c:	0800e328 	.word	0x0800e328
 800b610:	0800e23d 	.word	0x0800e23d
 800b614:	0800e24e 	.word	0x0800e24e
 800b618:	9b00      	ldr	r3, [sp, #0]
 800b61a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b61c:	9b04      	ldr	r3, [sp, #16]
 800b61e:	2b0e      	cmp	r3, #14
 800b620:	f200 80a8 	bhi.w	800b774 <_dtoa_r+0x44c>
 800b624:	2d00      	cmp	r5, #0
 800b626:	f000 80a5 	beq.w	800b774 <_dtoa_r+0x44c>
 800b62a:	f1bb 0f00 	cmp.w	fp, #0
 800b62e:	dd38      	ble.n	800b6a2 <_dtoa_r+0x37a>
 800b630:	4bbf      	ldr	r3, [pc, #764]	; (800b930 <_dtoa_r+0x608>)
 800b632:	f00b 020f 	and.w	r2, fp, #15
 800b636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b63a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b63e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b642:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b646:	d019      	beq.n	800b67c <_dtoa_r+0x354>
 800b648:	4bba      	ldr	r3, [pc, #744]	; (800b934 <_dtoa_r+0x60c>)
 800b64a:	ec51 0b18 	vmov	r0, r1, d8
 800b64e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b652:	f7f5 f8fb 	bl	800084c <__aeabi_ddiv>
 800b656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b65a:	f008 080f 	and.w	r8, r8, #15
 800b65e:	2503      	movs	r5, #3
 800b660:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b934 <_dtoa_r+0x60c>
 800b664:	f1b8 0f00 	cmp.w	r8, #0
 800b668:	d10a      	bne.n	800b680 <_dtoa_r+0x358>
 800b66a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b66e:	4632      	mov	r2, r6
 800b670:	463b      	mov	r3, r7
 800b672:	f7f5 f8eb 	bl	800084c <__aeabi_ddiv>
 800b676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b67a:	e02b      	b.n	800b6d4 <_dtoa_r+0x3ac>
 800b67c:	2502      	movs	r5, #2
 800b67e:	e7ef      	b.n	800b660 <_dtoa_r+0x338>
 800b680:	f018 0f01 	tst.w	r8, #1
 800b684:	d008      	beq.n	800b698 <_dtoa_r+0x370>
 800b686:	4630      	mov	r0, r6
 800b688:	4639      	mov	r1, r7
 800b68a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b68e:	f7f4 ffb3 	bl	80005f8 <__aeabi_dmul>
 800b692:	3501      	adds	r5, #1
 800b694:	4606      	mov	r6, r0
 800b696:	460f      	mov	r7, r1
 800b698:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b69c:	f109 0908 	add.w	r9, r9, #8
 800b6a0:	e7e0      	b.n	800b664 <_dtoa_r+0x33c>
 800b6a2:	f000 809f 	beq.w	800b7e4 <_dtoa_r+0x4bc>
 800b6a6:	f1cb 0600 	rsb	r6, fp, #0
 800b6aa:	4ba1      	ldr	r3, [pc, #644]	; (800b930 <_dtoa_r+0x608>)
 800b6ac:	4fa1      	ldr	r7, [pc, #644]	; (800b934 <_dtoa_r+0x60c>)
 800b6ae:	f006 020f 	and.w	r2, r6, #15
 800b6b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	ec51 0b18 	vmov	r0, r1, d8
 800b6be:	f7f4 ff9b 	bl	80005f8 <__aeabi_dmul>
 800b6c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6c6:	1136      	asrs	r6, r6, #4
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	2502      	movs	r5, #2
 800b6cc:	2e00      	cmp	r6, #0
 800b6ce:	d17e      	bne.n	800b7ce <_dtoa_r+0x4a6>
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1d0      	bne.n	800b676 <_dtoa_r+0x34e>
 800b6d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f000 8084 	beq.w	800b7e8 <_dtoa_r+0x4c0>
 800b6e0:	4b95      	ldr	r3, [pc, #596]	; (800b938 <_dtoa_r+0x610>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	f7f5 f9f8 	bl	8000adc <__aeabi_dcmplt>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d07b      	beq.n	800b7e8 <_dtoa_r+0x4c0>
 800b6f0:	9b04      	ldr	r3, [sp, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d078      	beq.n	800b7e8 <_dtoa_r+0x4c0>
 800b6f6:	9b01      	ldr	r3, [sp, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	dd39      	ble.n	800b770 <_dtoa_r+0x448>
 800b6fc:	4b8f      	ldr	r3, [pc, #572]	; (800b93c <_dtoa_r+0x614>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	4640      	mov	r0, r8
 800b702:	4649      	mov	r1, r9
 800b704:	f7f4 ff78 	bl	80005f8 <__aeabi_dmul>
 800b708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b70c:	9e01      	ldr	r6, [sp, #4]
 800b70e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800b712:	3501      	adds	r5, #1
 800b714:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b718:	4628      	mov	r0, r5
 800b71a:	f7f4 ff03 	bl	8000524 <__aeabi_i2d>
 800b71e:	4642      	mov	r2, r8
 800b720:	464b      	mov	r3, r9
 800b722:	f7f4 ff69 	bl	80005f8 <__aeabi_dmul>
 800b726:	4b86      	ldr	r3, [pc, #536]	; (800b940 <_dtoa_r+0x618>)
 800b728:	2200      	movs	r2, #0
 800b72a:	f7f4 fdaf 	bl	800028c <__adddf3>
 800b72e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b736:	9303      	str	r3, [sp, #12]
 800b738:	2e00      	cmp	r6, #0
 800b73a:	d158      	bne.n	800b7ee <_dtoa_r+0x4c6>
 800b73c:	4b81      	ldr	r3, [pc, #516]	; (800b944 <_dtoa_r+0x61c>)
 800b73e:	2200      	movs	r2, #0
 800b740:	4640      	mov	r0, r8
 800b742:	4649      	mov	r1, r9
 800b744:	f7f4 fda0 	bl	8000288 <__aeabi_dsub>
 800b748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b74c:	4680      	mov	r8, r0
 800b74e:	4689      	mov	r9, r1
 800b750:	f7f5 f9e2 	bl	8000b18 <__aeabi_dcmpgt>
 800b754:	2800      	cmp	r0, #0
 800b756:	f040 8295 	bne.w	800bc84 <_dtoa_r+0x95c>
 800b75a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b75e:	4640      	mov	r0, r8
 800b760:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b764:	4649      	mov	r1, r9
 800b766:	f7f5 f9b9 	bl	8000adc <__aeabi_dcmplt>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	f040 8288 	bne.w	800bc80 <_dtoa_r+0x958>
 800b770:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b774:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b776:	2b00      	cmp	r3, #0
 800b778:	f2c0 814d 	blt.w	800ba16 <_dtoa_r+0x6ee>
 800b77c:	f1bb 0f0e 	cmp.w	fp, #14
 800b780:	f300 8149 	bgt.w	800ba16 <_dtoa_r+0x6ee>
 800b784:	4b6a      	ldr	r3, [pc, #424]	; (800b930 <_dtoa_r+0x608>)
 800b786:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b78a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b790:	2b00      	cmp	r3, #0
 800b792:	f280 80db 	bge.w	800b94c <_dtoa_r+0x624>
 800b796:	9b04      	ldr	r3, [sp, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f300 80d7 	bgt.w	800b94c <_dtoa_r+0x624>
 800b79e:	f040 826e 	bne.w	800bc7e <_dtoa_r+0x956>
 800b7a2:	4b68      	ldr	r3, [pc, #416]	; (800b944 <_dtoa_r+0x61c>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	f7f4 ff25 	bl	80005f8 <__aeabi_dmul>
 800b7ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7b2:	f7f5 f9a7 	bl	8000b04 <__aeabi_dcmpge>
 800b7b6:	9e04      	ldr	r6, [sp, #16]
 800b7b8:	4637      	mov	r7, r6
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	f040 8244 	bne.w	800bc48 <_dtoa_r+0x920>
 800b7c0:	9d00      	ldr	r5, [sp, #0]
 800b7c2:	2331      	movs	r3, #49	; 0x31
 800b7c4:	f805 3b01 	strb.w	r3, [r5], #1
 800b7c8:	f10b 0b01 	add.w	fp, fp, #1
 800b7cc:	e240      	b.n	800bc50 <_dtoa_r+0x928>
 800b7ce:	07f2      	lsls	r2, r6, #31
 800b7d0:	d505      	bpl.n	800b7de <_dtoa_r+0x4b6>
 800b7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7d6:	f7f4 ff0f 	bl	80005f8 <__aeabi_dmul>
 800b7da:	3501      	adds	r5, #1
 800b7dc:	2301      	movs	r3, #1
 800b7de:	1076      	asrs	r6, r6, #1
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	e773      	b.n	800b6cc <_dtoa_r+0x3a4>
 800b7e4:	2502      	movs	r5, #2
 800b7e6:	e775      	b.n	800b6d4 <_dtoa_r+0x3ac>
 800b7e8:	9e04      	ldr	r6, [sp, #16]
 800b7ea:	465f      	mov	r7, fp
 800b7ec:	e792      	b.n	800b714 <_dtoa_r+0x3ec>
 800b7ee:	9900      	ldr	r1, [sp, #0]
 800b7f0:	4b4f      	ldr	r3, [pc, #316]	; (800b930 <_dtoa_r+0x608>)
 800b7f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7f6:	4431      	add	r1, r6
 800b7f8:	9102      	str	r1, [sp, #8]
 800b7fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7fc:	eeb0 9a47 	vmov.f32	s18, s14
 800b800:	eef0 9a67 	vmov.f32	s19, s15
 800b804:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b808:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b80c:	2900      	cmp	r1, #0
 800b80e:	d044      	beq.n	800b89a <_dtoa_r+0x572>
 800b810:	494d      	ldr	r1, [pc, #308]	; (800b948 <_dtoa_r+0x620>)
 800b812:	2000      	movs	r0, #0
 800b814:	f7f5 f81a 	bl	800084c <__aeabi_ddiv>
 800b818:	ec53 2b19 	vmov	r2, r3, d9
 800b81c:	f7f4 fd34 	bl	8000288 <__aeabi_dsub>
 800b820:	9d00      	ldr	r5, [sp, #0]
 800b822:	ec41 0b19 	vmov	d9, r0, r1
 800b826:	4649      	mov	r1, r9
 800b828:	4640      	mov	r0, r8
 800b82a:	f7f5 f995 	bl	8000b58 <__aeabi_d2iz>
 800b82e:	4606      	mov	r6, r0
 800b830:	f7f4 fe78 	bl	8000524 <__aeabi_i2d>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4640      	mov	r0, r8
 800b83a:	4649      	mov	r1, r9
 800b83c:	f7f4 fd24 	bl	8000288 <__aeabi_dsub>
 800b840:	3630      	adds	r6, #48	; 0x30
 800b842:	f805 6b01 	strb.w	r6, [r5], #1
 800b846:	ec53 2b19 	vmov	r2, r3, d9
 800b84a:	4680      	mov	r8, r0
 800b84c:	4689      	mov	r9, r1
 800b84e:	f7f5 f945 	bl	8000adc <__aeabi_dcmplt>
 800b852:	2800      	cmp	r0, #0
 800b854:	d164      	bne.n	800b920 <_dtoa_r+0x5f8>
 800b856:	4642      	mov	r2, r8
 800b858:	464b      	mov	r3, r9
 800b85a:	4937      	ldr	r1, [pc, #220]	; (800b938 <_dtoa_r+0x610>)
 800b85c:	2000      	movs	r0, #0
 800b85e:	f7f4 fd13 	bl	8000288 <__aeabi_dsub>
 800b862:	ec53 2b19 	vmov	r2, r3, d9
 800b866:	f7f5 f939 	bl	8000adc <__aeabi_dcmplt>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	f040 80b5 	bne.w	800b9da <_dtoa_r+0x6b2>
 800b870:	9b02      	ldr	r3, [sp, #8]
 800b872:	429d      	cmp	r5, r3
 800b874:	f43f af7c 	beq.w	800b770 <_dtoa_r+0x448>
 800b878:	4b30      	ldr	r3, [pc, #192]	; (800b93c <_dtoa_r+0x614>)
 800b87a:	ec51 0b19 	vmov	r0, r1, d9
 800b87e:	2200      	movs	r2, #0
 800b880:	f7f4 feba 	bl	80005f8 <__aeabi_dmul>
 800b884:	4b2d      	ldr	r3, [pc, #180]	; (800b93c <_dtoa_r+0x614>)
 800b886:	ec41 0b19 	vmov	d9, r0, r1
 800b88a:	2200      	movs	r2, #0
 800b88c:	4640      	mov	r0, r8
 800b88e:	4649      	mov	r1, r9
 800b890:	f7f4 feb2 	bl	80005f8 <__aeabi_dmul>
 800b894:	4680      	mov	r8, r0
 800b896:	4689      	mov	r9, r1
 800b898:	e7c5      	b.n	800b826 <_dtoa_r+0x4fe>
 800b89a:	ec51 0b17 	vmov	r0, r1, d7
 800b89e:	f7f4 feab 	bl	80005f8 <__aeabi_dmul>
 800b8a2:	9b02      	ldr	r3, [sp, #8]
 800b8a4:	9d00      	ldr	r5, [sp, #0]
 800b8a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8a8:	ec41 0b19 	vmov	d9, r0, r1
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	f7f5 f952 	bl	8000b58 <__aeabi_d2iz>
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	f7f4 fe35 	bl	8000524 <__aeabi_i2d>
 800b8ba:	3630      	adds	r6, #48	; 0x30
 800b8bc:	4602      	mov	r2, r0
 800b8be:	460b      	mov	r3, r1
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	4649      	mov	r1, r9
 800b8c4:	f7f4 fce0 	bl	8000288 <__aeabi_dsub>
 800b8c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b8cc:	9b02      	ldr	r3, [sp, #8]
 800b8ce:	429d      	cmp	r5, r3
 800b8d0:	4680      	mov	r8, r0
 800b8d2:	4689      	mov	r9, r1
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	d124      	bne.n	800b924 <_dtoa_r+0x5fc>
 800b8da:	4b1b      	ldr	r3, [pc, #108]	; (800b948 <_dtoa_r+0x620>)
 800b8dc:	ec51 0b19 	vmov	r0, r1, d9
 800b8e0:	f7f4 fcd4 	bl	800028c <__adddf3>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	f7f5 f914 	bl	8000b18 <__aeabi_dcmpgt>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d172      	bne.n	800b9da <_dtoa_r+0x6b2>
 800b8f4:	ec53 2b19 	vmov	r2, r3, d9
 800b8f8:	4913      	ldr	r1, [pc, #76]	; (800b948 <_dtoa_r+0x620>)
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	f7f4 fcc4 	bl	8000288 <__aeabi_dsub>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	4640      	mov	r0, r8
 800b906:	4649      	mov	r1, r9
 800b908:	f7f5 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	f43f af2f 	beq.w	800b770 <_dtoa_r+0x448>
 800b912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b914:	1e6b      	subs	r3, r5, #1
 800b916:	930f      	str	r3, [sp, #60]	; 0x3c
 800b918:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b91c:	2b30      	cmp	r3, #48	; 0x30
 800b91e:	d0f8      	beq.n	800b912 <_dtoa_r+0x5ea>
 800b920:	46bb      	mov	fp, r7
 800b922:	e049      	b.n	800b9b8 <_dtoa_r+0x690>
 800b924:	4b05      	ldr	r3, [pc, #20]	; (800b93c <_dtoa_r+0x614>)
 800b926:	f7f4 fe67 	bl	80005f8 <__aeabi_dmul>
 800b92a:	4680      	mov	r8, r0
 800b92c:	4689      	mov	r9, r1
 800b92e:	e7bd      	b.n	800b8ac <_dtoa_r+0x584>
 800b930:	0800e328 	.word	0x0800e328
 800b934:	0800e300 	.word	0x0800e300
 800b938:	3ff00000 	.word	0x3ff00000
 800b93c:	40240000 	.word	0x40240000
 800b940:	401c0000 	.word	0x401c0000
 800b944:	40140000 	.word	0x40140000
 800b948:	3fe00000 	.word	0x3fe00000
 800b94c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b950:	9d00      	ldr	r5, [sp, #0]
 800b952:	4642      	mov	r2, r8
 800b954:	464b      	mov	r3, r9
 800b956:	4630      	mov	r0, r6
 800b958:	4639      	mov	r1, r7
 800b95a:	f7f4 ff77 	bl	800084c <__aeabi_ddiv>
 800b95e:	f7f5 f8fb 	bl	8000b58 <__aeabi_d2iz>
 800b962:	9001      	str	r0, [sp, #4]
 800b964:	f7f4 fdde 	bl	8000524 <__aeabi_i2d>
 800b968:	4642      	mov	r2, r8
 800b96a:	464b      	mov	r3, r9
 800b96c:	f7f4 fe44 	bl	80005f8 <__aeabi_dmul>
 800b970:	4602      	mov	r2, r0
 800b972:	460b      	mov	r3, r1
 800b974:	4630      	mov	r0, r6
 800b976:	4639      	mov	r1, r7
 800b978:	f7f4 fc86 	bl	8000288 <__aeabi_dsub>
 800b97c:	9e01      	ldr	r6, [sp, #4]
 800b97e:	9f04      	ldr	r7, [sp, #16]
 800b980:	3630      	adds	r6, #48	; 0x30
 800b982:	f805 6b01 	strb.w	r6, [r5], #1
 800b986:	9e00      	ldr	r6, [sp, #0]
 800b988:	1bae      	subs	r6, r5, r6
 800b98a:	42b7      	cmp	r7, r6
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	d134      	bne.n	800b9fc <_dtoa_r+0x6d4>
 800b992:	f7f4 fc7b 	bl	800028c <__adddf3>
 800b996:	4642      	mov	r2, r8
 800b998:	464b      	mov	r3, r9
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	f7f5 f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 800b9a2:	b9c8      	cbnz	r0, 800b9d8 <_dtoa_r+0x6b0>
 800b9a4:	4642      	mov	r2, r8
 800b9a6:	464b      	mov	r3, r9
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	f7f5 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9b0:	b110      	cbz	r0, 800b9b8 <_dtoa_r+0x690>
 800b9b2:	9b01      	ldr	r3, [sp, #4]
 800b9b4:	07db      	lsls	r3, r3, #31
 800b9b6:	d40f      	bmi.n	800b9d8 <_dtoa_r+0x6b0>
 800b9b8:	4651      	mov	r1, sl
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 faaf 	bl	800bf1e <_Bfree>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9c4:	702b      	strb	r3, [r5, #0]
 800b9c6:	f10b 0301 	add.w	r3, fp, #1
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f43f ace5 	beq.w	800b39e <_dtoa_r+0x76>
 800b9d4:	601d      	str	r5, [r3, #0]
 800b9d6:	e4e2      	b.n	800b39e <_dtoa_r+0x76>
 800b9d8:	465f      	mov	r7, fp
 800b9da:	462b      	mov	r3, r5
 800b9dc:	461d      	mov	r5, r3
 800b9de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9e2:	2a39      	cmp	r2, #57	; 0x39
 800b9e4:	d106      	bne.n	800b9f4 <_dtoa_r+0x6cc>
 800b9e6:	9a00      	ldr	r2, [sp, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d1f7      	bne.n	800b9dc <_dtoa_r+0x6b4>
 800b9ec:	9900      	ldr	r1, [sp, #0]
 800b9ee:	2230      	movs	r2, #48	; 0x30
 800b9f0:	3701      	adds	r7, #1
 800b9f2:	700a      	strb	r2, [r1, #0]
 800b9f4:	781a      	ldrb	r2, [r3, #0]
 800b9f6:	3201      	adds	r2, #1
 800b9f8:	701a      	strb	r2, [r3, #0]
 800b9fa:	e791      	b.n	800b920 <_dtoa_r+0x5f8>
 800b9fc:	4ba3      	ldr	r3, [pc, #652]	; (800bc8c <_dtoa_r+0x964>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f7f4 fdfa 	bl	80005f8 <__aeabi_dmul>
 800ba04:	2200      	movs	r2, #0
 800ba06:	2300      	movs	r3, #0
 800ba08:	4606      	mov	r6, r0
 800ba0a:	460f      	mov	r7, r1
 800ba0c:	f7f5 f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d09e      	beq.n	800b952 <_dtoa_r+0x62a>
 800ba14:	e7d0      	b.n	800b9b8 <_dtoa_r+0x690>
 800ba16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	f000 80ca 	beq.w	800bbb2 <_dtoa_r+0x88a>
 800ba1e:	9a07      	ldr	r2, [sp, #28]
 800ba20:	2a01      	cmp	r2, #1
 800ba22:	f300 80ad 	bgt.w	800bb80 <_dtoa_r+0x858>
 800ba26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba28:	2a00      	cmp	r2, #0
 800ba2a:	f000 80a5 	beq.w	800bb78 <_dtoa_r+0x850>
 800ba2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba32:	9e08      	ldr	r6, [sp, #32]
 800ba34:	9d05      	ldr	r5, [sp, #20]
 800ba36:	9a05      	ldr	r2, [sp, #20]
 800ba38:	441a      	add	r2, r3
 800ba3a:	9205      	str	r2, [sp, #20]
 800ba3c:	9a06      	ldr	r2, [sp, #24]
 800ba3e:	2101      	movs	r1, #1
 800ba40:	441a      	add	r2, r3
 800ba42:	4620      	mov	r0, r4
 800ba44:	9206      	str	r2, [sp, #24]
 800ba46:	f000 fb07 	bl	800c058 <__i2b>
 800ba4a:	4607      	mov	r7, r0
 800ba4c:	b165      	cbz	r5, 800ba68 <_dtoa_r+0x740>
 800ba4e:	9b06      	ldr	r3, [sp, #24]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dd09      	ble.n	800ba68 <_dtoa_r+0x740>
 800ba54:	42ab      	cmp	r3, r5
 800ba56:	9a05      	ldr	r2, [sp, #20]
 800ba58:	bfa8      	it	ge
 800ba5a:	462b      	movge	r3, r5
 800ba5c:	1ad2      	subs	r2, r2, r3
 800ba5e:	9205      	str	r2, [sp, #20]
 800ba60:	9a06      	ldr	r2, [sp, #24]
 800ba62:	1aed      	subs	r5, r5, r3
 800ba64:	1ad3      	subs	r3, r2, r3
 800ba66:	9306      	str	r3, [sp, #24]
 800ba68:	9b08      	ldr	r3, [sp, #32]
 800ba6a:	b1f3      	cbz	r3, 800baaa <_dtoa_r+0x782>
 800ba6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f000 80a3 	beq.w	800bbba <_dtoa_r+0x892>
 800ba74:	2e00      	cmp	r6, #0
 800ba76:	dd10      	ble.n	800ba9a <_dtoa_r+0x772>
 800ba78:	4639      	mov	r1, r7
 800ba7a:	4632      	mov	r2, r6
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f000 fbab 	bl	800c1d8 <__pow5mult>
 800ba82:	4652      	mov	r2, sl
 800ba84:	4601      	mov	r1, r0
 800ba86:	4607      	mov	r7, r0
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f000 fafb 	bl	800c084 <__multiply>
 800ba8e:	4651      	mov	r1, sl
 800ba90:	4680      	mov	r8, r0
 800ba92:	4620      	mov	r0, r4
 800ba94:	f000 fa43 	bl	800bf1e <_Bfree>
 800ba98:	46c2      	mov	sl, r8
 800ba9a:	9b08      	ldr	r3, [sp, #32]
 800ba9c:	1b9a      	subs	r2, r3, r6
 800ba9e:	d004      	beq.n	800baaa <_dtoa_r+0x782>
 800baa0:	4651      	mov	r1, sl
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fb98 	bl	800c1d8 <__pow5mult>
 800baa8:	4682      	mov	sl, r0
 800baaa:	2101      	movs	r1, #1
 800baac:	4620      	mov	r0, r4
 800baae:	f000 fad3 	bl	800c058 <__i2b>
 800bab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	4606      	mov	r6, r0
 800bab8:	f340 8081 	ble.w	800bbbe <_dtoa_r+0x896>
 800babc:	461a      	mov	r2, r3
 800babe:	4601      	mov	r1, r0
 800bac0:	4620      	mov	r0, r4
 800bac2:	f000 fb89 	bl	800c1d8 <__pow5mult>
 800bac6:	9b07      	ldr	r3, [sp, #28]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	4606      	mov	r6, r0
 800bacc:	dd7a      	ble.n	800bbc4 <_dtoa_r+0x89c>
 800bace:	f04f 0800 	mov.w	r8, #0
 800bad2:	6933      	ldr	r3, [r6, #16]
 800bad4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bad8:	6918      	ldr	r0, [r3, #16]
 800bada:	f000 fa6f 	bl	800bfbc <__hi0bits>
 800bade:	f1c0 0020 	rsb	r0, r0, #32
 800bae2:	9b06      	ldr	r3, [sp, #24]
 800bae4:	4418      	add	r0, r3
 800bae6:	f010 001f 	ands.w	r0, r0, #31
 800baea:	f000 8094 	beq.w	800bc16 <_dtoa_r+0x8ee>
 800baee:	f1c0 0320 	rsb	r3, r0, #32
 800baf2:	2b04      	cmp	r3, #4
 800baf4:	f340 8085 	ble.w	800bc02 <_dtoa_r+0x8da>
 800baf8:	9b05      	ldr	r3, [sp, #20]
 800bafa:	f1c0 001c 	rsb	r0, r0, #28
 800bafe:	4403      	add	r3, r0
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	9b06      	ldr	r3, [sp, #24]
 800bb04:	4403      	add	r3, r0
 800bb06:	4405      	add	r5, r0
 800bb08:	9306      	str	r3, [sp, #24]
 800bb0a:	9b05      	ldr	r3, [sp, #20]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	dd05      	ble.n	800bb1c <_dtoa_r+0x7f4>
 800bb10:	4651      	mov	r1, sl
 800bb12:	461a      	mov	r2, r3
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 fb9f 	bl	800c258 <__lshift>
 800bb1a:	4682      	mov	sl, r0
 800bb1c:	9b06      	ldr	r3, [sp, #24]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dd05      	ble.n	800bb2e <_dtoa_r+0x806>
 800bb22:	4631      	mov	r1, r6
 800bb24:	461a      	mov	r2, r3
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 fb96 	bl	800c258 <__lshift>
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d072      	beq.n	800bc1a <_dtoa_r+0x8f2>
 800bb34:	4631      	mov	r1, r6
 800bb36:	4650      	mov	r0, sl
 800bb38:	f000 fbfa 	bl	800c330 <__mcmp>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	da6c      	bge.n	800bc1a <_dtoa_r+0x8f2>
 800bb40:	2300      	movs	r3, #0
 800bb42:	4651      	mov	r1, sl
 800bb44:	220a      	movs	r2, #10
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 f9f2 	bl	800bf30 <__multadd>
 800bb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb4e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bb52:	4682      	mov	sl, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 81af 	beq.w	800beb8 <_dtoa_r+0xb90>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	220a      	movs	r2, #10
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 f9e5 	bl	800bf30 <__multadd>
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	4607      	mov	r7, r0
 800bb6c:	f300 8096 	bgt.w	800bc9c <_dtoa_r+0x974>
 800bb70:	9b07      	ldr	r3, [sp, #28]
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	dc59      	bgt.n	800bc2a <_dtoa_r+0x902>
 800bb76:	e091      	b.n	800bc9c <_dtoa_r+0x974>
 800bb78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb7e:	e758      	b.n	800ba32 <_dtoa_r+0x70a>
 800bb80:	9b04      	ldr	r3, [sp, #16]
 800bb82:	1e5e      	subs	r6, r3, #1
 800bb84:	9b08      	ldr	r3, [sp, #32]
 800bb86:	42b3      	cmp	r3, r6
 800bb88:	bfbf      	itttt	lt
 800bb8a:	9b08      	ldrlt	r3, [sp, #32]
 800bb8c:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bb8e:	9608      	strlt	r6, [sp, #32]
 800bb90:	1af3      	sublt	r3, r6, r3
 800bb92:	bfb4      	ite	lt
 800bb94:	18d2      	addlt	r2, r2, r3
 800bb96:	1b9e      	subge	r6, r3, r6
 800bb98:	9b04      	ldr	r3, [sp, #16]
 800bb9a:	bfbc      	itt	lt
 800bb9c:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bb9e:	2600      	movlt	r6, #0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	bfb7      	itett	lt
 800bba4:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bba8:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bbac:	1a9d      	sublt	r5, r3, r2
 800bbae:	2300      	movlt	r3, #0
 800bbb0:	e741      	b.n	800ba36 <_dtoa_r+0x70e>
 800bbb2:	9e08      	ldr	r6, [sp, #32]
 800bbb4:	9d05      	ldr	r5, [sp, #20]
 800bbb6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bbb8:	e748      	b.n	800ba4c <_dtoa_r+0x724>
 800bbba:	9a08      	ldr	r2, [sp, #32]
 800bbbc:	e770      	b.n	800baa0 <_dtoa_r+0x778>
 800bbbe:	9b07      	ldr	r3, [sp, #28]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	dc19      	bgt.n	800bbf8 <_dtoa_r+0x8d0>
 800bbc4:	9b02      	ldr	r3, [sp, #8]
 800bbc6:	b9bb      	cbnz	r3, 800bbf8 <_dtoa_r+0x8d0>
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbce:	b99b      	cbnz	r3, 800bbf8 <_dtoa_r+0x8d0>
 800bbd0:	9b03      	ldr	r3, [sp, #12]
 800bbd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbd6:	0d1b      	lsrs	r3, r3, #20
 800bbd8:	051b      	lsls	r3, r3, #20
 800bbda:	b183      	cbz	r3, 800bbfe <_dtoa_r+0x8d6>
 800bbdc:	9b05      	ldr	r3, [sp, #20]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	9305      	str	r3, [sp, #20]
 800bbe2:	9b06      	ldr	r3, [sp, #24]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	9306      	str	r3, [sp, #24]
 800bbe8:	f04f 0801 	mov.w	r8, #1
 800bbec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f47f af6f 	bne.w	800bad2 <_dtoa_r+0x7aa>
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	e774      	b.n	800bae2 <_dtoa_r+0x7ba>
 800bbf8:	f04f 0800 	mov.w	r8, #0
 800bbfc:	e7f6      	b.n	800bbec <_dtoa_r+0x8c4>
 800bbfe:	4698      	mov	r8, r3
 800bc00:	e7f4      	b.n	800bbec <_dtoa_r+0x8c4>
 800bc02:	d082      	beq.n	800bb0a <_dtoa_r+0x7e2>
 800bc04:	9a05      	ldr	r2, [sp, #20]
 800bc06:	331c      	adds	r3, #28
 800bc08:	441a      	add	r2, r3
 800bc0a:	9205      	str	r2, [sp, #20]
 800bc0c:	9a06      	ldr	r2, [sp, #24]
 800bc0e:	441a      	add	r2, r3
 800bc10:	441d      	add	r5, r3
 800bc12:	9206      	str	r2, [sp, #24]
 800bc14:	e779      	b.n	800bb0a <_dtoa_r+0x7e2>
 800bc16:	4603      	mov	r3, r0
 800bc18:	e7f4      	b.n	800bc04 <_dtoa_r+0x8dc>
 800bc1a:	9b04      	ldr	r3, [sp, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dc37      	bgt.n	800bc90 <_dtoa_r+0x968>
 800bc20:	9b07      	ldr	r3, [sp, #28]
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	dd34      	ble.n	800bc90 <_dtoa_r+0x968>
 800bc26:	9b04      	ldr	r3, [sp, #16]
 800bc28:	9301      	str	r3, [sp, #4]
 800bc2a:	9b01      	ldr	r3, [sp, #4]
 800bc2c:	b963      	cbnz	r3, 800bc48 <_dtoa_r+0x920>
 800bc2e:	4631      	mov	r1, r6
 800bc30:	2205      	movs	r2, #5
 800bc32:	4620      	mov	r0, r4
 800bc34:	f000 f97c 	bl	800bf30 <__multadd>
 800bc38:	4601      	mov	r1, r0
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	4650      	mov	r0, sl
 800bc3e:	f000 fb77 	bl	800c330 <__mcmp>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	f73f adbc 	bgt.w	800b7c0 <_dtoa_r+0x498>
 800bc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc4a:	9d00      	ldr	r5, [sp, #0]
 800bc4c:	ea6f 0b03 	mvn.w	fp, r3
 800bc50:	f04f 0800 	mov.w	r8, #0
 800bc54:	4631      	mov	r1, r6
 800bc56:	4620      	mov	r0, r4
 800bc58:	f000 f961 	bl	800bf1e <_Bfree>
 800bc5c:	2f00      	cmp	r7, #0
 800bc5e:	f43f aeab 	beq.w	800b9b8 <_dtoa_r+0x690>
 800bc62:	f1b8 0f00 	cmp.w	r8, #0
 800bc66:	d005      	beq.n	800bc74 <_dtoa_r+0x94c>
 800bc68:	45b8      	cmp	r8, r7
 800bc6a:	d003      	beq.n	800bc74 <_dtoa_r+0x94c>
 800bc6c:	4641      	mov	r1, r8
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f000 f955 	bl	800bf1e <_Bfree>
 800bc74:	4639      	mov	r1, r7
 800bc76:	4620      	mov	r0, r4
 800bc78:	f000 f951 	bl	800bf1e <_Bfree>
 800bc7c:	e69c      	b.n	800b9b8 <_dtoa_r+0x690>
 800bc7e:	2600      	movs	r6, #0
 800bc80:	4637      	mov	r7, r6
 800bc82:	e7e1      	b.n	800bc48 <_dtoa_r+0x920>
 800bc84:	46bb      	mov	fp, r7
 800bc86:	4637      	mov	r7, r6
 800bc88:	e59a      	b.n	800b7c0 <_dtoa_r+0x498>
 800bc8a:	bf00      	nop
 800bc8c:	40240000 	.word	0x40240000
 800bc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 80c7 	beq.w	800be26 <_dtoa_r+0xafe>
 800bc98:	9b04      	ldr	r3, [sp, #16]
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	dd05      	ble.n	800bcac <_dtoa_r+0x984>
 800bca0:	4639      	mov	r1, r7
 800bca2:	462a      	mov	r2, r5
 800bca4:	4620      	mov	r0, r4
 800bca6:	f000 fad7 	bl	800c258 <__lshift>
 800bcaa:	4607      	mov	r7, r0
 800bcac:	f1b8 0f00 	cmp.w	r8, #0
 800bcb0:	d05a      	beq.n	800bd68 <_dtoa_r+0xa40>
 800bcb2:	6879      	ldr	r1, [r7, #4]
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f000 f90d 	bl	800bed4 <_Balloc>
 800bcba:	4605      	mov	r5, r0
 800bcbc:	b920      	cbnz	r0, 800bcc8 <_dtoa_r+0x9a0>
 800bcbe:	4b82      	ldr	r3, [pc, #520]	; (800bec8 <_dtoa_r+0xba0>)
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bcc6:	e470      	b.n	800b5aa <_dtoa_r+0x282>
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	3202      	adds	r2, #2
 800bccc:	0092      	lsls	r2, r2, #2
 800bcce:	f107 010c 	add.w	r1, r7, #12
 800bcd2:	300c      	adds	r0, #12
 800bcd4:	f7fd fb70 	bl	80093b8 <memcpy>
 800bcd8:	2201      	movs	r2, #1
 800bcda:	4629      	mov	r1, r5
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f000 fabb 	bl	800c258 <__lshift>
 800bce2:	9b00      	ldr	r3, [sp, #0]
 800bce4:	3301      	adds	r3, #1
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcec:	4413      	add	r3, r2
 800bcee:	9308      	str	r3, [sp, #32]
 800bcf0:	9b02      	ldr	r3, [sp, #8]
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	46b8      	mov	r8, r7
 800bcf8:	9306      	str	r3, [sp, #24]
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	4631      	mov	r1, r6
 800bd00:	3b01      	subs	r3, #1
 800bd02:	4650      	mov	r0, sl
 800bd04:	9301      	str	r3, [sp, #4]
 800bd06:	f7ff fa87 	bl	800b218 <quorem>
 800bd0a:	4641      	mov	r1, r8
 800bd0c:	9002      	str	r0, [sp, #8]
 800bd0e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bd12:	4650      	mov	r0, sl
 800bd14:	f000 fb0c 	bl	800c330 <__mcmp>
 800bd18:	463a      	mov	r2, r7
 800bd1a:	9005      	str	r0, [sp, #20]
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 fb22 	bl	800c368 <__mdiff>
 800bd24:	68c2      	ldr	r2, [r0, #12]
 800bd26:	4605      	mov	r5, r0
 800bd28:	bb02      	cbnz	r2, 800bd6c <_dtoa_r+0xa44>
 800bd2a:	4601      	mov	r1, r0
 800bd2c:	4650      	mov	r0, sl
 800bd2e:	f000 faff 	bl	800c330 <__mcmp>
 800bd32:	4602      	mov	r2, r0
 800bd34:	4629      	mov	r1, r5
 800bd36:	4620      	mov	r0, r4
 800bd38:	9209      	str	r2, [sp, #36]	; 0x24
 800bd3a:	f000 f8f0 	bl	800bf1e <_Bfree>
 800bd3e:	9b07      	ldr	r3, [sp, #28]
 800bd40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd42:	9d04      	ldr	r5, [sp, #16]
 800bd44:	ea43 0102 	orr.w	r1, r3, r2
 800bd48:	9b06      	ldr	r3, [sp, #24]
 800bd4a:	4319      	orrs	r1, r3
 800bd4c:	d110      	bne.n	800bd70 <_dtoa_r+0xa48>
 800bd4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bd52:	d029      	beq.n	800bda8 <_dtoa_r+0xa80>
 800bd54:	9b05      	ldr	r3, [sp, #20]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	dd02      	ble.n	800bd60 <_dtoa_r+0xa38>
 800bd5a:	9b02      	ldr	r3, [sp, #8]
 800bd5c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bd60:	9b01      	ldr	r3, [sp, #4]
 800bd62:	f883 9000 	strb.w	r9, [r3]
 800bd66:	e775      	b.n	800bc54 <_dtoa_r+0x92c>
 800bd68:	4638      	mov	r0, r7
 800bd6a:	e7ba      	b.n	800bce2 <_dtoa_r+0x9ba>
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	e7e1      	b.n	800bd34 <_dtoa_r+0xa0c>
 800bd70:	9b05      	ldr	r3, [sp, #20]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	db04      	blt.n	800bd80 <_dtoa_r+0xa58>
 800bd76:	9907      	ldr	r1, [sp, #28]
 800bd78:	430b      	orrs	r3, r1
 800bd7a:	9906      	ldr	r1, [sp, #24]
 800bd7c:	430b      	orrs	r3, r1
 800bd7e:	d120      	bne.n	800bdc2 <_dtoa_r+0xa9a>
 800bd80:	2a00      	cmp	r2, #0
 800bd82:	dded      	ble.n	800bd60 <_dtoa_r+0xa38>
 800bd84:	4651      	mov	r1, sl
 800bd86:	2201      	movs	r2, #1
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fa65 	bl	800c258 <__lshift>
 800bd8e:	4631      	mov	r1, r6
 800bd90:	4682      	mov	sl, r0
 800bd92:	f000 facd 	bl	800c330 <__mcmp>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	dc03      	bgt.n	800bda2 <_dtoa_r+0xa7a>
 800bd9a:	d1e1      	bne.n	800bd60 <_dtoa_r+0xa38>
 800bd9c:	f019 0f01 	tst.w	r9, #1
 800bda0:	d0de      	beq.n	800bd60 <_dtoa_r+0xa38>
 800bda2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bda6:	d1d8      	bne.n	800bd5a <_dtoa_r+0xa32>
 800bda8:	9a01      	ldr	r2, [sp, #4]
 800bdaa:	2339      	movs	r3, #57	; 0x39
 800bdac:	7013      	strb	r3, [r2, #0]
 800bdae:	462b      	mov	r3, r5
 800bdb0:	461d      	mov	r5, r3
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bdb8:	2a39      	cmp	r2, #57	; 0x39
 800bdba:	d06c      	beq.n	800be96 <_dtoa_r+0xb6e>
 800bdbc:	3201      	adds	r2, #1
 800bdbe:	701a      	strb	r2, [r3, #0]
 800bdc0:	e748      	b.n	800bc54 <_dtoa_r+0x92c>
 800bdc2:	2a00      	cmp	r2, #0
 800bdc4:	dd07      	ble.n	800bdd6 <_dtoa_r+0xaae>
 800bdc6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bdca:	d0ed      	beq.n	800bda8 <_dtoa_r+0xa80>
 800bdcc:	9a01      	ldr	r2, [sp, #4]
 800bdce:	f109 0301 	add.w	r3, r9, #1
 800bdd2:	7013      	strb	r3, [r2, #0]
 800bdd4:	e73e      	b.n	800bc54 <_dtoa_r+0x92c>
 800bdd6:	9b04      	ldr	r3, [sp, #16]
 800bdd8:	9a08      	ldr	r2, [sp, #32]
 800bdda:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d043      	beq.n	800be6a <_dtoa_r+0xb42>
 800bde2:	4651      	mov	r1, sl
 800bde4:	2300      	movs	r3, #0
 800bde6:	220a      	movs	r2, #10
 800bde8:	4620      	mov	r0, r4
 800bdea:	f000 f8a1 	bl	800bf30 <__multadd>
 800bdee:	45b8      	cmp	r8, r7
 800bdf0:	4682      	mov	sl, r0
 800bdf2:	f04f 0300 	mov.w	r3, #0
 800bdf6:	f04f 020a 	mov.w	r2, #10
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	d107      	bne.n	800be10 <_dtoa_r+0xae8>
 800be00:	f000 f896 	bl	800bf30 <__multadd>
 800be04:	4680      	mov	r8, r0
 800be06:	4607      	mov	r7, r0
 800be08:	9b04      	ldr	r3, [sp, #16]
 800be0a:	3301      	adds	r3, #1
 800be0c:	9304      	str	r3, [sp, #16]
 800be0e:	e775      	b.n	800bcfc <_dtoa_r+0x9d4>
 800be10:	f000 f88e 	bl	800bf30 <__multadd>
 800be14:	4639      	mov	r1, r7
 800be16:	4680      	mov	r8, r0
 800be18:	2300      	movs	r3, #0
 800be1a:	220a      	movs	r2, #10
 800be1c:	4620      	mov	r0, r4
 800be1e:	f000 f887 	bl	800bf30 <__multadd>
 800be22:	4607      	mov	r7, r0
 800be24:	e7f0      	b.n	800be08 <_dtoa_r+0xae0>
 800be26:	9b04      	ldr	r3, [sp, #16]
 800be28:	9301      	str	r3, [sp, #4]
 800be2a:	9d00      	ldr	r5, [sp, #0]
 800be2c:	4631      	mov	r1, r6
 800be2e:	4650      	mov	r0, sl
 800be30:	f7ff f9f2 	bl	800b218 <quorem>
 800be34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800be38:	9b00      	ldr	r3, [sp, #0]
 800be3a:	f805 9b01 	strb.w	r9, [r5], #1
 800be3e:	1aea      	subs	r2, r5, r3
 800be40:	9b01      	ldr	r3, [sp, #4]
 800be42:	4293      	cmp	r3, r2
 800be44:	dd07      	ble.n	800be56 <_dtoa_r+0xb2e>
 800be46:	4651      	mov	r1, sl
 800be48:	2300      	movs	r3, #0
 800be4a:	220a      	movs	r2, #10
 800be4c:	4620      	mov	r0, r4
 800be4e:	f000 f86f 	bl	800bf30 <__multadd>
 800be52:	4682      	mov	sl, r0
 800be54:	e7ea      	b.n	800be2c <_dtoa_r+0xb04>
 800be56:	9b01      	ldr	r3, [sp, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	bfc8      	it	gt
 800be5c:	461d      	movgt	r5, r3
 800be5e:	9b00      	ldr	r3, [sp, #0]
 800be60:	bfd8      	it	le
 800be62:	2501      	movle	r5, #1
 800be64:	441d      	add	r5, r3
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	4651      	mov	r1, sl
 800be6c:	2201      	movs	r2, #1
 800be6e:	4620      	mov	r0, r4
 800be70:	f000 f9f2 	bl	800c258 <__lshift>
 800be74:	4631      	mov	r1, r6
 800be76:	4682      	mov	sl, r0
 800be78:	f000 fa5a 	bl	800c330 <__mcmp>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	dc96      	bgt.n	800bdae <_dtoa_r+0xa86>
 800be80:	d102      	bne.n	800be88 <_dtoa_r+0xb60>
 800be82:	f019 0f01 	tst.w	r9, #1
 800be86:	d192      	bne.n	800bdae <_dtoa_r+0xa86>
 800be88:	462b      	mov	r3, r5
 800be8a:	461d      	mov	r5, r3
 800be8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be90:	2a30      	cmp	r2, #48	; 0x30
 800be92:	d0fa      	beq.n	800be8a <_dtoa_r+0xb62>
 800be94:	e6de      	b.n	800bc54 <_dtoa_r+0x92c>
 800be96:	9a00      	ldr	r2, [sp, #0]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d189      	bne.n	800bdb0 <_dtoa_r+0xa88>
 800be9c:	f10b 0b01 	add.w	fp, fp, #1
 800bea0:	2331      	movs	r3, #49	; 0x31
 800bea2:	e796      	b.n	800bdd2 <_dtoa_r+0xaaa>
 800bea4:	4b09      	ldr	r3, [pc, #36]	; (800becc <_dtoa_r+0xba4>)
 800bea6:	f7ff ba9d 	b.w	800b3e4 <_dtoa_r+0xbc>
 800beaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beac:	2b00      	cmp	r3, #0
 800beae:	f47f aa7c 	bne.w	800b3aa <_dtoa_r+0x82>
 800beb2:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <_dtoa_r+0xba8>)
 800beb4:	f7ff ba96 	b.w	800b3e4 <_dtoa_r+0xbc>
 800beb8:	9b01      	ldr	r3, [sp, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	dcb5      	bgt.n	800be2a <_dtoa_r+0xb02>
 800bebe:	9b07      	ldr	r3, [sp, #28]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	f73f aeb2 	bgt.w	800bc2a <_dtoa_r+0x902>
 800bec6:	e7b0      	b.n	800be2a <_dtoa_r+0xb02>
 800bec8:	0800e23d 	.word	0x0800e23d
 800becc:	0800e20e 	.word	0x0800e20e
 800bed0:	0800e230 	.word	0x0800e230

0800bed4 <_Balloc>:
 800bed4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bed6:	b570      	push	{r4, r5, r6, lr}
 800bed8:	4605      	mov	r5, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	b17b      	cbz	r3, 800befe <_Balloc+0x2a>
 800bede:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800bee0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bee4:	b9a0      	cbnz	r0, 800bf10 <_Balloc+0x3c>
 800bee6:	2101      	movs	r1, #1
 800bee8:	fa01 f604 	lsl.w	r6, r1, r4
 800beec:	1d72      	adds	r2, r6, #5
 800beee:	0092      	lsls	r2, r2, #2
 800bef0:	4628      	mov	r0, r5
 800bef2:	f000 fbd9 	bl	800c6a8 <_calloc_r>
 800bef6:	b148      	cbz	r0, 800bf0c <_Balloc+0x38>
 800bef8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800befc:	e00b      	b.n	800bf16 <_Balloc+0x42>
 800befe:	2221      	movs	r2, #33	; 0x21
 800bf00:	2104      	movs	r1, #4
 800bf02:	f000 fbd1 	bl	800c6a8 <_calloc_r>
 800bf06:	6468      	str	r0, [r5, #68]	; 0x44
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d1e8      	bne.n	800bede <_Balloc+0xa>
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	bd70      	pop	{r4, r5, r6, pc}
 800bf10:	6802      	ldr	r2, [r0, #0]
 800bf12:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800bf16:	2300      	movs	r3, #0
 800bf18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf1c:	e7f7      	b.n	800bf0e <_Balloc+0x3a>

0800bf1e <_Bfree>:
 800bf1e:	b131      	cbz	r1, 800bf2e <_Bfree+0x10>
 800bf20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bf22:	684a      	ldr	r2, [r1, #4]
 800bf24:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bf28:	6008      	str	r0, [r1, #0]
 800bf2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bf2e:	4770      	bx	lr

0800bf30 <__multadd>:
 800bf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf34:	690d      	ldr	r5, [r1, #16]
 800bf36:	4607      	mov	r7, r0
 800bf38:	460c      	mov	r4, r1
 800bf3a:	461e      	mov	r6, r3
 800bf3c:	f101 0c14 	add.w	ip, r1, #20
 800bf40:	2000      	movs	r0, #0
 800bf42:	f8dc 3000 	ldr.w	r3, [ip]
 800bf46:	b299      	uxth	r1, r3
 800bf48:	fb02 6101 	mla	r1, r2, r1, r6
 800bf4c:	0c1e      	lsrs	r6, r3, #16
 800bf4e:	0c0b      	lsrs	r3, r1, #16
 800bf50:	fb02 3306 	mla	r3, r2, r6, r3
 800bf54:	b289      	uxth	r1, r1
 800bf56:	3001      	adds	r0, #1
 800bf58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf5c:	4285      	cmp	r5, r0
 800bf5e:	f84c 1b04 	str.w	r1, [ip], #4
 800bf62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf66:	dcec      	bgt.n	800bf42 <__multadd+0x12>
 800bf68:	b30e      	cbz	r6, 800bfae <__multadd+0x7e>
 800bf6a:	68a3      	ldr	r3, [r4, #8]
 800bf6c:	42ab      	cmp	r3, r5
 800bf6e:	dc19      	bgt.n	800bfa4 <__multadd+0x74>
 800bf70:	6861      	ldr	r1, [r4, #4]
 800bf72:	4638      	mov	r0, r7
 800bf74:	3101      	adds	r1, #1
 800bf76:	f7ff ffad 	bl	800bed4 <_Balloc>
 800bf7a:	4680      	mov	r8, r0
 800bf7c:	b928      	cbnz	r0, 800bf8a <__multadd+0x5a>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <__multadd+0x84>)
 800bf82:	480d      	ldr	r0, [pc, #52]	; (800bfb8 <__multadd+0x88>)
 800bf84:	21ba      	movs	r1, #186	; 0xba
 800bf86:	f000 fb71 	bl	800c66c <__assert_func>
 800bf8a:	6922      	ldr	r2, [r4, #16]
 800bf8c:	3202      	adds	r2, #2
 800bf8e:	f104 010c 	add.w	r1, r4, #12
 800bf92:	0092      	lsls	r2, r2, #2
 800bf94:	300c      	adds	r0, #12
 800bf96:	f7fd fa0f 	bl	80093b8 <memcpy>
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4638      	mov	r0, r7
 800bf9e:	f7ff ffbe 	bl	800bf1e <_Bfree>
 800bfa2:	4644      	mov	r4, r8
 800bfa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfa8:	3501      	adds	r5, #1
 800bfaa:	615e      	str	r6, [r3, #20]
 800bfac:	6125      	str	r5, [r4, #16]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb4:	0800e23d 	.word	0x0800e23d
 800bfb8:	0800e2a6 	.word	0x0800e2a6

0800bfbc <__hi0bits>:
 800bfbc:	0c03      	lsrs	r3, r0, #16
 800bfbe:	041b      	lsls	r3, r3, #16
 800bfc0:	b9d3      	cbnz	r3, 800bff8 <__hi0bits+0x3c>
 800bfc2:	0400      	lsls	r0, r0, #16
 800bfc4:	2310      	movs	r3, #16
 800bfc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bfca:	bf04      	itt	eq
 800bfcc:	0200      	lsleq	r0, r0, #8
 800bfce:	3308      	addeq	r3, #8
 800bfd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfd4:	bf04      	itt	eq
 800bfd6:	0100      	lsleq	r0, r0, #4
 800bfd8:	3304      	addeq	r3, #4
 800bfda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfde:	bf04      	itt	eq
 800bfe0:	0080      	lsleq	r0, r0, #2
 800bfe2:	3302      	addeq	r3, #2
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	db05      	blt.n	800bff4 <__hi0bits+0x38>
 800bfe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfec:	f103 0301 	add.w	r3, r3, #1
 800bff0:	bf08      	it	eq
 800bff2:	2320      	moveq	r3, #32
 800bff4:	4618      	mov	r0, r3
 800bff6:	4770      	bx	lr
 800bff8:	2300      	movs	r3, #0
 800bffa:	e7e4      	b.n	800bfc6 <__hi0bits+0xa>

0800bffc <__lo0bits>:
 800bffc:	6803      	ldr	r3, [r0, #0]
 800bffe:	f013 0207 	ands.w	r2, r3, #7
 800c002:	d00c      	beq.n	800c01e <__lo0bits+0x22>
 800c004:	07d9      	lsls	r1, r3, #31
 800c006:	d422      	bmi.n	800c04e <__lo0bits+0x52>
 800c008:	079a      	lsls	r2, r3, #30
 800c00a:	bf49      	itett	mi
 800c00c:	085b      	lsrmi	r3, r3, #1
 800c00e:	089b      	lsrpl	r3, r3, #2
 800c010:	6003      	strmi	r3, [r0, #0]
 800c012:	2201      	movmi	r2, #1
 800c014:	bf5c      	itt	pl
 800c016:	6003      	strpl	r3, [r0, #0]
 800c018:	2202      	movpl	r2, #2
 800c01a:	4610      	mov	r0, r2
 800c01c:	4770      	bx	lr
 800c01e:	b299      	uxth	r1, r3
 800c020:	b909      	cbnz	r1, 800c026 <__lo0bits+0x2a>
 800c022:	0c1b      	lsrs	r3, r3, #16
 800c024:	2210      	movs	r2, #16
 800c026:	b2d9      	uxtb	r1, r3
 800c028:	b909      	cbnz	r1, 800c02e <__lo0bits+0x32>
 800c02a:	3208      	adds	r2, #8
 800c02c:	0a1b      	lsrs	r3, r3, #8
 800c02e:	0719      	lsls	r1, r3, #28
 800c030:	bf04      	itt	eq
 800c032:	091b      	lsreq	r3, r3, #4
 800c034:	3204      	addeq	r2, #4
 800c036:	0799      	lsls	r1, r3, #30
 800c038:	bf04      	itt	eq
 800c03a:	089b      	lsreq	r3, r3, #2
 800c03c:	3202      	addeq	r2, #2
 800c03e:	07d9      	lsls	r1, r3, #31
 800c040:	d403      	bmi.n	800c04a <__lo0bits+0x4e>
 800c042:	085b      	lsrs	r3, r3, #1
 800c044:	f102 0201 	add.w	r2, r2, #1
 800c048:	d003      	beq.n	800c052 <__lo0bits+0x56>
 800c04a:	6003      	str	r3, [r0, #0]
 800c04c:	e7e5      	b.n	800c01a <__lo0bits+0x1e>
 800c04e:	2200      	movs	r2, #0
 800c050:	e7e3      	b.n	800c01a <__lo0bits+0x1e>
 800c052:	2220      	movs	r2, #32
 800c054:	e7e1      	b.n	800c01a <__lo0bits+0x1e>
	...

0800c058 <__i2b>:
 800c058:	b510      	push	{r4, lr}
 800c05a:	460c      	mov	r4, r1
 800c05c:	2101      	movs	r1, #1
 800c05e:	f7ff ff39 	bl	800bed4 <_Balloc>
 800c062:	4602      	mov	r2, r0
 800c064:	b928      	cbnz	r0, 800c072 <__i2b+0x1a>
 800c066:	4b05      	ldr	r3, [pc, #20]	; (800c07c <__i2b+0x24>)
 800c068:	4805      	ldr	r0, [pc, #20]	; (800c080 <__i2b+0x28>)
 800c06a:	f240 1145 	movw	r1, #325	; 0x145
 800c06e:	f000 fafd 	bl	800c66c <__assert_func>
 800c072:	2301      	movs	r3, #1
 800c074:	6144      	str	r4, [r0, #20]
 800c076:	6103      	str	r3, [r0, #16]
 800c078:	bd10      	pop	{r4, pc}
 800c07a:	bf00      	nop
 800c07c:	0800e23d 	.word	0x0800e23d
 800c080:	0800e2a6 	.word	0x0800e2a6

0800c084 <__multiply>:
 800c084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c088:	4691      	mov	r9, r2
 800c08a:	690a      	ldr	r2, [r1, #16]
 800c08c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c090:	429a      	cmp	r2, r3
 800c092:	bfb8      	it	lt
 800c094:	460b      	movlt	r3, r1
 800c096:	460c      	mov	r4, r1
 800c098:	bfbc      	itt	lt
 800c09a:	464c      	movlt	r4, r9
 800c09c:	4699      	movlt	r9, r3
 800c09e:	6927      	ldr	r7, [r4, #16]
 800c0a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0a4:	68a3      	ldr	r3, [r4, #8]
 800c0a6:	6861      	ldr	r1, [r4, #4]
 800c0a8:	eb07 060a 	add.w	r6, r7, sl
 800c0ac:	42b3      	cmp	r3, r6
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	bfb8      	it	lt
 800c0b2:	3101      	addlt	r1, #1
 800c0b4:	f7ff ff0e 	bl	800bed4 <_Balloc>
 800c0b8:	b930      	cbnz	r0, 800c0c8 <__multiply+0x44>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	4b44      	ldr	r3, [pc, #272]	; (800c1d0 <__multiply+0x14c>)
 800c0be:	4845      	ldr	r0, [pc, #276]	; (800c1d4 <__multiply+0x150>)
 800c0c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c0c4:	f000 fad2 	bl	800c66c <__assert_func>
 800c0c8:	f100 0514 	add.w	r5, r0, #20
 800c0cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0d0:	462b      	mov	r3, r5
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	4543      	cmp	r3, r8
 800c0d6:	d321      	bcc.n	800c11c <__multiply+0x98>
 800c0d8:	f104 0314 	add.w	r3, r4, #20
 800c0dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0e0:	f109 0314 	add.w	r3, r9, #20
 800c0e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0e8:	9202      	str	r2, [sp, #8]
 800c0ea:	1b3a      	subs	r2, r7, r4
 800c0ec:	3a15      	subs	r2, #21
 800c0ee:	f022 0203 	bic.w	r2, r2, #3
 800c0f2:	3204      	adds	r2, #4
 800c0f4:	f104 0115 	add.w	r1, r4, #21
 800c0f8:	428f      	cmp	r7, r1
 800c0fa:	bf38      	it	cc
 800c0fc:	2204      	movcc	r2, #4
 800c0fe:	9201      	str	r2, [sp, #4]
 800c100:	9a02      	ldr	r2, [sp, #8]
 800c102:	9303      	str	r3, [sp, #12]
 800c104:	429a      	cmp	r2, r3
 800c106:	d80c      	bhi.n	800c122 <__multiply+0x9e>
 800c108:	2e00      	cmp	r6, #0
 800c10a:	dd03      	ble.n	800c114 <__multiply+0x90>
 800c10c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c110:	2b00      	cmp	r3, #0
 800c112:	d05b      	beq.n	800c1cc <__multiply+0x148>
 800c114:	6106      	str	r6, [r0, #16]
 800c116:	b005      	add	sp, #20
 800c118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11c:	f843 2b04 	str.w	r2, [r3], #4
 800c120:	e7d8      	b.n	800c0d4 <__multiply+0x50>
 800c122:	f8b3 a000 	ldrh.w	sl, [r3]
 800c126:	f1ba 0f00 	cmp.w	sl, #0
 800c12a:	d024      	beq.n	800c176 <__multiply+0xf2>
 800c12c:	f104 0e14 	add.w	lr, r4, #20
 800c130:	46a9      	mov	r9, r5
 800c132:	f04f 0c00 	mov.w	ip, #0
 800c136:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c13a:	f8d9 1000 	ldr.w	r1, [r9]
 800c13e:	fa1f fb82 	uxth.w	fp, r2
 800c142:	b289      	uxth	r1, r1
 800c144:	fb0a 110b 	mla	r1, sl, fp, r1
 800c148:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c14c:	f8d9 2000 	ldr.w	r2, [r9]
 800c150:	4461      	add	r1, ip
 800c152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c156:	fb0a c20b 	mla	r2, sl, fp, ip
 800c15a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c15e:	b289      	uxth	r1, r1
 800c160:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c164:	4577      	cmp	r7, lr
 800c166:	f849 1b04 	str.w	r1, [r9], #4
 800c16a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c16e:	d8e2      	bhi.n	800c136 <__multiply+0xb2>
 800c170:	9a01      	ldr	r2, [sp, #4]
 800c172:	f845 c002 	str.w	ip, [r5, r2]
 800c176:	9a03      	ldr	r2, [sp, #12]
 800c178:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c17c:	3304      	adds	r3, #4
 800c17e:	f1b9 0f00 	cmp.w	r9, #0
 800c182:	d021      	beq.n	800c1c8 <__multiply+0x144>
 800c184:	6829      	ldr	r1, [r5, #0]
 800c186:	f104 0c14 	add.w	ip, r4, #20
 800c18a:	46ae      	mov	lr, r5
 800c18c:	f04f 0a00 	mov.w	sl, #0
 800c190:	f8bc b000 	ldrh.w	fp, [ip]
 800c194:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c198:	fb09 220b 	mla	r2, r9, fp, r2
 800c19c:	4452      	add	r2, sl
 800c19e:	b289      	uxth	r1, r1
 800c1a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1a4:	f84e 1b04 	str.w	r1, [lr], #4
 800c1a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c1ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1b0:	f8be 1000 	ldrh.w	r1, [lr]
 800c1b4:	fb09 110a 	mla	r1, r9, sl, r1
 800c1b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c1bc:	4567      	cmp	r7, ip
 800c1be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1c2:	d8e5      	bhi.n	800c190 <__multiply+0x10c>
 800c1c4:	9a01      	ldr	r2, [sp, #4]
 800c1c6:	50a9      	str	r1, [r5, r2]
 800c1c8:	3504      	adds	r5, #4
 800c1ca:	e799      	b.n	800c100 <__multiply+0x7c>
 800c1cc:	3e01      	subs	r6, #1
 800c1ce:	e79b      	b.n	800c108 <__multiply+0x84>
 800c1d0:	0800e23d 	.word	0x0800e23d
 800c1d4:	0800e2a6 	.word	0x0800e2a6

0800c1d8 <__pow5mult>:
 800c1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1dc:	4615      	mov	r5, r2
 800c1de:	f012 0203 	ands.w	r2, r2, #3
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	460f      	mov	r7, r1
 800c1e6:	d007      	beq.n	800c1f8 <__pow5mult+0x20>
 800c1e8:	4c1a      	ldr	r4, [pc, #104]	; (800c254 <__pow5mult+0x7c>)
 800c1ea:	3a01      	subs	r2, #1
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1f2:	f7ff fe9d 	bl	800bf30 <__multadd>
 800c1f6:	4607      	mov	r7, r0
 800c1f8:	10ad      	asrs	r5, r5, #2
 800c1fa:	d027      	beq.n	800c24c <__pow5mult+0x74>
 800c1fc:	6c34      	ldr	r4, [r6, #64]	; 0x40
 800c1fe:	b944      	cbnz	r4, 800c212 <__pow5mult+0x3a>
 800c200:	f240 2171 	movw	r1, #625	; 0x271
 800c204:	4630      	mov	r0, r6
 800c206:	f7ff ff27 	bl	800c058 <__i2b>
 800c20a:	2300      	movs	r3, #0
 800c20c:	6430      	str	r0, [r6, #64]	; 0x40
 800c20e:	4604      	mov	r4, r0
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	f04f 0900 	mov.w	r9, #0
 800c216:	07eb      	lsls	r3, r5, #31
 800c218:	d50a      	bpl.n	800c230 <__pow5mult+0x58>
 800c21a:	4639      	mov	r1, r7
 800c21c:	4622      	mov	r2, r4
 800c21e:	4630      	mov	r0, r6
 800c220:	f7ff ff30 	bl	800c084 <__multiply>
 800c224:	4639      	mov	r1, r7
 800c226:	4680      	mov	r8, r0
 800c228:	4630      	mov	r0, r6
 800c22a:	f7ff fe78 	bl	800bf1e <_Bfree>
 800c22e:	4647      	mov	r7, r8
 800c230:	106d      	asrs	r5, r5, #1
 800c232:	d00b      	beq.n	800c24c <__pow5mult+0x74>
 800c234:	6820      	ldr	r0, [r4, #0]
 800c236:	b938      	cbnz	r0, 800c248 <__pow5mult+0x70>
 800c238:	4622      	mov	r2, r4
 800c23a:	4621      	mov	r1, r4
 800c23c:	4630      	mov	r0, r6
 800c23e:	f7ff ff21 	bl	800c084 <__multiply>
 800c242:	6020      	str	r0, [r4, #0]
 800c244:	f8c0 9000 	str.w	r9, [r0]
 800c248:	4604      	mov	r4, r0
 800c24a:	e7e4      	b.n	800c216 <__pow5mult+0x3e>
 800c24c:	4638      	mov	r0, r7
 800c24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c252:	bf00      	nop
 800c254:	0800e3f0 	.word	0x0800e3f0

0800c258 <__lshift>:
 800c258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	6849      	ldr	r1, [r1, #4]
 800c260:	6923      	ldr	r3, [r4, #16]
 800c262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c266:	68a3      	ldr	r3, [r4, #8]
 800c268:	4607      	mov	r7, r0
 800c26a:	4691      	mov	r9, r2
 800c26c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c270:	f108 0601 	add.w	r6, r8, #1
 800c274:	42b3      	cmp	r3, r6
 800c276:	db0b      	blt.n	800c290 <__lshift+0x38>
 800c278:	4638      	mov	r0, r7
 800c27a:	f7ff fe2b 	bl	800bed4 <_Balloc>
 800c27e:	4605      	mov	r5, r0
 800c280:	b948      	cbnz	r0, 800c296 <__lshift+0x3e>
 800c282:	4602      	mov	r2, r0
 800c284:	4b28      	ldr	r3, [pc, #160]	; (800c328 <__lshift+0xd0>)
 800c286:	4829      	ldr	r0, [pc, #164]	; (800c32c <__lshift+0xd4>)
 800c288:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c28c:	f000 f9ee 	bl	800c66c <__assert_func>
 800c290:	3101      	adds	r1, #1
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	e7ee      	b.n	800c274 <__lshift+0x1c>
 800c296:	2300      	movs	r3, #0
 800c298:	f100 0114 	add.w	r1, r0, #20
 800c29c:	f100 0210 	add.w	r2, r0, #16
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	4553      	cmp	r3, sl
 800c2a4:	db33      	blt.n	800c30e <__lshift+0xb6>
 800c2a6:	6920      	ldr	r0, [r4, #16]
 800c2a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2ac:	f104 0314 	add.w	r3, r4, #20
 800c2b0:	f019 091f 	ands.w	r9, r9, #31
 800c2b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2bc:	d02b      	beq.n	800c316 <__lshift+0xbe>
 800c2be:	f1c9 0e20 	rsb	lr, r9, #32
 800c2c2:	468a      	mov	sl, r1
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	6818      	ldr	r0, [r3, #0]
 800c2c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c2cc:	4310      	orrs	r0, r2
 800c2ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2d6:	459c      	cmp	ip, r3
 800c2d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2dc:	d8f3      	bhi.n	800c2c6 <__lshift+0x6e>
 800c2de:	ebac 0304 	sub.w	r3, ip, r4
 800c2e2:	3b15      	subs	r3, #21
 800c2e4:	f023 0303 	bic.w	r3, r3, #3
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	f104 0015 	add.w	r0, r4, #21
 800c2ee:	4584      	cmp	ip, r0
 800c2f0:	bf38      	it	cc
 800c2f2:	2304      	movcc	r3, #4
 800c2f4:	50ca      	str	r2, [r1, r3]
 800c2f6:	b10a      	cbz	r2, 800c2fc <__lshift+0xa4>
 800c2f8:	f108 0602 	add.w	r6, r8, #2
 800c2fc:	3e01      	subs	r6, #1
 800c2fe:	4638      	mov	r0, r7
 800c300:	612e      	str	r6, [r5, #16]
 800c302:	4621      	mov	r1, r4
 800c304:	f7ff fe0b 	bl	800bf1e <_Bfree>
 800c308:	4628      	mov	r0, r5
 800c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c30e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c312:	3301      	adds	r3, #1
 800c314:	e7c5      	b.n	800c2a2 <__lshift+0x4a>
 800c316:	3904      	subs	r1, #4
 800c318:	f853 2b04 	ldr.w	r2, [r3], #4
 800c31c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c320:	459c      	cmp	ip, r3
 800c322:	d8f9      	bhi.n	800c318 <__lshift+0xc0>
 800c324:	e7ea      	b.n	800c2fc <__lshift+0xa4>
 800c326:	bf00      	nop
 800c328:	0800e23d 	.word	0x0800e23d
 800c32c:	0800e2a6 	.word	0x0800e2a6

0800c330 <__mcmp>:
 800c330:	b530      	push	{r4, r5, lr}
 800c332:	6902      	ldr	r2, [r0, #16]
 800c334:	690c      	ldr	r4, [r1, #16]
 800c336:	1b12      	subs	r2, r2, r4
 800c338:	d10e      	bne.n	800c358 <__mcmp+0x28>
 800c33a:	f100 0314 	add.w	r3, r0, #20
 800c33e:	3114      	adds	r1, #20
 800c340:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c344:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c348:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c34c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c350:	42a5      	cmp	r5, r4
 800c352:	d003      	beq.n	800c35c <__mcmp+0x2c>
 800c354:	d305      	bcc.n	800c362 <__mcmp+0x32>
 800c356:	2201      	movs	r2, #1
 800c358:	4610      	mov	r0, r2
 800c35a:	bd30      	pop	{r4, r5, pc}
 800c35c:	4283      	cmp	r3, r0
 800c35e:	d3f3      	bcc.n	800c348 <__mcmp+0x18>
 800c360:	e7fa      	b.n	800c358 <__mcmp+0x28>
 800c362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c366:	e7f7      	b.n	800c358 <__mcmp+0x28>

0800c368 <__mdiff>:
 800c368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	460c      	mov	r4, r1
 800c36e:	4606      	mov	r6, r0
 800c370:	4611      	mov	r1, r2
 800c372:	4620      	mov	r0, r4
 800c374:	4690      	mov	r8, r2
 800c376:	f7ff ffdb 	bl	800c330 <__mcmp>
 800c37a:	1e05      	subs	r5, r0, #0
 800c37c:	d110      	bne.n	800c3a0 <__mdiff+0x38>
 800c37e:	4629      	mov	r1, r5
 800c380:	4630      	mov	r0, r6
 800c382:	f7ff fda7 	bl	800bed4 <_Balloc>
 800c386:	b930      	cbnz	r0, 800c396 <__mdiff+0x2e>
 800c388:	4b3a      	ldr	r3, [pc, #232]	; (800c474 <__mdiff+0x10c>)
 800c38a:	4602      	mov	r2, r0
 800c38c:	f240 2137 	movw	r1, #567	; 0x237
 800c390:	4839      	ldr	r0, [pc, #228]	; (800c478 <__mdiff+0x110>)
 800c392:	f000 f96b 	bl	800c66c <__assert_func>
 800c396:	2301      	movs	r3, #1
 800c398:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c39c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a0:	bfa4      	itt	ge
 800c3a2:	4643      	movge	r3, r8
 800c3a4:	46a0      	movge	r8, r4
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3ac:	bfa6      	itte	ge
 800c3ae:	461c      	movge	r4, r3
 800c3b0:	2500      	movge	r5, #0
 800c3b2:	2501      	movlt	r5, #1
 800c3b4:	f7ff fd8e 	bl	800bed4 <_Balloc>
 800c3b8:	b920      	cbnz	r0, 800c3c4 <__mdiff+0x5c>
 800c3ba:	4b2e      	ldr	r3, [pc, #184]	; (800c474 <__mdiff+0x10c>)
 800c3bc:	4602      	mov	r2, r0
 800c3be:	f240 2145 	movw	r1, #581	; 0x245
 800c3c2:	e7e5      	b.n	800c390 <__mdiff+0x28>
 800c3c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3c8:	6926      	ldr	r6, [r4, #16]
 800c3ca:	60c5      	str	r5, [r0, #12]
 800c3cc:	f104 0914 	add.w	r9, r4, #20
 800c3d0:	f108 0514 	add.w	r5, r8, #20
 800c3d4:	f100 0e14 	add.w	lr, r0, #20
 800c3d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3e0:	f108 0210 	add.w	r2, r8, #16
 800c3e4:	46f2      	mov	sl, lr
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3f0:	fa11 f88b 	uxtah	r8, r1, fp
 800c3f4:	b299      	uxth	r1, r3
 800c3f6:	0c1b      	lsrs	r3, r3, #16
 800c3f8:	eba8 0801 	sub.w	r8, r8, r1
 800c3fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c400:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c404:	fa1f f888 	uxth.w	r8, r8
 800c408:	1419      	asrs	r1, r3, #16
 800c40a:	454e      	cmp	r6, r9
 800c40c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c410:	f84a 3b04 	str.w	r3, [sl], #4
 800c414:	d8e8      	bhi.n	800c3e8 <__mdiff+0x80>
 800c416:	1b33      	subs	r3, r6, r4
 800c418:	3b15      	subs	r3, #21
 800c41a:	f023 0303 	bic.w	r3, r3, #3
 800c41e:	3304      	adds	r3, #4
 800c420:	3415      	adds	r4, #21
 800c422:	42a6      	cmp	r6, r4
 800c424:	bf38      	it	cc
 800c426:	2304      	movcc	r3, #4
 800c428:	441d      	add	r5, r3
 800c42a:	4473      	add	r3, lr
 800c42c:	469e      	mov	lr, r3
 800c42e:	462e      	mov	r6, r5
 800c430:	4566      	cmp	r6, ip
 800c432:	d30e      	bcc.n	800c452 <__mdiff+0xea>
 800c434:	f10c 0203 	add.w	r2, ip, #3
 800c438:	1b52      	subs	r2, r2, r5
 800c43a:	f022 0203 	bic.w	r2, r2, #3
 800c43e:	3d03      	subs	r5, #3
 800c440:	45ac      	cmp	ip, r5
 800c442:	bf38      	it	cc
 800c444:	2200      	movcc	r2, #0
 800c446:	4413      	add	r3, r2
 800c448:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c44c:	b17a      	cbz	r2, 800c46e <__mdiff+0x106>
 800c44e:	6107      	str	r7, [r0, #16]
 800c450:	e7a4      	b.n	800c39c <__mdiff+0x34>
 800c452:	f856 8b04 	ldr.w	r8, [r6], #4
 800c456:	fa11 f288 	uxtah	r2, r1, r8
 800c45a:	1414      	asrs	r4, r2, #16
 800c45c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c460:	b292      	uxth	r2, r2
 800c462:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c466:	f84e 2b04 	str.w	r2, [lr], #4
 800c46a:	1421      	asrs	r1, r4, #16
 800c46c:	e7e0      	b.n	800c430 <__mdiff+0xc8>
 800c46e:	3f01      	subs	r7, #1
 800c470:	e7ea      	b.n	800c448 <__mdiff+0xe0>
 800c472:	bf00      	nop
 800c474:	0800e23d 	.word	0x0800e23d
 800c478:	0800e2a6 	.word	0x0800e2a6

0800c47c <__d2b>:
 800c47c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c480:	460f      	mov	r7, r1
 800c482:	2101      	movs	r1, #1
 800c484:	ec59 8b10 	vmov	r8, r9, d0
 800c488:	4616      	mov	r6, r2
 800c48a:	f7ff fd23 	bl	800bed4 <_Balloc>
 800c48e:	4604      	mov	r4, r0
 800c490:	b930      	cbnz	r0, 800c4a0 <__d2b+0x24>
 800c492:	4602      	mov	r2, r0
 800c494:	4b24      	ldr	r3, [pc, #144]	; (800c528 <__d2b+0xac>)
 800c496:	4825      	ldr	r0, [pc, #148]	; (800c52c <__d2b+0xb0>)
 800c498:	f240 310f 	movw	r1, #783	; 0x30f
 800c49c:	f000 f8e6 	bl	800c66c <__assert_func>
 800c4a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c4a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4a8:	bb2d      	cbnz	r5, 800c4f6 <__d2b+0x7a>
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	f1b8 0300 	subs.w	r3, r8, #0
 800c4b0:	d026      	beq.n	800c500 <__d2b+0x84>
 800c4b2:	4668      	mov	r0, sp
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	f7ff fda1 	bl	800bffc <__lo0bits>
 800c4ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c4be:	b1e8      	cbz	r0, 800c4fc <__d2b+0x80>
 800c4c0:	f1c0 0320 	rsb	r3, r0, #32
 800c4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c8:	430b      	orrs	r3, r1
 800c4ca:	40c2      	lsrs	r2, r0
 800c4cc:	6163      	str	r3, [r4, #20]
 800c4ce:	9201      	str	r2, [sp, #4]
 800c4d0:	9b01      	ldr	r3, [sp, #4]
 800c4d2:	61a3      	str	r3, [r4, #24]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	bf14      	ite	ne
 800c4d8:	2202      	movne	r2, #2
 800c4da:	2201      	moveq	r2, #1
 800c4dc:	6122      	str	r2, [r4, #16]
 800c4de:	b1bd      	cbz	r5, 800c510 <__d2b+0x94>
 800c4e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4e4:	4405      	add	r5, r0
 800c4e6:	603d      	str	r5, [r7, #0]
 800c4e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4ec:	6030      	str	r0, [r6, #0]
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	b003      	add	sp, #12
 800c4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4fa:	e7d6      	b.n	800c4aa <__d2b+0x2e>
 800c4fc:	6161      	str	r1, [r4, #20]
 800c4fe:	e7e7      	b.n	800c4d0 <__d2b+0x54>
 800c500:	a801      	add	r0, sp, #4
 800c502:	f7ff fd7b 	bl	800bffc <__lo0bits>
 800c506:	9b01      	ldr	r3, [sp, #4]
 800c508:	6163      	str	r3, [r4, #20]
 800c50a:	3020      	adds	r0, #32
 800c50c:	2201      	movs	r2, #1
 800c50e:	e7e5      	b.n	800c4dc <__d2b+0x60>
 800c510:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c514:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c518:	6038      	str	r0, [r7, #0]
 800c51a:	6918      	ldr	r0, [r3, #16]
 800c51c:	f7ff fd4e 	bl	800bfbc <__hi0bits>
 800c520:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c524:	e7e2      	b.n	800c4ec <__d2b+0x70>
 800c526:	bf00      	nop
 800c528:	0800e23d 	.word	0x0800e23d
 800c52c:	0800e2a6 	.word	0x0800e2a6

0800c530 <__ssprint_r>:
 800c530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c534:	6813      	ldr	r3, [r2, #0]
 800c536:	9301      	str	r3, [sp, #4]
 800c538:	6893      	ldr	r3, [r2, #8]
 800c53a:	4680      	mov	r8, r0
 800c53c:	460c      	mov	r4, r1
 800c53e:	4617      	mov	r7, r2
 800c540:	2b00      	cmp	r3, #0
 800c542:	d157      	bne.n	800c5f4 <__ssprint_r+0xc4>
 800c544:	2000      	movs	r0, #0
 800c546:	2300      	movs	r3, #0
 800c548:	607b      	str	r3, [r7, #4]
 800c54a:	b003      	add	sp, #12
 800c54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c550:	9b01      	ldr	r3, [sp, #4]
 800c552:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800c556:	3308      	adds	r3, #8
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	68a6      	ldr	r6, [r4, #8]
 800c55c:	6820      	ldr	r0, [r4, #0]
 800c55e:	f1bb 0f00 	cmp.w	fp, #0
 800c562:	d0f5      	beq.n	800c550 <__ssprint_r+0x20>
 800c564:	45b3      	cmp	fp, r6
 800c566:	d32d      	bcc.n	800c5c4 <__ssprint_r+0x94>
 800c568:	89a2      	ldrh	r2, [r4, #12]
 800c56a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c56e:	d029      	beq.n	800c5c4 <__ssprint_r+0x94>
 800c570:	6921      	ldr	r1, [r4, #16]
 800c572:	6965      	ldr	r5, [r4, #20]
 800c574:	eba0 0901 	sub.w	r9, r0, r1
 800c578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c57c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c580:	f109 0001 	add.w	r0, r9, #1
 800c584:	106d      	asrs	r5, r5, #1
 800c586:	4458      	add	r0, fp
 800c588:	4285      	cmp	r5, r0
 800c58a:	bf38      	it	cc
 800c58c:	4605      	movcc	r5, r0
 800c58e:	0553      	lsls	r3, r2, #21
 800c590:	d534      	bpl.n	800c5fc <__ssprint_r+0xcc>
 800c592:	4629      	mov	r1, r5
 800c594:	4640      	mov	r0, r8
 800c596:	f7fd f841 	bl	800961c <_malloc_r>
 800c59a:	4606      	mov	r6, r0
 800c59c:	2800      	cmp	r0, #0
 800c59e:	d038      	beq.n	800c612 <__ssprint_r+0xe2>
 800c5a0:	464a      	mov	r2, r9
 800c5a2:	6921      	ldr	r1, [r4, #16]
 800c5a4:	f7fc ff08 	bl	80093b8 <memcpy>
 800c5a8:	89a2      	ldrh	r2, [r4, #12]
 800c5aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c5ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c5b2:	81a2      	strh	r2, [r4, #12]
 800c5b4:	6126      	str	r6, [r4, #16]
 800c5b6:	6165      	str	r5, [r4, #20]
 800c5b8:	444e      	add	r6, r9
 800c5ba:	eba5 0509 	sub.w	r5, r5, r9
 800c5be:	6026      	str	r6, [r4, #0]
 800c5c0:	60a5      	str	r5, [r4, #8]
 800c5c2:	465e      	mov	r6, fp
 800c5c4:	455e      	cmp	r6, fp
 800c5c6:	bf28      	it	cs
 800c5c8:	465e      	movcs	r6, fp
 800c5ca:	4632      	mov	r2, r6
 800c5cc:	4651      	mov	r1, sl
 800c5ce:	6820      	ldr	r0, [r4, #0]
 800c5d0:	f000 f82b 	bl	800c62a <memmove>
 800c5d4:	68a2      	ldr	r2, [r4, #8]
 800c5d6:	1b92      	subs	r2, r2, r6
 800c5d8:	60a2      	str	r2, [r4, #8]
 800c5da:	6822      	ldr	r2, [r4, #0]
 800c5dc:	4432      	add	r2, r6
 800c5de:	6022      	str	r2, [r4, #0]
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	eba2 030b 	sub.w	r3, r2, fp
 800c5e6:	44da      	add	sl, fp
 800c5e8:	60bb      	str	r3, [r7, #8]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d0aa      	beq.n	800c544 <__ssprint_r+0x14>
 800c5ee:	f04f 0b00 	mov.w	fp, #0
 800c5f2:	e7b2      	b.n	800c55a <__ssprint_r+0x2a>
 800c5f4:	f04f 0a00 	mov.w	sl, #0
 800c5f8:	46d3      	mov	fp, sl
 800c5fa:	e7ae      	b.n	800c55a <__ssprint_r+0x2a>
 800c5fc:	462a      	mov	r2, r5
 800c5fe:	4640      	mov	r0, r8
 800c600:	f000 f89a 	bl	800c738 <_realloc_r>
 800c604:	4606      	mov	r6, r0
 800c606:	2800      	cmp	r0, #0
 800c608:	d1d4      	bne.n	800c5b4 <__ssprint_r+0x84>
 800c60a:	6921      	ldr	r1, [r4, #16]
 800c60c:	4640      	mov	r0, r8
 800c60e:	f7fc ff45 	bl	800949c <_free_r>
 800c612:	230c      	movs	r3, #12
 800c614:	f8c8 3000 	str.w	r3, [r8]
 800c618:	89a3      	ldrh	r3, [r4, #12]
 800c61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c61e:	81a3      	strh	r3, [r4, #12]
 800c620:	2300      	movs	r3, #0
 800c622:	60bb      	str	r3, [r7, #8]
 800c624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c628:	e78d      	b.n	800c546 <__ssprint_r+0x16>

0800c62a <memmove>:
 800c62a:	4288      	cmp	r0, r1
 800c62c:	b510      	push	{r4, lr}
 800c62e:	eb01 0402 	add.w	r4, r1, r2
 800c632:	d902      	bls.n	800c63a <memmove+0x10>
 800c634:	4284      	cmp	r4, r0
 800c636:	4623      	mov	r3, r4
 800c638:	d807      	bhi.n	800c64a <memmove+0x20>
 800c63a:	1e43      	subs	r3, r0, #1
 800c63c:	42a1      	cmp	r1, r4
 800c63e:	d008      	beq.n	800c652 <memmove+0x28>
 800c640:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c644:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c648:	e7f8      	b.n	800c63c <memmove+0x12>
 800c64a:	4402      	add	r2, r0
 800c64c:	4601      	mov	r1, r0
 800c64e:	428a      	cmp	r2, r1
 800c650:	d100      	bne.n	800c654 <memmove+0x2a>
 800c652:	bd10      	pop	{r4, pc}
 800c654:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c658:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c65c:	e7f7      	b.n	800c64e <memmove+0x24>
	...

0800c660 <__locale_mb_cur_max>:
 800c660:	4b01      	ldr	r3, [pc, #4]	; (800c668 <__locale_mb_cur_max+0x8>)
 800c662:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800c666:	4770      	bx	lr
 800c668:	20000578 	.word	0x20000578

0800c66c <__assert_func>:
 800c66c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c66e:	4614      	mov	r4, r2
 800c670:	461a      	mov	r2, r3
 800c672:	4b09      	ldr	r3, [pc, #36]	; (800c698 <__assert_func+0x2c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4605      	mov	r5, r0
 800c678:	68d8      	ldr	r0, [r3, #12]
 800c67a:	b14c      	cbz	r4, 800c690 <__assert_func+0x24>
 800c67c:	4b07      	ldr	r3, [pc, #28]	; (800c69c <__assert_func+0x30>)
 800c67e:	9100      	str	r1, [sp, #0]
 800c680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c684:	4906      	ldr	r1, [pc, #24]	; (800c6a0 <__assert_func+0x34>)
 800c686:	462b      	mov	r3, r5
 800c688:	f000 fa0c 	bl	800caa4 <fiprintf>
 800c68c:	f001 f92d 	bl	800d8ea <abort>
 800c690:	4b04      	ldr	r3, [pc, #16]	; (800c6a4 <__assert_func+0x38>)
 800c692:	461c      	mov	r4, r3
 800c694:	e7f3      	b.n	800c67e <__assert_func+0x12>
 800c696:	bf00      	nop
 800c698:	20000160 	.word	0x20000160
 800c69c:	0800e406 	.word	0x0800e406
 800c6a0:	0800e413 	.word	0x0800e413
 800c6a4:	0800e441 	.word	0x0800e441

0800c6a8 <_calloc_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	fba1 1502 	umull	r1, r5, r1, r2
 800c6ae:	b92d      	cbnz	r5, 800c6bc <_calloc_r+0x14>
 800c6b0:	f7fc ffb4 	bl	800961c <_malloc_r>
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	b938      	cbnz	r0, 800c6c8 <_calloc_r+0x20>
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
 800c6bc:	f7fc fe4e 	bl	800935c <__errno>
 800c6c0:	230c      	movs	r3, #12
 800c6c2:	6003      	str	r3, [r0, #0]
 800c6c4:	2400      	movs	r4, #0
 800c6c6:	e7f7      	b.n	800c6b8 <_calloc_r+0x10>
 800c6c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c6cc:	f022 0203 	bic.w	r2, r2, #3
 800c6d0:	3a04      	subs	r2, #4
 800c6d2:	2a24      	cmp	r2, #36	; 0x24
 800c6d4:	d819      	bhi.n	800c70a <_calloc_r+0x62>
 800c6d6:	2a13      	cmp	r2, #19
 800c6d8:	d915      	bls.n	800c706 <_calloc_r+0x5e>
 800c6da:	2a1b      	cmp	r2, #27
 800c6dc:	e9c0 5500 	strd	r5, r5, [r0]
 800c6e0:	d806      	bhi.n	800c6f0 <_calloc_r+0x48>
 800c6e2:	f100 0308 	add.w	r3, r0, #8
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	e9c3 2200 	strd	r2, r2, [r3]
 800c6ec:	609a      	str	r2, [r3, #8]
 800c6ee:	e7e3      	b.n	800c6b8 <_calloc_r+0x10>
 800c6f0:	2a24      	cmp	r2, #36	; 0x24
 800c6f2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800c6f6:	bf11      	iteee	ne
 800c6f8:	f100 0310 	addne.w	r3, r0, #16
 800c6fc:	6105      	streq	r5, [r0, #16]
 800c6fe:	f100 0318 	addeq.w	r3, r0, #24
 800c702:	6145      	streq	r5, [r0, #20]
 800c704:	e7ef      	b.n	800c6e6 <_calloc_r+0x3e>
 800c706:	4603      	mov	r3, r0
 800c708:	e7ed      	b.n	800c6e6 <_calloc_r+0x3e>
 800c70a:	4629      	mov	r1, r5
 800c70c:	f7fc fda9 	bl	8009262 <memset>
 800c710:	e7d2      	b.n	800c6b8 <_calloc_r+0x10>

0800c712 <__ascii_mbtowc>:
 800c712:	b082      	sub	sp, #8
 800c714:	b901      	cbnz	r1, 800c718 <__ascii_mbtowc+0x6>
 800c716:	a901      	add	r1, sp, #4
 800c718:	b142      	cbz	r2, 800c72c <__ascii_mbtowc+0x1a>
 800c71a:	b14b      	cbz	r3, 800c730 <__ascii_mbtowc+0x1e>
 800c71c:	7813      	ldrb	r3, [r2, #0]
 800c71e:	600b      	str	r3, [r1, #0]
 800c720:	7812      	ldrb	r2, [r2, #0]
 800c722:	1e10      	subs	r0, r2, #0
 800c724:	bf18      	it	ne
 800c726:	2001      	movne	r0, #1
 800c728:	b002      	add	sp, #8
 800c72a:	4770      	bx	lr
 800c72c:	4610      	mov	r0, r2
 800c72e:	e7fb      	b.n	800c728 <__ascii_mbtowc+0x16>
 800c730:	f06f 0001 	mvn.w	r0, #1
 800c734:	e7f8      	b.n	800c728 <__ascii_mbtowc+0x16>
	...

0800c738 <_realloc_r>:
 800c738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c73c:	4682      	mov	sl, r0
 800c73e:	460c      	mov	r4, r1
 800c740:	b929      	cbnz	r1, 800c74e <_realloc_r+0x16>
 800c742:	4611      	mov	r1, r2
 800c744:	b003      	add	sp, #12
 800c746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74a:	f7fc bf67 	b.w	800961c <_malloc_r>
 800c74e:	9201      	str	r2, [sp, #4]
 800c750:	f7fd f99e 	bl	8009a90 <__malloc_lock>
 800c754:	9a01      	ldr	r2, [sp, #4]
 800c756:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c75a:	f102 080b 	add.w	r8, r2, #11
 800c75e:	f1b8 0f16 	cmp.w	r8, #22
 800c762:	d90b      	bls.n	800c77c <_realloc_r+0x44>
 800c764:	f038 0807 	bics.w	r8, r8, #7
 800c768:	d50a      	bpl.n	800c780 <_realloc_r+0x48>
 800c76a:	230c      	movs	r3, #12
 800c76c:	f8ca 3000 	str.w	r3, [sl]
 800c770:	f04f 0b00 	mov.w	fp, #0
 800c774:	4658      	mov	r0, fp
 800c776:	b003      	add	sp, #12
 800c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77c:	f04f 0810 	mov.w	r8, #16
 800c780:	4590      	cmp	r8, r2
 800c782:	d3f2      	bcc.n	800c76a <_realloc_r+0x32>
 800c784:	f025 0603 	bic.w	r6, r5, #3
 800c788:	45b0      	cmp	r8, r6
 800c78a:	f1a4 0908 	sub.w	r9, r4, #8
 800c78e:	f340 8170 	ble.w	800ca72 <_realloc_r+0x33a>
 800c792:	499c      	ldr	r1, [pc, #624]	; (800ca04 <_realloc_r+0x2cc>)
 800c794:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c798:	eb09 0306 	add.w	r3, r9, r6
 800c79c:	459c      	cmp	ip, r3
 800c79e:	6859      	ldr	r1, [r3, #4]
 800c7a0:	d005      	beq.n	800c7ae <_realloc_r+0x76>
 800c7a2:	f021 0001 	bic.w	r0, r1, #1
 800c7a6:	4418      	add	r0, r3
 800c7a8:	6840      	ldr	r0, [r0, #4]
 800c7aa:	07c7      	lsls	r7, r0, #31
 800c7ac:	d447      	bmi.n	800c83e <_realloc_r+0x106>
 800c7ae:	f021 0103 	bic.w	r1, r1, #3
 800c7b2:	459c      	cmp	ip, r3
 800c7b4:	eb06 0701 	add.w	r7, r6, r1
 800c7b8:	d119      	bne.n	800c7ee <_realloc_r+0xb6>
 800c7ba:	f108 0010 	add.w	r0, r8, #16
 800c7be:	42b8      	cmp	r0, r7
 800c7c0:	dc3f      	bgt.n	800c842 <_realloc_r+0x10a>
 800c7c2:	eb09 0308 	add.w	r3, r9, r8
 800c7c6:	4a8f      	ldr	r2, [pc, #572]	; (800ca04 <_realloc_r+0x2cc>)
 800c7c8:	eba7 0708 	sub.w	r7, r7, r8
 800c7cc:	f047 0701 	orr.w	r7, r7, #1
 800c7d0:	6093      	str	r3, [r2, #8]
 800c7d2:	605f      	str	r7, [r3, #4]
 800c7d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	ea43 0308 	orr.w	r3, r3, r8
 800c7e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7e4:	4650      	mov	r0, sl
 800c7e6:	f7fd f959 	bl	8009a9c <__malloc_unlock>
 800c7ea:	46a3      	mov	fp, r4
 800c7ec:	e7c2      	b.n	800c774 <_realloc_r+0x3c>
 800c7ee:	45b8      	cmp	r8, r7
 800c7f0:	dc27      	bgt.n	800c842 <_realloc_r+0x10a>
 800c7f2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c7f6:	60da      	str	r2, [r3, #12]
 800c7f8:	6093      	str	r3, [r2, #8]
 800c7fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c7fe:	eba7 0008 	sub.w	r0, r7, r8
 800c802:	280f      	cmp	r0, #15
 800c804:	f003 0301 	and.w	r3, r3, #1
 800c808:	eb09 0207 	add.w	r2, r9, r7
 800c80c:	f240 8133 	bls.w	800ca76 <_realloc_r+0x33e>
 800c810:	eb09 0108 	add.w	r1, r9, r8
 800c814:	ea48 0303 	orr.w	r3, r8, r3
 800c818:	f040 0001 	orr.w	r0, r0, #1
 800c81c:	f8c9 3004 	str.w	r3, [r9, #4]
 800c820:	6048      	str	r0, [r1, #4]
 800c822:	6853      	ldr	r3, [r2, #4]
 800c824:	f043 0301 	orr.w	r3, r3, #1
 800c828:	6053      	str	r3, [r2, #4]
 800c82a:	3108      	adds	r1, #8
 800c82c:	4650      	mov	r0, sl
 800c82e:	f7fc fe35 	bl	800949c <_free_r>
 800c832:	4650      	mov	r0, sl
 800c834:	f7fd f932 	bl	8009a9c <__malloc_unlock>
 800c838:	f109 0b08 	add.w	fp, r9, #8
 800c83c:	e79a      	b.n	800c774 <_realloc_r+0x3c>
 800c83e:	2100      	movs	r1, #0
 800c840:	460b      	mov	r3, r1
 800c842:	07e8      	lsls	r0, r5, #31
 800c844:	f100 80c6 	bmi.w	800c9d4 <_realloc_r+0x29c>
 800c848:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c84c:	eba9 0505 	sub.w	r5, r9, r5
 800c850:	6868      	ldr	r0, [r5, #4]
 800c852:	f020 0003 	bic.w	r0, r0, #3
 800c856:	eb00 0b06 	add.w	fp, r0, r6
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 8086 	beq.w	800c96c <_realloc_r+0x234>
 800c860:	459c      	cmp	ip, r3
 800c862:	eb01 070b 	add.w	r7, r1, fp
 800c866:	d149      	bne.n	800c8fc <_realloc_r+0x1c4>
 800c868:	f108 0310 	add.w	r3, r8, #16
 800c86c:	42bb      	cmp	r3, r7
 800c86e:	dc7d      	bgt.n	800c96c <_realloc_r+0x234>
 800c870:	46ab      	mov	fp, r5
 800c872:	68eb      	ldr	r3, [r5, #12]
 800c874:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800c878:	60d3      	str	r3, [r2, #12]
 800c87a:	609a      	str	r2, [r3, #8]
 800c87c:	1f32      	subs	r2, r6, #4
 800c87e:	2a24      	cmp	r2, #36	; 0x24
 800c880:	d837      	bhi.n	800c8f2 <_realloc_r+0x1ba>
 800c882:	2a13      	cmp	r2, #19
 800c884:	d933      	bls.n	800c8ee <_realloc_r+0x1b6>
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	60ab      	str	r3, [r5, #8]
 800c88a:	6863      	ldr	r3, [r4, #4]
 800c88c:	60eb      	str	r3, [r5, #12]
 800c88e:	2a1b      	cmp	r2, #27
 800c890:	d81b      	bhi.n	800c8ca <_realloc_r+0x192>
 800c892:	3408      	adds	r4, #8
 800c894:	f105 0310 	add.w	r3, r5, #16
 800c898:	6822      	ldr	r2, [r4, #0]
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	6862      	ldr	r2, [r4, #4]
 800c89e:	605a      	str	r2, [r3, #4]
 800c8a0:	68a2      	ldr	r2, [r4, #8]
 800c8a2:	609a      	str	r2, [r3, #8]
 800c8a4:	eb05 0308 	add.w	r3, r5, r8
 800c8a8:	4a56      	ldr	r2, [pc, #344]	; (800ca04 <_realloc_r+0x2cc>)
 800c8aa:	eba7 0708 	sub.w	r7, r7, r8
 800c8ae:	f047 0701 	orr.w	r7, r7, #1
 800c8b2:	6093      	str	r3, [r2, #8]
 800c8b4:	605f      	str	r7, [r3, #4]
 800c8b6:	686b      	ldr	r3, [r5, #4]
 800c8b8:	f003 0301 	and.w	r3, r3, #1
 800c8bc:	ea43 0308 	orr.w	r3, r3, r8
 800c8c0:	606b      	str	r3, [r5, #4]
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	f7fd f8ea 	bl	8009a9c <__malloc_unlock>
 800c8c8:	e754      	b.n	800c774 <_realloc_r+0x3c>
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	612b      	str	r3, [r5, #16]
 800c8ce:	68e3      	ldr	r3, [r4, #12]
 800c8d0:	616b      	str	r3, [r5, #20]
 800c8d2:	2a24      	cmp	r2, #36	; 0x24
 800c8d4:	bf01      	itttt	eq
 800c8d6:	6923      	ldreq	r3, [r4, #16]
 800c8d8:	61ab      	streq	r3, [r5, #24]
 800c8da:	6962      	ldreq	r2, [r4, #20]
 800c8dc:	61ea      	streq	r2, [r5, #28]
 800c8de:	bf19      	ittee	ne
 800c8e0:	3410      	addne	r4, #16
 800c8e2:	f105 0318 	addne.w	r3, r5, #24
 800c8e6:	f105 0320 	addeq.w	r3, r5, #32
 800c8ea:	3418      	addeq	r4, #24
 800c8ec:	e7d4      	b.n	800c898 <_realloc_r+0x160>
 800c8ee:	465b      	mov	r3, fp
 800c8f0:	e7d2      	b.n	800c898 <_realloc_r+0x160>
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4658      	mov	r0, fp
 800c8f6:	f7ff fe98 	bl	800c62a <memmove>
 800c8fa:	e7d3      	b.n	800c8a4 <_realloc_r+0x16c>
 800c8fc:	45b8      	cmp	r8, r7
 800c8fe:	dc35      	bgt.n	800c96c <_realloc_r+0x234>
 800c900:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c904:	4628      	mov	r0, r5
 800c906:	60da      	str	r2, [r3, #12]
 800c908:	6093      	str	r3, [r2, #8]
 800c90a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c90e:	68eb      	ldr	r3, [r5, #12]
 800c910:	60d3      	str	r3, [r2, #12]
 800c912:	609a      	str	r2, [r3, #8]
 800c914:	1f32      	subs	r2, r6, #4
 800c916:	2a24      	cmp	r2, #36	; 0x24
 800c918:	d824      	bhi.n	800c964 <_realloc_r+0x22c>
 800c91a:	2a13      	cmp	r2, #19
 800c91c:	d908      	bls.n	800c930 <_realloc_r+0x1f8>
 800c91e:	6823      	ldr	r3, [r4, #0]
 800c920:	60ab      	str	r3, [r5, #8]
 800c922:	6863      	ldr	r3, [r4, #4]
 800c924:	60eb      	str	r3, [r5, #12]
 800c926:	2a1b      	cmp	r2, #27
 800c928:	d80a      	bhi.n	800c940 <_realloc_r+0x208>
 800c92a:	3408      	adds	r4, #8
 800c92c:	f105 0010 	add.w	r0, r5, #16
 800c930:	6823      	ldr	r3, [r4, #0]
 800c932:	6003      	str	r3, [r0, #0]
 800c934:	6863      	ldr	r3, [r4, #4]
 800c936:	6043      	str	r3, [r0, #4]
 800c938:	68a3      	ldr	r3, [r4, #8]
 800c93a:	6083      	str	r3, [r0, #8]
 800c93c:	46a9      	mov	r9, r5
 800c93e:	e75c      	b.n	800c7fa <_realloc_r+0xc2>
 800c940:	68a3      	ldr	r3, [r4, #8]
 800c942:	612b      	str	r3, [r5, #16]
 800c944:	68e3      	ldr	r3, [r4, #12]
 800c946:	616b      	str	r3, [r5, #20]
 800c948:	2a24      	cmp	r2, #36	; 0x24
 800c94a:	bf01      	itttt	eq
 800c94c:	6923      	ldreq	r3, [r4, #16]
 800c94e:	61ab      	streq	r3, [r5, #24]
 800c950:	6963      	ldreq	r3, [r4, #20]
 800c952:	61eb      	streq	r3, [r5, #28]
 800c954:	bf19      	ittee	ne
 800c956:	3410      	addne	r4, #16
 800c958:	f105 0018 	addne.w	r0, r5, #24
 800c95c:	f105 0020 	addeq.w	r0, r5, #32
 800c960:	3418      	addeq	r4, #24
 800c962:	e7e5      	b.n	800c930 <_realloc_r+0x1f8>
 800c964:	4621      	mov	r1, r4
 800c966:	f7ff fe60 	bl	800c62a <memmove>
 800c96a:	e7e7      	b.n	800c93c <_realloc_r+0x204>
 800c96c:	45d8      	cmp	r8, fp
 800c96e:	dc31      	bgt.n	800c9d4 <_realloc_r+0x29c>
 800c970:	4628      	mov	r0, r5
 800c972:	68eb      	ldr	r3, [r5, #12]
 800c974:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c978:	60d3      	str	r3, [r2, #12]
 800c97a:	609a      	str	r2, [r3, #8]
 800c97c:	1f32      	subs	r2, r6, #4
 800c97e:	2a24      	cmp	r2, #36	; 0x24
 800c980:	d824      	bhi.n	800c9cc <_realloc_r+0x294>
 800c982:	2a13      	cmp	r2, #19
 800c984:	d908      	bls.n	800c998 <_realloc_r+0x260>
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	60ab      	str	r3, [r5, #8]
 800c98a:	6863      	ldr	r3, [r4, #4]
 800c98c:	60eb      	str	r3, [r5, #12]
 800c98e:	2a1b      	cmp	r2, #27
 800c990:	d80a      	bhi.n	800c9a8 <_realloc_r+0x270>
 800c992:	3408      	adds	r4, #8
 800c994:	f105 0010 	add.w	r0, r5, #16
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	6003      	str	r3, [r0, #0]
 800c99c:	6863      	ldr	r3, [r4, #4]
 800c99e:	6043      	str	r3, [r0, #4]
 800c9a0:	68a3      	ldr	r3, [r4, #8]
 800c9a2:	6083      	str	r3, [r0, #8]
 800c9a4:	465f      	mov	r7, fp
 800c9a6:	e7c9      	b.n	800c93c <_realloc_r+0x204>
 800c9a8:	68a3      	ldr	r3, [r4, #8]
 800c9aa:	612b      	str	r3, [r5, #16]
 800c9ac:	68e3      	ldr	r3, [r4, #12]
 800c9ae:	616b      	str	r3, [r5, #20]
 800c9b0:	2a24      	cmp	r2, #36	; 0x24
 800c9b2:	bf01      	itttt	eq
 800c9b4:	6923      	ldreq	r3, [r4, #16]
 800c9b6:	61ab      	streq	r3, [r5, #24]
 800c9b8:	6963      	ldreq	r3, [r4, #20]
 800c9ba:	61eb      	streq	r3, [r5, #28]
 800c9bc:	bf19      	ittee	ne
 800c9be:	3410      	addne	r4, #16
 800c9c0:	f105 0018 	addne.w	r0, r5, #24
 800c9c4:	f105 0020 	addeq.w	r0, r5, #32
 800c9c8:	3418      	addeq	r4, #24
 800c9ca:	e7e5      	b.n	800c998 <_realloc_r+0x260>
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	f7ff fe2c 	bl	800c62a <memmove>
 800c9d2:	e7e7      	b.n	800c9a4 <_realloc_r+0x26c>
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4650      	mov	r0, sl
 800c9d8:	f7fc fe20 	bl	800961c <_malloc_r>
 800c9dc:	4683      	mov	fp, r0
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	f43f af6f 	beq.w	800c8c2 <_realloc_r+0x18a>
 800c9e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c9e8:	f023 0301 	bic.w	r3, r3, #1
 800c9ec:	444b      	add	r3, r9
 800c9ee:	f1a0 0208 	sub.w	r2, r0, #8
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d108      	bne.n	800ca08 <_realloc_r+0x2d0>
 800c9f6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c9fa:	f027 0703 	bic.w	r7, r7, #3
 800c9fe:	4437      	add	r7, r6
 800ca00:	e6fb      	b.n	800c7fa <_realloc_r+0xc2>
 800ca02:	bf00      	nop
 800ca04:	20000168 	.word	0x20000168
 800ca08:	1f32      	subs	r2, r6, #4
 800ca0a:	2a24      	cmp	r2, #36	; 0x24
 800ca0c:	d82d      	bhi.n	800ca6a <_realloc_r+0x332>
 800ca0e:	2a13      	cmp	r2, #19
 800ca10:	d928      	bls.n	800ca64 <_realloc_r+0x32c>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	6003      	str	r3, [r0, #0]
 800ca16:	6863      	ldr	r3, [r4, #4]
 800ca18:	6043      	str	r3, [r0, #4]
 800ca1a:	2a1b      	cmp	r2, #27
 800ca1c:	d80e      	bhi.n	800ca3c <_realloc_r+0x304>
 800ca1e:	f104 0208 	add.w	r2, r4, #8
 800ca22:	f100 0308 	add.w	r3, r0, #8
 800ca26:	6811      	ldr	r1, [r2, #0]
 800ca28:	6019      	str	r1, [r3, #0]
 800ca2a:	6851      	ldr	r1, [r2, #4]
 800ca2c:	6059      	str	r1, [r3, #4]
 800ca2e:	6892      	ldr	r2, [r2, #8]
 800ca30:	609a      	str	r2, [r3, #8]
 800ca32:	4621      	mov	r1, r4
 800ca34:	4650      	mov	r0, sl
 800ca36:	f7fc fd31 	bl	800949c <_free_r>
 800ca3a:	e742      	b.n	800c8c2 <_realloc_r+0x18a>
 800ca3c:	68a3      	ldr	r3, [r4, #8]
 800ca3e:	6083      	str	r3, [r0, #8]
 800ca40:	68e3      	ldr	r3, [r4, #12]
 800ca42:	60c3      	str	r3, [r0, #12]
 800ca44:	2a24      	cmp	r2, #36	; 0x24
 800ca46:	bf01      	itttt	eq
 800ca48:	6923      	ldreq	r3, [r4, #16]
 800ca4a:	6103      	streq	r3, [r0, #16]
 800ca4c:	6961      	ldreq	r1, [r4, #20]
 800ca4e:	6141      	streq	r1, [r0, #20]
 800ca50:	bf19      	ittee	ne
 800ca52:	f104 0210 	addne.w	r2, r4, #16
 800ca56:	f100 0310 	addne.w	r3, r0, #16
 800ca5a:	f104 0218 	addeq.w	r2, r4, #24
 800ca5e:	f100 0318 	addeq.w	r3, r0, #24
 800ca62:	e7e0      	b.n	800ca26 <_realloc_r+0x2ee>
 800ca64:	4603      	mov	r3, r0
 800ca66:	4622      	mov	r2, r4
 800ca68:	e7dd      	b.n	800ca26 <_realloc_r+0x2ee>
 800ca6a:	4621      	mov	r1, r4
 800ca6c:	f7ff fddd 	bl	800c62a <memmove>
 800ca70:	e7df      	b.n	800ca32 <_realloc_r+0x2fa>
 800ca72:	4637      	mov	r7, r6
 800ca74:	e6c1      	b.n	800c7fa <_realloc_r+0xc2>
 800ca76:	431f      	orrs	r7, r3
 800ca78:	f8c9 7004 	str.w	r7, [r9, #4]
 800ca7c:	6853      	ldr	r3, [r2, #4]
 800ca7e:	f043 0301 	orr.w	r3, r3, #1
 800ca82:	6053      	str	r3, [r2, #4]
 800ca84:	e6d5      	b.n	800c832 <_realloc_r+0xfa>
 800ca86:	bf00      	nop

0800ca88 <__ascii_wctomb>:
 800ca88:	b149      	cbz	r1, 800ca9e <__ascii_wctomb+0x16>
 800ca8a:	2aff      	cmp	r2, #255	; 0xff
 800ca8c:	bf85      	ittet	hi
 800ca8e:	238a      	movhi	r3, #138	; 0x8a
 800ca90:	6003      	strhi	r3, [r0, #0]
 800ca92:	700a      	strbls	r2, [r1, #0]
 800ca94:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ca98:	bf98      	it	ls
 800ca9a:	2001      	movls	r0, #1
 800ca9c:	4770      	bx	lr
 800ca9e:	4608      	mov	r0, r1
 800caa0:	4770      	bx	lr
	...

0800caa4 <fiprintf>:
 800caa4:	b40e      	push	{r1, r2, r3}
 800caa6:	b503      	push	{r0, r1, lr}
 800caa8:	4601      	mov	r1, r0
 800caaa:	ab03      	add	r3, sp, #12
 800caac:	4805      	ldr	r0, [pc, #20]	; (800cac4 <fiprintf+0x20>)
 800caae:	f853 2b04 	ldr.w	r2, [r3], #4
 800cab2:	6800      	ldr	r0, [r0, #0]
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	f000 f839 	bl	800cb2c <_vfiprintf_r>
 800caba:	b002      	add	sp, #8
 800cabc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cac0:	b003      	add	sp, #12
 800cac2:	4770      	bx	lr
 800cac4:	20000160 	.word	0x20000160

0800cac8 <__sprint_r>:
 800cac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cacc:	6893      	ldr	r3, [r2, #8]
 800cace:	4680      	mov	r8, r0
 800cad0:	460f      	mov	r7, r1
 800cad2:	4614      	mov	r4, r2
 800cad4:	b343      	cbz	r3, 800cb28 <__sprint_r+0x60>
 800cad6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800cad8:	049d      	lsls	r5, r3, #18
 800cada:	d522      	bpl.n	800cb22 <__sprint_r+0x5a>
 800cadc:	6815      	ldr	r5, [r2, #0]
 800cade:	3508      	adds	r5, #8
 800cae0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800cae4:	f04f 0900 	mov.w	r9, #0
 800cae8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800caec:	45ca      	cmp	sl, r9
 800caee:	dc0d      	bgt.n	800cb0c <__sprint_r+0x44>
 800caf0:	68a3      	ldr	r3, [r4, #8]
 800caf2:	f026 0603 	bic.w	r6, r6, #3
 800caf6:	1b98      	subs	r0, r3, r6
 800caf8:	60a0      	str	r0, [r4, #8]
 800cafa:	3508      	adds	r5, #8
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d1ef      	bne.n	800cae0 <__sprint_r+0x18>
 800cb00:	2300      	movs	r3, #0
 800cb02:	60a3      	str	r3, [r4, #8]
 800cb04:	2300      	movs	r3, #0
 800cb06:	6063      	str	r3, [r4, #4]
 800cb08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800cb10:	463a      	mov	r2, r7
 800cb12:	4640      	mov	r0, r8
 800cb14:	f000 febf 	bl	800d896 <_fputwc_r>
 800cb18:	1c43      	adds	r3, r0, #1
 800cb1a:	d0f1      	beq.n	800cb00 <__sprint_r+0x38>
 800cb1c:	f109 0901 	add.w	r9, r9, #1
 800cb20:	e7e4      	b.n	800caec <__sprint_r+0x24>
 800cb22:	f000 fcd5 	bl	800d4d0 <__sfvwrite_r>
 800cb26:	e7eb      	b.n	800cb00 <__sprint_r+0x38>
 800cb28:	4618      	mov	r0, r3
 800cb2a:	e7eb      	b.n	800cb04 <__sprint_r+0x3c>

0800cb2c <_vfiprintf_r>:
 800cb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb30:	ed2d 8b02 	vpush	{d8}
 800cb34:	b0bb      	sub	sp, #236	; 0xec
 800cb36:	460f      	mov	r7, r1
 800cb38:	9201      	str	r2, [sp, #4]
 800cb3a:	461d      	mov	r5, r3
 800cb3c:	461c      	mov	r4, r3
 800cb3e:	4681      	mov	r9, r0
 800cb40:	b118      	cbz	r0, 800cb4a <_vfiprintf_r+0x1e>
 800cb42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cb44:	b90b      	cbnz	r3, 800cb4a <_vfiprintf_r+0x1e>
 800cb46:	f7fc faf3 	bl	8009130 <__sinit>
 800cb4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb4c:	07d8      	lsls	r0, r3, #31
 800cb4e:	d405      	bmi.n	800cb5c <_vfiprintf_r+0x30>
 800cb50:	89bb      	ldrh	r3, [r7, #12]
 800cb52:	0599      	lsls	r1, r3, #22
 800cb54:	d402      	bmi.n	800cb5c <_vfiprintf_r+0x30>
 800cb56:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cb58:	f7fc fc2c 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800cb5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cb60:	049a      	lsls	r2, r3, #18
 800cb62:	d406      	bmi.n	800cb72 <_vfiprintf_r+0x46>
 800cb64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cb68:	81bb      	strh	r3, [r7, #12]
 800cb6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb70:	667b      	str	r3, [r7, #100]	; 0x64
 800cb72:	89bb      	ldrh	r3, [r7, #12]
 800cb74:	071e      	lsls	r6, r3, #28
 800cb76:	d501      	bpl.n	800cb7c <_vfiprintf_r+0x50>
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	b9bb      	cbnz	r3, 800cbac <_vfiprintf_r+0x80>
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	4648      	mov	r0, r9
 800cb80:	f000 fdf0 	bl	800d764 <__swsetup_r>
 800cb84:	b190      	cbz	r0, 800cbac <_vfiprintf_r+0x80>
 800cb86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb88:	07d8      	lsls	r0, r3, #31
 800cb8a:	d508      	bpl.n	800cb9e <_vfiprintf_r+0x72>
 800cb8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb90:	9302      	str	r3, [sp, #8]
 800cb92:	9802      	ldr	r0, [sp, #8]
 800cb94:	b03b      	add	sp, #236	; 0xec
 800cb96:	ecbd 8b02 	vpop	{d8}
 800cb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9e:	89bb      	ldrh	r3, [r7, #12]
 800cba0:	0599      	lsls	r1, r3, #22
 800cba2:	d4f3      	bmi.n	800cb8c <_vfiprintf_r+0x60>
 800cba4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cba6:	f7fc fc06 	bl	80093b6 <__retarget_lock_release_recursive>
 800cbaa:	e7ef      	b.n	800cb8c <_vfiprintf_r+0x60>
 800cbac:	89bb      	ldrh	r3, [r7, #12]
 800cbae:	f003 021a 	and.w	r2, r3, #26
 800cbb2:	2a0a      	cmp	r2, #10
 800cbb4:	d116      	bne.n	800cbe4 <_vfiprintf_r+0xb8>
 800cbb6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cbba:	2a00      	cmp	r2, #0
 800cbbc:	db12      	blt.n	800cbe4 <_vfiprintf_r+0xb8>
 800cbbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cbc0:	07d2      	lsls	r2, r2, #31
 800cbc2:	d404      	bmi.n	800cbce <_vfiprintf_r+0xa2>
 800cbc4:	059e      	lsls	r6, r3, #22
 800cbc6:	d402      	bmi.n	800cbce <_vfiprintf_r+0xa2>
 800cbc8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cbca:	f7fc fbf4 	bl	80093b6 <__retarget_lock_release_recursive>
 800cbce:	9a01      	ldr	r2, [sp, #4]
 800cbd0:	462b      	mov	r3, r5
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	4648      	mov	r0, r9
 800cbd6:	b03b      	add	sp, #236	; 0xec
 800cbd8:	ecbd 8b02 	vpop	{d8}
 800cbdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe0:	f000 bc36 	b.w	800d450 <__sbprintf>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800cbea:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800cbee:	ae11      	add	r6, sp, #68	; 0x44
 800cbf0:	ee08 3a10 	vmov	s16, r3
 800cbf4:	960e      	str	r6, [sp, #56]	; 0x38
 800cbf6:	9307      	str	r3, [sp, #28]
 800cbf8:	9302      	str	r3, [sp, #8]
 800cbfa:	9b01      	ldr	r3, [sp, #4]
 800cbfc:	461d      	mov	r5, r3
 800cbfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc02:	b10a      	cbz	r2, 800cc08 <_vfiprintf_r+0xdc>
 800cc04:	2a25      	cmp	r2, #37	; 0x25
 800cc06:	d1f9      	bne.n	800cbfc <_vfiprintf_r+0xd0>
 800cc08:	9b01      	ldr	r3, [sp, #4]
 800cc0a:	ebb5 0803 	subs.w	r8, r5, r3
 800cc0e:	d00d      	beq.n	800cc2c <_vfiprintf_r+0x100>
 800cc10:	e9c6 3800 	strd	r3, r8, [r6]
 800cc14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc16:	4443      	add	r3, r8
 800cc18:	9310      	str	r3, [sp, #64]	; 0x40
 800cc1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	2b07      	cmp	r3, #7
 800cc20:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc22:	dc76      	bgt.n	800cd12 <_vfiprintf_r+0x1e6>
 800cc24:	3608      	adds	r6, #8
 800cc26:	9b02      	ldr	r3, [sp, #8]
 800cc28:	4443      	add	r3, r8
 800cc2a:	9302      	str	r3, [sp, #8]
 800cc2c:	782b      	ldrb	r3, [r5, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 83d0 	beq.w	800d3d4 <_vfiprintf_r+0x8a8>
 800cc34:	2300      	movs	r3, #0
 800cc36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc3a:	3501      	adds	r5, #1
 800cc3c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800cc40:	9200      	str	r2, [sp, #0]
 800cc42:	9303      	str	r3, [sp, #12]
 800cc44:	469a      	mov	sl, r3
 800cc46:	462a      	mov	r2, r5
 800cc48:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cc4c:	9201      	str	r2, [sp, #4]
 800cc4e:	f1a3 0220 	sub.w	r2, r3, #32
 800cc52:	2a5a      	cmp	r2, #90	; 0x5a
 800cc54:	f200 831c 	bhi.w	800d290 <_vfiprintf_r+0x764>
 800cc58:	e8df f012 	tbh	[pc, r2, lsl #1]
 800cc5c:	031a007e 	.word	0x031a007e
 800cc60:	0086031a 	.word	0x0086031a
 800cc64:	031a031a 	.word	0x031a031a
 800cc68:	0065031a 	.word	0x0065031a
 800cc6c:	031a031a 	.word	0x031a031a
 800cc70:	00930089 	.word	0x00930089
 800cc74:	0090031a 	.word	0x0090031a
 800cc78:	031a0095 	.word	0x031a0095
 800cc7c:	00b300b0 	.word	0x00b300b0
 800cc80:	00b300b3 	.word	0x00b300b3
 800cc84:	00b300b3 	.word	0x00b300b3
 800cc88:	00b300b3 	.word	0x00b300b3
 800cc8c:	00b300b3 	.word	0x00b300b3
 800cc90:	031a031a 	.word	0x031a031a
 800cc94:	031a031a 	.word	0x031a031a
 800cc98:	031a031a 	.word	0x031a031a
 800cc9c:	031a031a 	.word	0x031a031a
 800cca0:	00dd031a 	.word	0x00dd031a
 800cca4:	031a00eb 	.word	0x031a00eb
 800cca8:	031a031a 	.word	0x031a031a
 800ccac:	031a031a 	.word	0x031a031a
 800ccb0:	031a031a 	.word	0x031a031a
 800ccb4:	031a031a 	.word	0x031a031a
 800ccb8:	013b031a 	.word	0x013b031a
 800ccbc:	031a031a 	.word	0x031a031a
 800ccc0:	0180031a 	.word	0x0180031a
 800ccc4:	025e031a 	.word	0x025e031a
 800ccc8:	031a031a 	.word	0x031a031a
 800cccc:	031a027e 	.word	0x031a027e
 800ccd0:	031a031a 	.word	0x031a031a
 800ccd4:	031a031a 	.word	0x031a031a
 800ccd8:	031a031a 	.word	0x031a031a
 800ccdc:	031a031a 	.word	0x031a031a
 800cce0:	00dd031a 	.word	0x00dd031a
 800cce4:	031a00ed 	.word	0x031a00ed
 800cce8:	031a031a 	.word	0x031a031a
 800ccec:	00ed00c3 	.word	0x00ed00c3
 800ccf0:	031a00d7 	.word	0x031a00d7
 800ccf4:	031a00d0 	.word	0x031a00d0
 800ccf8:	013d0119 	.word	0x013d0119
 800ccfc:	00d70172 	.word	0x00d70172
 800cd00:	0180031a 	.word	0x0180031a
 800cd04:	0260007c 	.word	0x0260007c
 800cd08:	031a031a 	.word	0x031a031a
 800cd0c:	031a029a 	.word	0x031a029a
 800cd10:	007c      	.short	0x007c
 800cd12:	aa0e      	add	r2, sp, #56	; 0x38
 800cd14:	4639      	mov	r1, r7
 800cd16:	4648      	mov	r0, r9
 800cd18:	f7ff fed6 	bl	800cac8 <__sprint_r>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	f040 8338 	bne.w	800d392 <_vfiprintf_r+0x866>
 800cd22:	ae11      	add	r6, sp, #68	; 0x44
 800cd24:	e77f      	b.n	800cc26 <_vfiprintf_r+0xfa>
 800cd26:	4648      	mov	r0, r9
 800cd28:	f7fe f9ca 	bl	800b0c0 <_localeconv_r>
 800cd2c:	6843      	ldr	r3, [r0, #4]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	ee08 3a10 	vmov	s16, r3
 800cd34:	f7f3 fa9c 	bl	8000270 <strlen>
 800cd38:	9007      	str	r0, [sp, #28]
 800cd3a:	4648      	mov	r0, r9
 800cd3c:	f7fe f9c0 	bl	800b0c0 <_localeconv_r>
 800cd40:	6883      	ldr	r3, [r0, #8]
 800cd42:	9306      	str	r3, [sp, #24]
 800cd44:	9b07      	ldr	r3, [sp, #28]
 800cd46:	b12b      	cbz	r3, 800cd54 <_vfiprintf_r+0x228>
 800cd48:	9b06      	ldr	r3, [sp, #24]
 800cd4a:	b11b      	cbz	r3, 800cd54 <_vfiprintf_r+0x228>
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	b10b      	cbz	r3, 800cd54 <_vfiprintf_r+0x228>
 800cd50:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800cd54:	9d01      	ldr	r5, [sp, #4]
 800cd56:	e776      	b.n	800cc46 <_vfiprintf_r+0x11a>
 800cd58:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1f9      	bne.n	800cd54 <_vfiprintf_r+0x228>
 800cd60:	2320      	movs	r3, #32
 800cd62:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800cd66:	e7f5      	b.n	800cd54 <_vfiprintf_r+0x228>
 800cd68:	f04a 0a01 	orr.w	sl, sl, #1
 800cd6c:	e7f2      	b.n	800cd54 <_vfiprintf_r+0x228>
 800cd6e:	f854 3b04 	ldr.w	r3, [r4], #4
 800cd72:	9303      	str	r3, [sp, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	daed      	bge.n	800cd54 <_vfiprintf_r+0x228>
 800cd78:	425b      	negs	r3, r3
 800cd7a:	9303      	str	r3, [sp, #12]
 800cd7c:	f04a 0a04 	orr.w	sl, sl, #4
 800cd80:	e7e8      	b.n	800cd54 <_vfiprintf_r+0x228>
 800cd82:	232b      	movs	r3, #43	; 0x2b
 800cd84:	e7ed      	b.n	800cd62 <_vfiprintf_r+0x236>
 800cd86:	9a01      	ldr	r2, [sp, #4]
 800cd88:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd8e:	d112      	bne.n	800cdb6 <_vfiprintf_r+0x28a>
 800cd90:	f854 3b04 	ldr.w	r3, [r4], #4
 800cd94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd98:	e9cd 3200 	strd	r3, r2, [sp]
 800cd9c:	e7da      	b.n	800cd54 <_vfiprintf_r+0x228>
 800cd9e:	9b00      	ldr	r3, [sp, #0]
 800cda0:	200a      	movs	r0, #10
 800cda2:	fb00 1303 	mla	r3, r0, r3, r1
 800cda6:	9300      	str	r3, [sp, #0]
 800cda8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cdac:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cdb0:	2909      	cmp	r1, #9
 800cdb2:	d9f4      	bls.n	800cd9e <_vfiprintf_r+0x272>
 800cdb4:	e74a      	b.n	800cc4c <_vfiprintf_r+0x120>
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	9100      	str	r1, [sp, #0]
 800cdba:	e7f7      	b.n	800cdac <_vfiprintf_r+0x280>
 800cdbc:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800cdc0:	e7c8      	b.n	800cd54 <_vfiprintf_r+0x228>
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	9a01      	ldr	r2, [sp, #4]
 800cdc6:	9103      	str	r1, [sp, #12]
 800cdc8:	9903      	ldr	r1, [sp, #12]
 800cdca:	3b30      	subs	r3, #48	; 0x30
 800cdcc:	200a      	movs	r0, #10
 800cdce:	fb00 3301 	mla	r3, r0, r1, r3
 800cdd2:	9303      	str	r3, [sp, #12]
 800cdd4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cdd8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cddc:	2909      	cmp	r1, #9
 800cdde:	d9f3      	bls.n	800cdc8 <_vfiprintf_r+0x29c>
 800cde0:	e734      	b.n	800cc4c <_vfiprintf_r+0x120>
 800cde2:	9b01      	ldr	r3, [sp, #4]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	2b68      	cmp	r3, #104	; 0x68
 800cde8:	bf01      	itttt	eq
 800cdea:	9b01      	ldreq	r3, [sp, #4]
 800cdec:	3301      	addeq	r3, #1
 800cdee:	9301      	streq	r3, [sp, #4]
 800cdf0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800cdf4:	bf18      	it	ne
 800cdf6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800cdfa:	e7ab      	b.n	800cd54 <_vfiprintf_r+0x228>
 800cdfc:	9b01      	ldr	r3, [sp, #4]
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	2b6c      	cmp	r3, #108	; 0x6c
 800ce02:	d105      	bne.n	800ce10 <_vfiprintf_r+0x2e4>
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	3301      	adds	r3, #1
 800ce08:	9301      	str	r3, [sp, #4]
 800ce0a:	f04a 0a20 	orr.w	sl, sl, #32
 800ce0e:	e7a1      	b.n	800cd54 <_vfiprintf_r+0x228>
 800ce10:	f04a 0a10 	orr.w	sl, sl, #16
 800ce14:	e79e      	b.n	800cd54 <_vfiprintf_r+0x228>
 800ce16:	46a0      	mov	r8, r4
 800ce18:	f858 3b04 	ldr.w	r3, [r8], #4
 800ce1c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800ce20:	2300      	movs	r3, #0
 800ce22:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800ce26:	2201      	movs	r2, #1
 800ce28:	9200      	str	r2, [sp, #0]
 800ce2a:	461d      	mov	r5, r3
 800ce2c:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800ce30:	e0a9      	b.n	800cf86 <_vfiprintf_r+0x45a>
 800ce32:	f04a 0a10 	orr.w	sl, sl, #16
 800ce36:	f01a 0f20 	tst.w	sl, #32
 800ce3a:	d011      	beq.n	800ce60 <_vfiprintf_r+0x334>
 800ce3c:	3407      	adds	r4, #7
 800ce3e:	f024 0307 	bic.w	r3, r4, #7
 800ce42:	4698      	mov	r8, r3
 800ce44:	685d      	ldr	r5, [r3, #4]
 800ce46:	f858 4b08 	ldr.w	r4, [r8], #8
 800ce4a:	2d00      	cmp	r5, #0
 800ce4c:	da06      	bge.n	800ce5c <_vfiprintf_r+0x330>
 800ce4e:	4264      	negs	r4, r4
 800ce50:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800ce54:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ce58:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	e04a      	b.n	800cef6 <_vfiprintf_r+0x3ca>
 800ce60:	46a0      	mov	r8, r4
 800ce62:	f01a 0f10 	tst.w	sl, #16
 800ce66:	f858 5b04 	ldr.w	r5, [r8], #4
 800ce6a:	d002      	beq.n	800ce72 <_vfiprintf_r+0x346>
 800ce6c:	462c      	mov	r4, r5
 800ce6e:	17ed      	asrs	r5, r5, #31
 800ce70:	e7eb      	b.n	800ce4a <_vfiprintf_r+0x31e>
 800ce72:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ce76:	d003      	beq.n	800ce80 <_vfiprintf_r+0x354>
 800ce78:	b22c      	sxth	r4, r5
 800ce7a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ce7e:	e7e4      	b.n	800ce4a <_vfiprintf_r+0x31e>
 800ce80:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ce84:	d0f2      	beq.n	800ce6c <_vfiprintf_r+0x340>
 800ce86:	b26c      	sxtb	r4, r5
 800ce88:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ce8c:	e7dd      	b.n	800ce4a <_vfiprintf_r+0x31e>
 800ce8e:	f01a 0f20 	tst.w	sl, #32
 800ce92:	f104 0804 	add.w	r8, r4, #4
 800ce96:	d007      	beq.n	800cea8 <_vfiprintf_r+0x37c>
 800ce98:	9a02      	ldr	r2, [sp, #8]
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	9902      	ldr	r1, [sp, #8]
 800ce9e:	17d2      	asrs	r2, r2, #31
 800cea0:	e9c3 1200 	strd	r1, r2, [r3]
 800cea4:	4644      	mov	r4, r8
 800cea6:	e6a8      	b.n	800cbfa <_vfiprintf_r+0xce>
 800cea8:	f01a 0f10 	tst.w	sl, #16
 800ceac:	d003      	beq.n	800ceb6 <_vfiprintf_r+0x38a>
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	9a02      	ldr	r2, [sp, #8]
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	e7f6      	b.n	800cea4 <_vfiprintf_r+0x378>
 800ceb6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ceba:	d003      	beq.n	800cec4 <_vfiprintf_r+0x398>
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	9a02      	ldr	r2, [sp, #8]
 800cec0:	801a      	strh	r2, [r3, #0]
 800cec2:	e7ef      	b.n	800cea4 <_vfiprintf_r+0x378>
 800cec4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800cec8:	d0f1      	beq.n	800ceae <_vfiprintf_r+0x382>
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	9a02      	ldr	r2, [sp, #8]
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	e7e8      	b.n	800cea4 <_vfiprintf_r+0x378>
 800ced2:	f04a 0a10 	orr.w	sl, sl, #16
 800ced6:	f01a 0320 	ands.w	r3, sl, #32
 800ceda:	d01f      	beq.n	800cf1c <_vfiprintf_r+0x3f0>
 800cedc:	3407      	adds	r4, #7
 800cede:	f024 0307 	bic.w	r3, r4, #7
 800cee2:	4698      	mov	r8, r3
 800cee4:	685d      	ldr	r5, [r3, #4]
 800cee6:	f858 4b08 	ldr.w	r4, [r8], #8
 800ceea:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ceee:	2300      	movs	r3, #0
 800cef0:	2200      	movs	r2, #0
 800cef2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800cef6:	9a00      	ldr	r2, [sp, #0]
 800cef8:	3201      	adds	r2, #1
 800cefa:	f000 8278 	beq.w	800d3ee <_vfiprintf_r+0x8c2>
 800cefe:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800cf02:	9204      	str	r2, [sp, #16]
 800cf04:	ea54 0205 	orrs.w	r2, r4, r5
 800cf08:	f040 8277 	bne.w	800d3fa <_vfiprintf_r+0x8ce>
 800cf0c:	9a00      	ldr	r2, [sp, #0]
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	f000 81b3 	beq.w	800d27a <_vfiprintf_r+0x74e>
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	f040 8273 	bne.w	800d400 <_vfiprintf_r+0x8d4>
 800cf1a:	e151      	b.n	800d1c0 <_vfiprintf_r+0x694>
 800cf1c:	46a0      	mov	r8, r4
 800cf1e:	f01a 0510 	ands.w	r5, sl, #16
 800cf22:	f858 4b04 	ldr.w	r4, [r8], #4
 800cf26:	d001      	beq.n	800cf2c <_vfiprintf_r+0x400>
 800cf28:	461d      	mov	r5, r3
 800cf2a:	e7de      	b.n	800ceea <_vfiprintf_r+0x3be>
 800cf2c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800cf30:	d001      	beq.n	800cf36 <_vfiprintf_r+0x40a>
 800cf32:	b2a4      	uxth	r4, r4
 800cf34:	e7d9      	b.n	800ceea <_vfiprintf_r+0x3be>
 800cf36:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800cf3a:	d0d6      	beq.n	800ceea <_vfiprintf_r+0x3be>
 800cf3c:	b2e4      	uxtb	r4, r4
 800cf3e:	e7f3      	b.n	800cf28 <_vfiprintf_r+0x3fc>
 800cf40:	46a0      	mov	r8, r4
 800cf42:	f647 0330 	movw	r3, #30768	; 0x7830
 800cf46:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800cf4a:	f858 4b04 	ldr.w	r4, [r8], #4
 800cf4e:	4b9f      	ldr	r3, [pc, #636]	; (800d1cc <_vfiprintf_r+0x6a0>)
 800cf50:	9305      	str	r3, [sp, #20]
 800cf52:	2500      	movs	r5, #0
 800cf54:	f04a 0a02 	orr.w	sl, sl, #2
 800cf58:	2302      	movs	r3, #2
 800cf5a:	e7c9      	b.n	800cef0 <_vfiprintf_r+0x3c4>
 800cf5c:	9b00      	ldr	r3, [sp, #0]
 800cf5e:	46a0      	mov	r8, r4
 800cf60:	2500      	movs	r5, #0
 800cf62:	1c5c      	adds	r4, r3, #1
 800cf64:	f858 bb04 	ldr.w	fp, [r8], #4
 800cf68:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800cf6c:	f000 80cf 	beq.w	800d10e <_vfiprintf_r+0x5e2>
 800cf70:	461a      	mov	r2, r3
 800cf72:	4629      	mov	r1, r5
 800cf74:	4658      	mov	r0, fp
 800cf76:	f7f3 f92b 	bl	80001d0 <memchr>
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	f000 8192 	beq.w	800d2a4 <_vfiprintf_r+0x778>
 800cf80:	eba0 030b 	sub.w	r3, r0, fp
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	9b00      	ldr	r3, [sp, #0]
 800cf88:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800cf8c:	42ab      	cmp	r3, r5
 800cf8e:	bfb8      	it	lt
 800cf90:	462b      	movlt	r3, r5
 800cf92:	9304      	str	r3, [sp, #16]
 800cf94:	b10a      	cbz	r2, 800cf9a <_vfiprintf_r+0x46e>
 800cf96:	3301      	adds	r3, #1
 800cf98:	9304      	str	r3, [sp, #16]
 800cf9a:	f01a 0302 	ands.w	r3, sl, #2
 800cf9e:	9308      	str	r3, [sp, #32]
 800cfa0:	bf1e      	ittt	ne
 800cfa2:	9b04      	ldrne	r3, [sp, #16]
 800cfa4:	3302      	addne	r3, #2
 800cfa6:	9304      	strne	r3, [sp, #16]
 800cfa8:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800cfac:	9309      	str	r3, [sp, #36]	; 0x24
 800cfae:	d11f      	bne.n	800cff0 <_vfiprintf_r+0x4c4>
 800cfb0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cfb4:	1a9c      	subs	r4, r3, r2
 800cfb6:	2c00      	cmp	r4, #0
 800cfb8:	dd1a      	ble.n	800cff0 <_vfiprintf_r+0x4c4>
 800cfba:	4b85      	ldr	r3, [pc, #532]	; (800d1d0 <_vfiprintf_r+0x6a4>)
 800cfbc:	6033      	str	r3, [r6, #0]
 800cfbe:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800cfc2:	2c10      	cmp	r4, #16
 800cfc4:	f102 0201 	add.w	r2, r2, #1
 800cfc8:	f106 0008 	add.w	r0, r6, #8
 800cfcc:	f300 816c 	bgt.w	800d2a8 <_vfiprintf_r+0x77c>
 800cfd0:	6074      	str	r4, [r6, #4]
 800cfd2:	2a07      	cmp	r2, #7
 800cfd4:	4464      	add	r4, ip
 800cfd6:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800cfda:	f340 8178 	ble.w	800d2ce <_vfiprintf_r+0x7a2>
 800cfde:	aa0e      	add	r2, sp, #56	; 0x38
 800cfe0:	4639      	mov	r1, r7
 800cfe2:	4648      	mov	r0, r9
 800cfe4:	f7ff fd70 	bl	800cac8 <__sprint_r>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	f040 81d2 	bne.w	800d392 <_vfiprintf_r+0x866>
 800cfee:	ae11      	add	r6, sp, #68	; 0x44
 800cff0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800cff4:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800cff8:	b160      	cbz	r0, 800d014 <_vfiprintf_r+0x4e8>
 800cffa:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800cffe:	3201      	adds	r2, #1
 800d000:	6030      	str	r0, [r6, #0]
 800d002:	2001      	movs	r0, #1
 800d004:	4401      	add	r1, r0
 800d006:	2a07      	cmp	r2, #7
 800d008:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d00c:	6070      	str	r0, [r6, #4]
 800d00e:	f300 8160 	bgt.w	800d2d2 <_vfiprintf_r+0x7a6>
 800d012:	3608      	adds	r6, #8
 800d014:	9b08      	ldr	r3, [sp, #32]
 800d016:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d01a:	b15b      	cbz	r3, 800d034 <_vfiprintf_r+0x508>
 800d01c:	a80d      	add	r0, sp, #52	; 0x34
 800d01e:	3201      	adds	r2, #1
 800d020:	6030      	str	r0, [r6, #0]
 800d022:	2002      	movs	r0, #2
 800d024:	4401      	add	r1, r0
 800d026:	2a07      	cmp	r2, #7
 800d028:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d02c:	6070      	str	r0, [r6, #4]
 800d02e:	f300 8159 	bgt.w	800d2e4 <_vfiprintf_r+0x7b8>
 800d032:	3608      	adds	r6, #8
 800d034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d036:	2b80      	cmp	r3, #128	; 0x80
 800d038:	d11f      	bne.n	800d07a <_vfiprintf_r+0x54e>
 800d03a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d03e:	1a9c      	subs	r4, r3, r2
 800d040:	2c00      	cmp	r4, #0
 800d042:	dd1a      	ble.n	800d07a <_vfiprintf_r+0x54e>
 800d044:	4b63      	ldr	r3, [pc, #396]	; (800d1d4 <_vfiprintf_r+0x6a8>)
 800d046:	6033      	str	r3, [r6, #0]
 800d048:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800d04c:	2c10      	cmp	r4, #16
 800d04e:	f102 0201 	add.w	r2, r2, #1
 800d052:	f106 0008 	add.w	r0, r6, #8
 800d056:	f300 814e 	bgt.w	800d2f6 <_vfiprintf_r+0x7ca>
 800d05a:	6074      	str	r4, [r6, #4]
 800d05c:	2a07      	cmp	r2, #7
 800d05e:	4464      	add	r4, ip
 800d060:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d064:	f340 815a 	ble.w	800d31c <_vfiprintf_r+0x7f0>
 800d068:	aa0e      	add	r2, sp, #56	; 0x38
 800d06a:	4639      	mov	r1, r7
 800d06c:	4648      	mov	r0, r9
 800d06e:	f7ff fd2b 	bl	800cac8 <__sprint_r>
 800d072:	2800      	cmp	r0, #0
 800d074:	f040 818d 	bne.w	800d392 <_vfiprintf_r+0x866>
 800d078:	ae11      	add	r6, sp, #68	; 0x44
 800d07a:	9b00      	ldr	r3, [sp, #0]
 800d07c:	1aec      	subs	r4, r5, r3
 800d07e:	2c00      	cmp	r4, #0
 800d080:	dd1b      	ble.n	800d0ba <_vfiprintf_r+0x58e>
 800d082:	4d54      	ldr	r5, [pc, #336]	; (800d1d4 <_vfiprintf_r+0x6a8>)
 800d084:	2310      	movs	r3, #16
 800d086:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d08a:	2c10      	cmp	r4, #16
 800d08c:	f102 0201 	add.w	r2, r2, #1
 800d090:	f106 0008 	add.w	r0, r6, #8
 800d094:	6035      	str	r5, [r6, #0]
 800d096:	f300 8143 	bgt.w	800d320 <_vfiprintf_r+0x7f4>
 800d09a:	6074      	str	r4, [r6, #4]
 800d09c:	2a07      	cmp	r2, #7
 800d09e:	440c      	add	r4, r1
 800d0a0:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d0a4:	f340 814d 	ble.w	800d342 <_vfiprintf_r+0x816>
 800d0a8:	aa0e      	add	r2, sp, #56	; 0x38
 800d0aa:	4639      	mov	r1, r7
 800d0ac:	4648      	mov	r0, r9
 800d0ae:	f7ff fd0b 	bl	800cac8 <__sprint_r>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	f040 816d 	bne.w	800d392 <_vfiprintf_r+0x866>
 800d0b8:	ae11      	add	r6, sp, #68	; 0x44
 800d0ba:	9b00      	ldr	r3, [sp, #0]
 800d0bc:	9a00      	ldr	r2, [sp, #0]
 800d0be:	6073      	str	r3, [r6, #4]
 800d0c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0c2:	f8c6 b000 	str.w	fp, [r6]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	9310      	str	r3, [sp, #64]	; 0x40
 800d0ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	2b07      	cmp	r3, #7
 800d0d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d0d2:	f300 8138 	bgt.w	800d346 <_vfiprintf_r+0x81a>
 800d0d6:	f106 0308 	add.w	r3, r6, #8
 800d0da:	f01a 0f04 	tst.w	sl, #4
 800d0de:	f040 813a 	bne.w	800d356 <_vfiprintf_r+0x82a>
 800d0e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d0e6:	9904      	ldr	r1, [sp, #16]
 800d0e8:	428a      	cmp	r2, r1
 800d0ea:	bfac      	ite	ge
 800d0ec:	189b      	addge	r3, r3, r2
 800d0ee:	185b      	addlt	r3, r3, r1
 800d0f0:	9302      	str	r3, [sp, #8]
 800d0f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0f4:	b13b      	cbz	r3, 800d106 <_vfiprintf_r+0x5da>
 800d0f6:	aa0e      	add	r2, sp, #56	; 0x38
 800d0f8:	4639      	mov	r1, r7
 800d0fa:	4648      	mov	r0, r9
 800d0fc:	f7ff fce4 	bl	800cac8 <__sprint_r>
 800d100:	2800      	cmp	r0, #0
 800d102:	f040 8146 	bne.w	800d392 <_vfiprintf_r+0x866>
 800d106:	2300      	movs	r3, #0
 800d108:	930f      	str	r3, [sp, #60]	; 0x3c
 800d10a:	ae11      	add	r6, sp, #68	; 0x44
 800d10c:	e6ca      	b.n	800cea4 <_vfiprintf_r+0x378>
 800d10e:	4658      	mov	r0, fp
 800d110:	f7f3 f8ae 	bl	8000270 <strlen>
 800d114:	9000      	str	r0, [sp, #0]
 800d116:	e736      	b.n	800cf86 <_vfiprintf_r+0x45a>
 800d118:	f04a 0a10 	orr.w	sl, sl, #16
 800d11c:	f01a 0320 	ands.w	r3, sl, #32
 800d120:	d008      	beq.n	800d134 <_vfiprintf_r+0x608>
 800d122:	3407      	adds	r4, #7
 800d124:	f024 0307 	bic.w	r3, r4, #7
 800d128:	4698      	mov	r8, r3
 800d12a:	685d      	ldr	r5, [r3, #4]
 800d12c:	f858 4b08 	ldr.w	r4, [r8], #8
 800d130:	2301      	movs	r3, #1
 800d132:	e6dd      	b.n	800cef0 <_vfiprintf_r+0x3c4>
 800d134:	46a0      	mov	r8, r4
 800d136:	f01a 0510 	ands.w	r5, sl, #16
 800d13a:	f858 4b04 	ldr.w	r4, [r8], #4
 800d13e:	d001      	beq.n	800d144 <_vfiprintf_r+0x618>
 800d140:	461d      	mov	r5, r3
 800d142:	e7f5      	b.n	800d130 <_vfiprintf_r+0x604>
 800d144:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800d148:	d001      	beq.n	800d14e <_vfiprintf_r+0x622>
 800d14a:	b2a4      	uxth	r4, r4
 800d14c:	e7f0      	b.n	800d130 <_vfiprintf_r+0x604>
 800d14e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d152:	d0ed      	beq.n	800d130 <_vfiprintf_r+0x604>
 800d154:	b2e4      	uxtb	r4, r4
 800d156:	e7f3      	b.n	800d140 <_vfiprintf_r+0x614>
 800d158:	4a1f      	ldr	r2, [pc, #124]	; (800d1d8 <_vfiprintf_r+0x6ac>)
 800d15a:	9205      	str	r2, [sp, #20]
 800d15c:	f01a 0220 	ands.w	r2, sl, #32
 800d160:	d018      	beq.n	800d194 <_vfiprintf_r+0x668>
 800d162:	3407      	adds	r4, #7
 800d164:	f024 0207 	bic.w	r2, r4, #7
 800d168:	4690      	mov	r8, r2
 800d16a:	6855      	ldr	r5, [r2, #4]
 800d16c:	f858 4b08 	ldr.w	r4, [r8], #8
 800d170:	f01a 0f01 	tst.w	sl, #1
 800d174:	d009      	beq.n	800d18a <_vfiprintf_r+0x65e>
 800d176:	ea54 0205 	orrs.w	r2, r4, r5
 800d17a:	bf1f      	itttt	ne
 800d17c:	2230      	movne	r2, #48	; 0x30
 800d17e:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800d182:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800d186:	f04a 0a02 	orrne.w	sl, sl, #2
 800d18a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800d18e:	e6e3      	b.n	800cf58 <_vfiprintf_r+0x42c>
 800d190:	4a0e      	ldr	r2, [pc, #56]	; (800d1cc <_vfiprintf_r+0x6a0>)
 800d192:	e7e2      	b.n	800d15a <_vfiprintf_r+0x62e>
 800d194:	46a0      	mov	r8, r4
 800d196:	f01a 0510 	ands.w	r5, sl, #16
 800d19a:	f858 4b04 	ldr.w	r4, [r8], #4
 800d19e:	d001      	beq.n	800d1a4 <_vfiprintf_r+0x678>
 800d1a0:	4615      	mov	r5, r2
 800d1a2:	e7e5      	b.n	800d170 <_vfiprintf_r+0x644>
 800d1a4:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800d1a8:	d001      	beq.n	800d1ae <_vfiprintf_r+0x682>
 800d1aa:	b2a4      	uxth	r4, r4
 800d1ac:	e7e0      	b.n	800d170 <_vfiprintf_r+0x644>
 800d1ae:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d1b2:	d0dd      	beq.n	800d170 <_vfiprintf_r+0x644>
 800d1b4:	b2e4      	uxtb	r4, r4
 800d1b6:	e7f3      	b.n	800d1a0 <_vfiprintf_r+0x674>
 800d1b8:	2c0a      	cmp	r4, #10
 800d1ba:	f175 0300 	sbcs.w	r3, r5, #0
 800d1be:	d20d      	bcs.n	800d1dc <_vfiprintf_r+0x6b0>
 800d1c0:	3430      	adds	r4, #48	; 0x30
 800d1c2:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800d1c6:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800d1ca:	e135      	b.n	800d438 <_vfiprintf_r+0x90c>
 800d1cc:	0800e1ec 	.word	0x0800e1ec
 800d1d0:	0800e543 	.word	0x0800e543
 800d1d4:	0800e553 	.word	0x0800e553
 800d1d8:	0800e1fd 	.word	0x0800e1fd
 800d1dc:	ab3a      	add	r3, sp, #232	; 0xe8
 800d1de:	9308      	str	r3, [sp, #32]
 800d1e0:	9b04      	ldr	r3, [sp, #16]
 800d1e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1e6:	f04f 0a00 	mov.w	sl, #0
 800d1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ec:	220a      	movs	r2, #10
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	f7f3 fcd8 	bl	8000ba8 <__aeabi_uldivmod>
 800d1f8:	9b08      	ldr	r3, [sp, #32]
 800d1fa:	3230      	adds	r2, #48	; 0x30
 800d1fc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d200:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d206:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d20a:	f10a 0a01 	add.w	sl, sl, #1
 800d20e:	b1d3      	cbz	r3, 800d246 <_vfiprintf_r+0x71a>
 800d210:	9b06      	ldr	r3, [sp, #24]
 800d212:	781a      	ldrb	r2, [r3, #0]
 800d214:	4552      	cmp	r2, sl
 800d216:	d116      	bne.n	800d246 <_vfiprintf_r+0x71a>
 800d218:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d21c:	d013      	beq.n	800d246 <_vfiprintf_r+0x71a>
 800d21e:	2c0a      	cmp	r4, #10
 800d220:	f175 0200 	sbcs.w	r2, r5, #0
 800d224:	d30f      	bcc.n	800d246 <_vfiprintf_r+0x71a>
 800d226:	9b07      	ldr	r3, [sp, #28]
 800d228:	ebab 0b03 	sub.w	fp, fp, r3
 800d22c:	461a      	mov	r2, r3
 800d22e:	ee18 1a10 	vmov	r1, s16
 800d232:	4658      	mov	r0, fp
 800d234:	f7fd ff31 	bl	800b09a <strncpy>
 800d238:	9b06      	ldr	r3, [sp, #24]
 800d23a:	785a      	ldrb	r2, [r3, #1]
 800d23c:	b16a      	cbz	r2, 800d25a <_vfiprintf_r+0x72e>
 800d23e:	3301      	adds	r3, #1
 800d240:	9306      	str	r3, [sp, #24]
 800d242:	f04f 0a00 	mov.w	sl, #0
 800d246:	2c0a      	cmp	r4, #10
 800d248:	f175 0500 	sbcs.w	r5, r5, #0
 800d24c:	f0c0 80f4 	bcc.w	800d438 <_vfiprintf_r+0x90c>
 800d250:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800d254:	f8cd b020 	str.w	fp, [sp, #32]
 800d258:	e7c8      	b.n	800d1ec <_vfiprintf_r+0x6c0>
 800d25a:	4692      	mov	sl, r2
 800d25c:	e7f3      	b.n	800d246 <_vfiprintf_r+0x71a>
 800d25e:	f004 020f 	and.w	r2, r4, #15
 800d262:	9b05      	ldr	r3, [sp, #20]
 800d264:	0924      	lsrs	r4, r4, #4
 800d266:	5c9a      	ldrb	r2, [r3, r2]
 800d268:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800d26c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800d270:	092d      	lsrs	r5, r5, #4
 800d272:	ea54 0205 	orrs.w	r2, r4, r5
 800d276:	d1f2      	bne.n	800d25e <_vfiprintf_r+0x732>
 800d278:	e0de      	b.n	800d438 <_vfiprintf_r+0x90c>
 800d27a:	b933      	cbnz	r3, 800d28a <_vfiprintf_r+0x75e>
 800d27c:	f01a 0f01 	tst.w	sl, #1
 800d280:	d003      	beq.n	800d28a <_vfiprintf_r+0x75e>
 800d282:	2330      	movs	r3, #48	; 0x30
 800d284:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800d288:	e79d      	b.n	800d1c6 <_vfiprintf_r+0x69a>
 800d28a:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800d28e:	e0d3      	b.n	800d438 <_vfiprintf_r+0x90c>
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 809f 	beq.w	800d3d4 <_vfiprintf_r+0x8a8>
 800d296:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800d29a:	2300      	movs	r3, #0
 800d29c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800d2a0:	46a0      	mov	r8, r4
 800d2a2:	e5c0      	b.n	800ce26 <_vfiprintf_r+0x2fa>
 800d2a4:	4605      	mov	r5, r0
 800d2a6:	e66e      	b.n	800cf86 <_vfiprintf_r+0x45a>
 800d2a8:	2110      	movs	r1, #16
 800d2aa:	6071      	str	r1, [r6, #4]
 800d2ac:	2a07      	cmp	r2, #7
 800d2ae:	4461      	add	r1, ip
 800d2b0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d2b4:	dd08      	ble.n	800d2c8 <_vfiprintf_r+0x79c>
 800d2b6:	aa0e      	add	r2, sp, #56	; 0x38
 800d2b8:	4639      	mov	r1, r7
 800d2ba:	4648      	mov	r0, r9
 800d2bc:	f7ff fc04 	bl	800cac8 <__sprint_r>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	d166      	bne.n	800d392 <_vfiprintf_r+0x866>
 800d2c4:	4b60      	ldr	r3, [pc, #384]	; (800d448 <_vfiprintf_r+0x91c>)
 800d2c6:	a811      	add	r0, sp, #68	; 0x44
 800d2c8:	3c10      	subs	r4, #16
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	e676      	b.n	800cfbc <_vfiprintf_r+0x490>
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	e68e      	b.n	800cff0 <_vfiprintf_r+0x4c4>
 800d2d2:	aa0e      	add	r2, sp, #56	; 0x38
 800d2d4:	4639      	mov	r1, r7
 800d2d6:	4648      	mov	r0, r9
 800d2d8:	f7ff fbf6 	bl	800cac8 <__sprint_r>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d158      	bne.n	800d392 <_vfiprintf_r+0x866>
 800d2e0:	ae11      	add	r6, sp, #68	; 0x44
 800d2e2:	e697      	b.n	800d014 <_vfiprintf_r+0x4e8>
 800d2e4:	aa0e      	add	r2, sp, #56	; 0x38
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	4648      	mov	r0, r9
 800d2ea:	f7ff fbed 	bl	800cac8 <__sprint_r>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d14f      	bne.n	800d392 <_vfiprintf_r+0x866>
 800d2f2:	ae11      	add	r6, sp, #68	; 0x44
 800d2f4:	e69e      	b.n	800d034 <_vfiprintf_r+0x508>
 800d2f6:	2110      	movs	r1, #16
 800d2f8:	6071      	str	r1, [r6, #4]
 800d2fa:	2a07      	cmp	r2, #7
 800d2fc:	4461      	add	r1, ip
 800d2fe:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d302:	dd08      	ble.n	800d316 <_vfiprintf_r+0x7ea>
 800d304:	aa0e      	add	r2, sp, #56	; 0x38
 800d306:	4639      	mov	r1, r7
 800d308:	4648      	mov	r0, r9
 800d30a:	f7ff fbdd 	bl	800cac8 <__sprint_r>
 800d30e:	2800      	cmp	r0, #0
 800d310:	d13f      	bne.n	800d392 <_vfiprintf_r+0x866>
 800d312:	4b4e      	ldr	r3, [pc, #312]	; (800d44c <_vfiprintf_r+0x920>)
 800d314:	a811      	add	r0, sp, #68	; 0x44
 800d316:	3c10      	subs	r4, #16
 800d318:	4606      	mov	r6, r0
 800d31a:	e694      	b.n	800d046 <_vfiprintf_r+0x51a>
 800d31c:	4606      	mov	r6, r0
 800d31e:	e6ac      	b.n	800d07a <_vfiprintf_r+0x54e>
 800d320:	3110      	adds	r1, #16
 800d322:	2a07      	cmp	r2, #7
 800d324:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d328:	6073      	str	r3, [r6, #4]
 800d32a:	dd07      	ble.n	800d33c <_vfiprintf_r+0x810>
 800d32c:	aa0e      	add	r2, sp, #56	; 0x38
 800d32e:	4639      	mov	r1, r7
 800d330:	4648      	mov	r0, r9
 800d332:	f7ff fbc9 	bl	800cac8 <__sprint_r>
 800d336:	bb60      	cbnz	r0, 800d392 <_vfiprintf_r+0x866>
 800d338:	a811      	add	r0, sp, #68	; 0x44
 800d33a:	2310      	movs	r3, #16
 800d33c:	3c10      	subs	r4, #16
 800d33e:	4606      	mov	r6, r0
 800d340:	e6a1      	b.n	800d086 <_vfiprintf_r+0x55a>
 800d342:	4606      	mov	r6, r0
 800d344:	e6b9      	b.n	800d0ba <_vfiprintf_r+0x58e>
 800d346:	aa0e      	add	r2, sp, #56	; 0x38
 800d348:	4639      	mov	r1, r7
 800d34a:	4648      	mov	r0, r9
 800d34c:	f7ff fbbc 	bl	800cac8 <__sprint_r>
 800d350:	b9f8      	cbnz	r0, 800d392 <_vfiprintf_r+0x866>
 800d352:	ab11      	add	r3, sp, #68	; 0x44
 800d354:	e6c1      	b.n	800d0da <_vfiprintf_r+0x5ae>
 800d356:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800d35a:	1a54      	subs	r4, r2, r1
 800d35c:	2c00      	cmp	r4, #0
 800d35e:	f77f aec0 	ble.w	800d0e2 <_vfiprintf_r+0x5b6>
 800d362:	4d39      	ldr	r5, [pc, #228]	; (800d448 <_vfiprintf_r+0x91c>)
 800d364:	2610      	movs	r6, #16
 800d366:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d36a:	2c10      	cmp	r4, #16
 800d36c:	f102 0201 	add.w	r2, r2, #1
 800d370:	601d      	str	r5, [r3, #0]
 800d372:	dc1d      	bgt.n	800d3b0 <_vfiprintf_r+0x884>
 800d374:	605c      	str	r4, [r3, #4]
 800d376:	2a07      	cmp	r2, #7
 800d378:	440c      	add	r4, r1
 800d37a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d37e:	f77f aeb0 	ble.w	800d0e2 <_vfiprintf_r+0x5b6>
 800d382:	aa0e      	add	r2, sp, #56	; 0x38
 800d384:	4639      	mov	r1, r7
 800d386:	4648      	mov	r0, r9
 800d388:	f7ff fb9e 	bl	800cac8 <__sprint_r>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	f43f aea8 	beq.w	800d0e2 <_vfiprintf_r+0x5b6>
 800d392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d394:	07d9      	lsls	r1, r3, #31
 800d396:	d405      	bmi.n	800d3a4 <_vfiprintf_r+0x878>
 800d398:	89bb      	ldrh	r3, [r7, #12]
 800d39a:	059a      	lsls	r2, r3, #22
 800d39c:	d402      	bmi.n	800d3a4 <_vfiprintf_r+0x878>
 800d39e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d3a0:	f7fc f809 	bl	80093b6 <__retarget_lock_release_recursive>
 800d3a4:	89bb      	ldrh	r3, [r7, #12]
 800d3a6:	065b      	lsls	r3, r3, #25
 800d3a8:	f57f abf3 	bpl.w	800cb92 <_vfiprintf_r+0x66>
 800d3ac:	f7ff bbee 	b.w	800cb8c <_vfiprintf_r+0x60>
 800d3b0:	3110      	adds	r1, #16
 800d3b2:	2a07      	cmp	r2, #7
 800d3b4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d3b8:	605e      	str	r6, [r3, #4]
 800d3ba:	dc02      	bgt.n	800d3c2 <_vfiprintf_r+0x896>
 800d3bc:	3308      	adds	r3, #8
 800d3be:	3c10      	subs	r4, #16
 800d3c0:	e7d1      	b.n	800d366 <_vfiprintf_r+0x83a>
 800d3c2:	aa0e      	add	r2, sp, #56	; 0x38
 800d3c4:	4639      	mov	r1, r7
 800d3c6:	4648      	mov	r0, r9
 800d3c8:	f7ff fb7e 	bl	800cac8 <__sprint_r>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d1e0      	bne.n	800d392 <_vfiprintf_r+0x866>
 800d3d0:	ab11      	add	r3, sp, #68	; 0x44
 800d3d2:	e7f4      	b.n	800d3be <_vfiprintf_r+0x892>
 800d3d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3d6:	b913      	cbnz	r3, 800d3de <_vfiprintf_r+0x8b2>
 800d3d8:	2300      	movs	r3, #0
 800d3da:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3dc:	e7d9      	b.n	800d392 <_vfiprintf_r+0x866>
 800d3de:	aa0e      	add	r2, sp, #56	; 0x38
 800d3e0:	4639      	mov	r1, r7
 800d3e2:	4648      	mov	r0, r9
 800d3e4:	f7ff fb70 	bl	800cac8 <__sprint_r>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d0f5      	beq.n	800d3d8 <_vfiprintf_r+0x8ac>
 800d3ec:	e7d1      	b.n	800d392 <_vfiprintf_r+0x866>
 800d3ee:	ea54 0205 	orrs.w	r2, r4, r5
 800d3f2:	f8cd a010 	str.w	sl, [sp, #16]
 800d3f6:	f43f ad8d 	beq.w	800cf14 <_vfiprintf_r+0x3e8>
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	f43f aedc 	beq.w	800d1b8 <_vfiprintf_r+0x68c>
 800d400:	2b02      	cmp	r3, #2
 800d402:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800d406:	f43f af2a 	beq.w	800d25e <_vfiprintf_r+0x732>
 800d40a:	f004 0207 	and.w	r2, r4, #7
 800d40e:	08e4      	lsrs	r4, r4, #3
 800d410:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800d414:	08ed      	lsrs	r5, r5, #3
 800d416:	3230      	adds	r2, #48	; 0x30
 800d418:	ea54 0005 	orrs.w	r0, r4, r5
 800d41c:	4659      	mov	r1, fp
 800d41e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800d422:	d1f2      	bne.n	800d40a <_vfiprintf_r+0x8de>
 800d424:	9b04      	ldr	r3, [sp, #16]
 800d426:	07d8      	lsls	r0, r3, #31
 800d428:	d506      	bpl.n	800d438 <_vfiprintf_r+0x90c>
 800d42a:	2a30      	cmp	r2, #48	; 0x30
 800d42c:	d004      	beq.n	800d438 <_vfiprintf_r+0x90c>
 800d42e:	2230      	movs	r2, #48	; 0x30
 800d430:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800d434:	f1a1 0b02 	sub.w	fp, r1, #2
 800d438:	ab3a      	add	r3, sp, #232	; 0xe8
 800d43a:	eba3 030b 	sub.w	r3, r3, fp
 800d43e:	9d00      	ldr	r5, [sp, #0]
 800d440:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	e59e      	b.n	800cf86 <_vfiprintf_r+0x45a>
 800d448:	0800e543 	.word	0x0800e543
 800d44c:	0800e553 	.word	0x0800e553

0800d450 <__sbprintf>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	460c      	mov	r4, r1
 800d454:	8989      	ldrh	r1, [r1, #12]
 800d456:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800d45a:	f021 0102 	bic.w	r1, r1, #2
 800d45e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d462:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d464:	911b      	str	r1, [sp, #108]	; 0x6c
 800d466:	89e1      	ldrh	r1, [r4, #14]
 800d468:	f8ad 1016 	strh.w	r1, [sp, #22]
 800d46c:	69e1      	ldr	r1, [r4, #28]
 800d46e:	9109      	str	r1, [sp, #36]	; 0x24
 800d470:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d472:	910b      	str	r1, [sp, #44]	; 0x2c
 800d474:	a91c      	add	r1, sp, #112	; 0x70
 800d476:	9102      	str	r1, [sp, #8]
 800d478:	9106      	str	r1, [sp, #24]
 800d47a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d47e:	4606      	mov	r6, r0
 800d480:	9104      	str	r1, [sp, #16]
 800d482:	9107      	str	r1, [sp, #28]
 800d484:	a818      	add	r0, sp, #96	; 0x60
 800d486:	2100      	movs	r1, #0
 800d488:	e9cd 3200 	strd	r3, r2, [sp]
 800d48c:	9108      	str	r1, [sp, #32]
 800d48e:	f7fb ff8f 	bl	80093b0 <__retarget_lock_init_recursive>
 800d492:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d496:	a902      	add	r1, sp, #8
 800d498:	4630      	mov	r0, r6
 800d49a:	f7ff fb47 	bl	800cb2c <_vfiprintf_r>
 800d49e:	1e05      	subs	r5, r0, #0
 800d4a0:	db07      	blt.n	800d4b2 <__sbprintf+0x62>
 800d4a2:	a902      	add	r1, sp, #8
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	f7fd fdd3 	bl	800b050 <_fflush_r>
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	bf18      	it	ne
 800d4ae:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800d4b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d4b6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d4b8:	065b      	lsls	r3, r3, #25
 800d4ba:	bf42      	ittt	mi
 800d4bc:	89a3      	ldrhmi	r3, [r4, #12]
 800d4be:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800d4c2:	81a3      	strhmi	r3, [r4, #12]
 800d4c4:	f7fb ff75 	bl	80093b2 <__retarget_lock_close_recursive>
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}

0800d4d0 <__sfvwrite_r>:
 800d4d0:	6893      	ldr	r3, [r2, #8]
 800d4d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	460c      	mov	r4, r1
 800d4da:	4691      	mov	r9, r2
 800d4dc:	b91b      	cbnz	r3, 800d4e6 <__sfvwrite_r+0x16>
 800d4de:	2000      	movs	r0, #0
 800d4e0:	b003      	add	sp, #12
 800d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e6:	898b      	ldrh	r3, [r1, #12]
 800d4e8:	0718      	lsls	r0, r3, #28
 800d4ea:	d54f      	bpl.n	800d58c <__sfvwrite_r+0xbc>
 800d4ec:	690b      	ldr	r3, [r1, #16]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d04c      	beq.n	800d58c <__sfvwrite_r+0xbc>
 800d4f2:	89a3      	ldrh	r3, [r4, #12]
 800d4f4:	f8d9 8000 	ldr.w	r8, [r9]
 800d4f8:	f013 0702 	ands.w	r7, r3, #2
 800d4fc:	d16b      	bne.n	800d5d6 <__sfvwrite_r+0x106>
 800d4fe:	f013 0301 	ands.w	r3, r3, #1
 800d502:	f000 809b 	beq.w	800d63c <__sfvwrite_r+0x16c>
 800d506:	4638      	mov	r0, r7
 800d508:	46ba      	mov	sl, r7
 800d50a:	46bb      	mov	fp, r7
 800d50c:	f1bb 0f00 	cmp.w	fp, #0
 800d510:	f000 8102 	beq.w	800d718 <__sfvwrite_r+0x248>
 800d514:	b950      	cbnz	r0, 800d52c <__sfvwrite_r+0x5c>
 800d516:	465a      	mov	r2, fp
 800d518:	210a      	movs	r1, #10
 800d51a:	4650      	mov	r0, sl
 800d51c:	f7f2 fe58 	bl	80001d0 <memchr>
 800d520:	2800      	cmp	r0, #0
 800d522:	f000 80ff 	beq.w	800d724 <__sfvwrite_r+0x254>
 800d526:	3001      	adds	r0, #1
 800d528:	eba0 070a 	sub.w	r7, r0, sl
 800d52c:	6820      	ldr	r0, [r4, #0]
 800d52e:	6921      	ldr	r1, [r4, #16]
 800d530:	68a5      	ldr	r5, [r4, #8]
 800d532:	6963      	ldr	r3, [r4, #20]
 800d534:	455f      	cmp	r7, fp
 800d536:	463a      	mov	r2, r7
 800d538:	bf28      	it	cs
 800d53a:	465a      	movcs	r2, fp
 800d53c:	4288      	cmp	r0, r1
 800d53e:	f240 80f4 	bls.w	800d72a <__sfvwrite_r+0x25a>
 800d542:	441d      	add	r5, r3
 800d544:	42aa      	cmp	r2, r5
 800d546:	f340 80f0 	ble.w	800d72a <__sfvwrite_r+0x25a>
 800d54a:	4651      	mov	r1, sl
 800d54c:	462a      	mov	r2, r5
 800d54e:	f7ff f86c 	bl	800c62a <memmove>
 800d552:	6823      	ldr	r3, [r4, #0]
 800d554:	442b      	add	r3, r5
 800d556:	6023      	str	r3, [r4, #0]
 800d558:	4621      	mov	r1, r4
 800d55a:	4630      	mov	r0, r6
 800d55c:	f7fd fd78 	bl	800b050 <_fflush_r>
 800d560:	2800      	cmp	r0, #0
 800d562:	d166      	bne.n	800d632 <__sfvwrite_r+0x162>
 800d564:	1b7f      	subs	r7, r7, r5
 800d566:	f040 80f8 	bne.w	800d75a <__sfvwrite_r+0x28a>
 800d56a:	4621      	mov	r1, r4
 800d56c:	4630      	mov	r0, r6
 800d56e:	f7fd fd6f 	bl	800b050 <_fflush_r>
 800d572:	2800      	cmp	r0, #0
 800d574:	d15d      	bne.n	800d632 <__sfvwrite_r+0x162>
 800d576:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d57a:	1b5b      	subs	r3, r3, r5
 800d57c:	44aa      	add	sl, r5
 800d57e:	ebab 0b05 	sub.w	fp, fp, r5
 800d582:	f8c9 3008 	str.w	r3, [r9, #8]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1c0      	bne.n	800d50c <__sfvwrite_r+0x3c>
 800d58a:	e7a8      	b.n	800d4de <__sfvwrite_r+0xe>
 800d58c:	4621      	mov	r1, r4
 800d58e:	4630      	mov	r0, r6
 800d590:	f000 f8e8 	bl	800d764 <__swsetup_r>
 800d594:	2800      	cmp	r0, #0
 800d596:	d0ac      	beq.n	800d4f2 <__sfvwrite_r+0x22>
 800d598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d59c:	e7a0      	b.n	800d4e0 <__sfvwrite_r+0x10>
 800d59e:	e9d8 a500 	ldrd	sl, r5, [r8]
 800d5a2:	f108 0808 	add.w	r8, r8, #8
 800d5a6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800d5aa:	69e1      	ldr	r1, [r4, #28]
 800d5ac:	2d00      	cmp	r5, #0
 800d5ae:	d0f6      	beq.n	800d59e <__sfvwrite_r+0xce>
 800d5b0:	42bd      	cmp	r5, r7
 800d5b2:	462b      	mov	r3, r5
 800d5b4:	4652      	mov	r2, sl
 800d5b6:	bf28      	it	cs
 800d5b8:	463b      	movcs	r3, r7
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	47d8      	blx	fp
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	dd37      	ble.n	800d632 <__sfvwrite_r+0x162>
 800d5c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d5c6:	1a1b      	subs	r3, r3, r0
 800d5c8:	4482      	add	sl, r0
 800d5ca:	1a2d      	subs	r5, r5, r0
 800d5cc:	f8c9 3008 	str.w	r3, [r9, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1e8      	bne.n	800d5a6 <__sfvwrite_r+0xd6>
 800d5d4:	e783      	b.n	800d4de <__sfvwrite_r+0xe>
 800d5d6:	f04f 0a00 	mov.w	sl, #0
 800d5da:	4f61      	ldr	r7, [pc, #388]	; (800d760 <__sfvwrite_r+0x290>)
 800d5dc:	4655      	mov	r5, sl
 800d5de:	e7e2      	b.n	800d5a6 <__sfvwrite_r+0xd6>
 800d5e0:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800d5e4:	f108 0808 	add.w	r8, r8, #8
 800d5e8:	6820      	ldr	r0, [r4, #0]
 800d5ea:	68a2      	ldr	r2, [r4, #8]
 800d5ec:	f1ba 0f00 	cmp.w	sl, #0
 800d5f0:	d0f6      	beq.n	800d5e0 <__sfvwrite_r+0x110>
 800d5f2:	89a3      	ldrh	r3, [r4, #12]
 800d5f4:	0599      	lsls	r1, r3, #22
 800d5f6:	d563      	bpl.n	800d6c0 <__sfvwrite_r+0x1f0>
 800d5f8:	4552      	cmp	r2, sl
 800d5fa:	d836      	bhi.n	800d66a <__sfvwrite_r+0x19a>
 800d5fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800d600:	d033      	beq.n	800d66a <__sfvwrite_r+0x19a>
 800d602:	6921      	ldr	r1, [r4, #16]
 800d604:	6965      	ldr	r5, [r4, #20]
 800d606:	eba0 0b01 	sub.w	fp, r0, r1
 800d60a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d60e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d612:	f10b 0201 	add.w	r2, fp, #1
 800d616:	106d      	asrs	r5, r5, #1
 800d618:	4452      	add	r2, sl
 800d61a:	4295      	cmp	r5, r2
 800d61c:	bf38      	it	cc
 800d61e:	4615      	movcc	r5, r2
 800d620:	055b      	lsls	r3, r3, #21
 800d622:	d53d      	bpl.n	800d6a0 <__sfvwrite_r+0x1d0>
 800d624:	4629      	mov	r1, r5
 800d626:	4630      	mov	r0, r6
 800d628:	f7fb fff8 	bl	800961c <_malloc_r>
 800d62c:	b948      	cbnz	r0, 800d642 <__sfvwrite_r+0x172>
 800d62e:	230c      	movs	r3, #12
 800d630:	6033      	str	r3, [r6, #0]
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d638:	81a3      	strh	r3, [r4, #12]
 800d63a:	e7ad      	b.n	800d598 <__sfvwrite_r+0xc8>
 800d63c:	461f      	mov	r7, r3
 800d63e:	469a      	mov	sl, r3
 800d640:	e7d2      	b.n	800d5e8 <__sfvwrite_r+0x118>
 800d642:	465a      	mov	r2, fp
 800d644:	6921      	ldr	r1, [r4, #16]
 800d646:	9001      	str	r0, [sp, #4]
 800d648:	f7fb feb6 	bl	80093b8 <memcpy>
 800d64c:	89a2      	ldrh	r2, [r4, #12]
 800d64e:	9b01      	ldr	r3, [sp, #4]
 800d650:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d654:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d658:	81a2      	strh	r2, [r4, #12]
 800d65a:	6123      	str	r3, [r4, #16]
 800d65c:	6165      	str	r5, [r4, #20]
 800d65e:	445b      	add	r3, fp
 800d660:	eba5 050b 	sub.w	r5, r5, fp
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	4652      	mov	r2, sl
 800d668:	60a5      	str	r5, [r4, #8]
 800d66a:	4552      	cmp	r2, sl
 800d66c:	bf28      	it	cs
 800d66e:	4652      	movcs	r2, sl
 800d670:	6820      	ldr	r0, [r4, #0]
 800d672:	9201      	str	r2, [sp, #4]
 800d674:	4639      	mov	r1, r7
 800d676:	f7fe ffd8 	bl	800c62a <memmove>
 800d67a:	68a3      	ldr	r3, [r4, #8]
 800d67c:	9a01      	ldr	r2, [sp, #4]
 800d67e:	1a9b      	subs	r3, r3, r2
 800d680:	60a3      	str	r3, [r4, #8]
 800d682:	6823      	ldr	r3, [r4, #0]
 800d684:	4413      	add	r3, r2
 800d686:	4655      	mov	r5, sl
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d68e:	1b5b      	subs	r3, r3, r5
 800d690:	442f      	add	r7, r5
 800d692:	ebaa 0a05 	sub.w	sl, sl, r5
 800d696:	f8c9 3008 	str.w	r3, [r9, #8]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1a4      	bne.n	800d5e8 <__sfvwrite_r+0x118>
 800d69e:	e71e      	b.n	800d4de <__sfvwrite_r+0xe>
 800d6a0:	462a      	mov	r2, r5
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	f7ff f848 	bl	800c738 <_realloc_r>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d1d5      	bne.n	800d65a <__sfvwrite_r+0x18a>
 800d6ae:	6921      	ldr	r1, [r4, #16]
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	f7fb fef3 	bl	800949c <_free_r>
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6bc:	81a3      	strh	r3, [r4, #12]
 800d6be:	e7b6      	b.n	800d62e <__sfvwrite_r+0x15e>
 800d6c0:	6923      	ldr	r3, [r4, #16]
 800d6c2:	4283      	cmp	r3, r0
 800d6c4:	d302      	bcc.n	800d6cc <__sfvwrite_r+0x1fc>
 800d6c6:	6961      	ldr	r1, [r4, #20]
 800d6c8:	4551      	cmp	r1, sl
 800d6ca:	d915      	bls.n	800d6f8 <__sfvwrite_r+0x228>
 800d6cc:	4552      	cmp	r2, sl
 800d6ce:	bf28      	it	cs
 800d6d0:	4652      	movcs	r2, sl
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	4615      	mov	r5, r2
 800d6d6:	f7fe ffa8 	bl	800c62a <memmove>
 800d6da:	68a3      	ldr	r3, [r4, #8]
 800d6dc:	6822      	ldr	r2, [r4, #0]
 800d6de:	1b5b      	subs	r3, r3, r5
 800d6e0:	442a      	add	r2, r5
 800d6e2:	60a3      	str	r3, [r4, #8]
 800d6e4:	6022      	str	r2, [r4, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1cf      	bne.n	800d68a <__sfvwrite_r+0x1ba>
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7fd fcaf 	bl	800b050 <_fflush_r>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d0c9      	beq.n	800d68a <__sfvwrite_r+0x1ba>
 800d6f6:	e79c      	b.n	800d632 <__sfvwrite_r+0x162>
 800d6f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d6fc:	459a      	cmp	sl, r3
 800d6fe:	bf38      	it	cc
 800d700:	4653      	movcc	r3, sl
 800d702:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d704:	fb93 f3f1 	sdiv	r3, r3, r1
 800d708:	463a      	mov	r2, r7
 800d70a:	434b      	muls	r3, r1
 800d70c:	4630      	mov	r0, r6
 800d70e:	69e1      	ldr	r1, [r4, #28]
 800d710:	47a8      	blx	r5
 800d712:	1e05      	subs	r5, r0, #0
 800d714:	dcb9      	bgt.n	800d68a <__sfvwrite_r+0x1ba>
 800d716:	e78c      	b.n	800d632 <__sfvwrite_r+0x162>
 800d718:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800d71c:	2000      	movs	r0, #0
 800d71e:	f108 0808 	add.w	r8, r8, #8
 800d722:	e6f3      	b.n	800d50c <__sfvwrite_r+0x3c>
 800d724:	f10b 0701 	add.w	r7, fp, #1
 800d728:	e700      	b.n	800d52c <__sfvwrite_r+0x5c>
 800d72a:	4293      	cmp	r3, r2
 800d72c:	dc08      	bgt.n	800d740 <__sfvwrite_r+0x270>
 800d72e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d730:	69e1      	ldr	r1, [r4, #28]
 800d732:	4652      	mov	r2, sl
 800d734:	4630      	mov	r0, r6
 800d736:	47a8      	blx	r5
 800d738:	1e05      	subs	r5, r0, #0
 800d73a:	f73f af13 	bgt.w	800d564 <__sfvwrite_r+0x94>
 800d73e:	e778      	b.n	800d632 <__sfvwrite_r+0x162>
 800d740:	4651      	mov	r1, sl
 800d742:	9201      	str	r2, [sp, #4]
 800d744:	f7fe ff71 	bl	800c62a <memmove>
 800d748:	9a01      	ldr	r2, [sp, #4]
 800d74a:	68a3      	ldr	r3, [r4, #8]
 800d74c:	1a9b      	subs	r3, r3, r2
 800d74e:	60a3      	str	r3, [r4, #8]
 800d750:	6823      	ldr	r3, [r4, #0]
 800d752:	4413      	add	r3, r2
 800d754:	6023      	str	r3, [r4, #0]
 800d756:	4615      	mov	r5, r2
 800d758:	e704      	b.n	800d564 <__sfvwrite_r+0x94>
 800d75a:	2001      	movs	r0, #1
 800d75c:	e70b      	b.n	800d576 <__sfvwrite_r+0xa6>
 800d75e:	bf00      	nop
 800d760:	7ffffc00 	.word	0x7ffffc00

0800d764 <__swsetup_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4b2a      	ldr	r3, [pc, #168]	; (800d810 <__swsetup_r+0xac>)
 800d768:	4605      	mov	r5, r0
 800d76a:	6818      	ldr	r0, [r3, #0]
 800d76c:	460c      	mov	r4, r1
 800d76e:	b118      	cbz	r0, 800d778 <__swsetup_r+0x14>
 800d770:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d772:	b90b      	cbnz	r3, 800d778 <__swsetup_r+0x14>
 800d774:	f7fb fcdc 	bl	8009130 <__sinit>
 800d778:	89a3      	ldrh	r3, [r4, #12]
 800d77a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d77e:	0718      	lsls	r0, r3, #28
 800d780:	d422      	bmi.n	800d7c8 <__swsetup_r+0x64>
 800d782:	06d9      	lsls	r1, r3, #27
 800d784:	d407      	bmi.n	800d796 <__swsetup_r+0x32>
 800d786:	2309      	movs	r3, #9
 800d788:	602b      	str	r3, [r5, #0]
 800d78a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d78e:	81a3      	strh	r3, [r4, #12]
 800d790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d794:	e034      	b.n	800d800 <__swsetup_r+0x9c>
 800d796:	0758      	lsls	r0, r3, #29
 800d798:	d512      	bpl.n	800d7c0 <__swsetup_r+0x5c>
 800d79a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d79c:	b141      	cbz	r1, 800d7b0 <__swsetup_r+0x4c>
 800d79e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d7a2:	4299      	cmp	r1, r3
 800d7a4:	d002      	beq.n	800d7ac <__swsetup_r+0x48>
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f7fb fe78 	bl	800949c <_free_r>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	6323      	str	r3, [r4, #48]	; 0x30
 800d7b0:	89a3      	ldrh	r3, [r4, #12]
 800d7b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7b6:	81a3      	strh	r3, [r4, #12]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	6063      	str	r3, [r4, #4]
 800d7bc:	6923      	ldr	r3, [r4, #16]
 800d7be:	6023      	str	r3, [r4, #0]
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	f043 0308 	orr.w	r3, r3, #8
 800d7c6:	81a3      	strh	r3, [r4, #12]
 800d7c8:	6923      	ldr	r3, [r4, #16]
 800d7ca:	b94b      	cbnz	r3, 800d7e0 <__swsetup_r+0x7c>
 800d7cc:	89a3      	ldrh	r3, [r4, #12]
 800d7ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7d6:	d003      	beq.n	800d7e0 <__swsetup_r+0x7c>
 800d7d8:	4621      	mov	r1, r4
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f000 f8ca 	bl	800d974 <__smakebuf_r>
 800d7e0:	89a0      	ldrh	r0, [r4, #12]
 800d7e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7e6:	f010 0301 	ands.w	r3, r0, #1
 800d7ea:	d00a      	beq.n	800d802 <__swsetup_r+0x9e>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	60a3      	str	r3, [r4, #8]
 800d7f0:	6963      	ldr	r3, [r4, #20]
 800d7f2:	425b      	negs	r3, r3
 800d7f4:	61a3      	str	r3, [r4, #24]
 800d7f6:	6923      	ldr	r3, [r4, #16]
 800d7f8:	b943      	cbnz	r3, 800d80c <__swsetup_r+0xa8>
 800d7fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7fe:	d1c4      	bne.n	800d78a <__swsetup_r+0x26>
 800d800:	bd38      	pop	{r3, r4, r5, pc}
 800d802:	0781      	lsls	r1, r0, #30
 800d804:	bf58      	it	pl
 800d806:	6963      	ldrpl	r3, [r4, #20]
 800d808:	60a3      	str	r3, [r4, #8]
 800d80a:	e7f4      	b.n	800d7f6 <__swsetup_r+0x92>
 800d80c:	2000      	movs	r0, #0
 800d80e:	e7f7      	b.n	800d800 <__swsetup_r+0x9c>
 800d810:	20000160 	.word	0x20000160

0800d814 <__fputwc>:
 800d814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d818:	4680      	mov	r8, r0
 800d81a:	460e      	mov	r6, r1
 800d81c:	4615      	mov	r5, r2
 800d81e:	f7fe ff1f 	bl	800c660 <__locale_mb_cur_max>
 800d822:	2801      	cmp	r0, #1
 800d824:	d11c      	bne.n	800d860 <__fputwc+0x4c>
 800d826:	1e73      	subs	r3, r6, #1
 800d828:	2bfe      	cmp	r3, #254	; 0xfe
 800d82a:	d819      	bhi.n	800d860 <__fputwc+0x4c>
 800d82c:	f88d 6004 	strb.w	r6, [sp, #4]
 800d830:	4604      	mov	r4, r0
 800d832:	2700      	movs	r7, #0
 800d834:	f10d 0904 	add.w	r9, sp, #4
 800d838:	42a7      	cmp	r7, r4
 800d83a:	d020      	beq.n	800d87e <__fputwc+0x6a>
 800d83c:	68ab      	ldr	r3, [r5, #8]
 800d83e:	f817 1009 	ldrb.w	r1, [r7, r9]
 800d842:	3b01      	subs	r3, #1
 800d844:	2b00      	cmp	r3, #0
 800d846:	60ab      	str	r3, [r5, #8]
 800d848:	da04      	bge.n	800d854 <__fputwc+0x40>
 800d84a:	69aa      	ldr	r2, [r5, #24]
 800d84c:	4293      	cmp	r3, r2
 800d84e:	db1a      	blt.n	800d886 <__fputwc+0x72>
 800d850:	290a      	cmp	r1, #10
 800d852:	d018      	beq.n	800d886 <__fputwc+0x72>
 800d854:	682b      	ldr	r3, [r5, #0]
 800d856:	1c5a      	adds	r2, r3, #1
 800d858:	602a      	str	r2, [r5, #0]
 800d85a:	7019      	strb	r1, [r3, #0]
 800d85c:	3701      	adds	r7, #1
 800d85e:	e7eb      	b.n	800d838 <__fputwc+0x24>
 800d860:	a901      	add	r1, sp, #4
 800d862:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800d866:	4632      	mov	r2, r6
 800d868:	4640      	mov	r0, r8
 800d86a:	f000 f845 	bl	800d8f8 <_wcrtomb_r>
 800d86e:	1c41      	adds	r1, r0, #1
 800d870:	4604      	mov	r4, r0
 800d872:	d1de      	bne.n	800d832 <__fputwc+0x1e>
 800d874:	89ab      	ldrh	r3, [r5, #12]
 800d876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d87a:	81ab      	strh	r3, [r5, #12]
 800d87c:	4606      	mov	r6, r0
 800d87e:	4630      	mov	r0, r6
 800d880:	b003      	add	sp, #12
 800d882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d886:	462a      	mov	r2, r5
 800d888:	4640      	mov	r0, r8
 800d88a:	f000 f8af 	bl	800d9ec <__swbuf_r>
 800d88e:	1c42      	adds	r2, r0, #1
 800d890:	d1e4      	bne.n	800d85c <__fputwc+0x48>
 800d892:	4606      	mov	r6, r0
 800d894:	e7f3      	b.n	800d87e <__fputwc+0x6a>

0800d896 <_fputwc_r>:
 800d896:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800d898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d89a:	4614      	mov	r4, r2
 800d89c:	07da      	lsls	r2, r3, #31
 800d89e:	4605      	mov	r5, r0
 800d8a0:	d407      	bmi.n	800d8b2 <_fputwc_r+0x1c>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	059b      	lsls	r3, r3, #22
 800d8a6:	d404      	bmi.n	800d8b2 <_fputwc_r+0x1c>
 800d8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8aa:	9101      	str	r1, [sp, #4]
 800d8ac:	f7fb fd82 	bl	80093b4 <__retarget_lock_acquire_recursive>
 800d8b0:	9901      	ldr	r1, [sp, #4]
 800d8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b6:	0498      	lsls	r0, r3, #18
 800d8b8:	d406      	bmi.n	800d8c8 <_fputwc_r+0x32>
 800d8ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d8be:	81a3      	strh	r3, [r4, #12]
 800d8c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d8c6:	6663      	str	r3, [r4, #100]	; 0x64
 800d8c8:	4622      	mov	r2, r4
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	f7ff ffa2 	bl	800d814 <__fputwc>
 800d8d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8d2:	07da      	lsls	r2, r3, #31
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	d405      	bmi.n	800d8e4 <_fputwc_r+0x4e>
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	059b      	lsls	r3, r3, #22
 800d8dc:	d402      	bmi.n	800d8e4 <_fputwc_r+0x4e>
 800d8de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8e0:	f7fb fd69 	bl	80093b6 <__retarget_lock_release_recursive>
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	b003      	add	sp, #12
 800d8e8:	bd30      	pop	{r4, r5, pc}

0800d8ea <abort>:
 800d8ea:	b508      	push	{r3, lr}
 800d8ec:	2006      	movs	r0, #6
 800d8ee:	f000 f8ef 	bl	800dad0 <raise>
 800d8f2:	2001      	movs	r0, #1
 800d8f4:	f7f4 fd03 	bl	80022fe <_exit>

0800d8f8 <_wcrtomb_r>:
 800d8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8fa:	4c09      	ldr	r4, [pc, #36]	; (800d920 <_wcrtomb_r+0x28>)
 800d8fc:	b085      	sub	sp, #20
 800d8fe:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800d902:	4605      	mov	r5, r0
 800d904:	461e      	mov	r6, r3
 800d906:	b909      	cbnz	r1, 800d90c <_wcrtomb_r+0x14>
 800d908:	460a      	mov	r2, r1
 800d90a:	a901      	add	r1, sp, #4
 800d90c:	47b8      	blx	r7
 800d90e:	1c43      	adds	r3, r0, #1
 800d910:	bf01      	itttt	eq
 800d912:	2300      	moveq	r3, #0
 800d914:	6033      	streq	r3, [r6, #0]
 800d916:	238a      	moveq	r3, #138	; 0x8a
 800d918:	602b      	streq	r3, [r5, #0]
 800d91a:	b005      	add	sp, #20
 800d91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d91e:	bf00      	nop
 800d920:	20000578 	.word	0x20000578

0800d924 <__swhatbuf_r>:
 800d924:	b570      	push	{r4, r5, r6, lr}
 800d926:	460c      	mov	r4, r1
 800d928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d92c:	2900      	cmp	r1, #0
 800d92e:	b096      	sub	sp, #88	; 0x58
 800d930:	4615      	mov	r5, r2
 800d932:	461e      	mov	r6, r3
 800d934:	da07      	bge.n	800d946 <__swhatbuf_r+0x22>
 800d936:	89a1      	ldrh	r1, [r4, #12]
 800d938:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800d93c:	d017      	beq.n	800d96e <__swhatbuf_r+0x4a>
 800d93e:	2100      	movs	r1, #0
 800d940:	2340      	movs	r3, #64	; 0x40
 800d942:	4608      	mov	r0, r1
 800d944:	e00f      	b.n	800d966 <__swhatbuf_r+0x42>
 800d946:	466a      	mov	r2, sp
 800d948:	f000 f8ca 	bl	800dae0 <_fstat_r>
 800d94c:	2800      	cmp	r0, #0
 800d94e:	dbf2      	blt.n	800d936 <__swhatbuf_r+0x12>
 800d950:	9901      	ldr	r1, [sp, #4]
 800d952:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d956:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d95a:	4259      	negs	r1, r3
 800d95c:	4159      	adcs	r1, r3
 800d95e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d966:	6031      	str	r1, [r6, #0]
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	b016      	add	sp, #88	; 0x58
 800d96c:	bd70      	pop	{r4, r5, r6, pc}
 800d96e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d972:	e7e6      	b.n	800d942 <__swhatbuf_r+0x1e>

0800d974 <__smakebuf_r>:
 800d974:	898b      	ldrh	r3, [r1, #12]
 800d976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d978:	079d      	lsls	r5, r3, #30
 800d97a:	4606      	mov	r6, r0
 800d97c:	460c      	mov	r4, r1
 800d97e:	d507      	bpl.n	800d990 <__smakebuf_r+0x1c>
 800d980:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	6123      	str	r3, [r4, #16]
 800d988:	2301      	movs	r3, #1
 800d98a:	6163      	str	r3, [r4, #20]
 800d98c:	b002      	add	sp, #8
 800d98e:	bd70      	pop	{r4, r5, r6, pc}
 800d990:	ab01      	add	r3, sp, #4
 800d992:	466a      	mov	r2, sp
 800d994:	f7ff ffc6 	bl	800d924 <__swhatbuf_r>
 800d998:	9900      	ldr	r1, [sp, #0]
 800d99a:	4605      	mov	r5, r0
 800d99c:	4630      	mov	r0, r6
 800d99e:	f7fb fe3d 	bl	800961c <_malloc_r>
 800d9a2:	b948      	cbnz	r0, 800d9b8 <__smakebuf_r+0x44>
 800d9a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9a8:	059a      	lsls	r2, r3, #22
 800d9aa:	d4ef      	bmi.n	800d98c <__smakebuf_r+0x18>
 800d9ac:	f023 0303 	bic.w	r3, r3, #3
 800d9b0:	f043 0302 	orr.w	r3, r3, #2
 800d9b4:	81a3      	strh	r3, [r4, #12]
 800d9b6:	e7e3      	b.n	800d980 <__smakebuf_r+0xc>
 800d9b8:	89a3      	ldrh	r3, [r4, #12]
 800d9ba:	6020      	str	r0, [r4, #0]
 800d9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9c0:	81a3      	strh	r3, [r4, #12]
 800d9c2:	9b00      	ldr	r3, [sp, #0]
 800d9c4:	6163      	str	r3, [r4, #20]
 800d9c6:	9b01      	ldr	r3, [sp, #4]
 800d9c8:	6120      	str	r0, [r4, #16]
 800d9ca:	b15b      	cbz	r3, 800d9e4 <__smakebuf_r+0x70>
 800d9cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f000 f897 	bl	800db04 <_isatty_r>
 800d9d6:	b128      	cbz	r0, 800d9e4 <__smakebuf_r+0x70>
 800d9d8:	89a3      	ldrh	r3, [r4, #12]
 800d9da:	f023 0303 	bic.w	r3, r3, #3
 800d9de:	f043 0301 	orr.w	r3, r3, #1
 800d9e2:	81a3      	strh	r3, [r4, #12]
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	431d      	orrs	r5, r3
 800d9e8:	81a5      	strh	r5, [r4, #12]
 800d9ea:	e7cf      	b.n	800d98c <__smakebuf_r+0x18>

0800d9ec <__swbuf_r>:
 800d9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ee:	460e      	mov	r6, r1
 800d9f0:	4614      	mov	r4, r2
 800d9f2:	4605      	mov	r5, r0
 800d9f4:	b118      	cbz	r0, 800d9fe <__swbuf_r+0x12>
 800d9f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d9f8:	b90b      	cbnz	r3, 800d9fe <__swbuf_r+0x12>
 800d9fa:	f7fb fb99 	bl	8009130 <__sinit>
 800d9fe:	69a3      	ldr	r3, [r4, #24]
 800da00:	60a3      	str	r3, [r4, #8]
 800da02:	89a3      	ldrh	r3, [r4, #12]
 800da04:	0719      	lsls	r1, r3, #28
 800da06:	d529      	bpl.n	800da5c <__swbuf_r+0x70>
 800da08:	6923      	ldr	r3, [r4, #16]
 800da0a:	b33b      	cbz	r3, 800da5c <__swbuf_r+0x70>
 800da0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da10:	b2f6      	uxtb	r6, r6
 800da12:	049a      	lsls	r2, r3, #18
 800da14:	4637      	mov	r7, r6
 800da16:	d52a      	bpl.n	800da6e <__swbuf_r+0x82>
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	6922      	ldr	r2, [r4, #16]
 800da1c:	1a98      	subs	r0, r3, r2
 800da1e:	6963      	ldr	r3, [r4, #20]
 800da20:	4283      	cmp	r3, r0
 800da22:	dc04      	bgt.n	800da2e <__swbuf_r+0x42>
 800da24:	4621      	mov	r1, r4
 800da26:	4628      	mov	r0, r5
 800da28:	f7fd fb12 	bl	800b050 <_fflush_r>
 800da2c:	b9e0      	cbnz	r0, 800da68 <__swbuf_r+0x7c>
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	3b01      	subs	r3, #1
 800da32:	60a3      	str	r3, [r4, #8]
 800da34:	6823      	ldr	r3, [r4, #0]
 800da36:	1c5a      	adds	r2, r3, #1
 800da38:	6022      	str	r2, [r4, #0]
 800da3a:	701e      	strb	r6, [r3, #0]
 800da3c:	6962      	ldr	r2, [r4, #20]
 800da3e:	1c43      	adds	r3, r0, #1
 800da40:	429a      	cmp	r2, r3
 800da42:	d004      	beq.n	800da4e <__swbuf_r+0x62>
 800da44:	89a3      	ldrh	r3, [r4, #12]
 800da46:	07db      	lsls	r3, r3, #31
 800da48:	d506      	bpl.n	800da58 <__swbuf_r+0x6c>
 800da4a:	2e0a      	cmp	r6, #10
 800da4c:	d104      	bne.n	800da58 <__swbuf_r+0x6c>
 800da4e:	4621      	mov	r1, r4
 800da50:	4628      	mov	r0, r5
 800da52:	f7fd fafd 	bl	800b050 <_fflush_r>
 800da56:	b938      	cbnz	r0, 800da68 <__swbuf_r+0x7c>
 800da58:	4638      	mov	r0, r7
 800da5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da5c:	4621      	mov	r1, r4
 800da5e:	4628      	mov	r0, r5
 800da60:	f7ff fe80 	bl	800d764 <__swsetup_r>
 800da64:	2800      	cmp	r0, #0
 800da66:	d0d1      	beq.n	800da0c <__swbuf_r+0x20>
 800da68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800da6c:	e7f4      	b.n	800da58 <__swbuf_r+0x6c>
 800da6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800da72:	81a3      	strh	r3, [r4, #12]
 800da74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da7a:	6663      	str	r3, [r4, #100]	; 0x64
 800da7c:	e7cc      	b.n	800da18 <__swbuf_r+0x2c>

0800da7e <_raise_r>:
 800da7e:	291f      	cmp	r1, #31
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4604      	mov	r4, r0
 800da84:	460d      	mov	r5, r1
 800da86:	d904      	bls.n	800da92 <_raise_r+0x14>
 800da88:	2316      	movs	r3, #22
 800da8a:	6003      	str	r3, [r0, #0]
 800da8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da90:	bd38      	pop	{r3, r4, r5, pc}
 800da92:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 800da96:	b112      	cbz	r2, 800da9e <_raise_r+0x20>
 800da98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da9c:	b94b      	cbnz	r3, 800dab2 <_raise_r+0x34>
 800da9e:	4620      	mov	r0, r4
 800daa0:	f000 f852 	bl	800db48 <_getpid_r>
 800daa4:	462a      	mov	r2, r5
 800daa6:	4601      	mov	r1, r0
 800daa8:	4620      	mov	r0, r4
 800daaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daae:	f000 b839 	b.w	800db24 <_kill_r>
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d00a      	beq.n	800dacc <_raise_r+0x4e>
 800dab6:	1c59      	adds	r1, r3, #1
 800dab8:	d103      	bne.n	800dac2 <_raise_r+0x44>
 800daba:	2316      	movs	r3, #22
 800dabc:	6003      	str	r3, [r0, #0]
 800dabe:	2001      	movs	r0, #1
 800dac0:	e7e6      	b.n	800da90 <_raise_r+0x12>
 800dac2:	2400      	movs	r4, #0
 800dac4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dac8:	4628      	mov	r0, r5
 800daca:	4798      	blx	r3
 800dacc:	2000      	movs	r0, #0
 800dace:	e7df      	b.n	800da90 <_raise_r+0x12>

0800dad0 <raise>:
 800dad0:	4b02      	ldr	r3, [pc, #8]	; (800dadc <raise+0xc>)
 800dad2:	4601      	mov	r1, r0
 800dad4:	6818      	ldr	r0, [r3, #0]
 800dad6:	f7ff bfd2 	b.w	800da7e <_raise_r>
 800dada:	bf00      	nop
 800dadc:	20000160 	.word	0x20000160

0800dae0 <_fstat_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d07      	ldr	r5, [pc, #28]	; (800db00 <_fstat_r+0x20>)
 800dae4:	2300      	movs	r3, #0
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	4611      	mov	r1, r2
 800daec:	602b      	str	r3, [r5, #0]
 800daee:	f7f4 fc55 	bl	800239c <_fstat>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	d102      	bne.n	800dafc <_fstat_r+0x1c>
 800daf6:	682b      	ldr	r3, [r5, #0]
 800daf8:	b103      	cbz	r3, 800dafc <_fstat_r+0x1c>
 800dafa:	6023      	str	r3, [r4, #0]
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	bf00      	nop
 800db00:	200042a0 	.word	0x200042a0

0800db04 <_isatty_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	4d06      	ldr	r5, [pc, #24]	; (800db20 <_isatty_r+0x1c>)
 800db08:	2300      	movs	r3, #0
 800db0a:	4604      	mov	r4, r0
 800db0c:	4608      	mov	r0, r1
 800db0e:	602b      	str	r3, [r5, #0]
 800db10:	f7f4 fc54 	bl	80023bc <_isatty>
 800db14:	1c43      	adds	r3, r0, #1
 800db16:	d102      	bne.n	800db1e <_isatty_r+0x1a>
 800db18:	682b      	ldr	r3, [r5, #0]
 800db1a:	b103      	cbz	r3, 800db1e <_isatty_r+0x1a>
 800db1c:	6023      	str	r3, [r4, #0]
 800db1e:	bd38      	pop	{r3, r4, r5, pc}
 800db20:	200042a0 	.word	0x200042a0

0800db24 <_kill_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4d07      	ldr	r5, [pc, #28]	; (800db44 <_kill_r+0x20>)
 800db28:	2300      	movs	r3, #0
 800db2a:	4604      	mov	r4, r0
 800db2c:	4608      	mov	r0, r1
 800db2e:	4611      	mov	r1, r2
 800db30:	602b      	str	r3, [r5, #0]
 800db32:	f7f4 fbd4 	bl	80022de <_kill>
 800db36:	1c43      	adds	r3, r0, #1
 800db38:	d102      	bne.n	800db40 <_kill_r+0x1c>
 800db3a:	682b      	ldr	r3, [r5, #0]
 800db3c:	b103      	cbz	r3, 800db40 <_kill_r+0x1c>
 800db3e:	6023      	str	r3, [r4, #0]
 800db40:	bd38      	pop	{r3, r4, r5, pc}
 800db42:	bf00      	nop
 800db44:	200042a0 	.word	0x200042a0

0800db48 <_getpid_r>:
 800db48:	f7f4 bbc1 	b.w	80022ce <_getpid>

0800db4c <_init>:
 800db4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4e:	bf00      	nop
 800db50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db52:	bc08      	pop	{r3}
 800db54:	469e      	mov	lr, r3
 800db56:	4770      	bx	lr

0800db58 <_fini>:
 800db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5a:	bf00      	nop
 800db5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5e:	bc08      	pop	{r3}
 800db60:	469e      	mov	lr, r3
 800db62:	4770      	bx	lr
