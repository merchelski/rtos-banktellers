
RTOS_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008284  08008284  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800828c  0800828c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800828c  0800828c  0001828c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008290  08008290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bec  20000074  08008308  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c60  08008308  00022c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b9b8  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000373f  00000000  00000000  0003ba9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  0003f1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d5  00000000  00000000  000408d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000291cd  00000000  00000000  00041aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001900d  00000000  00000000  0006ac7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd2d4  00000000  00000000  00083c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006574  00000000  00000000  00180f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001874d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008030 	.word	0x08008030

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008030 	.word	0x08008030

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* --- S1-S3 SHIELD BUTTONS --- */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09c      	sub	sp, #112	; 0x70
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[100];
	int data_size;
	data_size = sprintf((char*)buffer, "A BUTTON PRESSED!!\r\n");
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	4923      	ldr	r1, [pc, #140]	; (8000618 <HAL_GPIO_EXTI_Callback+0x9c>)
 800058c:	4618      	mov	r0, r3
 800058e:	f007 f855 	bl	800763c <siprintf>
 8000592:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 8000594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000596:	b29a      	uxth	r2, r3
 8000598:	f107 0108 	add.w	r1, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	481f      	ldr	r0, [pc, #124]	; (800061c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005a0:	f003 f890 	bl	80036c4 <HAL_UART_Transmit>
	if(GPIO_Pin == S1_SHLD_BUTTON_Pin)
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d10e      	bne.n	80005c8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		data_size = sprintf((char*)buffer, "S1 BUTTON PRESSED!!\r\n");
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	491c      	ldr	r1, [pc, #112]	; (8000620 <HAL_GPIO_EXTI_Callback+0xa4>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f007 f843 	bl	800763c <siprintf>
 80005b6:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 80005b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f107 0108 	add.w	r1, r7, #8
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	4816      	ldr	r0, [pc, #88]	; (800061c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005c4:	f003 f87e 	bl	80036c4 <HAL_UART_Transmit>
	}

	if(GPIO_Pin == S2_SHLD_BUTTON_Pin)
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	2b10      	cmp	r3, #16
 80005cc:	d10e      	bne.n	80005ec <HAL_GPIO_EXTI_Callback+0x70>
	{
		data_size = sprintf((char*)buffer, "S2 BUTTON PRESSED!!\r\n");
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4914      	ldr	r1, [pc, #80]	; (8000624 <HAL_GPIO_EXTI_Callback+0xa8>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f007 f831 	bl	800763c <siprintf>
 80005da:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 80005dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f107 0108 	add.w	r1, r7, #8
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005e8:	f003 f86c 	bl	80036c4 <HAL_UART_Transmit>
	}

	if(GPIO_Pin == S3_SHLD_BUTTON_Pin)
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d10e      	bne.n	8000610 <HAL_GPIO_EXTI_Callback+0x94>
	{
		data_size = sprintf((char*)buffer, "S3 BUTTON PRESSED!!\r\n");
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	490c      	ldr	r1, [pc, #48]	; (8000628 <HAL_GPIO_EXTI_Callback+0xac>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 f81f 	bl	800763c <siprintf>
 80005fe:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 8000600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000602:	b29a      	uxth	r2, r3
 8000604:	f107 0108 	add.w	r1, r7, #8
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <HAL_GPIO_EXTI_Callback+0xa0>)
 800060c:	f003 f85a 	bl	80036c4 <HAL_UART_Transmit>
	}
}
 8000610:	bf00      	nop
 8000612:	3770      	adds	r7, #112	; 0x70
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080080a0 	.word	0x080080a0
 800061c:	200000dc 	.word	0x200000dc
 8000620:	080080b8 	.word	0x080080b8
 8000624:	080080d0 	.word	0x080080d0
 8000628:	080080e8 	.word	0x080080e8

0800062c <shiftOut>:

/* --- USED FOR 7 SEGMENT DISPLAY --- */
void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	607a      	str	r2, [r7, #4]
 8000636:	461a      	mov	r2, r3
 8000638:	460b      	mov	r3, r1
 800063a:	817b      	strh	r3, [r7, #10]
 800063c:	4613      	mov	r3, r2
 800063e:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	e01d      	b.n	8000682 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8000646:	893b      	ldrh	r3, [r7, #8]
 8000648:	2200      	movs	r2, #0
 800064a:	4619      	mov	r1, r3
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f000 ffd3 	bl	80015f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8000652:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4013      	ands	r3, r2
 800065a:	2b00      	cmp	r3, #0
 800065c:	bf14      	ite	ne
 800065e:	2301      	movne	r3, #1
 8000660:	2300      	moveq	r3, #0
 8000662:	b2db      	uxtb	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	897b      	ldrh	r3, [r7, #10]
 8000668:	4619      	mov	r1, r3
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f000 ffc4 	bl	80015f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8000670:	893b      	ldrh	r3, [r7, #8]
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 ffbe 	bl	80015f8 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	105b      	asrs	r3, r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1de      	bne.n	8000646 <shiftOut+0x1a>
	}
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <set_segment_digit>:

void set_segment_digit(uint8_t digit, uint8_t value)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af02      	add	r7, sp, #8
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	4811      	ldr	r0, [pc, #68]	; (80006f0 <set_segment_digit+0x5c>)
 80006aa:	f000 ffa5 	bl	80015f8 <HAL_GPIO_WritePin>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, value);
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f7ff ffb3 	bl	800062c <shiftOut>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, digit);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f7ff ffa7 	bl	800062c <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2120      	movs	r1, #32
 80006e2:	4803      	ldr	r0, [pc, #12]	; (80006f0 <set_segment_digit+0x5c>)
 80006e4:	f000 ff88 	bl	80015f8 <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	48000400 	.word	0x48000400

080006f4 <set_segment_display>:

// Needs to be constantly refreshed - so doesn't work
void set_segment_display(uint16_t num)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]
	uint8_t value;
	while((num > 0) /*&& (digit < NUM_SEGMENT_DIGITS)*/)
 8000702:	e01e      	b.n	8000742 <set_segment_display+0x4e>
	{
		value = num % 10;
 8000704:	88fa      	ldrh	r2, [r7, #6]
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <set_segment_display+0x60>)
 8000708:	fba3 1302 	umull	r1, r3, r3, r2
 800070c:	08d9      	lsrs	r1, r3, #3
 800070e:	460b      	mov	r3, r1
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	440b      	add	r3, r1
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	b29b      	uxth	r3, r3
 800071a:	73bb      	strb	r3, [r7, #14]
		set_segment_digit(SEGMENT_DIGIT[digit], SEGMENT_NUM[value]);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <set_segment_display+0x64>)
 8000720:	5cd2      	ldrb	r2, [r2, r3]
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	490d      	ldr	r1, [pc, #52]	; (800075c <set_segment_display+0x68>)
 8000726:	5ccb      	ldrb	r3, [r1, r3]
 8000728:	4619      	mov	r1, r3
 800072a:	4610      	mov	r0, r2
 800072c:	f7ff ffb2 	bl	8000694 <set_segment_digit>
		num /= 10;
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <set_segment_display+0x60>)
 8000734:	fba2 2303 	umull	r2, r3, r2, r3
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	80fb      	strh	r3, [r7, #6]
		digit++;
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	3301      	adds	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	while((num > 0) /*&& (digit < NUM_SEGMENT_DIGITS)*/)
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1dd      	bne.n	8000704 <set_segment_display+0x10>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	cccccccd 	.word	0xcccccccd
 8000758:	20000004 	.word	0x20000004
 800075c:	20000008 	.word	0x20000008

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 fc7c 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f870 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f93e 	bl	80009ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000770:	f000 f90c 	bl	800098c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000774:	f000 f8bc 	bl	80008f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f003 fd40 	bl	80041fc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 800077c:	481f      	ldr	r0, [pc, #124]	; (80007fc <main+0x9c>)
 800077e:	f003 fe34 	bl	80043ea <osMutexNew>
 8000782:	4603      	mov	r3, r0
 8000784:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <main+0xa0>)
 8000786:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of customerQueue */
  customerQueueHandle = osMessageQueueNew (421, sizeof(uint16_t), &customerQueue_attributes);
 8000788:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <main+0xa4>)
 800078a:	2102      	movs	r1, #2
 800078c:	f240 10a5 	movw	r0, #421	; 0x1a5
 8000790:	f003 ff39 	bl	8004606 <osMessageQueueNew>
 8000794:	4603      	mov	r3, r0
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <main+0xa8>)
 8000798:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of updateSegment */
  updateSegmentHandle = osThreadNew(StartUpdateSegment, NULL, &updateSegment_attributes);
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <main+0xac>)
 800079c:	2100      	movs	r1, #0
 800079e:	481c      	ldr	r0, [pc, #112]	; (8000810 <main+0xb0>)
 80007a0:	f003 fd76 	bl	8004290 <osThreadNew>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <main+0xb4>)
 80007a8:	6013      	str	r3, [r2, #0]

  /* creation of genCustomer */
  genCustomerHandle = osThreadNew(StartGenCustomerTask, NULL, &genCustomer_attributes);
 80007aa:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <main+0xb8>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	481b      	ldr	r0, [pc, #108]	; (800081c <main+0xbc>)
 80007b0:	f003 fd6e 	bl	8004290 <osThreadNew>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a1a      	ldr	r2, [pc, #104]	; (8000820 <main+0xc0>)
 80007b8:	6013      	str	r3, [r2, #0]

  /* creation of teller01 */
  teller01Handle = osThreadNew(StartTeller01, NULL, &teller01_attributes);
 80007ba:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <main+0xc4>)
 80007bc:	2100      	movs	r1, #0
 80007be:	481a      	ldr	r0, [pc, #104]	; (8000828 <main+0xc8>)
 80007c0:	f003 fd66 	bl	8004290 <osThreadNew>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a19      	ldr	r2, [pc, #100]	; (800082c <main+0xcc>)
 80007c8:	6013      	str	r3, [r2, #0]

  /* creation of teller02 */
  teller02Handle = osThreadNew(StartTeller02, NULL, &teller02_attributes);
 80007ca:	4a19      	ldr	r2, [pc, #100]	; (8000830 <main+0xd0>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4819      	ldr	r0, [pc, #100]	; (8000834 <main+0xd4>)
 80007d0:	f003 fd5e 	bl	8004290 <osThreadNew>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <main+0xd8>)
 80007d8:	6013      	str	r3, [r2, #0]

  /* creation of teller03 */
  teller03Handle = osThreadNew(StartTeller03, NULL, &teller03_attributes);
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <main+0xdc>)
 80007dc:	2100      	movs	r1, #0
 80007de:	4818      	ldr	r0, [pc, #96]	; (8000840 <main+0xe0>)
 80007e0:	f003 fd56 	bl	8004290 <osThreadNew>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <main+0xe4>)
 80007e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Grab reference point to get an accurate reading of simulated time.
  SIMULATED_TIME_START = HAL_GetTick();
 80007ea:	f000 fc6d 	bl	80010c8 <HAL_GetTick>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <main+0xe8>)
 80007f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007f6:	f003 fd25 	bl	8004244 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <main+0x9a>
 80007fc:	080081f8 	.word	0x080081f8
 8000800:	2000017c 	.word	0x2000017c
 8000804:	080081e0 	.word	0x080081e0
 8000808:	20000178 	.word	0x20000178
 800080c:	0800812c 	.word	0x0800812c
 8000810:	08000b6d 	.word	0x08000b6d
 8000814:	20000164 	.word	0x20000164
 8000818:	08008150 	.word	0x08008150
 800081c:	08000b8d 	.word	0x08000b8d
 8000820:	20000168 	.word	0x20000168
 8000824:	08008174 	.word	0x08008174
 8000828:	08000bad 	.word	0x08000bad
 800082c:	2000016c 	.word	0x2000016c
 8000830:	08008198 	.word	0x08008198
 8000834:	08000c01 	.word	0x08000c01
 8000838:	20000170 	.word	0x20000170
 800083c:	080081bc 	.word	0x080081bc
 8000840:	08000c55 	.word	0x08000c55
 8000844:	20000174 	.word	0x20000174
 8000848:	20000180 	.word	0x20000180

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b096      	sub	sp, #88	; 0x58
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2244      	movs	r2, #68	; 0x44
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f006 ff0e 	bl	800767c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800086e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000872:	f000 feff 	bl	8001674 <HAL_PWREx_ControlVoltageScaling>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800087c:	f000 fa26 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000888:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088a:	2310      	movs	r3, #16
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000892:	2302      	movs	r3, #2
 8000894:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800089a:	230a      	movs	r3, #10
 800089c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800089e:	2307      	movs	r3, #7
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 ff36 	bl	8001720 <HAL_RCC_OscConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ba:	f000 fa07 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c2:	2303      	movs	r3, #3
 80008c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	2104      	movs	r1, #4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fafe 	bl	8001ed8 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008e2:	f000 f9f3 	bl	8000ccc <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3758      	adds	r7, #88	; 0x58
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_TIM2_Init+0x98>)
 8000910:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_TIM2_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_TIM2_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_TIM2_Init+0x98>)
 8000924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_TIM2_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_TIM2_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <MX_TIM2_Init+0x98>)
 8000938:	f002 f9e0 	bl	8002cfc <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000942:	f000 f9c3 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_TIM2_Init+0x98>)
 8000954:	f002 fb9c 	bl	8003090 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800095e:	f000 f9b5 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM2_Init+0x98>)
 8000970:	f002 fdb4 	bl	80034dc <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800097a:	f000 f9a7 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000090 	.word	0x20000090

0800098c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_USART2_UART_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x58>)
 80009d0:	f002 fe2a 	bl	8003628 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 f977 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000dc 	.word	0x200000dc
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b57      	ldr	r3, [pc, #348]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a56      	ldr	r2, [pc, #344]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b54      	ldr	r3, [pc, #336]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	4b51      	ldr	r3, [pc, #324]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a50      	ldr	r2, [pc, #320]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b4e      	ldr	r3, [pc, #312]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a4a      	ldr	r2, [pc, #296]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b48      	ldr	r3, [pc, #288]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b45      	ldr	r3, [pc, #276]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a44      	ldr	r2, [pc, #272]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b42      	ldr	r3, [pc, #264]	; (8000b60 <MX_GPIO_Init+0x174>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f000 fdc4 	bl	80015f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2120      	movs	r1, #32
 8000a74:	483b      	ldr	r0, [pc, #236]	; (8000b64 <MX_GPIO_Init+0x178>)
 8000a76:	f000 fdbf 	bl	80015f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4835      	ldr	r0, [pc, #212]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a92:	f000 fc07 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_SHLD_BUTTON_Pin S2_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S1_SHLD_BUTTON_Pin|S2_SHLD_BUTTON_Pin;
 8000a96:	2312      	movs	r3, #18
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a9a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f000 fbf9 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f000 fbea 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S3_SHLD_BUTTON_Pin;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ad4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S3_SHLD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481f      	ldr	r0, [pc, #124]	; (8000b64 <MX_GPIO_Init+0x178>)
 8000ae6:	f000 fbdd 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_D7_SEG7_Clock_Pin SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin;
 8000aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f000 fbcd 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4810      	ldr	r0, [pc, #64]	; (8000b64 <MX_GPIO_Init+0x178>)
 8000b22:	f000 fbbf 	bl	80012a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // S1_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	f000 fb90 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b30:	2007      	movs	r0, #7
 8000b32:	f000 fba9 	bl	8001288 <HAL_NVIC_EnableIRQ>

  // S2_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f000 fb88 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b40:	200a      	movs	r0, #10
 8000b42:	f000 fba1 	bl	8001288 <HAL_NVIC_EnableIRQ>

  // S3_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2006      	movs	r0, #6
 8000b4c:	f000 fb80 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b50:	2006      	movs	r0, #6
 8000b52:	f000 fb99 	bl	8001288 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48000400 	.word	0x48000400
 8000b68:	48000800 	.word	0x48000800

08000b6c <StartUpdateSegment>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateSegment */
void StartUpdateSegment(void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	set_segment_display(CUSTOMER_QUEUE_COUNT);
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <StartUpdateSegment+0x1c>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fdbb 	bl	80006f4 <set_segment_display>
    osDelay(1);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f003 fc18 	bl	80043b4 <osDelay>
	set_segment_display(CUSTOMER_QUEUE_COUNT);
 8000b84:	e7f6      	b.n	8000b74 <StartUpdateSegment+0x8>
 8000b86:	bf00      	nop
 8000b88:	20000000 	.word	0x20000000

08000b8c <StartGenCustomerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGenCustomerTask */
void StartGenCustomerTask(void *argument)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGenCustomerTask */
  /* Infinite loop */

  for(;;)
  {
	CUSTOMER_QUEUE_COUNT--;
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <StartGenCustomerTask+0x1c>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <StartGenCustomerTask+0x1c>)
 8000b9e:	801a      	strh	r2, [r3, #0]
	osDelay(10);
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f003 fc07 	bl	80043b4 <osDelay>
	CUSTOMER_QUEUE_COUNT--;
 8000ba6:	e7f5      	b.n	8000b94 <StartGenCustomerTask+0x8>
 8000ba8:	20000000 	.word	0x20000000

08000bac <StartTeller01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller01 */
void StartTeller01(void *argument)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b09c      	sub	sp, #112	; 0x70
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint8_t buffer[100];
  int n;
  for(;;)
  {
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <StartTeller01+0x48>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f006 fd3e 	bl	800763c <siprintf>
 8000bc0:	66f8      	str	r0, [r7, #108]	; 0x6c
	osMutexAcquire(Mutex01Handle, osWaitForever);
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <StartTeller01+0x4c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 fc93 	bl	80044f6 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, buffer, n, 100U);
 8000bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	f107 0108 	add.w	r1, r7, #8
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	4808      	ldr	r0, [pc, #32]	; (8000bfc <StartTeller01+0x50>)
 8000bdc:	f002 fd72 	bl	80036c4 <HAL_UART_Transmit>
	osMutexRelease(Mutex01Handle);
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <StartTeller01+0x4c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fcd1 	bl	800458c <osMutexRelease>
    osDelay(10);
 8000bea:	200a      	movs	r0, #10
 8000bec:	f003 fbe2 	bl	80043b4 <osDelay>
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000bf0:	e7e0      	b.n	8000bb4 <StartTeller01+0x8>
 8000bf2:	bf00      	nop
 8000bf4:	08008100 	.word	0x08008100
 8000bf8:	2000017c 	.word	0x2000017c
 8000bfc:	200000dc 	.word	0x200000dc

08000c00 <StartTeller02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller02 */
void StartTeller02(void *argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b09c      	sub	sp, #112	; 0x70
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint8_t buffer[100];
  int n;
  for(;;)
  {
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	490e      	ldr	r1, [pc, #56]	; (8000c48 <StartTeller02+0x48>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f006 fd14 	bl	800763c <siprintf>
 8000c14:	66f8      	str	r0, [r7, #108]	; 0x6c
	osMutexAcquire(Mutex01Handle, osWaitForever);
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <StartTeller02+0x4c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fc69 	bl	80044f6 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, buffer, n, 100U);
 8000c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f107 0108 	add.w	r1, r7, #8
 8000c2c:	2364      	movs	r3, #100	; 0x64
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <StartTeller02+0x50>)
 8000c30:	f002 fd48 	bl	80036c4 <HAL_UART_Transmit>
	osMutexRelease(Mutex01Handle);
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <StartTeller02+0x4c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fca7 	bl	800458c <osMutexRelease>
	osDelay(10);
 8000c3e:	200a      	movs	r0, #10
 8000c40:	f003 fbb8 	bl	80043b4 <osDelay>
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000c44:	e7e0      	b.n	8000c08 <StartTeller02+0x8>
 8000c46:	bf00      	nop
 8000c48:	08008100 	.word	0x08008100
 8000c4c:	2000017c 	.word	0x2000017c
 8000c50:	200000dc 	.word	0x200000dc

08000c54 <StartTeller03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller03 */
void StartTeller03(void *argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b09c      	sub	sp, #112	; 0x70
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint8_t buffer[100];
  int n;
  for(;;)
  {
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	490e      	ldr	r1, [pc, #56]	; (8000c9c <StartTeller03+0x48>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f006 fcea 	bl	800763c <siprintf>
 8000c68:	66f8      	str	r0, [r7, #108]	; 0x6c
	osMutexAcquire(Mutex01Handle, osWaitForever);
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <StartTeller03+0x4c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 fc3f 	bl	80044f6 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, buffer, n, 100U);
 8000c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f107 0108 	add.w	r1, r7, #8
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <StartTeller03+0x50>)
 8000c84:	f002 fd1e 	bl	80036c4 <HAL_UART_Transmit>
	osMutexRelease(Mutex01Handle);
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <StartTeller03+0x4c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fc7d 	bl	800458c <osMutexRelease>
    osDelay(10);
 8000c92:	200a      	movs	r0, #10
 8000c94:	f003 fb8e 	bl	80043b4 <osDelay>
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000c98:	e7e0      	b.n	8000c5c <StartTeller03+0x8>
 8000c9a:	bf00      	nop
 8000c9c:	08008100 	.word	0x08008100
 8000ca0:	2000017c 	.word	0x2000017c
 8000ca4:	200000dc 	.word	0x200000dc

08000ca8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cba:	f000 f9f1 	bl	80010a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40001000 	.word	0x40001000

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6593      	str	r3, [r2, #88]	; 0x58
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	210f      	movs	r1, #15
 8000d12:	f06f 0001 	mvn.w	r0, #1
 8000d16:	f000 fa9b 	bl	8001250 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d38:	d10b      	bne.n	8000d52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_TIM_Base_MspInit+0x38>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_TIM_Base_MspInit+0x38>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6593      	str	r3, [r2, #88]	; 0x58
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_TIM_Base_MspInit+0x38>)
 8000d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0ac      	sub	sp, #176	; 0xb0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2288      	movs	r2, #136	; 0x88
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f006 fc79 	bl	800767c <memset>
  if(huart->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a21      	ldr	r2, [pc, #132]	; (8000e14 <HAL_UART_MspInit+0xb0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d13b      	bne.n	8000e0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 faef 	bl	8002384 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff ff8e 	bl	8000ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dba:	6593      	str	r3, [r2, #88]	; 0x58
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_UART_MspInit+0xb4>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000de0:	230c      	movs	r3, #12
 8000de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f000 fa4c 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	37b0      	adds	r7, #176	; 0xb0
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40004400 	.word	0x40004400
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e2a:	4b34      	ldr	r3, [pc, #208]	; (8000efc <HAL_InitTick+0xe0>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	4a33      	ldr	r2, [pc, #204]	; (8000efc <HAL_InitTick+0xe0>)
 8000e30:	f043 0310 	orr.w	r3, r3, #16
 8000e34:	6593      	str	r3, [r2, #88]	; 0x58
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <HAL_InitTick+0xe0>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3a:	f003 0310 	and.w	r3, r3, #16
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e42:	f107 0210 	add.w	r2, r7, #16
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fa07 	bl	8002260 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d103      	bne.n	8000e64 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e5c:	f001 f9d4 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8000e60:	6378      	str	r0, [r7, #52]	; 0x34
 8000e62:	e004      	b.n	8000e6e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e64:	f001 f9d0 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e70:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_InitTick+0xe4>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9b      	lsrs	r3, r3, #18
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <HAL_InitTick+0xe8>)
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <HAL_InitTick+0xec>)
 8000e80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_InitTick+0xe8>)
 8000e84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <HAL_InitTick+0xe8>)
 8000e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_InitTick+0xe8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_InitTick+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_InitTick+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ea2:	4818      	ldr	r0, [pc, #96]	; (8000f04 <HAL_InitTick+0xe8>)
 8000ea4:	f001 ff2a 	bl	8002cfc <HAL_TIM_Base_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d11b      	bne.n	8000eee <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <HAL_InitTick+0xe8>)
 8000eb8:	f001 ff78 	bl	8002dac <HAL_TIM_Base_Start_IT>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ec2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d111      	bne.n	8000eee <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eca:	2036      	movs	r0, #54	; 0x36
 8000ecc:	f000 f9dc 	bl	8001288 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	d808      	bhi.n	8000ee8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	2036      	movs	r0, #54	; 0x36
 8000edc:	f000 f9b8 	bl	8001250 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_InitTick+0xf0>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e002      	b.n	8000eee <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000eee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3738      	adds	r7, #56	; 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000
 8000f00:	431bde83 	.word	0x431bde83
 8000f04:	20000184 	.word	0x20000184
 8000f08:	40001000 	.word	0x40001000
 8000f0c:	20000018 	.word	0x20000018

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <TIM6_DAC_IRQHandler+0x10>)
 8000f42:	f001 ffa3 	bl	8002e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000184 	.word	0x20000184

08000f50 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f54:	2002      	movs	r0, #2
 8000f56:	f000 fb67 	bl	8001628 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f62:	2010      	movs	r0, #16
 8000f64:	f000 fb60 	bl	8001628 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f000 fb59 	bl	8001628 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f006 fbc4 	bl	8007738 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20018000 	.word	0x20018000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	200001d0 	.word	0x200001d0
 8000fe4:	20002c60 	.word	0x20002c60

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001010:	f7ff ffea 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopForever+0x6>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopForever+0xe>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopForever+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f006 fb83 	bl	8007744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103e:	f7ff fb8f 	bl	8000760 <main>

08001042 <LoopForever>:

LoopForever:
    b LoopForever
 8001042:	e7fe      	b.n	8001042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001050:	08008294 	.word	0x08008294
  ldr r2, =_sbss
 8001054:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001058:	20002c60 	.word	0x20002c60

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>
	...

08001060 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_Init+0x3c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_Init+0x3c>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001076:	2003      	movs	r0, #3
 8001078:	f000 f8df 	bl	800123a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107c:	200f      	movs	r0, #15
 800107e:	f7ff fecd 	bl	8000e1c <HAL_InitTick>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	e001      	b.n	8001092 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800108e:	f7ff fe23 	bl	8000cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001092:	79fb      	ldrb	r3, [r7, #7]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40022000 	.word	0x40022000

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	2000001c 	.word	0x2000001c
 80010c4:	200001d4 	.word	0x200001d4

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200001d4 	.word	0x200001d4

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff4c 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001262:	f7ff ff61 	bl	8001128 <__NVIC_GetPriorityGrouping>
 8001266:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	6978      	ldr	r0, [r7, #20]
 800126e:	f7ff ffb1 	bl	80011d4 <NVIC_EncodePriority>
 8001272:	4602      	mov	r2, r0
 8001274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff80 	bl	8001180 <__NVIC_SetPriority>
}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff54 	bl	8001144 <__NVIC_EnableIRQ>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	e17f      	b.n	80015b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8171 	beq.w	80015ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d118      	bne.n	8001384 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001358:	2201      	movs	r2, #1
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b03      	cmp	r3, #3
 800138e:	d017      	beq.n	80013c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d123      	bne.n	8001414 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	6939      	ldr	r1, [r7, #16]
 8001410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80ac 	beq.w	80015ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_GPIO_Init+0x330>)
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	4a5e      	ldr	r2, [pc, #376]	; (80015d4 <HAL_GPIO_Init+0x330>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6613      	str	r3, [r2, #96]	; 0x60
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <HAL_GPIO_Init+0x330>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800146e:	4a5a      	ldr	r2, [pc, #360]	; (80015d8 <HAL_GPIO_Init+0x334>)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001498:	d025      	beq.n	80014e6 <HAL_GPIO_Init+0x242>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4f      	ldr	r2, [pc, #316]	; (80015dc <HAL_GPIO_Init+0x338>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01f      	beq.n	80014e2 <HAL_GPIO_Init+0x23e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4e      	ldr	r2, [pc, #312]	; (80015e0 <HAL_GPIO_Init+0x33c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x23a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4d      	ldr	r2, [pc, #308]	; (80015e4 <HAL_GPIO_Init+0x340>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x236>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	; (80015e8 <HAL_GPIO_Init+0x344>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x232>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <HAL_GPIO_Init+0x348>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x22e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4a      	ldr	r2, [pc, #296]	; (80015f0 <HAL_GPIO_Init+0x34c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x22a>
 80014ca:	2306      	movs	r3, #6
 80014cc:	e00c      	b.n	80014e8 <HAL_GPIO_Init+0x244>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e00a      	b.n	80014e8 <HAL_GPIO_Init+0x244>
 80014d2:	2305      	movs	r3, #5
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x244>
 80014d6:	2304      	movs	r3, #4
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x244>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x244>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x244>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x244>
 80014e6:	2300      	movs	r3, #0
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f8:	4937      	ldr	r1, [pc, #220]	; (80015d8 <HAL_GPIO_Init+0x334>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <HAL_GPIO_Init+0x350>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800152a:	4a32      	ldr	r2, [pc, #200]	; (80015f4 <HAL_GPIO_Init+0x350>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <HAL_GPIO_Init+0x350>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	43db      	mvns	r3, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001554:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <HAL_GPIO_Init+0x350>)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <HAL_GPIO_Init+0x350>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800157e:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <HAL_GPIO_Init+0x350>)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_GPIO_Init+0x350>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43db      	mvns	r3, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015a8:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <HAL_GPIO_Init+0x350>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f47f ae78 	bne.w	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000
 80015dc:	48000400 	.word	0x48000400
 80015e0:	48000800 	.word	0x48000800
 80015e4:	48000c00 	.word	0x48000c00
 80015e8:	48001000 	.word	0x48001000
 80015ec:	48001400 	.word	0x48001400
 80015f0:	48001800 	.word	0x48001800
 80015f4:	40010400 	.word	0x40010400

080015f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
 8001604:	4613      	mov	r3, r2
 8001606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001608:	787b      	ldrb	r3, [r7, #1]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160e:	887a      	ldrh	r2, [r7, #2]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001614:	e002      	b.n	800161c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff98 	bl	800057c <HAL_GPIO_EXTI_Callback>
  }
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <HAL_PWREx_GetVoltageRange+0x18>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40007000 	.word	0x40007000

08001674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001682:	d130      	bne.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800168c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001690:	d038      	beq.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800169a:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2232      	movs	r2, #50	; 0x32
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	4a1b      	ldr	r2, [pc, #108]	; (800171c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9b      	lsrs	r3, r3, #18
 80016b4:	3301      	adds	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b8:	e002      	b.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3b01      	subs	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016cc:	d102      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f2      	bne.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e0:	d110      	bne.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e00f      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f2:	d007      	beq.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016fc:	4a05      	ldr	r2, [pc, #20]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001702:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40007000 	.word	0x40007000
 8001718:	20000014 	.word	0x20000014
 800171c:	431bde83 	.word	0x431bde83

08001720 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e3ca      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4b97      	ldr	r3, [pc, #604]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173c:	4b94      	ldr	r3, [pc, #592]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80e4 	beq.w	800191c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <HAL_RCC_OscConfig+0x4a>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	f040 808b 	bne.w	8001878 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b01      	cmp	r3, #1
 8001766:	f040 8087 	bne.w	8001878 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800176a:	4b89      	ldr	r3, [pc, #548]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_RCC_OscConfig+0x62>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e3a2      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	4b82      	ldr	r3, [pc, #520]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <HAL_RCC_OscConfig+0x7c>
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800179a:	e005      	b.n	80017a8 <HAL_RCC_OscConfig+0x88>
 800179c:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 800179e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d223      	bcs.n	80017f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fd87 	bl	80022c4 <RCC_SetFlashLatencyFromMSIRange>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e383      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c0:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a72      	ldr	r2, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b70      	ldr	r3, [pc, #448]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	496d      	ldr	r1, [pc, #436]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017de:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	4968      	ldr	r1, [pc, #416]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
 80017f2:	e025      	b.n	8001840 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f4:	4b66      	ldr	r3, [pc, #408]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a65      	ldr	r2, [pc, #404]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4960      	ldr	r1, [pc, #384]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	495b      	ldr	r1, [pc, #364]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fd47 	bl	80022c4 <RCC_SetFlashLatencyFromMSIRange>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e343      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001840:	f000 fc4a 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8001844:	4602      	mov	r2, r0
 8001846:	4b52      	ldr	r3, [pc, #328]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	4950      	ldr	r1, [pc, #320]	; (8001994 <HAL_RCC_OscConfig+0x274>)
 8001852:	5ccb      	ldrb	r3, [r1, r3]
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <HAL_RCC_OscConfig+0x278>)
 800185e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001860:	4b4e      	ldr	r3, [pc, #312]	; (800199c <HAL_RCC_OscConfig+0x27c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fad9 	bl	8000e1c <HAL_InitTick>
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d052      	beq.n	800191a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	e327      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d032      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a42      	ldr	r2, [pc, #264]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800188c:	f7ff fc1c 	bl	80010c8 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001894:	f7ff fc18 	bl	80010c8 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e310      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a36      	ldr	r2, [pc, #216]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4931      	ldr	r1, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	492c      	ldr	r1, [pc, #176]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e01a      	b.n	800191c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a29      	ldr	r2, [pc, #164]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fbe9 	bl	80010c8 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018fa:	f7ff fbe5 	bl	80010c8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e2dd      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800190c:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x1da>
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800191a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d074      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2b08      	cmp	r3, #8
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x21a>
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b0c      	cmp	r3, #12
 8001932:	d10e      	bne.n	8001952 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d10b      	bne.n	8001952 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d064      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d160      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e2ba      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x24a>
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e026      	b.n	80019b8 <HAL_RCC_OscConfig+0x298>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001972:	d115      	bne.n	80019a0 <HAL_RCC_OscConfig+0x280>
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a05      	ldr	r2, [pc, #20]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 800197a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a02      	ldr	r2, [pc, #8]	; (8001990 <HAL_RCC_OscConfig+0x270>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e014      	b.n	80019b8 <HAL_RCC_OscConfig+0x298>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	08008208 	.word	0x08008208
 8001998:	20000014 	.word	0x20000014
 800199c:	20000018 	.word	0x20000018
 80019a0:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a9f      	ldr	r2, [pc, #636]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b9d      	ldr	r3, [pc, #628]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a9c      	ldr	r2, [pc, #624]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fb82 	bl	80010c8 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fb7e 	bl	80010c8 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e276      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019da:	4b92      	ldr	r3, [pc, #584]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2a8>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb6e 	bl	80010c8 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fb6a 	bl	80010c8 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e262      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a02:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2d0>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d060      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_OscConfig+0x310>
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d119      	bne.n	8001a5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d116      	bne.n	8001a5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a30:	4b7c      	ldr	r3, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_OscConfig+0x328>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e23f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b76      	ldr	r3, [pc, #472]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	4973      	ldr	r1, [pc, #460]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5c:	e040      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d023      	beq.n	8001aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a66:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6e      	ldr	r2, [pc, #440]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff fb29 	bl	80010c8 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fb25 	bl	80010c8 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e21d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b62      	ldr	r3, [pc, #392]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	495f      	ldr	r1, [pc, #380]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
 8001aac:	e018      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5c      	ldr	r2, [pc, #368]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff fb05 	bl	80010c8 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fb01 	bl	80010c8 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1f9      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad4:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d03c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af4:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afa:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff fae0 	bl	80010c8 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fadc 	bl	80010c8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1d4      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1e:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ef      	beq.n	8001b0c <HAL_RCC_OscConfig+0x3ec>
 8001b2c:	e01b      	b.n	8001b66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b34:	4a3b      	ldr	r2, [pc, #236]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fac3 	bl	80010c8 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b46:	f7ff fabf 	bl	80010c8 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1b7      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ef      	bne.n	8001b46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80a6 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10d      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_RCC_OscConfig+0x508>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d118      	bne.n	8001bde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <HAL_RCC_OscConfig+0x508>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_RCC_OscConfig+0x508>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fa86 	bl	80010c8 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc0:	f7ff fa82 	bl	80010c8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e17a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_RCC_OscConfig+0x508>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4d8>
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf6:	e029      	b.n	8001c4c <HAL_RCC_OscConfig+0x52c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d115      	bne.n	8001c2c <HAL_RCC_OscConfig+0x50c>
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c20:	e014      	b.n	8001c4c <HAL_RCC_OscConfig+0x52c>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	4b9c      	ldr	r3, [pc, #624]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a9b      	ldr	r2, [pc, #620]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	4b98      	ldr	r3, [pc, #608]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	4a97      	ldr	r2, [pc, #604]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d016      	beq.n	8001c82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff fa38 	bl	80010c8 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fa34 	bl	80010c8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e12a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	4b8b      	ldr	r3, [pc, #556]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ed      	beq.n	8001c5c <HAL_RCC_OscConfig+0x53c>
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff fa21 	bl	80010c8 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fa1d 	bl	80010c8 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e113      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	4b7f      	ldr	r3, [pc, #508]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ed      	bne.n	8001c8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4b7a      	ldr	r3, [pc, #488]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	4a79      	ldr	r2, [pc, #484]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80fe 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	f040 80d0 	bne.w	8001e74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cd4:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d130      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d127      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d11f      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d14:	2a07      	cmp	r2, #7
 8001d16:	bf14      	ite	ne
 8001d18:	2201      	movne	r2, #1
 8001d1a:	2200      	moveq	r2, #0
 8001d1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d113      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	3b01      	subs	r3, #1
 8001d44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d06e      	beq.n	8001e28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d069      	beq.n	8001e24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d5c:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0ad      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d78:	f7ff f9a6 	bl	80010c8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff f9a2 	bl	80010c8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e09a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d92:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9e:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <HAL_RCC_OscConfig+0x784>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dae:	3a01      	subs	r2, #1
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	4311      	orrs	r1, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001db8:	0212      	lsls	r2, r2, #8
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dc0:	0852      	lsrs	r2, r2, #1
 8001dc2:	3a01      	subs	r2, #1
 8001dc4:	0552      	lsls	r2, r2, #21
 8001dc6:	4311      	orrs	r1, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dcc:	0852      	lsrs	r2, r2, #1
 8001dce:	3a01      	subs	r2, #1
 8001dd0:	0652      	lsls	r2, r2, #25
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dd8:	0912      	lsrs	r2, r2, #4
 8001dda:	0452      	lsls	r2, r2, #17
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	4930      	ldr	r1, [pc, #192]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2d      	ldr	r2, [pc, #180]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dfc:	f7ff f964 	bl	80010c8 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff f960 	bl	80010c8 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e058      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e22:	e050      	b.n	8001ec6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e04f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d148      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e4c:	f7ff f93c 	bl	80010c8 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff f938 	bl	80010c8 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e030      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x734>
 8001e72:	e028      	b.n	8001ec6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d023      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f91f 	bl	80010c8 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8c:	e00c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff f91b 	bl	80010c8 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d905      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e013      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_OscConfig+0x7b0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ec      	bne.n	8001e8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x7b0>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4905      	ldr	r1, [pc, #20]	; (8001ed0 <HAL_RCC_OscConfig+0x7b0>)
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_OscConfig+0x7b4>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
 8001ec0:	e001      	b.n	8001ec6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	feeefffc 	.word	0xfeeefffc

08001ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0e7      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b75      	ldr	r3, [pc, #468]	; (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d910      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b72      	ldr	r3, [pc, #456]	; (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4970      	ldr	r1, [pc, #448]	; (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b6e      	ldr	r3, [pc, #440]	; (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0cf      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d010      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	4b66      	ldr	r3, [pc, #408]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d908      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b63      	ldr	r3, [pc, #396]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4960      	ldr	r1, [pc, #384]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d04c      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5e:	4b5a      	ldr	r3, [pc, #360]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d121      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0a6      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f76:	4b54      	ldr	r3, [pc, #336]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e09a      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e08e      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e086      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4943      	ldr	r1, [pc, #268]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc0:	f7ff f882 	bl	80010c8 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff f87e 	bl	80010c8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e06e      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d010      	beq.n	800201e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002008:	429a      	cmp	r2, r3
 800200a:	d208      	bcs.n	800201e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200c:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	492b      	ldr	r1, [pc, #172]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d210      	bcs.n	800204e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 0207 	bic.w	r2, r3, #7
 8002034:	4923      	ldr	r1, [pc, #140]	; (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d001      	beq.n	800204e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e036      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4918      	ldr	r1, [pc, #96]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4910      	ldr	r1, [pc, #64]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208c:	f000 f824 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	490b      	ldr	r1, [pc, #44]	; (80020cc <HAL_RCC_ClockConfig+0x1f4>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1f8>)
 80020aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe feb3 	bl	8000e1c <HAL_InitTick>
 80020b6:	4603      	mov	r3, r0
 80020b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ba:	7afb      	ldrb	r3, [r7, #11]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08008208 	.word	0x08008208
 80020d0:	20000014 	.word	0x20000014
 80020d4:	20000018 	.word	0x20000018

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e6:	4b3e      	ldr	r3, [pc, #248]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f0:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x34>
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d121      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d11e      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800210c:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d107      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002118:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e005      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002134:	4a2b      	ldr	r2, [pc, #172]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10d      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d102      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	e004      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b08      	cmp	r3, #8
 800215a:	d101      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <HAL_RCC_GetSysClockFreq+0x114>)
 800215e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d134      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0xa6>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d003      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0xac>
 800217c:	e005      	b.n	800218a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002180:	617b      	str	r3, [r7, #20]
      break;
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002186:	617b      	str	r3, [r7, #20]
      break;
 8002188:	e002      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	617b      	str	r3, [r7, #20]
      break;
 800218e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	3301      	adds	r3, #1
 800219c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	fb03 f202 	mul.w	r2, r3, r2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	0e5b      	lsrs	r3, r3, #25
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	3301      	adds	r3, #1
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021d0:	69bb      	ldr	r3, [r7, #24]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	; 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08008220 	.word	0x08008220
 80021e8:	00f42400 	.word	0x00f42400
 80021ec:	007a1200 	.word	0x007a1200

080021f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000014 	.word	0x20000014

08002208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800220c:	f7ff fff0 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4904      	ldr	r1, [pc, #16]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08008218 	.word	0x08008218

08002234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002238:	f7ff ffda 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 800223c:	4602      	mov	r2, r0
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	0adb      	lsrs	r3, r3, #11
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4904      	ldr	r1, [pc, #16]	; (800225c <HAL_RCC_GetPCLK2Freq+0x28>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	08008218 	.word	0x08008218

08002260 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	220f      	movs	r2, #15
 800226e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_GetClockConfig+0x5c>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_RCC_GetClockConfig+0x5c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_RCC_GetClockConfig+0x5c>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_GetClockConfig+0x5c>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_RCC_GetClockConfig+0x60>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0207 	and.w	r2, r3, #7
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	601a      	str	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40022000 	.word	0x40022000

080022c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022dc:	f7ff f9bc 	bl	8001658 <HAL_PWREx_GetVoltageRange>
 80022e0:	6178      	str	r0, [r7, #20]
 80022e2:	e014      	b.n	800230e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022e4:	4b25      	ldr	r3, [pc, #148]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	4a24      	ldr	r2, [pc, #144]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ee:	6593      	str	r3, [r2, #88]	; 0x58
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022fc:	f7ff f9ac 	bl	8001658 <HAL_PWREx_GetVoltageRange>
 8002300:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	4a1d      	ldr	r2, [pc, #116]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002314:	d10b      	bne.n	800232e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b80      	cmp	r3, #128	; 0x80
 800231a:	d919      	bls.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2ba0      	cmp	r3, #160	; 0xa0
 8002320:	d902      	bls.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002322:	2302      	movs	r3, #2
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	e013      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002328:	2301      	movs	r3, #1
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	e010      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b80      	cmp	r3, #128	; 0x80
 8002332:	d902      	bls.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002334:	2303      	movs	r3, #3
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e00a      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d102      	bne.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002340:	2302      	movs	r3, #2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e004      	b.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b70      	cmp	r3, #112	; 0x70
 800234a:	d101      	bne.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800234c:	2301      	movs	r3, #1
 800234e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 0207 	bic.w	r2, r3, #7
 8002358:	4909      	ldr	r1, [pc, #36]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	40022000 	.word	0x40022000

08002384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800238c:	2300      	movs	r3, #0
 800238e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002390:	2300      	movs	r3, #0
 8002392:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239c:	2b00      	cmp	r3, #0
 800239e:	d041      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023a8:	d02a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023ae:	d824      	bhi.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023b4:	d008      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023ba:	d81e      	bhi.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023c4:	d010      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023c6:	e018      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023c8:	4b86      	ldr	r3, [pc, #536]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a85      	ldr	r2, [pc, #532]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023d4:	e015      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fabb 	bl	8002958 <RCCEx_PLLSAI1_Config>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023e6:	e00c      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3320      	adds	r3, #32
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fba6 	bl	8002b40 <RCCEx_PLLSAI2_Config>
 80023f4:	4603      	mov	r3, r0
 80023f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023f8:	e003      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	74fb      	strb	r3, [r7, #19]
      break;
 80023fe:	e000      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10b      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002408:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002416:	4973      	ldr	r1, [pc, #460]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800241e:	e001      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d041      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002438:	d02a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800243a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800243e:	d824      	bhi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002444:	d008      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800244a:	d81e      	bhi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002454:	d010      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002456:	e018      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002458:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a61      	ldr	r2, [pc, #388]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002464:	e015      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fa73 	bl	8002958 <RCCEx_PLLSAI1_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002476:	e00c      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3320      	adds	r3, #32
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fb5e 	bl	8002b40 <RCCEx_PLLSAI2_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002488:	e003      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	74fb      	strb	r3, [r7, #19]
      break;
 800248e:	e000      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002498:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a6:	494f      	ldr	r1, [pc, #316]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024ae:	e001      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a0 	beq.w	8002602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024d6:	2300      	movs	r3, #0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024dc:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	4a40      	ldr	r2, [pc, #256]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6593      	str	r3, [r2, #88]	; 0x58
 80024e8:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f4:	2301      	movs	r3, #1
 80024f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f8:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a3a      	ldr	r2, [pc, #232]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002504:	f7fe fde0 	bl	80010c8 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800250a:	e009      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800250c:	f7fe fddc 	bl	80010c8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d902      	bls.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	74fb      	strb	r3, [r7, #19]
        break;
 800251e:	e005      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ef      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d15c      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002532:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01f      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	d019      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800257c:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fd9b 	bl	80010c8 <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002594:	e00b      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe fd97 	bl	80010c8 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d902      	bls.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	74fb      	strb	r3, [r7, #19]
            break;
 80025ac:	e006      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ec      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d2:	4904      	ldr	r1, [pc, #16]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025da:	e009      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	74bb      	strb	r3, [r7, #18]
 80025e0:	e006      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f0:	7c7b      	ldrb	r3, [r7, #17]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b9e      	ldr	r3, [pc, #632]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a9d      	ldr	r2, [pc, #628]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800260e:	4b98      	ldr	r3, [pc, #608]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	f023 0203 	bic.w	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261c:	4994      	ldr	r1, [pc, #592]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002630:	4b8f      	ldr	r3, [pc, #572]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 020c 	bic.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263e:	498c      	ldr	r1, [pc, #560]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002652:	4b87      	ldr	r3, [pc, #540]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4983      	ldr	r1, [pc, #524]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002674:	4b7e      	ldr	r3, [pc, #504]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	497b      	ldr	r1, [pc, #492]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002696:	4b76      	ldr	r3, [pc, #472]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a4:	4972      	ldr	r1, [pc, #456]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026b8:	4b6d      	ldr	r3, [pc, #436]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	496a      	ldr	r1, [pc, #424]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026da:	4b65      	ldr	r3, [pc, #404]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	4961      	ldr	r1, [pc, #388]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026fc:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270a:	4959      	ldr	r1, [pc, #356]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800271e:	4b54      	ldr	r3, [pc, #336]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272c:	4950      	ldr	r1, [pc, #320]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002740:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	4948      	ldr	r1, [pc, #288]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	493f      	ldr	r1, [pc, #252]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d028      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002784:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002792:	4937      	ldr	r1, [pc, #220]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800279e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a2:	d106      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a4:	4b32      	ldr	r3, [pc, #200]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a31      	ldr	r2, [pc, #196]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ae:	60d3      	str	r3, [r2, #12]
 80027b0:	e011      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f8c8 	bl	8002958 <RCCEx_PLLSAI1_Config>
 80027c8:	4603      	mov	r3, r0
 80027ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d028      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	491f      	ldr	r1, [pc, #124]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002800:	d106      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280c:	60d3      	str	r3, [r2, #12]
 800280e:	e011      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002818:	d10c      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3304      	adds	r3, #4
 800281e:	2101      	movs	r1, #1
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f899 	bl	8002958 <RCCEx_PLLSAI1_Config>
 8002826:	4603      	mov	r3, r0
 8002828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d02b      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284e:	4908      	ldr	r1, [pc, #32]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800285e:	d109      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a02      	ldr	r2, [pc, #8]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800286a:	60d3      	str	r3, [r2, #12]
 800286c:	e014      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800287c:	d10c      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	2101      	movs	r1, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f867 	bl	8002958 <RCCEx_PLLSAI1_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02f      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b2:	4928      	ldr	r1, [pc, #160]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028c2:	d10d      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	2102      	movs	r1, #2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f844 	bl	8002958 <RCCEx_PLLSAI1_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d014      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	74bb      	strb	r3, [r7, #18]
 80028de:	e011      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e8:	d10c      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3320      	adds	r3, #32
 80028ee:	2102      	movs	r1, #2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f925 	bl	8002b40 <RCCEx_PLLSAI2_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800291e:	490d      	ldr	r1, [pc, #52]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002932:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002942:	4904      	ldr	r1, [pc, #16]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800294a:	7cbb      	ldrb	r3, [r7, #18]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000

08002958 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002966:	4b75      	ldr	r3, [pc, #468]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002972:	4b72      	ldr	r3, [pc, #456]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0203 	and.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d10d      	bne.n	800299e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
       ||
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800298a:	4b6c      	ldr	r3, [pc, #432]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
       ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d047      	beq.n	8002a2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	e044      	b.n	8002a2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d018      	beq.n	80029de <RCCEx_PLLSAI1_Config+0x86>
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d825      	bhi.n	80029fc <RCCEx_PLLSAI1_Config+0xa4>
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d002      	beq.n	80029ba <RCCEx_PLLSAI1_Config+0x62>
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d009      	beq.n	80029cc <RCCEx_PLLSAI1_Config+0x74>
 80029b8:	e020      	b.n	80029fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ba:	4b60      	ldr	r3, [pc, #384]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d11d      	bne.n	8002a02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ca:	e01a      	b.n	8002a02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029cc:	4b5b      	ldr	r3, [pc, #364]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d116      	bne.n	8002a06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029dc:	e013      	b.n	8002a06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029de:	4b57      	ldr	r3, [pc, #348]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ea:	4b54      	ldr	r3, [pc, #336]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029fa:	e006      	b.n	8002a0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002a00:	e004      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a02:	bf00      	nop
 8002a04:	e002      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a12:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	430b      	orrs	r3, r1
 8002a28:	4944      	ldr	r1, [pc, #272]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d17d      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a34:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a40:	f7fe fb42 	bl	80010c8 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a46:	e009      	b.n	8002a5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a48:	f7fe fb3e 	bl	80010c8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d902      	bls.n	8002a5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	73fb      	strb	r3, [r7, #15]
        break;
 8002a5a:	e005      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a5c:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1ef      	bne.n	8002a48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d160      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d111      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a74:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6892      	ldr	r2, [r2, #8]
 8002a84:	0211      	lsls	r1, r2, #8
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68d2      	ldr	r2, [r2, #12]
 8002a8a:	0912      	lsrs	r2, r2, #4
 8002a8c:	0452      	lsls	r2, r2, #17
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	492a      	ldr	r1, [pc, #168]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	610b      	str	r3, [r1, #16]
 8002a96:	e027      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d112      	bne.n	8002ac4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a9e:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002aa6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6892      	ldr	r2, [r2, #8]
 8002aae:	0211      	lsls	r1, r2, #8
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6912      	ldr	r2, [r2, #16]
 8002ab4:	0852      	lsrs	r2, r2, #1
 8002ab6:	3a01      	subs	r2, #1
 8002ab8:	0552      	lsls	r2, r2, #21
 8002aba:	430a      	orrs	r2, r1
 8002abc:	491f      	ldr	r1, [pc, #124]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	610b      	str	r3, [r1, #16]
 8002ac2:	e011      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002acc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6892      	ldr	r2, [r2, #8]
 8002ad4:	0211      	lsls	r1, r2, #8
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6952      	ldr	r2, [r2, #20]
 8002ada:	0852      	lsrs	r2, r2, #1
 8002adc:	3a01      	subs	r2, #1
 8002ade:	0652      	lsls	r2, r2, #25
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	4916      	ldr	r1, [pc, #88]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a13      	ldr	r2, [pc, #76]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe fae8 	bl	80010c8 <HAL_GetTick>
 8002af8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002afa:	e009      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002afc:	f7fe fae4 	bl	80010c8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d902      	bls.n	8002b10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b0e:	e005      	b.n	8002b1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ef      	beq.n	8002afc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	4904      	ldr	r1, [pc, #16]	; (8002b3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000

08002b40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b4e:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d018      	beq.n	8002b8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b5a:	4b67      	ldr	r3, [pc, #412]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0203 	and.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d10d      	bne.n	8002b86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b72:	4b61      	ldr	r3, [pc, #388]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
       ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d047      	beq.n	8002c16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e044      	b.n	8002c16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d018      	beq.n	8002bc6 <RCCEx_PLLSAI2_Config+0x86>
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d825      	bhi.n	8002be4 <RCCEx_PLLSAI2_Config+0xa4>
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d002      	beq.n	8002ba2 <RCCEx_PLLSAI2_Config+0x62>
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d009      	beq.n	8002bb4 <RCCEx_PLLSAI2_Config+0x74>
 8002ba0:	e020      	b.n	8002be4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ba2:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11d      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb2:	e01a      	b.n	8002bea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bb4:	4b50      	ldr	r3, [pc, #320]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d116      	bne.n	8002bee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e013      	b.n	8002bee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bc6:	4b4c      	ldr	r3, [pc, #304]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002be2:	e006      	b.n	8002bf2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      break;
 8002be8:	e004      	b.n	8002bf4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	4939      	ldr	r1, [pc, #228]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d167      	bne.n	8002cec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c1c:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a35      	ldr	r2, [pc, #212]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c28:	f7fe fa4e 	bl	80010c8 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c2e:	e009      	b.n	8002c44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c30:	f7fe fa4a 	bl	80010c8 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d902      	bls.n	8002c44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	73fb      	strb	r3, [r7, #15]
        break;
 8002c42:	e005      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c44:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ef      	bne.n	8002c30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d14a      	bne.n	8002cec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d111      	bne.n	8002c80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c5c:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	0211      	lsls	r1, r2, #8
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68d2      	ldr	r2, [r2, #12]
 8002c72:	0912      	lsrs	r2, r2, #4
 8002c74:	0452      	lsls	r2, r2, #17
 8002c76:	430a      	orrs	r2, r1
 8002c78:	491f      	ldr	r1, [pc, #124]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	614b      	str	r3, [r1, #20]
 8002c7e:	e011      	b.n	8002ca4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6892      	ldr	r2, [r2, #8]
 8002c90:	0211      	lsls	r1, r2, #8
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6912      	ldr	r2, [r2, #16]
 8002c96:	0852      	lsrs	r2, r2, #1
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	0652      	lsls	r2, r2, #25
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	4916      	ldr	r1, [pc, #88]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fa0a 	bl	80010c8 <HAL_GetTick>
 8002cb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cb6:	e009      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cb8:	f7fe fa06 	bl	80010c8 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d902      	bls.n	8002ccc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	73fb      	strb	r3, [r7, #15]
          break;
 8002cca:	e005      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ef      	beq.n	8002cb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4904      	ldr	r1, [pc, #16]	; (8002cf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e049      	b.n	8002da2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fe f800 	bl	8000d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fa9a 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d001      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e04f      	b.n	8002e64 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <HAL_TIM_Base_Start_IT+0xc4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01d      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dee:	d018      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_TIM_Base_Start_IT+0xc8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_TIM_Base_Start_IT+0xd0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d115      	bne.n	8002e4e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d015      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0xb4>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3a:	d011      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4c:	e008      	b.n	8002e60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e000      	b.n	8002e62 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40013400 	.word	0x40013400
 8002e84:	40014000 	.word	0x40014000
 8002e88:	00010007 	.word	0x00010007

08002e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d020      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0202 	mvn.w	r2, #2
 8002ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f9ad 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f99f 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f9b0 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d020      	beq.n	8002f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0204 	mvn.w	r2, #4
 8002f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f987 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f979 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f98a 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d020      	beq.n	8002f88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01b      	beq.n	8002f88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0208 	mvn.w	r2, #8
 8002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f961 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f953 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f964 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d020      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01b      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0210 	mvn.w	r2, #16
 8002fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2208      	movs	r2, #8
 8002faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f93b 	bl	8003236 <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e005      	b.n	8002fce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f92d 	bl	8003222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f93e 	bl	800324a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0201 	mvn.w	r2, #1
 8002ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fe58 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00c      	beq.n	800301c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 faf2 	bl	8003600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 faea 	bl	8003614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8fd 	bl	800325e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00c      	beq.n	8003088 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0220 	mvn.w	r2, #32
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fab2 	bl	80035ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_TIM_ConfigClockSource+0x1c>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e0b6      	b.n	800321a <HAL_TIM_ConfigClockSource+0x18a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e8:	d03e      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0xd8>
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ee:	f200 8087 	bhi.w	8003200 <HAL_TIM_ConfigClockSource+0x170>
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f6:	f000 8086 	beq.w	8003206 <HAL_TIM_ConfigClockSource+0x176>
 80030fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fe:	d87f      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x170>
 8003100:	2b70      	cmp	r3, #112	; 0x70
 8003102:	d01a      	beq.n	800313a <HAL_TIM_ConfigClockSource+0xaa>
 8003104:	2b70      	cmp	r3, #112	; 0x70
 8003106:	d87b      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x170>
 8003108:	2b60      	cmp	r3, #96	; 0x60
 800310a:	d050      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0x11e>
 800310c:	2b60      	cmp	r3, #96	; 0x60
 800310e:	d877      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x170>
 8003110:	2b50      	cmp	r3, #80	; 0x50
 8003112:	d03c      	beq.n	800318e <HAL_TIM_ConfigClockSource+0xfe>
 8003114:	2b50      	cmp	r3, #80	; 0x50
 8003116:	d873      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x170>
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d058      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x13e>
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d86f      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x170>
 8003120:	2b30      	cmp	r3, #48	; 0x30
 8003122:	d064      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x15e>
 8003124:	2b30      	cmp	r3, #48	; 0x30
 8003126:	d86b      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x170>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d060      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x15e>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d867      	bhi.n	8003200 <HAL_TIM_ConfigClockSource+0x170>
 8003130:	2b00      	cmp	r3, #0
 8003132:	d05c      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x15e>
 8003134:	2b10      	cmp	r3, #16
 8003136:	d05a      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x15e>
 8003138:	e062      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800314a:	f000 f9a7 	bl	800349c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800315c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	609a      	str	r2, [r3, #8]
      break;
 8003166:	e04f      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003178:	f000 f990 	bl	800349c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318a:	609a      	str	r2, [r3, #8]
      break;
 800318c:	e03c      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319a:	461a      	mov	r2, r3
 800319c:	f000 f904 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2150      	movs	r1, #80	; 0x50
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f95d 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 80031ac:	e02c      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 f923 	bl	8003406 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2160      	movs	r1, #96	; 0x60
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f94d 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 80031cc:	e01c      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 f8e4 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2140      	movs	r1, #64	; 0x40
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f93d 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 80031ec:	e00c      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	f000 f934 	bl	8003466 <TIM_ITRx_SetConfig>
      break;
 80031fe:	e003      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
      break;
 8003204:	e000      	b.n	8003208 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a40      	ldr	r2, [pc, #256]	; (8003388 <TIM_Base_SetConfig+0x114>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d00f      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a3d      	ldr	r2, [pc, #244]	; (800338c <TIM_Base_SetConfig+0x118>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00b      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a3c      	ldr	r2, [pc, #240]	; (8003390 <TIM_Base_SetConfig+0x11c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a3b      	ldr	r2, [pc, #236]	; (8003394 <TIM_Base_SetConfig+0x120>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <TIM_Base_SetConfig+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a3a      	ldr	r2, [pc, #232]	; (8003398 <TIM_Base_SetConfig+0x124>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d108      	bne.n	80032c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a2f      	ldr	r2, [pc, #188]	; (8003388 <TIM_Base_SetConfig+0x114>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01f      	beq.n	800330e <TIM_Base_SetConfig+0x9a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d01b      	beq.n	800330e <TIM_Base_SetConfig+0x9a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2c      	ldr	r2, [pc, #176]	; (800338c <TIM_Base_SetConfig+0x118>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d017      	beq.n	800330e <TIM_Base_SetConfig+0x9a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <TIM_Base_SetConfig+0x11c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <TIM_Base_SetConfig+0x9a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2a      	ldr	r2, [pc, #168]	; (8003394 <TIM_Base_SetConfig+0x120>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00f      	beq.n	800330e <TIM_Base_SetConfig+0x9a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a29      	ldr	r2, [pc, #164]	; (8003398 <TIM_Base_SetConfig+0x124>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00b      	beq.n	800330e <TIM_Base_SetConfig+0x9a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a28      	ldr	r2, [pc, #160]	; (800339c <TIM_Base_SetConfig+0x128>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <TIM_Base_SetConfig+0x9a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <TIM_Base_SetConfig+0x12c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_Base_SetConfig+0x9a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a26      	ldr	r2, [pc, #152]	; (80033a4 <TIM_Base_SetConfig+0x130>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a10      	ldr	r2, [pc, #64]	; (8003388 <TIM_Base_SetConfig+0x114>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00f      	beq.n	800336c <TIM_Base_SetConfig+0xf8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <TIM_Base_SetConfig+0x124>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_Base_SetConfig+0xf8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a11      	ldr	r2, [pc, #68]	; (800339c <TIM_Base_SetConfig+0x128>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_Base_SetConfig+0xf8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a10      	ldr	r2, [pc, #64]	; (80033a0 <TIM_Base_SetConfig+0x12c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_Base_SetConfig+0xf8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <TIM_Base_SetConfig+0x130>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d103      	bne.n	8003374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	615a      	str	r2, [r3, #20]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	40000c00 	.word	0x40000c00
 8003398:	40013400 	.word	0x40013400
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014400 	.word	0x40014400
 80033a4:	40014800 	.word	0x40014800

080033a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0201 	bic.w	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 030a 	bic.w	r3, r3, #10
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003406:	b480      	push	{r7}
 8003408:	b087      	sub	sp, #28
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f023 0210 	bic.w	r2, r3, #16
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	031b      	lsls	r3, r3, #12
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003442:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	f043 0307 	orr.w	r3, r3, #7
 8003488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	021a      	lsls	r2, r3, #8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	431a      	orrs	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e068      	b.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2e      	ldr	r2, [pc, #184]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d108      	bne.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800352e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003540:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01d      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d018      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1a      	ldr	r2, [pc, #104]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10c      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40013400 	.word	0x40013400
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	40014000 	.word	0x40014000

080035ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e040      	b.n	80036bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fb8a 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	; 0x24
 8003654:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fb6a 	bl	8003d48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f8af 	bl	80037d8 <UART_SetConfig>
 800367a:	4603      	mov	r3, r0
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e01b      	b.n	80036bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fbe9 	bl	8003e8c <UART_CheckIdleState>
 80036ba:	4603      	mov	r3, r0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	; 0x28
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d178      	bne.n	80037ce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_UART_Transmit+0x24>
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e071      	b.n	80037d0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2221      	movs	r2, #33	; 0x21
 80036f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036fa:	f7fd fce5 	bl	80010c8 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003718:	d108      	bne.n	800372c <HAL_UART_Transmit+0x68>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d104      	bne.n	800372c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	e003      	b.n	8003734 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003734:	e030      	b.n	8003798 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fc4b 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e03c      	b.n	80037d0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003768:	b292      	uxth	r2, r2
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	3302      	adds	r3, #2
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e008      	b.n	8003786 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b292      	uxth	r2, r2
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	3301      	adds	r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1c8      	bne.n	8003736 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2140      	movs	r1, #64	; 0x40
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fc14 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e005      	b.n	80037d0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	e000      	b.n	80037d0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
  }
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4ba4      	ldr	r3, [pc, #656]	; (8003a98 <UART_SetConfig+0x2c0>)
 8003808:	4013      	ands	r3, r2
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003810:	430b      	orrs	r3, r1
 8003812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a99      	ldr	r2, [pc, #612]	; (8003a9c <UART_SetConfig+0x2c4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	4313      	orrs	r3, r2
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a90      	ldr	r2, [pc, #576]	; (8003aa0 <UART_SetConfig+0x2c8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d126      	bne.n	80038b0 <UART_SetConfig+0xd8>
 8003862:	4b90      	ldr	r3, [pc, #576]	; (8003aa4 <UART_SetConfig+0x2cc>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d81b      	bhi.n	80038a8 <UART_SetConfig+0xd0>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0xa0>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	08003889 	.word	0x08003889
 800387c:	08003899 	.word	0x08003899
 8003880:	08003891 	.word	0x08003891
 8003884:	080038a1 	.word	0x080038a1
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e116      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003890:	2302      	movs	r3, #2
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003896:	e112      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003898:	2304      	movs	r3, #4
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e10e      	b.n	8003abe <UART_SetConfig+0x2e6>
 80038a0:	2308      	movs	r3, #8
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e10a      	b.n	8003abe <UART_SetConfig+0x2e6>
 80038a8:	2310      	movs	r3, #16
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e106      	b.n	8003abe <UART_SetConfig+0x2e6>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a7c      	ldr	r2, [pc, #496]	; (8003aa8 <UART_SetConfig+0x2d0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d138      	bne.n	800392c <UART_SetConfig+0x154>
 80038ba:	4b7a      	ldr	r3, [pc, #488]	; (8003aa4 <UART_SetConfig+0x2cc>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	d82d      	bhi.n	8003924 <UART_SetConfig+0x14c>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <UART_SetConfig+0xf8>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	08003905 	.word	0x08003905
 80038d4:	08003925 	.word	0x08003925
 80038d8:	08003925 	.word	0x08003925
 80038dc:	08003925 	.word	0x08003925
 80038e0:	08003915 	.word	0x08003915
 80038e4:	08003925 	.word	0x08003925
 80038e8:	08003925 	.word	0x08003925
 80038ec:	08003925 	.word	0x08003925
 80038f0:	0800390d 	.word	0x0800390d
 80038f4:	08003925 	.word	0x08003925
 80038f8:	08003925 	.word	0x08003925
 80038fc:	08003925 	.word	0x08003925
 8003900:	0800391d 	.word	0x0800391d
 8003904:	2300      	movs	r3, #0
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e0d8      	b.n	8003abe <UART_SetConfig+0x2e6>
 800390c:	2302      	movs	r3, #2
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003912:	e0d4      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003914:	2304      	movs	r3, #4
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391a:	e0d0      	b.n	8003abe <UART_SetConfig+0x2e6>
 800391c:	2308      	movs	r3, #8
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003922:	e0cc      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003924:	2310      	movs	r3, #16
 8003926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392a:	e0c8      	b.n	8003abe <UART_SetConfig+0x2e6>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a5e      	ldr	r2, [pc, #376]	; (8003aac <UART_SetConfig+0x2d4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d125      	bne.n	8003982 <UART_SetConfig+0x1aa>
 8003936:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <UART_SetConfig+0x2cc>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003940:	2b30      	cmp	r3, #48	; 0x30
 8003942:	d016      	beq.n	8003972 <UART_SetConfig+0x19a>
 8003944:	2b30      	cmp	r3, #48	; 0x30
 8003946:	d818      	bhi.n	800397a <UART_SetConfig+0x1a2>
 8003948:	2b20      	cmp	r3, #32
 800394a:	d00a      	beq.n	8003962 <UART_SetConfig+0x18a>
 800394c:	2b20      	cmp	r3, #32
 800394e:	d814      	bhi.n	800397a <UART_SetConfig+0x1a2>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <UART_SetConfig+0x182>
 8003954:	2b10      	cmp	r3, #16
 8003956:	d008      	beq.n	800396a <UART_SetConfig+0x192>
 8003958:	e00f      	b.n	800397a <UART_SetConfig+0x1a2>
 800395a:	2300      	movs	r3, #0
 800395c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003960:	e0ad      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003962:	2302      	movs	r3, #2
 8003964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003968:	e0a9      	b.n	8003abe <UART_SetConfig+0x2e6>
 800396a:	2304      	movs	r3, #4
 800396c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003970:	e0a5      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003972:	2308      	movs	r3, #8
 8003974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003978:	e0a1      	b.n	8003abe <UART_SetConfig+0x2e6>
 800397a:	2310      	movs	r3, #16
 800397c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003980:	e09d      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a4a      	ldr	r2, [pc, #296]	; (8003ab0 <UART_SetConfig+0x2d8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d125      	bne.n	80039d8 <UART_SetConfig+0x200>
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <UART_SetConfig+0x2cc>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003996:	2bc0      	cmp	r3, #192	; 0xc0
 8003998:	d016      	beq.n	80039c8 <UART_SetConfig+0x1f0>
 800399a:	2bc0      	cmp	r3, #192	; 0xc0
 800399c:	d818      	bhi.n	80039d0 <UART_SetConfig+0x1f8>
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d00a      	beq.n	80039b8 <UART_SetConfig+0x1e0>
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d814      	bhi.n	80039d0 <UART_SetConfig+0x1f8>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <UART_SetConfig+0x1d8>
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d008      	beq.n	80039c0 <UART_SetConfig+0x1e8>
 80039ae:	e00f      	b.n	80039d0 <UART_SetConfig+0x1f8>
 80039b0:	2300      	movs	r3, #0
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b6:	e082      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039b8:	2302      	movs	r3, #2
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039be:	e07e      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039c0:	2304      	movs	r3, #4
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c6:	e07a      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039c8:	2308      	movs	r3, #8
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ce:	e076      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039d0:	2310      	movs	r3, #16
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e072      	b.n	8003abe <UART_SetConfig+0x2e6>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a35      	ldr	r2, [pc, #212]	; (8003ab4 <UART_SetConfig+0x2dc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d12a      	bne.n	8003a38 <UART_SetConfig+0x260>
 80039e2:	4b30      	ldr	r3, [pc, #192]	; (8003aa4 <UART_SetConfig+0x2cc>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f0:	d01a      	beq.n	8003a28 <UART_SetConfig+0x250>
 80039f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f6:	d81b      	bhi.n	8003a30 <UART_SetConfig+0x258>
 80039f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fc:	d00c      	beq.n	8003a18 <UART_SetConfig+0x240>
 80039fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a02:	d815      	bhi.n	8003a30 <UART_SetConfig+0x258>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <UART_SetConfig+0x238>
 8003a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a0c:	d008      	beq.n	8003a20 <UART_SetConfig+0x248>
 8003a0e:	e00f      	b.n	8003a30 <UART_SetConfig+0x258>
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e052      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e04e      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a20:	2304      	movs	r3, #4
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e04a      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a28:	2308      	movs	r3, #8
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e046      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a30:	2310      	movs	r3, #16
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e042      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <UART_SetConfig+0x2c4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d13a      	bne.n	8003ab8 <UART_SetConfig+0x2e0>
 8003a42:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <UART_SetConfig+0x2cc>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a50:	d01a      	beq.n	8003a88 <UART_SetConfig+0x2b0>
 8003a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a56:	d81b      	bhi.n	8003a90 <UART_SetConfig+0x2b8>
 8003a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5c:	d00c      	beq.n	8003a78 <UART_SetConfig+0x2a0>
 8003a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a62:	d815      	bhi.n	8003a90 <UART_SetConfig+0x2b8>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <UART_SetConfig+0x298>
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d008      	beq.n	8003a80 <UART_SetConfig+0x2a8>
 8003a6e:	e00f      	b.n	8003a90 <UART_SetConfig+0x2b8>
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e022      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e01e      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a80:	2304      	movs	r3, #4
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e01a      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a88:	2308      	movs	r3, #8
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e016      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a90:	2310      	movs	r3, #16
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e012      	b.n	8003abe <UART_SetConfig+0x2e6>
 8003a98:	efff69f3 	.word	0xefff69f3
 8003a9c:	40008000 	.word	0x40008000
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40004400 	.word	0x40004400
 8003aac:	40004800 	.word	0x40004800
 8003ab0:	40004c00 	.word	0x40004c00
 8003ab4:	40005000 	.word	0x40005000
 8003ab8:	2310      	movs	r3, #16
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a9f      	ldr	r2, [pc, #636]	; (8003d40 <UART_SetConfig+0x568>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d17a      	bne.n	8003bbe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ac8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d824      	bhi.n	8003b1a <UART_SetConfig+0x342>
 8003ad0:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <UART_SetConfig+0x300>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003afd 	.word	0x08003afd
 8003adc:	08003b1b 	.word	0x08003b1b
 8003ae0:	08003b05 	.word	0x08003b05
 8003ae4:	08003b1b 	.word	0x08003b1b
 8003ae8:	08003b0b 	.word	0x08003b0b
 8003aec:	08003b1b 	.word	0x08003b1b
 8003af0:	08003b1b 	.word	0x08003b1b
 8003af4:	08003b1b 	.word	0x08003b1b
 8003af8:	08003b13 	.word	0x08003b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003afc:	f7fe fb84 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8003b00:	61f8      	str	r0, [r7, #28]
        break;
 8003b02:	e010      	b.n	8003b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b04:	4b8f      	ldr	r3, [pc, #572]	; (8003d44 <UART_SetConfig+0x56c>)
 8003b06:	61fb      	str	r3, [r7, #28]
        break;
 8003b08:	e00d      	b.n	8003b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0a:	f7fe fae5 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003b0e:	61f8      	str	r0, [r7, #28]
        break;
 8003b10:	e009      	b.n	8003b26 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b16:	61fb      	str	r3, [r7, #28]
        break;
 8003b18:	e005      	b.n	8003b26 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80fb 	beq.w	8003d24 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	4413      	add	r3, r2
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d305      	bcc.n	8003b4a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d903      	bls.n	8003b52 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b50:	e0e8      	b.n	8003d24 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2200      	movs	r2, #0
 8003b56:	461c      	mov	r4, r3
 8003b58:	4615      	mov	r5, r2
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	022b      	lsls	r3, r5, #8
 8003b64:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b68:	0222      	lsls	r2, r4, #8
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	6849      	ldr	r1, [r1, #4]
 8003b6e:	0849      	lsrs	r1, r1, #1
 8003b70:	2000      	movs	r0, #0
 8003b72:	4688      	mov	r8, r1
 8003b74:	4681      	mov	r9, r0
 8003b76:	eb12 0a08 	adds.w	sl, r2, r8
 8003b7a:	eb43 0b09 	adc.w	fp, r3, r9
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b8c:	4650      	mov	r0, sl
 8003b8e:	4659      	mov	r1, fp
 8003b90:	f7fc fb6e 	bl	8000270 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4613      	mov	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba2:	d308      	bcc.n	8003bb6 <UART_SetConfig+0x3de>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003baa:	d204      	bcs.n	8003bb6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	e0b6      	b.n	8003d24 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bbc:	e0b2      	b.n	8003d24 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc6:	d15e      	bne.n	8003c86 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d828      	bhi.n	8003c22 <UART_SetConfig+0x44a>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x400>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c05 	.word	0x08003c05
 8003be0:	08003c0d 	.word	0x08003c0d
 8003be4:	08003c23 	.word	0x08003c23
 8003be8:	08003c13 	.word	0x08003c13
 8003bec:	08003c23 	.word	0x08003c23
 8003bf0:	08003c23 	.word	0x08003c23
 8003bf4:	08003c23 	.word	0x08003c23
 8003bf8:	08003c1b 	.word	0x08003c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f7fe fb04 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8003c00:	61f8      	str	r0, [r7, #28]
        break;
 8003c02:	e014      	b.n	8003c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7fe fb16 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8003c08:	61f8      	str	r0, [r7, #28]
        break;
 8003c0a:	e010      	b.n	8003c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c0c:	4b4d      	ldr	r3, [pc, #308]	; (8003d44 <UART_SetConfig+0x56c>)
 8003c0e:	61fb      	str	r3, [r7, #28]
        break;
 8003c10:	e00d      	b.n	8003c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c12:	f7fe fa61 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003c16:	61f8      	str	r0, [r7, #28]
        break;
 8003c18:	e009      	b.n	8003c2e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1e:	61fb      	str	r3, [r7, #28]
        break;
 8003c20:	e005      	b.n	8003c2e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d077      	beq.n	8003d24 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005a      	lsls	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	085b      	lsrs	r3, r3, #1
 8003c3e:	441a      	add	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b0f      	cmp	r3, #15
 8003c4e:	d916      	bls.n	8003c7e <UART_SetConfig+0x4a6>
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c56:	d212      	bcs.n	8003c7e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f023 030f 	bic.w	r3, r3, #15
 8003c60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	8afb      	ldrh	r3, [r7, #22]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	8afa      	ldrh	r2, [r7, #22]
 8003c7a:	60da      	str	r2, [r3, #12]
 8003c7c:	e052      	b.n	8003d24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c84:	e04e      	b.n	8003d24 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d827      	bhi.n	8003cde <UART_SetConfig+0x506>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x4bc>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cc1 	.word	0x08003cc1
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	08003cdf 	.word	0x08003cdf
 8003ca4:	08003ccf 	.word	0x08003ccf
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003cdf 	.word	0x08003cdf
 8003cb4:	08003cd7 	.word	0x08003cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb8:	f7fe faa6 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	61f8      	str	r0, [r7, #28]
        break;
 8003cbe:	e014      	b.n	8003cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7fe fab8 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8003cc4:	61f8      	str	r0, [r7, #28]
        break;
 8003cc6:	e010      	b.n	8003cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <UART_SetConfig+0x56c>)
 8003cca:	61fb      	str	r3, [r7, #28]
        break;
 8003ccc:	e00d      	b.n	8003cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cce:	f7fe fa03 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003cd2:	61f8      	str	r0, [r7, #28]
        break;
 8003cd4:	e009      	b.n	8003cea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cda:	61fb      	str	r3, [r7, #28]
        break;
 8003cdc:	e005      	b.n	8003cea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ce8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d019      	beq.n	8003d24 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	085a      	lsrs	r2, r3, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d909      	bls.n	8003d1e <UART_SetConfig+0x546>
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d205      	bcs.n	8003d1e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	e002      	b.n	8003d24 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	; 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d3e:	bf00      	nop
 8003d40:	40008000 	.word	0x40008000
 8003d44:	00f42400 	.word	0x00f42400

08003d48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01a      	beq.n	8003e5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e46:	d10a      	bne.n	8003e5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
  }
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b098      	sub	sp, #96	; 0x60
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e9c:	f7fd f914 	bl	80010c8 <HAL_GetTick>
 8003ea0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d12e      	bne.n	8003f0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f88c 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d021      	beq.n	8003f0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ede:	653b      	str	r3, [r7, #80]	; 0x50
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e6      	bne.n	8003eca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e062      	b.n	8003fd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d149      	bne.n	8003fb0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f24:	2200      	movs	r2, #0
 8003f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f856 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03c      	beq.n	8003fb0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	623b      	str	r3, [r7, #32]
   return(result);
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f54:	633b      	str	r3, [r7, #48]	; 0x30
 8003f56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f88:	61fa      	str	r2, [r7, #28]
 8003f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	69b9      	ldr	r1, [r7, #24]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	617b      	str	r3, [r7, #20]
   return(result);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e011      	b.n	8003fd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3758      	adds	r7, #88	; 0x58
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fec:	e049      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff4:	d045      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7fd f867 	bl	80010c8 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	429a      	cmp	r2, r3
 8004004:	d302      	bcc.n	800400c <UART_WaitOnFlagUntilTimeout+0x30>
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e048      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d031      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d110      	bne.n	800404e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2208      	movs	r2, #8
 8004032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f838 	bl	80040aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2208      	movs	r2, #8
 800403e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e029      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405c:	d111      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f81e 	bl	80040aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e00f      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4013      	ands	r3, r2
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	429a      	cmp	r2, r3
 8004090:	bf0c      	ite	eq
 8004092:	2301      	moveq	r3, #1
 8004094:	2300      	movne	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	429a      	cmp	r2, r3
 800409e:	d0a6      	beq.n	8003fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b095      	sub	sp, #84	; 0x54
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ba:	e853 3f00 	ldrex	r3, [r3]
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d0:	643b      	str	r3, [r7, #64]	; 0x40
 80040d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040d8:	e841 2300 	strex	r3, r2, [r1]
 80040dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1e6      	bne.n	80040b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800410a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	2b01      	cmp	r3, #1
 800411e:	d118      	bne.n	8004152 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	60bb      	str	r3, [r7, #8]
   return(result);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f023 0310 	bic.w	r3, r3, #16
 8004134:	647b      	str	r3, [r7, #68]	; 0x44
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	613b      	str	r3, [r7, #16]
   return(result);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e6      	bne.n	8004120 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004166:	bf00      	nop
 8004168:	3754      	adds	r7, #84	; 0x54
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <__NVIC_SetPriority>:
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	6039      	str	r1, [r7, #0]
 800417e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004184:	2b00      	cmp	r3, #0
 8004186:	db0a      	blt.n	800419e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	490c      	ldr	r1, [pc, #48]	; (80041c0 <__NVIC_SetPriority+0x4c>)
 800418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004192:	0112      	lsls	r2, r2, #4
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	440b      	add	r3, r1
 8004198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800419c:	e00a      	b.n	80041b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	4908      	ldr	r1, [pc, #32]	; (80041c4 <__NVIC_SetPriority+0x50>)
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	3b04      	subs	r3, #4
 80041ac:	0112      	lsls	r2, r2, #4
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	440b      	add	r3, r1
 80041b2:	761a      	strb	r2, [r3, #24]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000e100 	.word	0xe000e100
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <SysTick_Handler+0x1c>)
 80041ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80041d0:	f002 f8ce 	bl	8006370 <xTaskGetSchedulerState>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d001      	beq.n	80041de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80041da:	f002 ffb5 	bl	8007148 <xPortSysTickHandler>
  }
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	e000e010 	.word	0xe000e010

080041e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80041ec:	2100      	movs	r1, #0
 80041ee:	f06f 0004 	mvn.w	r0, #4
 80041f2:	f7ff ffbf 	bl	8004174 <__NVIC_SetPriority>
#endif
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004202:	f3ef 8305 	mrs	r3, IPSR
 8004206:	603b      	str	r3, [r7, #0]
  return(result);
 8004208:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800420e:	f06f 0305 	mvn.w	r3, #5
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	e00c      	b.n	8004230 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004216:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <osKernelInitialize+0x44>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d105      	bne.n	800422a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <osKernelInitialize+0x44>)
 8004220:	2201      	movs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004224:	2300      	movs	r3, #0
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	e002      	b.n	8004230 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800422a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800422e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004230:	687b      	ldr	r3, [r7, #4]
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	200001d8 	.word	0x200001d8

08004244 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800424a:	f3ef 8305 	mrs	r3, IPSR
 800424e:	603b      	str	r3, [r7, #0]
  return(result);
 8004250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004256:	f06f 0305 	mvn.w	r3, #5
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	e010      	b.n	8004280 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <osKernelStart+0x48>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d109      	bne.n	800427a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004266:	f7ff ffbf 	bl	80041e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <osKernelStart+0x48>)
 800426c:	2202      	movs	r2, #2
 800426e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004270:	f001 fc10 	bl	8005a94 <vTaskStartScheduler>
      stat = osOK;
 8004274:	2300      	movs	r3, #0
 8004276:	607b      	str	r3, [r7, #4]
 8004278:	e002      	b.n	8004280 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800427a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800427e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004280:	687b      	ldr	r3, [r7, #4]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200001d8 	.word	0x200001d8

08004290 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b08e      	sub	sp, #56	; 0x38
 8004294:	af04      	add	r7, sp, #16
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042a0:	f3ef 8305 	mrs	r3, IPSR
 80042a4:	617b      	str	r3, [r7, #20]
  return(result);
 80042a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d17e      	bne.n	80043aa <osThreadNew+0x11a>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d07b      	beq.n	80043aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80042b6:	2318      	movs	r3, #24
 80042b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d045      	beq.n	8004356 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <osThreadNew+0x48>
        name = attr->name;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <osThreadNew+0x6e>
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b38      	cmp	r3, #56	; 0x38
 80042f0:	d805      	bhi.n	80042fe <osThreadNew+0x6e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <osThreadNew+0x72>
        return (NULL);
 80042fe:	2300      	movs	r3, #0
 8004300:	e054      	b.n	80043ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00e      	beq.n	8004338 <osThreadNew+0xa8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2ba7      	cmp	r3, #167	; 0xa7
 8004320:	d90a      	bls.n	8004338 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <osThreadNew+0xa8>
        mem = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e010      	b.n	800435a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10c      	bne.n	800435a <osThreadNew+0xca>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <osThreadNew+0xca>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <osThreadNew+0xca>
          mem = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	e001      	b.n	800435a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d110      	bne.n	8004382 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004368:	9202      	str	r2, [sp, #8]
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	6a3a      	ldr	r2, [r7, #32]
 8004374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f001 f9a0 	bl	80056bc <xTaskCreateStatic>
 800437c:	4603      	mov	r3, r0
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	e013      	b.n	80043aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d110      	bne.n	80043aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	b29a      	uxth	r2, r3
 800438c:	f107 0310 	add.w	r3, r7, #16
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f001 f9eb 	bl	8005776 <xTaskCreate>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d001      	beq.n	80043aa <osThreadNew+0x11a>
            hTask = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043aa:	693b      	ldr	r3, [r7, #16]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3728      	adds	r7, #40	; 0x28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043bc:	f3ef 8305 	mrs	r3, IPSR
 80043c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <osDelay+0x1c>
    stat = osErrorISR;
 80043c8:	f06f 0305 	mvn.w	r3, #5
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	e007      	b.n	80043e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f001 fb26 	bl	8005a2c <vTaskDelay>
    }
  }

  return (stat);
 80043e0:	68fb      	ldr	r3, [r7, #12]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b088      	sub	sp, #32
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043f6:	f3ef 8305 	mrs	r3, IPSR
 80043fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80043fc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d174      	bne.n	80044ec <osMutexNew+0x102>
    if (attr != NULL) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e001      	b.n	8004414 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <osMutexNew+0x3a>
      rmtx = 1U;
 800441e:	2301      	movs	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	e001      	b.n	8004428 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d15c      	bne.n	80044ec <osMutexNew+0x102>
      mem = -1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004436:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d015      	beq.n	800446a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d006      	beq.n	8004454 <osMutexNew+0x6a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b4f      	cmp	r3, #79	; 0x4f
 800444c:	d902      	bls.n	8004454 <osMutexNew+0x6a>
          mem = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	e00c      	b.n	800446e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d108      	bne.n	800446e <osMutexNew+0x84>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d104      	bne.n	800446e <osMutexNew+0x84>
            mem = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e001      	b.n	800446e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800446a:	2300      	movs	r3, #0
 800446c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d112      	bne.n	800449a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	4619      	mov	r1, r3
 8004480:	2004      	movs	r0, #4
 8004482:	f000 fb8a 	bl	8004b9a <xQueueCreateMutexStatic>
 8004486:	61f8      	str	r0, [r7, #28]
 8004488:	e016      	b.n	80044b8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	4619      	mov	r1, r3
 8004490:	2001      	movs	r0, #1
 8004492:	f000 fb82 	bl	8004b9a <xQueueCreateMutexStatic>
 8004496:	61f8      	str	r0, [r7, #28]
 8004498:	e00e      	b.n	80044b8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10b      	bne.n	80044b8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80044a6:	2004      	movs	r0, #4
 80044a8:	f000 fb5f 	bl	8004b6a <xQueueCreateMutex>
 80044ac:	61f8      	str	r0, [r7, #28]
 80044ae:	e003      	b.n	80044b8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80044b0:	2001      	movs	r0, #1
 80044b2:	f000 fb5a 	bl	8004b6a <xQueueCreateMutex>
 80044b6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <osMutexNew+0xee>
        if (attr != NULL) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <osMutexNew+0xe2>
          name = attr->name;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e001      	b.n	80044d0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80044d0:	68f9      	ldr	r1, [r7, #12]
 80044d2:	69f8      	ldr	r0, [r7, #28]
 80044d4:	f001 f894 	bl	8005600 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <osMutexNew+0x102>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80044ec:	69fb      	ldr	r3, [r7, #28]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b086      	sub	sp, #24
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004514:	f3ef 8305 	mrs	r3, IPSR
 8004518:	60bb      	str	r3, [r7, #8]
  return(result);
 800451a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004520:	f06f 0305 	mvn.w	r3, #5
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e02c      	b.n	8004582 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800452e:	f06f 0303 	mvn.w	r3, #3
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e025      	b.n	8004582 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d011      	beq.n	8004560 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	6938      	ldr	r0, [r7, #16]
 8004540:	f000 fb7a 	bl	8004c38 <xQueueTakeMutexRecursive>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d01b      	beq.n	8004582 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004550:	f06f 0301 	mvn.w	r3, #1
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e014      	b.n	8004582 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004558:	f06f 0302 	mvn.w	r3, #2
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e010      	b.n	8004582 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004560:	6839      	ldr	r1, [r7, #0]
 8004562:	6938      	ldr	r0, [r7, #16]
 8004564:	f000 fe18 	bl	8005198 <xQueueSemaphoreTake>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d009      	beq.n	8004582 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004574:	f06f 0301 	mvn.w	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	e002      	b.n	8004582 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800457c:	f06f 0302 	mvn.w	r3, #2
 8004580:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004582:	697b      	ldr	r3, [r7, #20]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a8:	f3ef 8305 	mrs	r3, IPSR
 80045ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ae:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <osMutexRelease+0x30>
    stat = osErrorISR;
 80045b4:	f06f 0305 	mvn.w	r3, #5
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	e01f      	b.n	80045fc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80045c2:	f06f 0303 	mvn.w	r3, #3
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e018      	b.n	80045fc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80045d0:	6938      	ldr	r0, [r7, #16]
 80045d2:	f000 fafd 	bl	8004bd0 <xQueueGiveMutexRecursive>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d00f      	beq.n	80045fc <osMutexRelease+0x70>
        stat = osErrorResource;
 80045dc:	f06f 0302 	mvn.w	r3, #2
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e00b      	b.n	80045fc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80045e4:	2300      	movs	r3, #0
 80045e6:	2200      	movs	r2, #0
 80045e8:	2100      	movs	r1, #0
 80045ea:	6938      	ldr	r0, [r7, #16]
 80045ec:	f000 fb5a 	bl	8004ca4 <xQueueGenericSend>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d002      	beq.n	80045fc <osMutexRelease+0x70>
        stat = osErrorResource;
 80045f6:	f06f 0302 	mvn.w	r3, #2
 80045fa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80045fc:	697b      	ldr	r3, [r7, #20]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004606:	b580      	push	{r7, lr}
 8004608:	b08a      	sub	sp, #40	; 0x28
 800460a:	af02      	add	r7, sp, #8
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004616:	f3ef 8305 	mrs	r3, IPSR
 800461a:	613b      	str	r3, [r7, #16]
  return(result);
 800461c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800461e:	2b00      	cmp	r3, #0
 8004620:	d15f      	bne.n	80046e2 <osMessageQueueNew+0xdc>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d05c      	beq.n	80046e2 <osMessageQueueNew+0xdc>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d059      	beq.n	80046e2 <osMessageQueueNew+0xdc>
    mem = -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004632:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d029      	beq.n	800468e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <osMessageQueueNew+0x62>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2b4f      	cmp	r3, #79	; 0x4f
 8004648:	d90e      	bls.n	8004668 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	fb01 f303 	mul.w	r3, r1, r3
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <osMessageQueueNew+0x62>
        mem = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	e014      	b.n	8004692 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d110      	bne.n	8004692 <osMessageQueueNew+0x8c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10c      	bne.n	8004692 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800467c:	2b00      	cmp	r3, #0
 800467e:	d108      	bne.n	8004692 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <osMessageQueueNew+0x8c>
          mem = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e001      	b.n	8004692 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d10b      	bne.n	80046b0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2100      	movs	r1, #0
 80046a2:	9100      	str	r1, [sp, #0]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f970 	bl	800498c <xQueueGenericCreateStatic>
 80046ac:	61f8      	str	r0, [r7, #28]
 80046ae:	e008      	b.n	80046c2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d105      	bne.n	80046c2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80046b6:	2200      	movs	r2, #0
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f9de 	bl	8004a7c <xQueueGenericCreate>
 80046c0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00c      	beq.n	80046e2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e001      	b.n	80046da <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80046da:	6979      	ldr	r1, [r7, #20]
 80046dc:	69f8      	ldr	r0, [r7, #28]
 80046de:	f000 ff8f 	bl	8005600 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80046e2:	69fb      	ldr	r3, [r7, #28]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a07      	ldr	r2, [pc, #28]	; (8004718 <vApplicationGetIdleTaskMemory+0x2c>)
 80046fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4a06      	ldr	r2, [pc, #24]	; (800471c <vApplicationGetIdleTaskMemory+0x30>)
 8004702:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	601a      	str	r2, [r3, #0]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	200001dc 	.word	0x200001dc
 800471c:	20000284 	.word	0x20000284

08004720 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a07      	ldr	r2, [pc, #28]	; (800474c <vApplicationGetTimerTaskMemory+0x2c>)
 8004730:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4a06      	ldr	r2, [pc, #24]	; (8004750 <vApplicationGetTimerTaskMemory+0x30>)
 8004736:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800473e:	601a      	str	r2, [r3, #0]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	20000484 	.word	0x20000484
 8004750:	2000052c 	.word	0x2000052c

08004754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f103 0208 	add.w	r2, r3, #8
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800476c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f103 0208 	add.w	r2, r3, #8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f103 0208 	add.w	r2, r3, #8
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480c:	d103      	bne.n	8004816 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e00c      	b.n	8004830 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3308      	adds	r3, #8
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	e002      	b.n	8004824 <vListInsert+0x2e>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	d2f6      	bcs.n	800481e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	601a      	str	r2, [r3, #0]
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6892      	ldr	r2, [r2, #8]
 800487e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6852      	ldr	r2, [r2, #4]
 8004888:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d103      	bne.n	800489c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	1e5a      	subs	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048e6:	f002 fb9d 	bl	8007024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	441a      	add	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	3b01      	subs	r3, #1
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	441a      	add	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	22ff      	movs	r2, #255	; 0xff
 800492a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	22ff      	movs	r2, #255	; 0xff
 8004932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d114      	bne.n	8004966 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01a      	beq.n	800497a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3310      	adds	r3, #16
 8004948:	4618      	mov	r0, r3
 800494a:	f001 fb3d 	bl	8005fc8 <xTaskRemoveFromEventList>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d012      	beq.n	800497a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <xQueueGenericReset+0xcc>)
 8004956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	e009      	b.n	800497a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3310      	adds	r3, #16
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fef2 	bl	8004754 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3324      	adds	r3, #36	; 0x24
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff feed 	bl	8004754 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800497a:	f002 fb83 	bl	8007084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800497e:	2301      	movs	r3, #1
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08e      	sub	sp, #56	; 0x38
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10a      	bne.n	80049d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <xQueueGenericCreateStatic+0x52>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <xQueueGenericCreateStatic+0x56>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <xQueueGenericCreateStatic+0x58>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	623b      	str	r3, [r7, #32]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <xQueueGenericCreateStatic+0x7e>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <xQueueGenericCreateStatic+0x82>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <xQueueGenericCreateStatic+0x84>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	61fb      	str	r3, [r7, #28]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a2a:	2350      	movs	r3, #80	; 0x50
 8004a2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b50      	cmp	r3, #80	; 0x50
 8004a32:	d00a      	beq.n	8004a4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	61bb      	str	r3, [r7, #24]
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	4613      	mov	r3, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f83f 	bl	8004af0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3730      	adds	r7, #48	; 0x30
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	613b      	str	r3, [r7, #16]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	fb02 f303 	mul.w	r3, r2, r3
 8004aae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	3350      	adds	r3, #80	; 0x50
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f002 fbd7 	bl	8007268 <pvPortMalloc>
 8004aba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d011      	beq.n	8004ae6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	3350      	adds	r3, #80	; 0x50
 8004aca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ad4:	79fa      	ldrb	r2, [r7, #7]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	4613      	mov	r3, r2
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f805 	bl	8004af0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e002      	b.n	8004b12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b1e:	2101      	movs	r1, #1
 8004b20:	69b8      	ldr	r0, [r7, #24]
 8004b22:	f7ff fecb 	bl	80048bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00e      	beq.n	8004b62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004b56:	2300      	movs	r3, #0
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8a1 	bl	8004ca4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	4603      	mov	r3, r0
 8004b72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b74:	2301      	movs	r3, #1
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6939      	ldr	r1, [r7, #16]
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7ff ff7a 	bl	8004a7c <xQueueGenericCreate>
 8004b88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff ffd3 	bl	8004b36 <prvInitialiseMutex>

		return xNewQueue;
 8004b90:	68fb      	ldr	r3, [r7, #12]
	}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b088      	sub	sp, #32
 8004b9e:	af02      	add	r7, sp, #8
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	6039      	str	r1, [r7, #0]
 8004ba4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004bae:	79fb      	ldrb	r3, [r7, #7]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	6939      	ldr	r1, [r7, #16]
 8004bb8:	6978      	ldr	r0, [r7, #20]
 8004bba:	f7ff fee7 	bl	800498c <xQueueGenericCreateStatic>
 8004bbe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff ffb8 	bl	8004b36 <prvInitialiseMutex>

		return xNewQueue;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
	}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	60fb      	str	r3, [r7, #12]
}
 8004bf4:	bf00      	nop
 8004bf6:	e7fe      	b.n	8004bf6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	689c      	ldr	r4, [r3, #8]
 8004bfc:	f001 fba8 	bl	8006350 <xTaskGetCurrentTaskHandle>
 8004c00:	4603      	mov	r3, r0
 8004c02:	429c      	cmp	r4, r3
 8004c04:	d111      	bne.n	8004c2a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d105      	bne.n	8004c24 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	6938      	ldr	r0, [r7, #16]
 8004c20:	f000 f840 	bl	8004ca4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004c24:	2301      	movs	r3, #1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e001      	b.n	8004c2e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004c2e:	697b      	ldr	r3, [r7, #20]
	}
 8004c30:	4618      	mov	r0, r3
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd90      	pop	{r4, r7, pc}

08004c38 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	60fb      	str	r3, [r7, #12]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	689c      	ldr	r4, [r3, #8]
 8004c66:	f001 fb73 	bl	8006350 <xTaskGetCurrentTaskHandle>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	d107      	bne.n	8004c80 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e00c      	b.n	8004c9a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	6938      	ldr	r0, [r7, #16]
 8004c84:	f000 fa88 	bl	8005198 <xQueueSemaphoreTake>
 8004c88:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d004      	beq.n	8004c9a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004c9a:	697b      	ldr	r3, [r7, #20]
	}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd90      	pop	{r4, r7, pc}

08004ca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08e      	sub	sp, #56	; 0x38
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xQueueGenericSend+0x32>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <xQueueGenericSend+0x40>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <xQueueGenericSend+0x44>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <xQueueGenericSend+0x46>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <xQueueGenericSend+0x60>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d103      	bne.n	8004d12 <xQueueGenericSend+0x6e>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <xQueueGenericSend+0x72>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xQueueGenericSend+0x74>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	623b      	str	r3, [r7, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d32:	f001 fb1d 	bl	8006370 <xTaskGetSchedulerState>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <xQueueGenericSend+0x9e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <xQueueGenericSend+0xa2>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <xQueueGenericSend+0xa4>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xQueueGenericSend+0xbe>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	61fb      	str	r3, [r7, #28]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d62:	f002 f95f 	bl	8007024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d302      	bcc.n	8004d78 <xQueueGenericSend+0xd4>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d129      	bne.n	8004dcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d7e:	f000 fb2f 	bl	80053e0 <prvCopyDataToQueue>
 8004d82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d010      	beq.n	8004dae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	3324      	adds	r3, #36	; 0x24
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 f919 	bl	8005fc8 <xTaskRemoveFromEventList>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d013      	beq.n	8004dc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d9c:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <xQueueGenericSend+0x1f8>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	e00a      	b.n	8004dc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d007      	beq.n	8004dc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004db4:	4b39      	ldr	r3, [pc, #228]	; (8004e9c <xQueueGenericSend+0x1f8>)
 8004db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004dc4:	f002 f95e 	bl	8007084 <vPortExitCritical>
				return pdPASS;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e063      	b.n	8004e94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dd2:	f002 f957 	bl	8007084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e05c      	b.n	8004e94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 f953 	bl	8006090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dea:	2301      	movs	r3, #1
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dee:	f002 f949 	bl	8007084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004df2:	f000 febf 	bl	8005b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004df6:	f002 f915 	bl	8007024 <vPortEnterCritical>
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e06:	d103      	bne.n	8004e10 <xQueueGenericSend+0x16c>
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e1c:	d103      	bne.n	8004e26 <xQueueGenericSend+0x182>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e26:	f002 f92d 	bl	8007084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e2a:	1d3a      	adds	r2, r7, #4
 8004e2c:	f107 0314 	add.w	r3, r7, #20
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 f942 	bl	80060bc <xTaskCheckForTimeOut>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d124      	bne.n	8004e88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e40:	f000 fbc6 	bl	80055d0 <prvIsQueueFull>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d018      	beq.n	8004e7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	3310      	adds	r3, #16
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f001 f868 	bl	8005f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e5a:	f000 fb51 	bl	8005500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e5e:	f000 fe97 	bl	8005b90 <xTaskResumeAll>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f47f af7c 	bne.w	8004d62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <xQueueGenericSend+0x1f8>)
 8004e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	e772      	b.n	8004d62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e7e:	f000 fb3f 	bl	8005500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e82:	f000 fe85 	bl	8005b90 <xTaskResumeAll>
 8004e86:	e76c      	b.n	8004d62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8a:	f000 fb39 	bl	8005500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e8e:	f000 fe7f 	bl	8005b90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3738      	adds	r7, #56	; 0x38
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	e000ed04 	.word	0xe000ed04

08004ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b090      	sub	sp, #64	; 0x40
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eca:	bf00      	nop
 8004ecc:	e7fe      	b.n	8004ecc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <xQueueGenericSendFromISR+0x3c>
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <xQueueGenericSendFromISR+0x40>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <xQueueGenericSendFromISR+0x42>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d103      	bne.n	8004f0a <xQueueGenericSendFromISR+0x6a>
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <xQueueGenericSendFromISR+0x6e>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <xQueueGenericSendFromISR+0x70>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10a      	bne.n	8004f2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	623b      	str	r3, [r7, #32]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f2a:	f002 f95d 	bl	80071e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	61fa      	str	r2, [r7, #28]
 8004f44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <xQueueGenericSendFromISR+0xbc>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d12f      	bne.n	8004fbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f72:	f000 fa35 	bl	80053e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f7e:	d112      	bne.n	8004fa6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d016      	beq.n	8004fb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	3324      	adds	r3, #36	; 0x24
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 f81b 	bl	8005fc8 <xTaskRemoveFromEventList>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e007      	b.n	8004fb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004faa:	3301      	adds	r3, #1
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	b25a      	sxtb	r2, r3
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004fba:	e001      	b.n	8004fc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3740      	adds	r7, #64	; 0x40
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	; 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <xQueueReceive+0x30>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	623b      	str	r3, [r7, #32]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <xQueueReceive+0x3e>
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <xQueueReceive+0x42>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <xQueueReceive+0x44>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <xQueueReceive+0x5e>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	61fb      	str	r3, [r7, #28]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005036:	f001 f99b 	bl	8006370 <xTaskGetSchedulerState>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d102      	bne.n	8005046 <xQueueReceive+0x6e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <xQueueReceive+0x72>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <xQueueReceive+0x74>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xQueueReceive+0x8e>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	61bb      	str	r3, [r7, #24]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005066:	f001 ffdd 	bl	8007024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01f      	beq.n	80050b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507a:	f000 fa1b 	bl	80054b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	1e5a      	subs	r2, r3, #1
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00f      	beq.n	80050ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	3310      	adds	r3, #16
 8005092:	4618      	mov	r0, r3
 8005094:	f000 ff98 	bl	8005fc8 <xTaskRemoveFromEventList>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800509e:	4b3d      	ldr	r3, [pc, #244]	; (8005194 <xQueueReceive+0x1bc>)
 80050a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ae:	f001 ffe9 	bl	8007084 <vPortExitCritical>
				return pdPASS;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e069      	b.n	800518a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050bc:	f001 ffe2 	bl	8007084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e062      	b.n	800518a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050ca:	f107 0310 	add.w	r3, r7, #16
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 ffde 	bl	8006090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d8:	f001 ffd4 	bl	8007084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050dc:	f000 fd4a 	bl	8005b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050e0:	f001 ffa0 	bl	8007024 <vPortEnterCritical>
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ea:	b25b      	sxtb	r3, r3
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050f0:	d103      	bne.n	80050fa <xQueueReceive+0x122>
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005100:	b25b      	sxtb	r3, r3
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005106:	d103      	bne.n	8005110 <xQueueReceive+0x138>
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005110:	f001 ffb8 	bl	8007084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005114:	1d3a      	adds	r2, r7, #4
 8005116:	f107 0310 	add.w	r3, r7, #16
 800511a:	4611      	mov	r1, r2
 800511c:	4618      	mov	r0, r3
 800511e:	f000 ffcd 	bl	80060bc <xTaskCheckForTimeOut>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d123      	bne.n	8005170 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800512a:	f000 fa3b 	bl	80055a4 <prvIsQueueEmpty>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d017      	beq.n	8005164 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	3324      	adds	r3, #36	; 0x24
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fef3 	bl	8005f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005144:	f000 f9dc 	bl	8005500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005148:	f000 fd22 	bl	8005b90 <xTaskResumeAll>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d189      	bne.n	8005066 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <xQueueReceive+0x1bc>)
 8005154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	e780      	b.n	8005066 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005166:	f000 f9cb 	bl	8005500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800516a:	f000 fd11 	bl	8005b90 <xTaskResumeAll>
 800516e:	e77a      	b.n	8005066 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005172:	f000 f9c5 	bl	8005500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005176:	f000 fd0b 	bl	8005b90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800517a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517c:	f000 fa12 	bl	80055a4 <prvIsQueueEmpty>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	f43f af6f 	beq.w	8005066 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800518a:	4618      	mov	r0, r3
 800518c:	3730      	adds	r7, #48	; 0x30
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08e      	sub	sp, #56	; 0x38
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	623b      	str	r3, [r7, #32]
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	61fb      	str	r3, [r7, #28]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051e8:	f001 f8c2 	bl	8006370 <xTaskGetSchedulerState>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d102      	bne.n	80051f8 <xQueueSemaphoreTake+0x60>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <xQueueSemaphoreTake+0x64>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <xQueueSemaphoreTake+0x66>
 80051fc:	2300      	movs	r3, #0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	61bb      	str	r3, [r7, #24]
}
 8005214:	bf00      	nop
 8005216:	e7fe      	b.n	8005216 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005218:	f001 ff04 	bl	8007024 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d024      	beq.n	8005272 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	1e5a      	subs	r2, r3, #1
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005238:	f001 fa10 	bl	800665c <pvTaskIncrementMutexHeldCount>
 800523c:	4602      	mov	r2, r0
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00f      	beq.n	800526a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	3310      	adds	r3, #16
 800524e:	4618      	mov	r0, r3
 8005250:	f000 feba 	bl	8005fc8 <xTaskRemoveFromEventList>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800525a:	4b54      	ldr	r3, [pc, #336]	; (80053ac <xQueueSemaphoreTake+0x214>)
 800525c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800526a:	f001 ff0b 	bl	8007084 <vPortExitCritical>
				return pdPASS;
 800526e:	2301      	movs	r3, #1
 8005270:	e097      	b.n	80053a2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d111      	bne.n	800529c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	617b      	str	r3, [r7, #20]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005294:	f001 fef6 	bl	8007084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005298:	2300      	movs	r3, #0
 800529a:	e082      	b.n	80053a2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052a2:	f107 030c 	add.w	r3, r7, #12
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fef2 	bl	8006090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052ac:	2301      	movs	r3, #1
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052b0:	f001 fee8 	bl	8007084 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052b4:	f000 fc5e 	bl	8005b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052b8:	f001 feb4 	bl	8007024 <vPortEnterCritical>
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052c2:	b25b      	sxtb	r3, r3
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c8:	d103      	bne.n	80052d2 <xQueueSemaphoreTake+0x13a>
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d8:	b25b      	sxtb	r3, r3
 80052da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052de:	d103      	bne.n	80052e8 <xQueueSemaphoreTake+0x150>
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052e8:	f001 fecc 	bl	8007084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052ec:	463a      	mov	r2, r7
 80052ee:	f107 030c 	add.w	r3, r7, #12
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fee1 	bl	80060bc <xTaskCheckForTimeOut>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d132      	bne.n	8005366 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005302:	f000 f94f 	bl	80055a4 <prvIsQueueEmpty>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d026      	beq.n	800535a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005314:	f001 fe86 	bl	8007024 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4618      	mov	r0, r3
 800531e:	f001 f845 	bl	80063ac <xTaskPriorityInherit>
 8005322:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005324:	f001 feae 	bl	8007084 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	3324      	adds	r3, #36	; 0x24
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	4611      	mov	r1, r2
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fdf9 	bl	8005f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005336:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005338:	f000 f8e2 	bl	8005500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800533c:	f000 fc28 	bl	8005b90 <xTaskResumeAll>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	f47f af68 	bne.w	8005218 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005348:	4b18      	ldr	r3, [pc, #96]	; (80053ac <xQueueSemaphoreTake+0x214>)
 800534a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	e75e      	b.n	8005218 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800535a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800535c:	f000 f8d0 	bl	8005500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005360:	f000 fc16 	bl	8005b90 <xTaskResumeAll>
 8005364:	e758      	b.n	8005218 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005368:	f000 f8ca 	bl	8005500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800536c:	f000 fc10 	bl	8005b90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005372:	f000 f917 	bl	80055a4 <prvIsQueueEmpty>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	f43f af4d 	beq.w	8005218 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00d      	beq.n	80053a0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005384:	f001 fe4e 	bl	8007024 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005388:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800538a:	f000 f811 	bl	80053b0 <prvGetDisinheritPriorityAfterTimeout>
 800538e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005396:	4618      	mov	r0, r3
 8005398:	f001 f8de 	bl	8006558 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800539c:	f001 fe72 	bl	8007084 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3738      	adds	r7, #56	; 0x38
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	e000ed04 	.word	0xe000ed04

080053b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d006      	beq.n	80053ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e001      	b.n	80053d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80053d2:	68fb      	ldr	r3, [r7, #12]
	}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10d      	bne.n	800541a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d14d      	bne.n	80054a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f001 f836 	bl	800647c <xTaskPriorityDisinherit>
 8005410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	e043      	b.n	80054a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d119      	bne.n	8005454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6858      	ldr	r0, [r3, #4]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	461a      	mov	r2, r3
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	f002 f9b0 	bl	8007790 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	441a      	add	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	429a      	cmp	r2, r3
 8005448:	d32b      	bcc.n	80054a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	e026      	b.n	80054a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68d8      	ldr	r0, [r3, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	461a      	mov	r2, r3
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	f002 f996 	bl	8007790 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	425b      	negs	r3, r3
 800546e:	441a      	add	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d207      	bcs.n	8005490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	425b      	negs	r3, r3
 800548a:	441a      	add	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d105      	bne.n	80054a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	3b01      	subs	r3, #1
 80054a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054aa:	697b      	ldr	r3, [r7, #20]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	441a      	add	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d303      	bcc.n	80054e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68d9      	ldr	r1, [r3, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	461a      	mov	r2, r3
 80054f2:	6838      	ldr	r0, [r7, #0]
 80054f4:	f002 f94c 	bl	8007790 <memcpy>
	}
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005508:	f001 fd8c 	bl	8007024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005514:	e011      	b.n	800553a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d012      	beq.n	8005544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3324      	adds	r3, #36	; 0x24
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fd50 	bl	8005fc8 <xTaskRemoveFromEventList>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800552e:	f000 fe27 	bl	8006180 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	3b01      	subs	r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800553a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800553e:	2b00      	cmp	r3, #0
 8005540:	dce9      	bgt.n	8005516 <prvUnlockQueue+0x16>
 8005542:	e000      	b.n	8005546 <prvUnlockQueue+0x46>
					break;
 8005544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800554e:	f001 fd99 	bl	8007084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005552:	f001 fd67 	bl	8007024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800555c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800555e:	e011      	b.n	8005584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3310      	adds	r3, #16
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fd2b 	bl	8005fc8 <xTaskRemoveFromEventList>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005578:	f000 fe02 	bl	8006180 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	3b01      	subs	r3, #1
 8005580:	b2db      	uxtb	r3, r3
 8005582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005588:	2b00      	cmp	r3, #0
 800558a:	dce9      	bgt.n	8005560 <prvUnlockQueue+0x60>
 800558c:	e000      	b.n	8005590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800558e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	22ff      	movs	r2, #255	; 0xff
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005598:	f001 fd74 	bl	8007084 <vPortExitCritical>
}
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055ac:	f001 fd3a 	bl	8007024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e001      	b.n	80055c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055c2:	f001 fd5f 	bl	8007084 <vPortExitCritical>

	return xReturn;
 80055c6:	68fb      	ldr	r3, [r7, #12]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055d8:	f001 fd24 	bl	8007024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d102      	bne.n	80055ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e001      	b.n	80055f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055f2:	f001 fd47 	bl	8007084 <vPortExitCritical>

	return xReturn;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e014      	b.n	800563a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005610:	4a0f      	ldr	r2, [pc, #60]	; (8005650 <vQueueAddToRegistry+0x50>)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800561c:	490c      	ldr	r1, [pc, #48]	; (8005650 <vQueueAddToRegistry+0x50>)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005626:	4a0a      	ldr	r2, [pc, #40]	; (8005650 <vQueueAddToRegistry+0x50>)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	4413      	add	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005632:	e006      	b.n	8005642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3301      	adds	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b07      	cmp	r3, #7
 800563e:	d9e7      	bls.n	8005610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005640:	bf00      	nop
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	2000092c 	.word	0x2000092c

08005654 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005664:	f001 fcde 	bl	8007024 <vPortEnterCritical>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800566e:	b25b      	sxtb	r3, r3
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005674:	d103      	bne.n	800567e <vQueueWaitForMessageRestricted+0x2a>
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005684:	b25b      	sxtb	r3, r3
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800568a:	d103      	bne.n	8005694 <vQueueWaitForMessageRestricted+0x40>
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005694:	f001 fcf6 	bl	8007084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d106      	bne.n	80056ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3324      	adds	r3, #36	; 0x24
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fc61 	bl	8005f70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056ae:	6978      	ldr	r0, [r7, #20]
 80056b0:	f7ff ff26 	bl	8005500 <prvUnlockQueue>
	}
 80056b4:	bf00      	nop
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08e      	sub	sp, #56	; 0x38
 80056c0:	af04      	add	r7, sp, #16
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	623b      	str	r3, [r7, #32]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <xTaskCreateStatic+0x46>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	61fb      	str	r3, [r7, #28]
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005702:	23a8      	movs	r3, #168	; 0xa8
 8005704:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2ba8      	cmp	r3, #168	; 0xa8
 800570a:	d00a      	beq.n	8005722 <xTaskCreateStatic+0x66>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	61bb      	str	r3, [r7, #24]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005722:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01e      	beq.n	8005768 <xTaskCreateStatic+0xac>
 800572a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01b      	beq.n	8005768 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005738:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	2202      	movs	r2, #2
 800573e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005742:	2300      	movs	r3, #0
 8005744:	9303      	str	r3, [sp, #12]
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	9302      	str	r3, [sp, #8]
 800574a:	f107 0314 	add.w	r3, r7, #20
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f850 	bl	8005800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005762:	f000 f8f3 	bl	800594c <prvAddNewTaskToReadyList>
 8005766:	e001      	b.n	800576c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800576c:	697b      	ldr	r3, [r7, #20]
	}
 800576e:	4618      	mov	r0, r3
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005776:	b580      	push	{r7, lr}
 8005778:	b08c      	sub	sp, #48	; 0x30
 800577a:	af04      	add	r7, sp, #16
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4618      	mov	r0, r3
 800578c:	f001 fd6c 	bl	8007268 <pvPortMalloc>
 8005790:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005798:	20a8      	movs	r0, #168	; 0xa8
 800579a:	f001 fd65 	bl	8007268 <pvPortMalloc>
 800579e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
 80057ac:	e005      	b.n	80057ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f001 fe26 	bl	8007400 <vPortFree>
 80057b4:	e001      	b.n	80057ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d017      	beq.n	80057f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	2300      	movs	r3, #0
 80057cc:	9303      	str	r3, [sp, #12]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f80e 	bl	8005800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057e4:	69f8      	ldr	r0, [r7, #28]
 80057e6:	f000 f8b1 	bl	800594c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	e002      	b.n	80057f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057f6:	69bb      	ldr	r3, [r7, #24]
	}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	461a      	mov	r2, r3
 8005818:	21a5      	movs	r1, #165	; 0xa5
 800581a:	f001 ff2f 	bl	800767c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005828:	3b01      	subs	r3, #1
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f023 0307 	bic.w	r3, r3, #7
 8005836:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	617b      	str	r3, [r7, #20]
}
 8005854:	bf00      	nop
 8005856:	e7fe      	b.n	8005856 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01f      	beq.n	800589e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	e012      	b.n	800588a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	7819      	ldrb	r1, [r3, #0]
 800586c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	3334      	adds	r3, #52	; 0x34
 8005874:	460a      	mov	r2, r1
 8005876:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d006      	beq.n	8005892 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3301      	adds	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	2b0f      	cmp	r3, #15
 800588e:	d9e9      	bls.n	8005864 <prvInitialiseNewTask+0x64>
 8005890:	e000      	b.n	8005894 <prvInitialiseNewTask+0x94>
			{
				break;
 8005892:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800589c:	e003      	b.n	80058a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	2b37      	cmp	r3, #55	; 0x37
 80058aa:	d901      	bls.n	80058b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058ac:	2337      	movs	r3, #55	; 0x37
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	2200      	movs	r2, #0
 80058c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	3304      	adds	r3, #4
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe ff64 	bl	8004794 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	3318      	adds	r3, #24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe ff5f 	bl	8004794 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	3354      	adds	r3, #84	; 0x54
 8005900:	224c      	movs	r2, #76	; 0x4c
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f001 feb9 	bl	800767c <memset>
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <prvInitialiseNewTask+0x140>)
 800590e:	659a      	str	r2, [r3, #88]	; 0x58
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <prvInitialiseNewTask+0x144>)
 8005914:	65da      	str	r2, [r3, #92]	; 0x5c
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	4a0b      	ldr	r2, [pc, #44]	; (8005948 <prvInitialiseNewTask+0x148>)
 800591a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	69b8      	ldr	r0, [r7, #24]
 8005922:	f001 fa51 	bl	8006dc8 <pxPortInitialiseStack>
 8005926:	4602      	mov	r2, r0
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005936:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005938:	bf00      	nop
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20002b18 	.word	0x20002b18
 8005944:	20002b80 	.word	0x20002b80
 8005948:	20002be8 	.word	0x20002be8

0800594c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005954:	f001 fb66 	bl	8007024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005958:	4b2d      	ldr	r3, [pc, #180]	; (8005a10 <prvAddNewTaskToReadyList+0xc4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3301      	adds	r3, #1
 800595e:	4a2c      	ldr	r2, [pc, #176]	; (8005a10 <prvAddNewTaskToReadyList+0xc4>)
 8005960:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005962:	4b2c      	ldr	r3, [pc, #176]	; (8005a14 <prvAddNewTaskToReadyList+0xc8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800596a:	4a2a      	ldr	r2, [pc, #168]	; (8005a14 <prvAddNewTaskToReadyList+0xc8>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005970:	4b27      	ldr	r3, [pc, #156]	; (8005a10 <prvAddNewTaskToReadyList+0xc4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d110      	bne.n	800599a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005978:	f000 fc28 	bl	80061cc <prvInitialiseTaskLists>
 800597c:	e00d      	b.n	800599a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800597e:	4b26      	ldr	r3, [pc, #152]	; (8005a18 <prvAddNewTaskToReadyList+0xcc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005986:	4b23      	ldr	r3, [pc, #140]	; (8005a14 <prvAddNewTaskToReadyList+0xc8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	429a      	cmp	r2, r3
 8005992:	d802      	bhi.n	800599a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005994:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <prvAddNewTaskToReadyList+0xc8>)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <prvAddNewTaskToReadyList+0xd0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3301      	adds	r3, #1
 80059a0:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <prvAddNewTaskToReadyList+0xd0>)
 80059a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059a4:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <prvAddNewTaskToReadyList+0xd0>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <prvAddNewTaskToReadyList+0xd4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d903      	bls.n	80059c0 <prvAddNewTaskToReadyList+0x74>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	4a18      	ldr	r2, [pc, #96]	; (8005a20 <prvAddNewTaskToReadyList+0xd4>)
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4a15      	ldr	r2, [pc, #84]	; (8005a24 <prvAddNewTaskToReadyList+0xd8>)
 80059ce:	441a      	add	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f7fe fee9 	bl	80047ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059dc:	f001 fb52 	bl	8007084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059e0:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <prvAddNewTaskToReadyList+0xcc>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00e      	beq.n	8005a06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <prvAddNewTaskToReadyList+0xc8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d207      	bcs.n	8005a06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <prvAddNewTaskToReadyList+0xdc>)
 80059f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000e40 	.word	0x20000e40
 8005a14:	2000096c 	.word	0x2000096c
 8005a18:	20000e4c 	.word	0x20000e4c
 8005a1c:	20000e5c 	.word	0x20000e5c
 8005a20:	20000e48 	.word	0x20000e48
 8005a24:	20000970 	.word	0x20000970
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d017      	beq.n	8005a6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <vTaskDelay+0x60>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <vTaskDelay+0x30>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60bb      	str	r3, [r7, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a5c:	f000 f88a 	bl	8005b74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a60:	2100      	movs	r1, #0
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fe0e 	bl	8006684 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a68:	f000 f892 	bl	8005b90 <xTaskResumeAll>
 8005a6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d107      	bne.n	8005a84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <vTaskDelay+0x64>)
 8005a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20000e68 	.word	0x20000e68
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aa2:	463a      	mov	r2, r7
 8005aa4:	1d39      	adds	r1, r7, #4
 8005aa6:	f107 0308 	add.w	r3, r7, #8
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe fe1e 	bl	80046ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	9202      	str	r2, [sp, #8]
 8005ab8:	9301      	str	r3, [sp, #4]
 8005aba:	2300      	movs	r3, #0
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	4924      	ldr	r1, [pc, #144]	; (8005b54 <vTaskStartScheduler+0xc0>)
 8005ac4:	4824      	ldr	r0, [pc, #144]	; (8005b58 <vTaskStartScheduler+0xc4>)
 8005ac6:	f7ff fdf9 	bl	80056bc <xTaskCreateStatic>
 8005aca:	4603      	mov	r3, r0
 8005acc:	4a23      	ldr	r2, [pc, #140]	; (8005b5c <vTaskStartScheduler+0xc8>)
 8005ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ad0:	4b22      	ldr	r3, [pc, #136]	; (8005b5c <vTaskStartScheduler+0xc8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e001      	b.n	8005ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d102      	bne.n	8005aee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ae8:	f000 fe20 	bl	800672c <xTimerCreateTimerTask>
 8005aec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d11b      	bne.n	8005b2c <vTaskStartScheduler+0x98>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	613b      	str	r3, [r7, #16]
}
 8005b06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <vTaskStartScheduler+0xcc>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3354      	adds	r3, #84	; 0x54
 8005b0e:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <vTaskStartScheduler+0xd0>)
 8005b10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <vTaskStartScheduler+0xd4>)
 8005b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <vTaskStartScheduler+0xd8>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b20:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <vTaskStartScheduler+0xdc>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b26:	f001 f9db 	bl	8006ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b2a:	e00e      	b.n	8005b4a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b32:	d10a      	bne.n	8005b4a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60fb      	str	r3, [r7, #12]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <vTaskStartScheduler+0xb4>
}
 8005b4a:	bf00      	nop
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	08008114 	.word	0x08008114
 8005b58:	08006199 	.word	0x08006199
 8005b5c:	20000e64 	.word	0x20000e64
 8005b60:	2000096c 	.word	0x2000096c
 8005b64:	20000070 	.word	0x20000070
 8005b68:	20000e60 	.word	0x20000e60
 8005b6c:	20000e4c 	.word	0x20000e4c
 8005b70:	20000e44 	.word	0x20000e44

08005b74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b78:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <vTaskSuspendAll+0x18>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	4a03      	ldr	r2, [pc, #12]	; (8005b8c <vTaskSuspendAll+0x18>)
 8005b80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b82:	bf00      	nop
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000e68 	.word	0x20000e68

08005b90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b9e:	4b42      	ldr	r3, [pc, #264]	; (8005ca8 <xTaskResumeAll+0x118>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <xTaskResumeAll+0x2c>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	603b      	str	r3, [r7, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	e7fe      	b.n	8005bba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bbc:	f001 fa32 	bl	8007024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bc0:	4b39      	ldr	r3, [pc, #228]	; (8005ca8 <xTaskResumeAll+0x118>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	4a38      	ldr	r2, [pc, #224]	; (8005ca8 <xTaskResumeAll+0x118>)
 8005bc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bca:	4b37      	ldr	r3, [pc, #220]	; (8005ca8 <xTaskResumeAll+0x118>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d162      	bne.n	8005c98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bd2:	4b36      	ldr	r3, [pc, #216]	; (8005cac <xTaskResumeAll+0x11c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d05e      	beq.n	8005c98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bda:	e02f      	b.n	8005c3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bdc:	4b34      	ldr	r3, [pc, #208]	; (8005cb0 <xTaskResumeAll+0x120>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3318      	adds	r3, #24
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe fe3d 	bl	8004868 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fe38 	bl	8004868 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfc:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <xTaskResumeAll+0x124>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d903      	bls.n	8005c0c <xTaskResumeAll+0x7c>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	4a2a      	ldr	r2, [pc, #168]	; (8005cb4 <xTaskResumeAll+0x124>)
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4a27      	ldr	r2, [pc, #156]	; (8005cb8 <xTaskResumeAll+0x128>)
 8005c1a:	441a      	add	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f7fe fdc3 	bl	80047ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <xTaskResumeAll+0x12c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d302      	bcc.n	8005c3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c36:	4b22      	ldr	r3, [pc, #136]	; (8005cc0 <xTaskResumeAll+0x130>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c3c:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <xTaskResumeAll+0x120>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1cb      	bne.n	8005bdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c4a:	f000 fb61 	bl	8006310 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c4e:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <xTaskResumeAll+0x134>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d010      	beq.n	8005c7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c5a:	f000 f847 	bl	8005cec <xTaskIncrementTick>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c64:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <xTaskResumeAll+0x130>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f1      	bne.n	8005c5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <xTaskResumeAll+0x134>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c7c:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <xTaskResumeAll+0x130>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d009      	beq.n	8005c98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c84:	2301      	movs	r3, #1
 8005c86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c88:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <xTaskResumeAll+0x138>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c98:	f001 f9f4 	bl	8007084 <vPortExitCritical>

	return xAlreadyYielded;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000e68 	.word	0x20000e68
 8005cac:	20000e40 	.word	0x20000e40
 8005cb0:	20000e00 	.word	0x20000e00
 8005cb4:	20000e48 	.word	0x20000e48
 8005cb8:	20000970 	.word	0x20000970
 8005cbc:	2000096c 	.word	0x2000096c
 8005cc0:	20000e54 	.word	0x20000e54
 8005cc4:	20000e50 	.word	0x20000e50
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cd2:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <xTaskGetTickCount+0x1c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cd8:	687b      	ldr	r3, [r7, #4]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20000e44 	.word	0x20000e44

08005cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf6:	4b4f      	ldr	r3, [pc, #316]	; (8005e34 <xTaskIncrementTick+0x148>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f040 808f 	bne.w	8005e1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d00:	4b4d      	ldr	r3, [pc, #308]	; (8005e38 <xTaskIncrementTick+0x14c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d08:	4a4b      	ldr	r2, [pc, #300]	; (8005e38 <xTaskIncrementTick+0x14c>)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d120      	bne.n	8005d56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d14:	4b49      	ldr	r3, [pc, #292]	; (8005e3c <xTaskIncrementTick+0x150>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	603b      	str	r3, [r7, #0]
}
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <xTaskIncrementTick+0x46>
 8005d34:	4b41      	ldr	r3, [pc, #260]	; (8005e3c <xTaskIncrementTick+0x150>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	4b41      	ldr	r3, [pc, #260]	; (8005e40 <xTaskIncrementTick+0x154>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a3f      	ldr	r2, [pc, #252]	; (8005e3c <xTaskIncrementTick+0x150>)
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	4a3f      	ldr	r2, [pc, #252]	; (8005e40 <xTaskIncrementTick+0x154>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	4b3e      	ldr	r3, [pc, #248]	; (8005e44 <xTaskIncrementTick+0x158>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	4a3d      	ldr	r2, [pc, #244]	; (8005e44 <xTaskIncrementTick+0x158>)
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	f000 fadd 	bl	8006310 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d56:	4b3c      	ldr	r3, [pc, #240]	; (8005e48 <xTaskIncrementTick+0x15c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d349      	bcc.n	8005df4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d60:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <xTaskIncrementTick+0x150>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d6a:	4b37      	ldr	r3, [pc, #220]	; (8005e48 <xTaskIncrementTick+0x15c>)
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d70:	601a      	str	r2, [r3, #0]
					break;
 8005d72:	e03f      	b.n	8005df4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d74:	4b31      	ldr	r3, [pc, #196]	; (8005e3c <xTaskIncrementTick+0x150>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d203      	bcs.n	8005d94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d8c:	4a2e      	ldr	r2, [pc, #184]	; (8005e48 <xTaskIncrementTick+0x15c>)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d92:	e02f      	b.n	8005df4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fe fd65 	bl	8004868 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	3318      	adds	r3, #24
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fe fd5c 	bl	8004868 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db4:	4b25      	ldr	r3, [pc, #148]	; (8005e4c <xTaskIncrementTick+0x160>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d903      	bls.n	8005dc4 <xTaskIncrementTick+0xd8>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	4a22      	ldr	r2, [pc, #136]	; (8005e4c <xTaskIncrementTick+0x160>)
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <xTaskIncrementTick+0x164>)
 8005dd2:	441a      	add	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f7fe fce7 	bl	80047ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4b1b      	ldr	r3, [pc, #108]	; (8005e54 <xTaskIncrementTick+0x168>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d3b8      	bcc.n	8005d60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005dee:	2301      	movs	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005df2:	e7b5      	b.n	8005d60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005df4:	4b17      	ldr	r3, [pc, #92]	; (8005e54 <xTaskIncrementTick+0x168>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfa:	4915      	ldr	r1, [pc, #84]	; (8005e50 <xTaskIncrementTick+0x164>)
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d901      	bls.n	8005e10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e10:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <xTaskIncrementTick+0x16c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e004      	b.n	8005e28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <xTaskIncrementTick+0x170>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3301      	adds	r3, #1
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <xTaskIncrementTick+0x170>)
 8005e26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e28:	697b      	ldr	r3, [r7, #20]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000e68 	.word	0x20000e68
 8005e38:	20000e44 	.word	0x20000e44
 8005e3c:	20000df8 	.word	0x20000df8
 8005e40:	20000dfc 	.word	0x20000dfc
 8005e44:	20000e58 	.word	0x20000e58
 8005e48:	20000e60 	.word	0x20000e60
 8005e4c:	20000e48 	.word	0x20000e48
 8005e50:	20000970 	.word	0x20000970
 8005e54:	2000096c 	.word	0x2000096c
 8005e58:	20000e54 	.word	0x20000e54
 8005e5c:	20000e50 	.word	0x20000e50

08005e60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e66:	4b2a      	ldr	r3, [pc, #168]	; (8005f10 <vTaskSwitchContext+0xb0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e6e:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <vTaskSwitchContext+0xb4>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e74:	e046      	b.n	8005f04 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <vTaskSwitchContext+0xb4>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e7c:	4b26      	ldr	r3, [pc, #152]	; (8005f18 <vTaskSwitchContext+0xb8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e010      	b.n	8005ea6 <vTaskSwitchContext+0x46>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	607b      	str	r3, [r7, #4]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <vTaskSwitchContext+0x3e>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	491d      	ldr	r1, [pc, #116]	; (8005f1c <vTaskSwitchContext+0xbc>)
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0e4      	beq.n	8005e84 <vTaskSwitchContext+0x24>
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4a15      	ldr	r2, [pc, #84]	; (8005f1c <vTaskSwitchContext+0xbc>)
 8005ec6:	4413      	add	r3, r2
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	605a      	str	r2, [r3, #4]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	3308      	adds	r3, #8
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d104      	bne.n	8005eea <vTaskSwitchContext+0x8a>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4a0b      	ldr	r2, [pc, #44]	; (8005f20 <vTaskSwitchContext+0xc0>)
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	4a08      	ldr	r2, [pc, #32]	; (8005f18 <vTaskSwitchContext+0xb8>)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005efa:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <vTaskSwitchContext+0xc0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3354      	adds	r3, #84	; 0x54
 8005f00:	4a08      	ldr	r2, [pc, #32]	; (8005f24 <vTaskSwitchContext+0xc4>)
 8005f02:	6013      	str	r3, [r2, #0]
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	20000e68 	.word	0x20000e68
 8005f14:	20000e54 	.word	0x20000e54
 8005f18:	20000e48 	.word	0x20000e48
 8005f1c:	20000970 	.word	0x20000970
 8005f20:	2000096c 	.word	0x2000096c
 8005f24:	20000070 	.word	0x20000070

08005f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	60fb      	str	r3, [r7, #12]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <vTaskPlaceOnEventList+0x44>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3318      	adds	r3, #24
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fe fc4d 	bl	80047f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	6838      	ldr	r0, [r7, #0]
 8005f60:	f000 fb90 	bl	8006684 <prvAddCurrentTaskToDelayedList>
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	2000096c 	.word	0x2000096c

08005f70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	617b      	str	r3, [r7, #20]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3318      	adds	r3, #24
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7fe fc04 	bl	80047ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68b8      	ldr	r0, [r7, #8]
 8005fb6:	f000 fb65 	bl	8006684 <prvAddCurrentTaskToDelayedList>
	}
 8005fba:	bf00      	nop
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	2000096c 	.word	0x2000096c

08005fc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	60fb      	str	r3, [r7, #12]
}
 8005ff0:	bf00      	nop
 8005ff2:	e7fe      	b.n	8005ff2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	3318      	adds	r3, #24
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe fc35 	bl	8004868 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ffe:	4b1e      	ldr	r3, [pc, #120]	; (8006078 <xTaskRemoveFromEventList+0xb0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d11d      	bne.n	8006042 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3304      	adds	r3, #4
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fc2c 	bl	8004868 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4b19      	ldr	r3, [pc, #100]	; (800607c <xTaskRemoveFromEventList+0xb4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d903      	bls.n	8006024 <xTaskRemoveFromEventList+0x5c>
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	4a16      	ldr	r2, [pc, #88]	; (800607c <xTaskRemoveFromEventList+0xb4>)
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4a13      	ldr	r2, [pc, #76]	; (8006080 <xTaskRemoveFromEventList+0xb8>)
 8006032:	441a      	add	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f7fe fbb7 	bl	80047ae <vListInsertEnd>
 8006040:	e005      	b.n	800604e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	3318      	adds	r3, #24
 8006046:	4619      	mov	r1, r3
 8006048:	480e      	ldr	r0, [pc, #56]	; (8006084 <xTaskRemoveFromEventList+0xbc>)
 800604a:	f7fe fbb0 	bl	80047ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006052:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <xTaskRemoveFromEventList+0xc0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	429a      	cmp	r2, r3
 800605a:	d905      	bls.n	8006068 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <xTaskRemoveFromEventList+0xc4>)
 8006062:	2201      	movs	r2, #1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e001      	b.n	800606c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800606c:	697b      	ldr	r3, [r7, #20]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000e68 	.word	0x20000e68
 800607c:	20000e48 	.word	0x20000e48
 8006080:	20000970 	.word	0x20000970
 8006084:	20000e00 	.word	0x20000e00
 8006088:	2000096c 	.word	0x2000096c
 800608c:	20000e54 	.word	0x20000e54

08006090 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <vTaskInternalSetTimeOutState+0x24>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060a0:	4b05      	ldr	r3, [pc, #20]	; (80060b8 <vTaskInternalSetTimeOutState+0x28>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	605a      	str	r2, [r3, #4]
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20000e58 	.word	0x20000e58
 80060b8:	20000e44 	.word	0x20000e44

080060bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	613b      	str	r3, [r7, #16]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	60fb      	str	r3, [r7, #12]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060fe:	f000 ff91 	bl	8007024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006102:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <xTaskCheckForTimeOut+0xbc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800611a:	d102      	bne.n	8006122 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	e023      	b.n	800616a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b15      	ldr	r3, [pc, #84]	; (800617c <xTaskCheckForTimeOut+0xc0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d007      	beq.n	800613e <xTaskCheckForTimeOut+0x82>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e015      	b.n	800616a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	429a      	cmp	r2, r3
 8006146:	d20b      	bcs.n	8006160 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff ff9b 	bl	8006090 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	e004      	b.n	800616a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006166:	2301      	movs	r3, #1
 8006168:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800616a:	f000 ff8b 	bl	8007084 <vPortExitCritical>

	return xReturn;
 800616e:	69fb      	ldr	r3, [r7, #28]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3720      	adds	r7, #32
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	20000e44 	.word	0x20000e44
 800617c:	20000e58 	.word	0x20000e58

08006180 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006184:	4b03      	ldr	r3, [pc, #12]	; (8006194 <vTaskMissedYield+0x14>)
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]
}
 800618a:	bf00      	nop
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	20000e54 	.word	0x20000e54

08006198 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061a0:	f000 f854 	bl	800624c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061a4:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <prvIdleTask+0x2c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d907      	bls.n	80061bc <prvIdleTask+0x24>
			{
				taskYIELD();
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <prvIdleTask+0x30>)
 80061ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80061bc:	f7fa f9d6 	bl	800056c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80061c0:	e7ee      	b.n	80061a0 <prvIdleTask+0x8>
 80061c2:	bf00      	nop
 80061c4:	20000970 	.word	0x20000970
 80061c8:	e000ed04 	.word	0xe000ed04

080061cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061d2:	2300      	movs	r3, #0
 80061d4:	607b      	str	r3, [r7, #4]
 80061d6:	e00c      	b.n	80061f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4a12      	ldr	r2, [pc, #72]	; (800622c <prvInitialiseTaskLists+0x60>)
 80061e4:	4413      	add	r3, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fe fab4 	bl	8004754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3301      	adds	r3, #1
 80061f0:	607b      	str	r3, [r7, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b37      	cmp	r3, #55	; 0x37
 80061f6:	d9ef      	bls.n	80061d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061f8:	480d      	ldr	r0, [pc, #52]	; (8006230 <prvInitialiseTaskLists+0x64>)
 80061fa:	f7fe faab 	bl	8004754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061fe:	480d      	ldr	r0, [pc, #52]	; (8006234 <prvInitialiseTaskLists+0x68>)
 8006200:	f7fe faa8 	bl	8004754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006204:	480c      	ldr	r0, [pc, #48]	; (8006238 <prvInitialiseTaskLists+0x6c>)
 8006206:	f7fe faa5 	bl	8004754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800620a:	480c      	ldr	r0, [pc, #48]	; (800623c <prvInitialiseTaskLists+0x70>)
 800620c:	f7fe faa2 	bl	8004754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006210:	480b      	ldr	r0, [pc, #44]	; (8006240 <prvInitialiseTaskLists+0x74>)
 8006212:	f7fe fa9f 	bl	8004754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <prvInitialiseTaskLists+0x78>)
 8006218:	4a05      	ldr	r2, [pc, #20]	; (8006230 <prvInitialiseTaskLists+0x64>)
 800621a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <prvInitialiseTaskLists+0x7c>)
 800621e:	4a05      	ldr	r2, [pc, #20]	; (8006234 <prvInitialiseTaskLists+0x68>)
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000970 	.word	0x20000970
 8006230:	20000dd0 	.word	0x20000dd0
 8006234:	20000de4 	.word	0x20000de4
 8006238:	20000e00 	.word	0x20000e00
 800623c:	20000e14 	.word	0x20000e14
 8006240:	20000e2c 	.word	0x20000e2c
 8006244:	20000df8 	.word	0x20000df8
 8006248:	20000dfc 	.word	0x20000dfc

0800624c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006252:	e019      	b.n	8006288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006254:	f000 fee6 	bl	8007024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006258:	4b10      	ldr	r3, [pc, #64]	; (800629c <prvCheckTasksWaitingTermination+0x50>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3304      	adds	r3, #4
 8006264:	4618      	mov	r0, r3
 8006266:	f7fe faff 	bl	8004868 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <prvCheckTasksWaitingTermination+0x54>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3b01      	subs	r3, #1
 8006270:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <prvCheckTasksWaitingTermination+0x54>)
 8006272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006274:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <prvCheckTasksWaitingTermination+0x58>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	3b01      	subs	r3, #1
 800627a:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <prvCheckTasksWaitingTermination+0x58>)
 800627c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800627e:	f000 ff01 	bl	8007084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f810 	bl	80062a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <prvCheckTasksWaitingTermination+0x58>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e1      	bne.n	8006254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000e14 	.word	0x20000e14
 80062a0:	20000e40 	.word	0x20000e40
 80062a4:	20000e28 	.word	0x20000e28

080062a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3354      	adds	r3, #84	; 0x54
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 f9e9 	bl	800768c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d108      	bne.n	80062d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 f899 	bl	8007400 <vPortFree>
				vPortFree( pxTCB );
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f001 f896 	bl	8007400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062d4:	e018      	b.n	8006308 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d103      	bne.n	80062e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f88d 	bl	8007400 <vPortFree>
	}
 80062e6:	e00f      	b.n	8006308 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d00a      	beq.n	8006308 <prvDeleteTCB+0x60>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60fb      	str	r3, [r7, #12]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <prvDeleteTCB+0x5e>
	}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <prvResetNextTaskUnblockTime+0x38>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <prvResetNextTaskUnblockTime+0x3c>)
 8006322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006326:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006328:	e008      	b.n	800633c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632a:	4b07      	ldr	r3, [pc, #28]	; (8006348 <prvResetNextTaskUnblockTime+0x38>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	4a04      	ldr	r2, [pc, #16]	; (800634c <prvResetNextTaskUnblockTime+0x3c>)
 800633a:	6013      	str	r3, [r2, #0]
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	20000df8 	.word	0x20000df8
 800634c:	20000e60 	.word	0x20000e60

08006350 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <xTaskGetCurrentTaskHandle+0x1c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800635c:	687b      	ldr	r3, [r7, #4]
	}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	2000096c 	.word	0x2000096c

08006370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <xTaskGetSchedulerState+0x34>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800637e:	2301      	movs	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	e008      	b.n	8006396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006384:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <xTaskGetSchedulerState+0x38>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800638c:	2302      	movs	r3, #2
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e001      	b.n	8006396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006392:	2300      	movs	r3, #0
 8006394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006396:	687b      	ldr	r3, [r7, #4]
	}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	20000e4c 	.word	0x20000e4c
 80063a8:	20000e68 	.word	0x20000e68

080063ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d051      	beq.n	8006466 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c6:	4b2a      	ldr	r3, [pc, #168]	; (8006470 <xTaskPriorityInherit+0xc4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d241      	bcs.n	8006454 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	db06      	blt.n	80063e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d8:	4b25      	ldr	r3, [pc, #148]	; (8006470 <xTaskPriorityInherit+0xc4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6959      	ldr	r1, [r3, #20]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <xTaskPriorityInherit+0xc8>)
 80063f8:	4413      	add	r3, r2
 80063fa:	4299      	cmp	r1, r3
 80063fc:	d122      	bne.n	8006444 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	3304      	adds	r3, #4
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fa30 	bl	8004868 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006408:	4b19      	ldr	r3, [pc, #100]	; (8006470 <xTaskPriorityInherit+0xc4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <xTaskPriorityInherit+0xcc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d903      	bls.n	8006426 <xTaskPriorityInherit+0x7a>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <xTaskPriorityInherit+0xcc>)
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4a10      	ldr	r2, [pc, #64]	; (8006474 <xTaskPriorityInherit+0xc8>)
 8006434:	441a      	add	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	3304      	adds	r3, #4
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f7fe f9b6 	bl	80047ae <vListInsertEnd>
 8006442:	e004      	b.n	800644e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <xTaskPriorityInherit+0xc4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e008      	b.n	8006466 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <xTaskPriorityInherit+0xc4>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	429a      	cmp	r2, r3
 8006460:	d201      	bcs.n	8006466 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006462:	2301      	movs	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006466:	68fb      	ldr	r3, [r7, #12]
	}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	2000096c 	.word	0x2000096c
 8006474:	20000970 	.word	0x20000970
 8006478:	20000e48 	.word	0x20000e48

0800647c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d056      	beq.n	8006540 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006492:	4b2e      	ldr	r3, [pc, #184]	; (800654c <xTaskPriorityDisinherit+0xd0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	429a      	cmp	r2, r3
 800649a:	d00a      	beq.n	80064b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	60fb      	str	r3, [r7, #12]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60bb      	str	r3, [r7, #8]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	1e5a      	subs	r2, r3, #1
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d02c      	beq.n	8006540 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d128      	bne.n	8006540 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe f9b8 	bl	8004868 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <xTaskPriorityDisinherit+0xd4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d903      	bls.n	8006520 <xTaskPriorityDisinherit+0xa4>
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <xTaskPriorityDisinherit+0xd4>)
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4a09      	ldr	r2, [pc, #36]	; (8006554 <xTaskPriorityDisinherit+0xd8>)
 800652e:	441a      	add	r2, r3
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f7fe f939 	bl	80047ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800653c:	2301      	movs	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006540:	697b      	ldr	r3, [r7, #20]
	}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	2000096c 	.word	0x2000096c
 8006550:	20000e48 	.word	0x20000e48
 8006554:	20000970 	.word	0x20000970

08006558 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006566:	2301      	movs	r3, #1
 8006568:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d06a      	beq.n	8006646 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	60fb      	str	r3, [r7, #12]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d902      	bls.n	800659e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	e002      	b.n	80065a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d04b      	beq.n	8006646 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d146      	bne.n	8006646 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80065b8:	4b25      	ldr	r3, [pc, #148]	; (8006650 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d10a      	bne.n	80065d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60bb      	str	r3, [r7, #8]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	69fa      	ldr	r2, [r7, #28]
 80065e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db04      	blt.n	80065f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	6959      	ldr	r1, [r3, #20]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4a13      	ldr	r2, [pc, #76]	; (8006654 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006606:	4413      	add	r3, r2
 8006608:	4299      	cmp	r1, r3
 800660a:	d11c      	bne.n	8006646 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe f929 	bl	8004868 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661a:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d903      	bls.n	800662a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4a07      	ldr	r2, [pc, #28]	; (8006654 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006638:	441a      	add	r2, r3
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7fe f8b4 	bl	80047ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006646:	bf00      	nop
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	2000096c 	.word	0x2000096c
 8006654:	20000970 	.word	0x20000970
 8006658:	20000e48 	.word	0x20000e48

0800665c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <pvTaskIncrementMutexHeldCount+0x24>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <pvTaskIncrementMutexHeldCount+0x24>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800666e:	3201      	adds	r2, #1
 8006670:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006672:	4b03      	ldr	r3, [pc, #12]	; (8006680 <pvTaskIncrementMutexHeldCount+0x24>)
 8006674:	681b      	ldr	r3, [r3, #0]
	}
 8006676:	4618      	mov	r0, r3
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	2000096c 	.word	0x2000096c

08006684 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800668e:	4b21      	ldr	r3, [pc, #132]	; (8006714 <prvAddCurrentTaskToDelayedList+0x90>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006694:	4b20      	ldr	r3, [pc, #128]	; (8006718 <prvAddCurrentTaskToDelayedList+0x94>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3304      	adds	r3, #4
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe f8e4 	bl	8004868 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066a6:	d10a      	bne.n	80066be <prvAddCurrentTaskToDelayedList+0x3a>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ae:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <prvAddCurrentTaskToDelayedList+0x94>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4819      	ldr	r0, [pc, #100]	; (800671c <prvAddCurrentTaskToDelayedList+0x98>)
 80066b8:	f7fe f879 	bl	80047ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066bc:	e026      	b.n	800670c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4413      	add	r3, r2
 80066c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066c6:	4b14      	ldr	r3, [pc, #80]	; (8006718 <prvAddCurrentTaskToDelayedList+0x94>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d209      	bcs.n	80066ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066d6:	4b12      	ldr	r3, [pc, #72]	; (8006720 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <prvAddCurrentTaskToDelayedList+0x94>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3304      	adds	r3, #4
 80066e0:	4619      	mov	r1, r3
 80066e2:	4610      	mov	r0, r2
 80066e4:	f7fe f887 	bl	80047f6 <vListInsert>
}
 80066e8:	e010      	b.n	800670c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ea:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <prvAddCurrentTaskToDelayedList+0x94>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4619      	mov	r1, r3
 80066f6:	4610      	mov	r0, r2
 80066f8:	f7fe f87d 	bl	80047f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	429a      	cmp	r2, r3
 8006704:	d202      	bcs.n	800670c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006706:	4a08      	ldr	r2, [pc, #32]	; (8006728 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6013      	str	r3, [r2, #0]
}
 800670c:	bf00      	nop
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000e44 	.word	0x20000e44
 8006718:	2000096c 	.word	0x2000096c
 800671c:	20000e2c 	.word	0x20000e2c
 8006720:	20000dfc 	.word	0x20000dfc
 8006724:	20000df8 	.word	0x20000df8
 8006728:	20000e60 	.word	0x20000e60

0800672c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006736:	f000 fb07 	bl	8006d48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800673a:	4b1c      	ldr	r3, [pc, #112]	; (80067ac <xTimerCreateTimerTask+0x80>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d021      	beq.n	8006786 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800674a:	1d3a      	adds	r2, r7, #4
 800674c:	f107 0108 	add.w	r1, r7, #8
 8006750:	f107 030c 	add.w	r3, r7, #12
 8006754:	4618      	mov	r0, r3
 8006756:	f7fd ffe3 	bl	8004720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	9202      	str	r2, [sp, #8]
 8006762:	9301      	str	r3, [sp, #4]
 8006764:	2302      	movs	r3, #2
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2300      	movs	r3, #0
 800676a:	460a      	mov	r2, r1
 800676c:	4910      	ldr	r1, [pc, #64]	; (80067b0 <xTimerCreateTimerTask+0x84>)
 800676e:	4811      	ldr	r0, [pc, #68]	; (80067b4 <xTimerCreateTimerTask+0x88>)
 8006770:	f7fe ffa4 	bl	80056bc <xTaskCreateStatic>
 8006774:	4603      	mov	r3, r0
 8006776:	4a10      	ldr	r2, [pc, #64]	; (80067b8 <xTimerCreateTimerTask+0x8c>)
 8006778:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <xTimerCreateTimerTask+0x8c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006782:	2301      	movs	r3, #1
 8006784:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	613b      	str	r3, [r7, #16]
}
 800679e:	bf00      	nop
 80067a0:	e7fe      	b.n	80067a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80067a2:	697b      	ldr	r3, [r7, #20]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20000e9c 	.word	0x20000e9c
 80067b0:	0800811c 	.word	0x0800811c
 80067b4:	080068f1 	.word	0x080068f1
 80067b8:	20000ea0 	.word	0x20000ea0

080067bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	; 0x28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	623b      	str	r3, [r7, #32]
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067ea:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <xTimerGenericCommand+0x98>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d02a      	beq.n	8006848 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b05      	cmp	r3, #5
 8006802:	dc18      	bgt.n	8006836 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006804:	f7ff fdb4 	bl	8006370 <xTaskGetSchedulerState>
 8006808:	4603      	mov	r3, r0
 800680a:	2b02      	cmp	r3, #2
 800680c:	d109      	bne.n	8006822 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800680e:	4b11      	ldr	r3, [pc, #68]	; (8006854 <xTimerGenericCommand+0x98>)
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f107 0110 	add.w	r1, r7, #16
 8006816:	2300      	movs	r3, #0
 8006818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681a:	f7fe fa43 	bl	8004ca4 <xQueueGenericSend>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24
 8006820:	e012      	b.n	8006848 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006822:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <xTimerGenericCommand+0x98>)
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	f107 0110 	add.w	r1, r7, #16
 800682a:	2300      	movs	r3, #0
 800682c:	2200      	movs	r2, #0
 800682e:	f7fe fa39 	bl	8004ca4 <xQueueGenericSend>
 8006832:	6278      	str	r0, [r7, #36]	; 0x24
 8006834:	e008      	b.n	8006848 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006836:	4b07      	ldr	r3, [pc, #28]	; (8006854 <xTimerGenericCommand+0x98>)
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	f107 0110 	add.w	r1, r7, #16
 800683e:	2300      	movs	r3, #0
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	f7fe fb2d 	bl	8004ea0 <xQueueGenericSendFromISR>
 8006846:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800684a:	4618      	mov	r0, r3
 800684c:	3728      	adds	r7, #40	; 0x28
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000e9c 	.word	0x20000e9c

08006858 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af02      	add	r7, sp, #8
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006862:	4b22      	ldr	r3, [pc, #136]	; (80068ec <prvProcessExpiredTimer+0x94>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fd fff9 	bl	8004868 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d022      	beq.n	80068ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	18d1      	adds	r1, r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	6978      	ldr	r0, [r7, #20]
 8006892:	f000 f8d1 	bl	8006a38 <prvInsertTimerInActiveList>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01f      	beq.n	80068dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800689c:	2300      	movs	r3, #0
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	2300      	movs	r3, #0
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	2100      	movs	r1, #0
 80068a6:	6978      	ldr	r0, [r7, #20]
 80068a8:	f7ff ff88 	bl	80067bc <xTimerGenericCommand>
 80068ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d113      	bne.n	80068dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	60fb      	str	r3, [r7, #12]
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	6978      	ldr	r0, [r7, #20]
 80068e2:	4798      	blx	r3
}
 80068e4:	bf00      	nop
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000e94 	.word	0x20000e94

080068f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068f8:	f107 0308 	add.w	r3, r7, #8
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f857 	bl	80069b0 <prvGetNextExpireTime>
 8006902:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4619      	mov	r1, r3
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f803 	bl	8006914 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800690e:	f000 f8d5 	bl	8006abc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006912:	e7f1      	b.n	80068f8 <prvTimerTask+0x8>

08006914 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800691e:	f7ff f929 	bl	8005b74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006922:	f107 0308 	add.w	r3, r7, #8
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f866 	bl	80069f8 <prvSampleTimeNow>
 800692c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d130      	bne.n	8006996 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <prvProcessTimerOrBlockTask+0x3c>
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	429a      	cmp	r2, r3
 8006940:	d806      	bhi.n	8006950 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006942:	f7ff f925 	bl	8005b90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff ff85 	bl	8006858 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800694e:	e024      	b.n	800699a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006956:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <prvProcessTimerOrBlockTask+0x90>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <prvProcessTimerOrBlockTask+0x50>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <prvProcessTimerOrBlockTask+0x52>
 8006964:	2300      	movs	r3, #0
 8006966:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <prvProcessTimerOrBlockTask+0x94>)
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	4619      	mov	r1, r3
 8006976:	f7fe fe6d 	bl	8005654 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800697a:	f7ff f909 	bl	8005b90 <xTaskResumeAll>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006984:	4b09      	ldr	r3, [pc, #36]	; (80069ac <prvProcessTimerOrBlockTask+0x98>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
}
 8006994:	e001      	b.n	800699a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006996:	f7ff f8fb 	bl	8005b90 <xTaskResumeAll>
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000e98 	.word	0x20000e98
 80069a8:	20000e9c 	.word	0x20000e9c
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069b8:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <prvGetNextExpireTime+0x44>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <prvGetNextExpireTime+0x16>
 80069c2:	2201      	movs	r2, #1
 80069c4:	e000      	b.n	80069c8 <prvGetNextExpireTime+0x18>
 80069c6:	2200      	movs	r2, #0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069d4:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <prvGetNextExpireTime+0x44>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e001      	b.n	80069e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069e4:	68fb      	ldr	r3, [r7, #12]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000e94 	.word	0x20000e94

080069f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a00:	f7ff f964 	bl	8005ccc <xTaskGetTickCount>
 8006a04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a06:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <prvSampleTimeNow+0x3c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d205      	bcs.n	8006a1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a10:	f000 f936 	bl	8006c80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	e002      	b.n	8006a22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a22:	4a04      	ldr	r2, [pc, #16]	; (8006a34 <prvSampleTimeNow+0x3c>)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a28:	68fb      	ldr	r3, [r7, #12]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000ea4 	.word	0x20000ea4

08006a38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d812      	bhi.n	8006a84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	1ad2      	subs	r2, r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d302      	bcc.n	8006a72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	e01b      	b.n	8006aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a72:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <prvInsertTimerInActiveList+0x7c>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f7fd feba 	bl	80047f6 <vListInsert>
 8006a82:	e012      	b.n	8006aaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d206      	bcs.n	8006a9a <prvInsertTimerInActiveList+0x62>
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d302      	bcc.n	8006a9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a94:	2301      	movs	r3, #1
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e007      	b.n	8006aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <prvInsertTimerInActiveList+0x80>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f7fd fea6 	bl	80047f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006aaa:	697b      	ldr	r3, [r7, #20]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20000e98 	.word	0x20000e98
 8006ab8:	20000e94 	.word	0x20000e94

08006abc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	; 0x38
 8006ac0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ac2:	e0ca      	b.n	8006c5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da18      	bge.n	8006afc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006aca:	1d3b      	adds	r3, r7, #4
 8006acc:	3304      	adds	r3, #4
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	61fb      	str	r3, [r7, #28]
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af2:	6850      	ldr	r0, [r2, #4]
 8006af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af6:	6892      	ldr	r2, [r2, #8]
 8006af8:	4611      	mov	r1, r2
 8006afa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f2c0 80ab 	blt.w	8006c5a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d004      	beq.n	8006b1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	3304      	adds	r3, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fd fea7 	bl	8004868 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b1a:	463b      	mov	r3, r7
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff ff6b 	bl	80069f8 <prvSampleTimeNow>
 8006b22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b09      	cmp	r3, #9
 8006b28:	f200 8096 	bhi.w	8006c58 <prvProcessReceivedCommands+0x19c>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <prvProcessReceivedCommands+0x78>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b5d 	.word	0x08006b5d
 8006b38:	08006b5d 	.word	0x08006b5d
 8006b3c:	08006b5d 	.word	0x08006b5d
 8006b40:	08006bd1 	.word	0x08006bd1
 8006b44:	08006be5 	.word	0x08006be5
 8006b48:	08006c2f 	.word	0x08006c2f
 8006b4c:	08006b5d 	.word	0x08006b5d
 8006b50:	08006b5d 	.word	0x08006b5d
 8006b54:	08006bd1 	.word	0x08006bd1
 8006b58:	08006be5 	.word	0x08006be5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	18d1      	adds	r1, r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b7c:	f7ff ff5c 	bl	8006a38 <prvInsertTimerInActiveList>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d069      	beq.n	8006c5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d05e      	beq.n	8006c5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	441a      	add	r2, r3
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2100      	movs	r1, #0
 8006bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bae:	f7ff fe05 	bl	80067bc <xTimerGenericCommand>
 8006bb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d14f      	bne.n	8006c5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	61bb      	str	r3, [r7, #24]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006be2:	e03a      	b.n	8006c5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	617b      	str	r3, [r7, #20]
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	18d1      	adds	r1, r2, r3
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c28:	f7ff ff06 	bl	8006a38 <prvInsertTimerInActiveList>
					break;
 8006c2c:	e015      	b.n	8006c5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d103      	bne.n	8006c44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c3e:	f000 fbdf 	bl	8007400 <vPortFree>
 8006c42:	e00a      	b.n	8006c5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c4a:	f023 0301 	bic.w	r3, r3, #1
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c56:	e000      	b.n	8006c5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006c58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c5a:	4b08      	ldr	r3, [pc, #32]	; (8006c7c <prvProcessReceivedCommands+0x1c0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	1d39      	adds	r1, r7, #4
 8006c60:	2200      	movs	r2, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fe f9b8 	bl	8004fd8 <xQueueReceive>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f47f af2a 	bne.w	8006ac4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	3730      	adds	r7, #48	; 0x30
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000e9c 	.word	0x20000e9c

08006c80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c86:	e048      	b.n	8006d1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c88:	4b2d      	ldr	r3, [pc, #180]	; (8006d40 <prvSwitchTimerLists+0xc0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c92:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <prvSwitchTimerLists+0xc0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fd fde1 	bl	8004868 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d02e      	beq.n	8006d1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d90e      	bls.n	8006cec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cda:	4b19      	ldr	r3, [pc, #100]	; (8006d40 <prvSwitchTimerLists+0xc0>)
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f7fd fd86 	bl	80047f6 <vListInsert>
 8006cea:	e016      	b.n	8006d1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cec:	2300      	movs	r3, #0
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff fd60 	bl	80067bc <xTimerGenericCommand>
 8006cfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10a      	bne.n	8006d1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	603b      	str	r3, [r7, #0]
}
 8006d16:	bf00      	nop
 8006d18:	e7fe      	b.n	8006d18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <prvSwitchTimerLists+0xc0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1b1      	bne.n	8006c88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <prvSwitchTimerLists+0xc0>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d2a:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <prvSwitchTimerLists+0xc4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a04      	ldr	r2, [pc, #16]	; (8006d40 <prvSwitchTimerLists+0xc0>)
 8006d30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d32:	4a04      	ldr	r2, [pc, #16]	; (8006d44 <prvSwitchTimerLists+0xc4>)
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6013      	str	r3, [r2, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000e94 	.word	0x20000e94
 8006d44:	20000e98 	.word	0x20000e98

08006d48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d4e:	f000 f969 	bl	8007024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <prvCheckForValidListAndQueue+0x60>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d120      	bne.n	8006d9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d5a:	4814      	ldr	r0, [pc, #80]	; (8006dac <prvCheckForValidListAndQueue+0x64>)
 8006d5c:	f7fd fcfa 	bl	8004754 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d60:	4813      	ldr	r0, [pc, #76]	; (8006db0 <prvCheckForValidListAndQueue+0x68>)
 8006d62:	f7fd fcf7 	bl	8004754 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d66:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <prvCheckForValidListAndQueue+0x6c>)
 8006d68:	4a10      	ldr	r2, [pc, #64]	; (8006dac <prvCheckForValidListAndQueue+0x64>)
 8006d6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d6c:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <prvCheckForValidListAndQueue+0x70>)
 8006d6e:	4a10      	ldr	r2, [pc, #64]	; (8006db0 <prvCheckForValidListAndQueue+0x68>)
 8006d70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d72:	2300      	movs	r3, #0
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <prvCheckForValidListAndQueue+0x74>)
 8006d78:	4a11      	ldr	r2, [pc, #68]	; (8006dc0 <prvCheckForValidListAndQueue+0x78>)
 8006d7a:	2110      	movs	r1, #16
 8006d7c:	200a      	movs	r0, #10
 8006d7e:	f7fd fe05 	bl	800498c <xQueueGenericCreateStatic>
 8006d82:	4603      	mov	r3, r0
 8006d84:	4a08      	ldr	r2, [pc, #32]	; (8006da8 <prvCheckForValidListAndQueue+0x60>)
 8006d86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d88:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <prvCheckForValidListAndQueue+0x60>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d90:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <prvCheckForValidListAndQueue+0x60>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	490b      	ldr	r1, [pc, #44]	; (8006dc4 <prvCheckForValidListAndQueue+0x7c>)
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fe fc32 	bl	8005600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d9c:	f000 f972 	bl	8007084 <vPortExitCritical>
}
 8006da0:	bf00      	nop
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20000e9c 	.word	0x20000e9c
 8006dac:	20000e6c 	.word	0x20000e6c
 8006db0:	20000e80 	.word	0x20000e80
 8006db4:	20000e94 	.word	0x20000e94
 8006db8:	20000e98 	.word	0x20000e98
 8006dbc:	20000f48 	.word	0x20000f48
 8006dc0:	20000ea8 	.word	0x20000ea8
 8006dc4:	08008124 	.word	0x08008124

08006dc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3b04      	subs	r3, #4
 8006dd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3b04      	subs	r3, #4
 8006de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f023 0201 	bic.w	r2, r3, #1
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3b04      	subs	r3, #4
 8006df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006df8:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <pxPortInitialiseStack+0x64>)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3b14      	subs	r3, #20
 8006e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3b04      	subs	r3, #4
 8006e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f06f 0202 	mvn.w	r2, #2
 8006e16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3b20      	subs	r3, #32
 8006e1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	08006e31 	.word	0x08006e31

08006e30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <prvTaskExitError+0x54>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e42:	d00a      	beq.n	8006e5a <prvTaskExitError+0x2a>
	__asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	60fb      	str	r3, [r7, #12]
}
 8006e56:	bf00      	nop
 8006e58:	e7fe      	b.n	8006e58 <prvTaskExitError+0x28>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	60bb      	str	r3, [r7, #8]
}
 8006e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e6e:	bf00      	nop
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0fc      	beq.n	8006e70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e76:	bf00      	nop
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	20000020 	.word	0x20000020
	...

08006e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <pxCurrentTCBConst2>)
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	f380 8809 	msr	PSP, r0
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	4770      	bx	lr
 8006eac:	f3af 8000 	nop.w

08006eb0 <pxCurrentTCBConst2>:
 8006eb0:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006eb8:	4808      	ldr	r0, [pc, #32]	; (8006edc <prvPortStartFirstTask+0x24>)
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	6800      	ldr	r0, [r0, #0]
 8006ebe:	f380 8808 	msr	MSP, r0
 8006ec2:	f04f 0000 	mov.w	r0, #0
 8006ec6:	f380 8814 	msr	CONTROL, r0
 8006eca:	b662      	cpsie	i
 8006ecc:	b661      	cpsie	f
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	df00      	svc	0
 8006ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eda:	bf00      	nop
 8006edc:	e000ed08 	.word	0xe000ed08

08006ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ee6:	4b46      	ldr	r3, [pc, #280]	; (8007000 <xPortStartScheduler+0x120>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a46      	ldr	r2, [pc, #280]	; (8007004 <xPortStartScheduler+0x124>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10a      	bne.n	8006f06 <xPortStartScheduler+0x26>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	613b      	str	r3, [r7, #16]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f06:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <xPortStartScheduler+0x120>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a3f      	ldr	r2, [pc, #252]	; (8007008 <xPortStartScheduler+0x128>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d10a      	bne.n	8006f26 <xPortStartScheduler+0x46>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	60fb      	str	r3, [r7, #12]
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f26:	4b39      	ldr	r3, [pc, #228]	; (800700c <xPortStartScheduler+0x12c>)
 8006f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	22ff      	movs	r2, #255	; 0xff
 8006f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4b31      	ldr	r3, [pc, #196]	; (8007010 <xPortStartScheduler+0x130>)
 8006f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f4e:	4b31      	ldr	r3, [pc, #196]	; (8007014 <xPortStartScheduler+0x134>)
 8006f50:	2207      	movs	r2, #7
 8006f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f54:	e009      	b.n	8006f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f56:	4b2f      	ldr	r3, [pc, #188]	; (8007014 <xPortStartScheduler+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <xPortStartScheduler+0x134>)
 8006f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f6a:	78fb      	ldrb	r3, [r7, #3]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b80      	cmp	r3, #128	; 0x80
 8006f74:	d0ef      	beq.n	8006f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f76:	4b27      	ldr	r3, [pc, #156]	; (8007014 <xPortStartScheduler+0x134>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f1c3 0307 	rsb	r3, r3, #7
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d00a      	beq.n	8006f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	60bb      	str	r3, [r7, #8]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f98:	4b1e      	ldr	r3, [pc, #120]	; (8007014 <xPortStartScheduler+0x134>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <xPortStartScheduler+0x134>)
 8006fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fa2:	4b1c      	ldr	r3, [pc, #112]	; (8007014 <xPortStartScheduler+0x134>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006faa:	4a1a      	ldr	r2, [pc, #104]	; (8007014 <xPortStartScheduler+0x134>)
 8006fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fb6:	4b18      	ldr	r3, [pc, #96]	; (8007018 <xPortStartScheduler+0x138>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a17      	ldr	r2, [pc, #92]	; (8007018 <xPortStartScheduler+0x138>)
 8006fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <xPortStartScheduler+0x138>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a14      	ldr	r2, [pc, #80]	; (8007018 <xPortStartScheduler+0x138>)
 8006fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fce:	f000 f8dd 	bl	800718c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fd2:	4b12      	ldr	r3, [pc, #72]	; (800701c <xPortStartScheduler+0x13c>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fd8:	f000 f8fc 	bl	80071d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fdc:	4b10      	ldr	r3, [pc, #64]	; (8007020 <xPortStartScheduler+0x140>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0f      	ldr	r2, [pc, #60]	; (8007020 <xPortStartScheduler+0x140>)
 8006fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fe8:	f7ff ff66 	bl	8006eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fec:	f7fe ff38 	bl	8005e60 <vTaskSwitchContext>
	prvTaskExitError();
 8006ff0:	f7ff ff1e 	bl	8006e30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	e000ed00 	.word	0xe000ed00
 8007004:	410fc271 	.word	0x410fc271
 8007008:	410fc270 	.word	0x410fc270
 800700c:	e000e400 	.word	0xe000e400
 8007010:	20000f98 	.word	0x20000f98
 8007014:	20000f9c 	.word	0x20000f9c
 8007018:	e000ed20 	.word	0xe000ed20
 800701c:	20000020 	.word	0x20000020
 8007020:	e000ef34 	.word	0xe000ef34

08007024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	607b      	str	r3, [r7, #4]
}
 800703c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <vPortEnterCritical+0x58>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3301      	adds	r3, #1
 8007044:	4a0d      	ldr	r2, [pc, #52]	; (800707c <vPortEnterCritical+0x58>)
 8007046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <vPortEnterCritical+0x58>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d10f      	bne.n	8007070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <vPortEnterCritical+0x5c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <vPortEnterCritical+0x4c>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	603b      	str	r3, [r7, #0]
}
 800706c:	bf00      	nop
 800706e:	e7fe      	b.n	800706e <vPortEnterCritical+0x4a>
	}
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	20000020 	.word	0x20000020
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800708a:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <vPortExitCritical+0x50>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <vPortExitCritical+0x24>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	607b      	str	r3, [r7, #4]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <vPortExitCritical+0x50>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <vPortExitCritical+0x50>)
 80070b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070b2:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <vPortExitCritical+0x50>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <vPortExitCritical+0x42>
 80070ba:	2300      	movs	r3, #0
 80070bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	f383 8811 	msr	BASEPRI, r3
}
 80070c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000020 	.word	0x20000020
	...

080070e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070e0:	f3ef 8009 	mrs	r0, PSP
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	4b15      	ldr	r3, [pc, #84]	; (8007140 <pxCurrentTCBConst>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f01e 0f10 	tst.w	lr, #16
 80070f0:	bf08      	it	eq
 80070f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	6010      	str	r0, [r2, #0]
 80070fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007104:	f380 8811 	msr	BASEPRI, r0
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f7fe fea6 	bl	8005e60 <vTaskSwitchContext>
 8007114:	f04f 0000 	mov.w	r0, #0
 8007118:	f380 8811 	msr	BASEPRI, r0
 800711c:	bc09      	pop	{r0, r3}
 800711e:	6819      	ldr	r1, [r3, #0]
 8007120:	6808      	ldr	r0, [r1, #0]
 8007122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007126:	f01e 0f10 	tst.w	lr, #16
 800712a:	bf08      	it	eq
 800712c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007130:	f380 8809 	msr	PSP, r0
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	f3af 8000 	nop.w

08007140 <pxCurrentTCBConst>:
 8007140:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	607b      	str	r3, [r7, #4]
}
 8007160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007162:	f7fe fdc3 	bl	8005cec <xTaskIncrementTick>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800716c:	4b06      	ldr	r3, [pc, #24]	; (8007188 <xPortSysTickHandler+0x40>)
 800716e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	2300      	movs	r3, #0
 8007176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f383 8811 	msr	BASEPRI, r3
}
 800717e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007190:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <vPortSetupTimerInterrupt+0x34>)
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007196:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <vPortSetupTimerInterrupt+0x38>)
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <vPortSetupTimerInterrupt+0x3c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <vPortSetupTimerInterrupt+0x40>)
 80071a2:	fba2 2303 	umull	r2, r3, r2, r3
 80071a6:	099b      	lsrs	r3, r3, #6
 80071a8:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <vPortSetupTimerInterrupt+0x44>)
 80071aa:	3b01      	subs	r3, #1
 80071ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071ae:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <vPortSetupTimerInterrupt+0x34>)
 80071b0:	2207      	movs	r2, #7
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	e000e010 	.word	0xe000e010
 80071c4:	e000e018 	.word	0xe000e018
 80071c8:	20000014 	.word	0x20000014
 80071cc:	10624dd3 	.word	0x10624dd3
 80071d0:	e000e014 	.word	0xe000e014

080071d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071e4 <vPortEnableVFP+0x10>
 80071d8:	6801      	ldr	r1, [r0, #0]
 80071da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071de:	6001      	str	r1, [r0, #0]
 80071e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071e2:	bf00      	nop
 80071e4:	e000ed88 	.word	0xe000ed88

080071e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071ee:	f3ef 8305 	mrs	r3, IPSR
 80071f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b0f      	cmp	r3, #15
 80071f8:	d914      	bls.n	8007224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071fa:	4a17      	ldr	r2, [pc, #92]	; (8007258 <vPortValidateInterruptPriority+0x70>)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007204:	4b15      	ldr	r3, [pc, #84]	; (800725c <vPortValidateInterruptPriority+0x74>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	7afa      	ldrb	r2, [r7, #11]
 800720a:	429a      	cmp	r2, r3
 800720c:	d20a      	bcs.n	8007224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007224:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <vPortValidateInterruptPriority+0x78>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800722c:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <vPortValidateInterruptPriority+0x7c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	d90a      	bls.n	800724a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	603b      	str	r3, [r7, #0]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <vPortValidateInterruptPriority+0x60>
	}
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	e000e3f0 	.word	0xe000e3f0
 800725c:	20000f98 	.word	0x20000f98
 8007260:	e000ed0c 	.word	0xe000ed0c
 8007264:	20000f9c 	.word	0x20000f9c

08007268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	; 0x28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007270:	2300      	movs	r3, #0
 8007272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007274:	f7fe fc7e 	bl	8005b74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007278:	4b5b      	ldr	r3, [pc, #364]	; (80073e8 <pvPortMalloc+0x180>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007280:	f000 f920 	bl	80074c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007284:	4b59      	ldr	r3, [pc, #356]	; (80073ec <pvPortMalloc+0x184>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4013      	ands	r3, r2
 800728c:	2b00      	cmp	r3, #0
 800728e:	f040 8093 	bne.w	80073b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01d      	beq.n	80072d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007298:	2208      	movs	r2, #8
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4413      	add	r3, r2
 800729e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d014      	beq.n	80072d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f023 0307 	bic.w	r3, r3, #7
 80072b0:	3308      	adds	r3, #8
 80072b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <pvPortMalloc+0x6c>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	617b      	str	r3, [r7, #20]
}
 80072d0:	bf00      	nop
 80072d2:	e7fe      	b.n	80072d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d06e      	beq.n	80073b8 <pvPortMalloc+0x150>
 80072da:	4b45      	ldr	r3, [pc, #276]	; (80073f0 <pvPortMalloc+0x188>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d869      	bhi.n	80073b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072e4:	4b43      	ldr	r3, [pc, #268]	; (80073f4 <pvPortMalloc+0x18c>)
 80072e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072e8:	4b42      	ldr	r3, [pc, #264]	; (80073f4 <pvPortMalloc+0x18c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ee:	e004      	b.n	80072fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d903      	bls.n	800730c <pvPortMalloc+0xa4>
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f1      	bne.n	80072f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800730c:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <pvPortMalloc+0x180>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007312:	429a      	cmp	r2, r3
 8007314:	d050      	beq.n	80073b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2208      	movs	r2, #8
 800731c:	4413      	add	r3, r2
 800731e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	2308      	movs	r3, #8
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	429a      	cmp	r2, r3
 8007336:	d91f      	bls.n	8007378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <pvPortMalloc+0xf8>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	613b      	str	r3, [r7, #16]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	1ad2      	subs	r2, r2, r3
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007372:	69b8      	ldr	r0, [r7, #24]
 8007374:	f000 f908 	bl	8007588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007378:	4b1d      	ldr	r3, [pc, #116]	; (80073f0 <pvPortMalloc+0x188>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	4a1b      	ldr	r2, [pc, #108]	; (80073f0 <pvPortMalloc+0x188>)
 8007384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007386:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <pvPortMalloc+0x188>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <pvPortMalloc+0x190>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	429a      	cmp	r2, r3
 8007390:	d203      	bcs.n	800739a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007392:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <pvPortMalloc+0x188>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a18      	ldr	r2, [pc, #96]	; (80073f8 <pvPortMalloc+0x190>)
 8007398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <pvPortMalloc+0x184>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073ae:	4b13      	ldr	r3, [pc, #76]	; (80073fc <pvPortMalloc+0x194>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	4a11      	ldr	r2, [pc, #68]	; (80073fc <pvPortMalloc+0x194>)
 80073b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073b8:	f7fe fbea 	bl	8005b90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	f003 0307 	and.w	r3, r3, #7
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <pvPortMalloc+0x174>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60fb      	str	r3, [r7, #12]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <pvPortMalloc+0x172>
	return pvReturn;
 80073dc:	69fb      	ldr	r3, [r7, #28]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3728      	adds	r7, #40	; 0x28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20002b00 	.word	0x20002b00
 80073ec:	20002b14 	.word	0x20002b14
 80073f0:	20002b04 	.word	0x20002b04
 80073f4:	20002af8 	.word	0x20002af8
 80073f8:	20002b08 	.word	0x20002b08
 80073fc:	20002b0c 	.word	0x20002b0c

08007400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d04d      	beq.n	80074ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007412:	2308      	movs	r3, #8
 8007414:	425b      	negs	r3, r3
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4413      	add	r3, r2
 800741a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	4b24      	ldr	r3, [pc, #144]	; (80074b8 <vPortFree+0xb8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4013      	ands	r3, r2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10a      	bne.n	8007444 <vPortFree+0x44>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	60fb      	str	r3, [r7, #12]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00a      	beq.n	8007462 <vPortFree+0x62>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60bb      	str	r3, [r7, #8]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <vPortFree+0xb8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4013      	ands	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01e      	beq.n	80074ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d11a      	bne.n	80074ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <vPortFree+0xb8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	43db      	mvns	r3, r3
 8007482:	401a      	ands	r2, r3
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007488:	f7fe fb74 	bl	8005b74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <vPortFree+0xbc>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4413      	add	r3, r2
 8007496:	4a09      	ldr	r2, [pc, #36]	; (80074bc <vPortFree+0xbc>)
 8007498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800749a:	6938      	ldr	r0, [r7, #16]
 800749c:	f000 f874 	bl	8007588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074a0:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <vPortFree+0xc0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	4a06      	ldr	r2, [pc, #24]	; (80074c0 <vPortFree+0xc0>)
 80074a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074aa:	f7fe fb71 	bl	8005b90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ae:	bf00      	nop
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20002b14 	.word	0x20002b14
 80074bc:	20002b04 	.word	0x20002b04
 80074c0:	20002b10 	.word	0x20002b10

080074c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074ca:	f641 3358 	movw	r3, #7000	; 0x1b58
 80074ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074d0:	4b27      	ldr	r3, [pc, #156]	; (8007570 <prvHeapInit+0xac>)
 80074d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00c      	beq.n	80074f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3307      	adds	r3, #7
 80074e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0307 	bic.w	r3, r3, #7
 80074ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	4a1f      	ldr	r2, [pc, #124]	; (8007570 <prvHeapInit+0xac>)
 80074f4:	4413      	add	r3, r2
 80074f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074fc:	4a1d      	ldr	r2, [pc, #116]	; (8007574 <prvHeapInit+0xb0>)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007502:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <prvHeapInit+0xb0>)
 8007504:	2200      	movs	r2, #0
 8007506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	4413      	add	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007510:	2208      	movs	r2, #8
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1a9b      	subs	r3, r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4a15      	ldr	r2, [pc, #84]	; (8007578 <prvHeapInit+0xb4>)
 8007524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007526:	4b14      	ldr	r3, [pc, #80]	; (8007578 <prvHeapInit+0xb4>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2200      	movs	r2, #0
 800752c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <prvHeapInit+0xb4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	1ad2      	subs	r2, r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvHeapInit+0xb4>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <prvHeapInit+0xb8>)
 8007552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	4a09      	ldr	r2, [pc, #36]	; (8007580 <prvHeapInit+0xbc>)
 800755a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800755c:	4b09      	ldr	r3, [pc, #36]	; (8007584 <prvHeapInit+0xc0>)
 800755e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	20000fa0 	.word	0x20000fa0
 8007574:	20002af8 	.word	0x20002af8
 8007578:	20002b00 	.word	0x20002b00
 800757c:	20002b08 	.word	0x20002b08
 8007580:	20002b04 	.word	0x20002b04
 8007584:	20002b14 	.word	0x20002b14

08007588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007590:	4b28      	ldr	r3, [pc, #160]	; (8007634 <prvInsertBlockIntoFreeList+0xac>)
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e002      	b.n	800759c <prvInsertBlockIntoFreeList+0x14>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d8f7      	bhi.n	8007596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	4413      	add	r3, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d108      	bne.n	80075ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	441a      	add	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	441a      	add	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d118      	bne.n	8007610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <prvInsertBlockIntoFreeList+0xb0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d00d      	beq.n	8007606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	441a      	add	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	e008      	b.n	8007618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007606:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <prvInsertBlockIntoFreeList+0xb0>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e003      	b.n	8007618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d002      	beq.n	8007626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007626:	bf00      	nop
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20002af8 	.word	0x20002af8
 8007638:	20002b00 	.word	0x20002b00

0800763c <siprintf>:
 800763c:	b40e      	push	{r1, r2, r3}
 800763e:	b500      	push	{lr}
 8007640:	b09c      	sub	sp, #112	; 0x70
 8007642:	ab1d      	add	r3, sp, #116	; 0x74
 8007644:	9002      	str	r0, [sp, #8]
 8007646:	9006      	str	r0, [sp, #24]
 8007648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800764c:	4809      	ldr	r0, [pc, #36]	; (8007674 <siprintf+0x38>)
 800764e:	9107      	str	r1, [sp, #28]
 8007650:	9104      	str	r1, [sp, #16]
 8007652:	4909      	ldr	r1, [pc, #36]	; (8007678 <siprintf+0x3c>)
 8007654:	f853 2b04 	ldr.w	r2, [r3], #4
 8007658:	9105      	str	r1, [sp, #20]
 800765a:	6800      	ldr	r0, [r0, #0]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	a902      	add	r1, sp, #8
 8007660:	f000 f9f6 	bl	8007a50 <_svfiprintf_r>
 8007664:	9b02      	ldr	r3, [sp, #8]
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	b01c      	add	sp, #112	; 0x70
 800766c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007670:	b003      	add	sp, #12
 8007672:	4770      	bx	lr
 8007674:	20000070 	.word	0x20000070
 8007678:	ffff0208 	.word	0xffff0208

0800767c <memset>:
 800767c:	4402      	add	r2, r0
 800767e:	4603      	mov	r3, r0
 8007680:	4293      	cmp	r3, r2
 8007682:	d100      	bne.n	8007686 <memset+0xa>
 8007684:	4770      	bx	lr
 8007686:	f803 1b01 	strb.w	r1, [r3], #1
 800768a:	e7f9      	b.n	8007680 <memset+0x4>

0800768c <_reclaim_reent>:
 800768c:	4b29      	ldr	r3, [pc, #164]	; (8007734 <_reclaim_reent+0xa8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4283      	cmp	r3, r0
 8007692:	b570      	push	{r4, r5, r6, lr}
 8007694:	4604      	mov	r4, r0
 8007696:	d04b      	beq.n	8007730 <_reclaim_reent+0xa4>
 8007698:	69c3      	ldr	r3, [r0, #28]
 800769a:	b143      	cbz	r3, 80076ae <_reclaim_reent+0x22>
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d144      	bne.n	800772c <_reclaim_reent+0xa0>
 80076a2:	69e3      	ldr	r3, [r4, #28]
 80076a4:	6819      	ldr	r1, [r3, #0]
 80076a6:	b111      	cbz	r1, 80076ae <_reclaim_reent+0x22>
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 f87f 	bl	80077ac <_free_r>
 80076ae:	6961      	ldr	r1, [r4, #20]
 80076b0:	b111      	cbz	r1, 80076b8 <_reclaim_reent+0x2c>
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f87a 	bl	80077ac <_free_r>
 80076b8:	69e1      	ldr	r1, [r4, #28]
 80076ba:	b111      	cbz	r1, 80076c2 <_reclaim_reent+0x36>
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 f875 	bl	80077ac <_free_r>
 80076c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80076c4:	b111      	cbz	r1, 80076cc <_reclaim_reent+0x40>
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 f870 	bl	80077ac <_free_r>
 80076cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ce:	b111      	cbz	r1, 80076d6 <_reclaim_reent+0x4a>
 80076d0:	4620      	mov	r0, r4
 80076d2:	f000 f86b 	bl	80077ac <_free_r>
 80076d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80076d8:	b111      	cbz	r1, 80076e0 <_reclaim_reent+0x54>
 80076da:	4620      	mov	r0, r4
 80076dc:	f000 f866 	bl	80077ac <_free_r>
 80076e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80076e2:	b111      	cbz	r1, 80076ea <_reclaim_reent+0x5e>
 80076e4:	4620      	mov	r0, r4
 80076e6:	f000 f861 	bl	80077ac <_free_r>
 80076ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80076ec:	b111      	cbz	r1, 80076f4 <_reclaim_reent+0x68>
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 f85c 	bl	80077ac <_free_r>
 80076f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80076f6:	b111      	cbz	r1, 80076fe <_reclaim_reent+0x72>
 80076f8:	4620      	mov	r0, r4
 80076fa:	f000 f857 	bl	80077ac <_free_r>
 80076fe:	6a23      	ldr	r3, [r4, #32]
 8007700:	b1b3      	cbz	r3, 8007730 <_reclaim_reent+0xa4>
 8007702:	4620      	mov	r0, r4
 8007704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007708:	4718      	bx	r3
 800770a:	5949      	ldr	r1, [r1, r5]
 800770c:	b941      	cbnz	r1, 8007720 <_reclaim_reent+0x94>
 800770e:	3504      	adds	r5, #4
 8007710:	69e3      	ldr	r3, [r4, #28]
 8007712:	2d80      	cmp	r5, #128	; 0x80
 8007714:	68d9      	ldr	r1, [r3, #12]
 8007716:	d1f8      	bne.n	800770a <_reclaim_reent+0x7e>
 8007718:	4620      	mov	r0, r4
 800771a:	f000 f847 	bl	80077ac <_free_r>
 800771e:	e7c0      	b.n	80076a2 <_reclaim_reent+0x16>
 8007720:	680e      	ldr	r6, [r1, #0]
 8007722:	4620      	mov	r0, r4
 8007724:	f000 f842 	bl	80077ac <_free_r>
 8007728:	4631      	mov	r1, r6
 800772a:	e7ef      	b.n	800770c <_reclaim_reent+0x80>
 800772c:	2500      	movs	r5, #0
 800772e:	e7ef      	b.n	8007710 <_reclaim_reent+0x84>
 8007730:	bd70      	pop	{r4, r5, r6, pc}
 8007732:	bf00      	nop
 8007734:	20000070 	.word	0x20000070

08007738 <__errno>:
 8007738:	4b01      	ldr	r3, [pc, #4]	; (8007740 <__errno+0x8>)
 800773a:	6818      	ldr	r0, [r3, #0]
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20000070 	.word	0x20000070

08007744 <__libc_init_array>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	4d0d      	ldr	r5, [pc, #52]	; (800777c <__libc_init_array+0x38>)
 8007748:	4c0d      	ldr	r4, [pc, #52]	; (8007780 <__libc_init_array+0x3c>)
 800774a:	1b64      	subs	r4, r4, r5
 800774c:	10a4      	asrs	r4, r4, #2
 800774e:	2600      	movs	r6, #0
 8007750:	42a6      	cmp	r6, r4
 8007752:	d109      	bne.n	8007768 <__libc_init_array+0x24>
 8007754:	4d0b      	ldr	r5, [pc, #44]	; (8007784 <__libc_init_array+0x40>)
 8007756:	4c0c      	ldr	r4, [pc, #48]	; (8007788 <__libc_init_array+0x44>)
 8007758:	f000 fc6a 	bl	8008030 <_init>
 800775c:	1b64      	subs	r4, r4, r5
 800775e:	10a4      	asrs	r4, r4, #2
 8007760:	2600      	movs	r6, #0
 8007762:	42a6      	cmp	r6, r4
 8007764:	d105      	bne.n	8007772 <__libc_init_array+0x2e>
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	f855 3b04 	ldr.w	r3, [r5], #4
 800776c:	4798      	blx	r3
 800776e:	3601      	adds	r6, #1
 8007770:	e7ee      	b.n	8007750 <__libc_init_array+0xc>
 8007772:	f855 3b04 	ldr.w	r3, [r5], #4
 8007776:	4798      	blx	r3
 8007778:	3601      	adds	r6, #1
 800777a:	e7f2      	b.n	8007762 <__libc_init_array+0x1e>
 800777c:	0800828c 	.word	0x0800828c
 8007780:	0800828c 	.word	0x0800828c
 8007784:	0800828c 	.word	0x0800828c
 8007788:	08008290 	.word	0x08008290

0800778c <__retarget_lock_acquire_recursive>:
 800778c:	4770      	bx	lr

0800778e <__retarget_lock_release_recursive>:
 800778e:	4770      	bx	lr

08007790 <memcpy>:
 8007790:	440a      	add	r2, r1
 8007792:	4291      	cmp	r1, r2
 8007794:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007798:	d100      	bne.n	800779c <memcpy+0xc>
 800779a:	4770      	bx	lr
 800779c:	b510      	push	{r4, lr}
 800779e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077a6:	4291      	cmp	r1, r2
 80077a8:	d1f9      	bne.n	800779e <memcpy+0xe>
 80077aa:	bd10      	pop	{r4, pc}

080077ac <_free_r>:
 80077ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ae:	2900      	cmp	r1, #0
 80077b0:	d044      	beq.n	800783c <_free_r+0x90>
 80077b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077b6:	9001      	str	r0, [sp, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f1a1 0404 	sub.w	r4, r1, #4
 80077be:	bfb8      	it	lt
 80077c0:	18e4      	addlt	r4, r4, r3
 80077c2:	f000 f8df 	bl	8007984 <__malloc_lock>
 80077c6:	4a1e      	ldr	r2, [pc, #120]	; (8007840 <_free_r+0x94>)
 80077c8:	9801      	ldr	r0, [sp, #4]
 80077ca:	6813      	ldr	r3, [r2, #0]
 80077cc:	b933      	cbnz	r3, 80077dc <_free_r+0x30>
 80077ce:	6063      	str	r3, [r4, #4]
 80077d0:	6014      	str	r4, [r2, #0]
 80077d2:	b003      	add	sp, #12
 80077d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077d8:	f000 b8da 	b.w	8007990 <__malloc_unlock>
 80077dc:	42a3      	cmp	r3, r4
 80077de:	d908      	bls.n	80077f2 <_free_r+0x46>
 80077e0:	6825      	ldr	r5, [r4, #0]
 80077e2:	1961      	adds	r1, r4, r5
 80077e4:	428b      	cmp	r3, r1
 80077e6:	bf01      	itttt	eq
 80077e8:	6819      	ldreq	r1, [r3, #0]
 80077ea:	685b      	ldreq	r3, [r3, #4]
 80077ec:	1949      	addeq	r1, r1, r5
 80077ee:	6021      	streq	r1, [r4, #0]
 80077f0:	e7ed      	b.n	80077ce <_free_r+0x22>
 80077f2:	461a      	mov	r2, r3
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	b10b      	cbz	r3, 80077fc <_free_r+0x50>
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	d9fa      	bls.n	80077f2 <_free_r+0x46>
 80077fc:	6811      	ldr	r1, [r2, #0]
 80077fe:	1855      	adds	r5, r2, r1
 8007800:	42a5      	cmp	r5, r4
 8007802:	d10b      	bne.n	800781c <_free_r+0x70>
 8007804:	6824      	ldr	r4, [r4, #0]
 8007806:	4421      	add	r1, r4
 8007808:	1854      	adds	r4, r2, r1
 800780a:	42a3      	cmp	r3, r4
 800780c:	6011      	str	r1, [r2, #0]
 800780e:	d1e0      	bne.n	80077d2 <_free_r+0x26>
 8007810:	681c      	ldr	r4, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	6053      	str	r3, [r2, #4]
 8007816:	440c      	add	r4, r1
 8007818:	6014      	str	r4, [r2, #0]
 800781a:	e7da      	b.n	80077d2 <_free_r+0x26>
 800781c:	d902      	bls.n	8007824 <_free_r+0x78>
 800781e:	230c      	movs	r3, #12
 8007820:	6003      	str	r3, [r0, #0]
 8007822:	e7d6      	b.n	80077d2 <_free_r+0x26>
 8007824:	6825      	ldr	r5, [r4, #0]
 8007826:	1961      	adds	r1, r4, r5
 8007828:	428b      	cmp	r3, r1
 800782a:	bf04      	itt	eq
 800782c:	6819      	ldreq	r1, [r3, #0]
 800782e:	685b      	ldreq	r3, [r3, #4]
 8007830:	6063      	str	r3, [r4, #4]
 8007832:	bf04      	itt	eq
 8007834:	1949      	addeq	r1, r1, r5
 8007836:	6021      	streq	r1, [r4, #0]
 8007838:	6054      	str	r4, [r2, #4]
 800783a:	e7ca      	b.n	80077d2 <_free_r+0x26>
 800783c:	b003      	add	sp, #12
 800783e:	bd30      	pop	{r4, r5, pc}
 8007840:	20002c58 	.word	0x20002c58

08007844 <sbrk_aligned>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4e0e      	ldr	r6, [pc, #56]	; (8007880 <sbrk_aligned+0x3c>)
 8007848:	460c      	mov	r4, r1
 800784a:	6831      	ldr	r1, [r6, #0]
 800784c:	4605      	mov	r5, r0
 800784e:	b911      	cbnz	r1, 8007856 <sbrk_aligned+0x12>
 8007850:	f000 fba6 	bl	8007fa0 <_sbrk_r>
 8007854:	6030      	str	r0, [r6, #0]
 8007856:	4621      	mov	r1, r4
 8007858:	4628      	mov	r0, r5
 800785a:	f000 fba1 	bl	8007fa0 <_sbrk_r>
 800785e:	1c43      	adds	r3, r0, #1
 8007860:	d00a      	beq.n	8007878 <sbrk_aligned+0x34>
 8007862:	1cc4      	adds	r4, r0, #3
 8007864:	f024 0403 	bic.w	r4, r4, #3
 8007868:	42a0      	cmp	r0, r4
 800786a:	d007      	beq.n	800787c <sbrk_aligned+0x38>
 800786c:	1a21      	subs	r1, r4, r0
 800786e:	4628      	mov	r0, r5
 8007870:	f000 fb96 	bl	8007fa0 <_sbrk_r>
 8007874:	3001      	adds	r0, #1
 8007876:	d101      	bne.n	800787c <sbrk_aligned+0x38>
 8007878:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800787c:	4620      	mov	r0, r4
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	20002c5c 	.word	0x20002c5c

08007884 <_malloc_r>:
 8007884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007888:	1ccd      	adds	r5, r1, #3
 800788a:	f025 0503 	bic.w	r5, r5, #3
 800788e:	3508      	adds	r5, #8
 8007890:	2d0c      	cmp	r5, #12
 8007892:	bf38      	it	cc
 8007894:	250c      	movcc	r5, #12
 8007896:	2d00      	cmp	r5, #0
 8007898:	4607      	mov	r7, r0
 800789a:	db01      	blt.n	80078a0 <_malloc_r+0x1c>
 800789c:	42a9      	cmp	r1, r5
 800789e:	d905      	bls.n	80078ac <_malloc_r+0x28>
 80078a0:	230c      	movs	r3, #12
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	2600      	movs	r6, #0
 80078a6:	4630      	mov	r0, r6
 80078a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007980 <_malloc_r+0xfc>
 80078b0:	f000 f868 	bl	8007984 <__malloc_lock>
 80078b4:	f8d8 3000 	ldr.w	r3, [r8]
 80078b8:	461c      	mov	r4, r3
 80078ba:	bb5c      	cbnz	r4, 8007914 <_malloc_r+0x90>
 80078bc:	4629      	mov	r1, r5
 80078be:	4638      	mov	r0, r7
 80078c0:	f7ff ffc0 	bl	8007844 <sbrk_aligned>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	4604      	mov	r4, r0
 80078c8:	d155      	bne.n	8007976 <_malloc_r+0xf2>
 80078ca:	f8d8 4000 	ldr.w	r4, [r8]
 80078ce:	4626      	mov	r6, r4
 80078d0:	2e00      	cmp	r6, #0
 80078d2:	d145      	bne.n	8007960 <_malloc_r+0xdc>
 80078d4:	2c00      	cmp	r4, #0
 80078d6:	d048      	beq.n	800796a <_malloc_r+0xe6>
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	4631      	mov	r1, r6
 80078dc:	4638      	mov	r0, r7
 80078de:	eb04 0903 	add.w	r9, r4, r3
 80078e2:	f000 fb5d 	bl	8007fa0 <_sbrk_r>
 80078e6:	4581      	cmp	r9, r0
 80078e8:	d13f      	bne.n	800796a <_malloc_r+0xe6>
 80078ea:	6821      	ldr	r1, [r4, #0]
 80078ec:	1a6d      	subs	r5, r5, r1
 80078ee:	4629      	mov	r1, r5
 80078f0:	4638      	mov	r0, r7
 80078f2:	f7ff ffa7 	bl	8007844 <sbrk_aligned>
 80078f6:	3001      	adds	r0, #1
 80078f8:	d037      	beq.n	800796a <_malloc_r+0xe6>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	442b      	add	r3, r5
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	f8d8 3000 	ldr.w	r3, [r8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d038      	beq.n	800797a <_malloc_r+0xf6>
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	42a2      	cmp	r2, r4
 800790c:	d12b      	bne.n	8007966 <_malloc_r+0xe2>
 800790e:	2200      	movs	r2, #0
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	e00f      	b.n	8007934 <_malloc_r+0xb0>
 8007914:	6822      	ldr	r2, [r4, #0]
 8007916:	1b52      	subs	r2, r2, r5
 8007918:	d41f      	bmi.n	800795a <_malloc_r+0xd6>
 800791a:	2a0b      	cmp	r2, #11
 800791c:	d917      	bls.n	800794e <_malloc_r+0xca>
 800791e:	1961      	adds	r1, r4, r5
 8007920:	42a3      	cmp	r3, r4
 8007922:	6025      	str	r5, [r4, #0]
 8007924:	bf18      	it	ne
 8007926:	6059      	strne	r1, [r3, #4]
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	bf08      	it	eq
 800792c:	f8c8 1000 	streq.w	r1, [r8]
 8007930:	5162      	str	r2, [r4, r5]
 8007932:	604b      	str	r3, [r1, #4]
 8007934:	4638      	mov	r0, r7
 8007936:	f104 060b 	add.w	r6, r4, #11
 800793a:	f000 f829 	bl	8007990 <__malloc_unlock>
 800793e:	f026 0607 	bic.w	r6, r6, #7
 8007942:	1d23      	adds	r3, r4, #4
 8007944:	1af2      	subs	r2, r6, r3
 8007946:	d0ae      	beq.n	80078a6 <_malloc_r+0x22>
 8007948:	1b9b      	subs	r3, r3, r6
 800794a:	50a3      	str	r3, [r4, r2]
 800794c:	e7ab      	b.n	80078a6 <_malloc_r+0x22>
 800794e:	42a3      	cmp	r3, r4
 8007950:	6862      	ldr	r2, [r4, #4]
 8007952:	d1dd      	bne.n	8007910 <_malloc_r+0x8c>
 8007954:	f8c8 2000 	str.w	r2, [r8]
 8007958:	e7ec      	b.n	8007934 <_malloc_r+0xb0>
 800795a:	4623      	mov	r3, r4
 800795c:	6864      	ldr	r4, [r4, #4]
 800795e:	e7ac      	b.n	80078ba <_malloc_r+0x36>
 8007960:	4634      	mov	r4, r6
 8007962:	6876      	ldr	r6, [r6, #4]
 8007964:	e7b4      	b.n	80078d0 <_malloc_r+0x4c>
 8007966:	4613      	mov	r3, r2
 8007968:	e7cc      	b.n	8007904 <_malloc_r+0x80>
 800796a:	230c      	movs	r3, #12
 800796c:	603b      	str	r3, [r7, #0]
 800796e:	4638      	mov	r0, r7
 8007970:	f000 f80e 	bl	8007990 <__malloc_unlock>
 8007974:	e797      	b.n	80078a6 <_malloc_r+0x22>
 8007976:	6025      	str	r5, [r4, #0]
 8007978:	e7dc      	b.n	8007934 <_malloc_r+0xb0>
 800797a:	605b      	str	r3, [r3, #4]
 800797c:	deff      	udf	#255	; 0xff
 800797e:	bf00      	nop
 8007980:	20002c58 	.word	0x20002c58

08007984 <__malloc_lock>:
 8007984:	4801      	ldr	r0, [pc, #4]	; (800798c <__malloc_lock+0x8>)
 8007986:	f7ff bf01 	b.w	800778c <__retarget_lock_acquire_recursive>
 800798a:	bf00      	nop
 800798c:	20002c54 	.word	0x20002c54

08007990 <__malloc_unlock>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__malloc_unlock+0x8>)
 8007992:	f7ff befc 	b.w	800778e <__retarget_lock_release_recursive>
 8007996:	bf00      	nop
 8007998:	20002c54 	.word	0x20002c54

0800799c <__ssputs_r>:
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	688e      	ldr	r6, [r1, #8]
 80079a2:	461f      	mov	r7, r3
 80079a4:	42be      	cmp	r6, r7
 80079a6:	680b      	ldr	r3, [r1, #0]
 80079a8:	4682      	mov	sl, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	4690      	mov	r8, r2
 80079ae:	d82c      	bhi.n	8007a0a <__ssputs_r+0x6e>
 80079b0:	898a      	ldrh	r2, [r1, #12]
 80079b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079b6:	d026      	beq.n	8007a06 <__ssputs_r+0x6a>
 80079b8:	6965      	ldr	r5, [r4, #20]
 80079ba:	6909      	ldr	r1, [r1, #16]
 80079bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079c0:	eba3 0901 	sub.w	r9, r3, r1
 80079c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079c8:	1c7b      	adds	r3, r7, #1
 80079ca:	444b      	add	r3, r9
 80079cc:	106d      	asrs	r5, r5, #1
 80079ce:	429d      	cmp	r5, r3
 80079d0:	bf38      	it	cc
 80079d2:	461d      	movcc	r5, r3
 80079d4:	0553      	lsls	r3, r2, #21
 80079d6:	d527      	bpl.n	8007a28 <__ssputs_r+0x8c>
 80079d8:	4629      	mov	r1, r5
 80079da:	f7ff ff53 	bl	8007884 <_malloc_r>
 80079de:	4606      	mov	r6, r0
 80079e0:	b360      	cbz	r0, 8007a3c <__ssputs_r+0xa0>
 80079e2:	6921      	ldr	r1, [r4, #16]
 80079e4:	464a      	mov	r2, r9
 80079e6:	f7ff fed3 	bl	8007790 <memcpy>
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	6126      	str	r6, [r4, #16]
 80079f8:	6165      	str	r5, [r4, #20]
 80079fa:	444e      	add	r6, r9
 80079fc:	eba5 0509 	sub.w	r5, r5, r9
 8007a00:	6026      	str	r6, [r4, #0]
 8007a02:	60a5      	str	r5, [r4, #8]
 8007a04:	463e      	mov	r6, r7
 8007a06:	42be      	cmp	r6, r7
 8007a08:	d900      	bls.n	8007a0c <__ssputs_r+0x70>
 8007a0a:	463e      	mov	r6, r7
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	4632      	mov	r2, r6
 8007a10:	4641      	mov	r1, r8
 8007a12:	f000 faab 	bl	8007f6c <memmove>
 8007a16:	68a3      	ldr	r3, [r4, #8]
 8007a18:	1b9b      	subs	r3, r3, r6
 8007a1a:	60a3      	str	r3, [r4, #8]
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	4433      	add	r3, r6
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	2000      	movs	r0, #0
 8007a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a28:	462a      	mov	r2, r5
 8007a2a:	f000 fac9 	bl	8007fc0 <_realloc_r>
 8007a2e:	4606      	mov	r6, r0
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d1e0      	bne.n	80079f6 <__ssputs_r+0x5a>
 8007a34:	6921      	ldr	r1, [r4, #16]
 8007a36:	4650      	mov	r0, sl
 8007a38:	f7ff feb8 	bl	80077ac <_free_r>
 8007a3c:	230c      	movs	r3, #12
 8007a3e:	f8ca 3000 	str.w	r3, [sl]
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a48:	81a3      	strh	r3, [r4, #12]
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a4e:	e7e9      	b.n	8007a24 <__ssputs_r+0x88>

08007a50 <_svfiprintf_r>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	4698      	mov	r8, r3
 8007a56:	898b      	ldrh	r3, [r1, #12]
 8007a58:	061b      	lsls	r3, r3, #24
 8007a5a:	b09d      	sub	sp, #116	; 0x74
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	460d      	mov	r5, r1
 8007a60:	4614      	mov	r4, r2
 8007a62:	d50e      	bpl.n	8007a82 <_svfiprintf_r+0x32>
 8007a64:	690b      	ldr	r3, [r1, #16]
 8007a66:	b963      	cbnz	r3, 8007a82 <_svfiprintf_r+0x32>
 8007a68:	2140      	movs	r1, #64	; 0x40
 8007a6a:	f7ff ff0b 	bl	8007884 <_malloc_r>
 8007a6e:	6028      	str	r0, [r5, #0]
 8007a70:	6128      	str	r0, [r5, #16]
 8007a72:	b920      	cbnz	r0, 8007a7e <_svfiprintf_r+0x2e>
 8007a74:	230c      	movs	r3, #12
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a7c:	e0d0      	b.n	8007c20 <_svfiprintf_r+0x1d0>
 8007a7e:	2340      	movs	r3, #64	; 0x40
 8007a80:	616b      	str	r3, [r5, #20]
 8007a82:	2300      	movs	r3, #0
 8007a84:	9309      	str	r3, [sp, #36]	; 0x24
 8007a86:	2320      	movs	r3, #32
 8007a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a90:	2330      	movs	r3, #48	; 0x30
 8007a92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c38 <_svfiprintf_r+0x1e8>
 8007a96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a9a:	f04f 0901 	mov.w	r9, #1
 8007a9e:	4623      	mov	r3, r4
 8007aa0:	469a      	mov	sl, r3
 8007aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aa6:	b10a      	cbz	r2, 8007aac <_svfiprintf_r+0x5c>
 8007aa8:	2a25      	cmp	r2, #37	; 0x25
 8007aaa:	d1f9      	bne.n	8007aa0 <_svfiprintf_r+0x50>
 8007aac:	ebba 0b04 	subs.w	fp, sl, r4
 8007ab0:	d00b      	beq.n	8007aca <_svfiprintf_r+0x7a>
 8007ab2:	465b      	mov	r3, fp
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f7ff ff6f 	bl	800799c <__ssputs_r>
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f000 80a9 	beq.w	8007c16 <_svfiprintf_r+0x1c6>
 8007ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ac6:	445a      	add	r2, fp
 8007ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8007aca:	f89a 3000 	ldrb.w	r3, [sl]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80a1 	beq.w	8007c16 <_svfiprintf_r+0x1c6>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ade:	f10a 0a01 	add.w	sl, sl, #1
 8007ae2:	9304      	str	r3, [sp, #16]
 8007ae4:	9307      	str	r3, [sp, #28]
 8007ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aea:	931a      	str	r3, [sp, #104]	; 0x68
 8007aec:	4654      	mov	r4, sl
 8007aee:	2205      	movs	r2, #5
 8007af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af4:	4850      	ldr	r0, [pc, #320]	; (8007c38 <_svfiprintf_r+0x1e8>)
 8007af6:	f7f8 fb6b 	bl	80001d0 <memchr>
 8007afa:	9a04      	ldr	r2, [sp, #16]
 8007afc:	b9d8      	cbnz	r0, 8007b36 <_svfiprintf_r+0xe6>
 8007afe:	06d0      	lsls	r0, r2, #27
 8007b00:	bf44      	itt	mi
 8007b02:	2320      	movmi	r3, #32
 8007b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b08:	0711      	lsls	r1, r2, #28
 8007b0a:	bf44      	itt	mi
 8007b0c:	232b      	movmi	r3, #43	; 0x2b
 8007b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b12:	f89a 3000 	ldrb.w	r3, [sl]
 8007b16:	2b2a      	cmp	r3, #42	; 0x2a
 8007b18:	d015      	beq.n	8007b46 <_svfiprintf_r+0xf6>
 8007b1a:	9a07      	ldr	r2, [sp, #28]
 8007b1c:	4654      	mov	r4, sl
 8007b1e:	2000      	movs	r0, #0
 8007b20:	f04f 0c0a 	mov.w	ip, #10
 8007b24:	4621      	mov	r1, r4
 8007b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b2a:	3b30      	subs	r3, #48	; 0x30
 8007b2c:	2b09      	cmp	r3, #9
 8007b2e:	d94d      	bls.n	8007bcc <_svfiprintf_r+0x17c>
 8007b30:	b1b0      	cbz	r0, 8007b60 <_svfiprintf_r+0x110>
 8007b32:	9207      	str	r2, [sp, #28]
 8007b34:	e014      	b.n	8007b60 <_svfiprintf_r+0x110>
 8007b36:	eba0 0308 	sub.w	r3, r0, r8
 8007b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	9304      	str	r3, [sp, #16]
 8007b42:	46a2      	mov	sl, r4
 8007b44:	e7d2      	b.n	8007aec <_svfiprintf_r+0x9c>
 8007b46:	9b03      	ldr	r3, [sp, #12]
 8007b48:	1d19      	adds	r1, r3, #4
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	9103      	str	r1, [sp, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	bfbb      	ittet	lt
 8007b52:	425b      	neglt	r3, r3
 8007b54:	f042 0202 	orrlt.w	r2, r2, #2
 8007b58:	9307      	strge	r3, [sp, #28]
 8007b5a:	9307      	strlt	r3, [sp, #28]
 8007b5c:	bfb8      	it	lt
 8007b5e:	9204      	strlt	r2, [sp, #16]
 8007b60:	7823      	ldrb	r3, [r4, #0]
 8007b62:	2b2e      	cmp	r3, #46	; 0x2e
 8007b64:	d10c      	bne.n	8007b80 <_svfiprintf_r+0x130>
 8007b66:	7863      	ldrb	r3, [r4, #1]
 8007b68:	2b2a      	cmp	r3, #42	; 0x2a
 8007b6a:	d134      	bne.n	8007bd6 <_svfiprintf_r+0x186>
 8007b6c:	9b03      	ldr	r3, [sp, #12]
 8007b6e:	1d1a      	adds	r2, r3, #4
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	9203      	str	r2, [sp, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	bfb8      	it	lt
 8007b78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b7c:	3402      	adds	r4, #2
 8007b7e:	9305      	str	r3, [sp, #20]
 8007b80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c48 <_svfiprintf_r+0x1f8>
 8007b84:	7821      	ldrb	r1, [r4, #0]
 8007b86:	2203      	movs	r2, #3
 8007b88:	4650      	mov	r0, sl
 8007b8a:	f7f8 fb21 	bl	80001d0 <memchr>
 8007b8e:	b138      	cbz	r0, 8007ba0 <_svfiprintf_r+0x150>
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	eba0 000a 	sub.w	r0, r0, sl
 8007b96:	2240      	movs	r2, #64	; 0x40
 8007b98:	4082      	lsls	r2, r0
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	3401      	adds	r4, #1
 8007b9e:	9304      	str	r3, [sp, #16]
 8007ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba4:	4825      	ldr	r0, [pc, #148]	; (8007c3c <_svfiprintf_r+0x1ec>)
 8007ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007baa:	2206      	movs	r2, #6
 8007bac:	f7f8 fb10 	bl	80001d0 <memchr>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d038      	beq.n	8007c26 <_svfiprintf_r+0x1d6>
 8007bb4:	4b22      	ldr	r3, [pc, #136]	; (8007c40 <_svfiprintf_r+0x1f0>)
 8007bb6:	bb1b      	cbnz	r3, 8007c00 <_svfiprintf_r+0x1b0>
 8007bb8:	9b03      	ldr	r3, [sp, #12]
 8007bba:	3307      	adds	r3, #7
 8007bbc:	f023 0307 	bic.w	r3, r3, #7
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	9303      	str	r3, [sp, #12]
 8007bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc6:	4433      	add	r3, r6
 8007bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bca:	e768      	b.n	8007a9e <_svfiprintf_r+0x4e>
 8007bcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	e7a6      	b.n	8007b24 <_svfiprintf_r+0xd4>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	3401      	adds	r4, #1
 8007bda:	9305      	str	r3, [sp, #20]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f04f 0c0a 	mov.w	ip, #10
 8007be2:	4620      	mov	r0, r4
 8007be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be8:	3a30      	subs	r2, #48	; 0x30
 8007bea:	2a09      	cmp	r2, #9
 8007bec:	d903      	bls.n	8007bf6 <_svfiprintf_r+0x1a6>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0c6      	beq.n	8007b80 <_svfiprintf_r+0x130>
 8007bf2:	9105      	str	r1, [sp, #20]
 8007bf4:	e7c4      	b.n	8007b80 <_svfiprintf_r+0x130>
 8007bf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e7f0      	b.n	8007be2 <_svfiprintf_r+0x192>
 8007c00:	ab03      	add	r3, sp, #12
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	462a      	mov	r2, r5
 8007c06:	4b0f      	ldr	r3, [pc, #60]	; (8007c44 <_svfiprintf_r+0x1f4>)
 8007c08:	a904      	add	r1, sp, #16
 8007c0a:	4638      	mov	r0, r7
 8007c0c:	f3af 8000 	nop.w
 8007c10:	1c42      	adds	r2, r0, #1
 8007c12:	4606      	mov	r6, r0
 8007c14:	d1d6      	bne.n	8007bc4 <_svfiprintf_r+0x174>
 8007c16:	89ab      	ldrh	r3, [r5, #12]
 8007c18:	065b      	lsls	r3, r3, #25
 8007c1a:	f53f af2d 	bmi.w	8007a78 <_svfiprintf_r+0x28>
 8007c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c20:	b01d      	add	sp, #116	; 0x74
 8007c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c26:	ab03      	add	r3, sp, #12
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <_svfiprintf_r+0x1f4>)
 8007c2e:	a904      	add	r1, sp, #16
 8007c30:	4638      	mov	r0, r7
 8007c32:	f000 f879 	bl	8007d28 <_printf_i>
 8007c36:	e7eb      	b.n	8007c10 <_svfiprintf_r+0x1c0>
 8007c38:	08008250 	.word	0x08008250
 8007c3c:	0800825a 	.word	0x0800825a
 8007c40:	00000000 	.word	0x00000000
 8007c44:	0800799d 	.word	0x0800799d
 8007c48:	08008256 	.word	0x08008256

08007c4c <_printf_common>:
 8007c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c50:	4616      	mov	r6, r2
 8007c52:	4699      	mov	r9, r3
 8007c54:	688a      	ldr	r2, [r1, #8]
 8007c56:	690b      	ldr	r3, [r1, #16]
 8007c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	bfb8      	it	lt
 8007c60:	4613      	movlt	r3, r2
 8007c62:	6033      	str	r3, [r6, #0]
 8007c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c68:	4607      	mov	r7, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	b10a      	cbz	r2, 8007c72 <_printf_common+0x26>
 8007c6e:	3301      	adds	r3, #1
 8007c70:	6033      	str	r3, [r6, #0]
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	0699      	lsls	r1, r3, #26
 8007c76:	bf42      	ittt	mi
 8007c78:	6833      	ldrmi	r3, [r6, #0]
 8007c7a:	3302      	addmi	r3, #2
 8007c7c:	6033      	strmi	r3, [r6, #0]
 8007c7e:	6825      	ldr	r5, [r4, #0]
 8007c80:	f015 0506 	ands.w	r5, r5, #6
 8007c84:	d106      	bne.n	8007c94 <_printf_common+0x48>
 8007c86:	f104 0a19 	add.w	sl, r4, #25
 8007c8a:	68e3      	ldr	r3, [r4, #12]
 8007c8c:	6832      	ldr	r2, [r6, #0]
 8007c8e:	1a9b      	subs	r3, r3, r2
 8007c90:	42ab      	cmp	r3, r5
 8007c92:	dc26      	bgt.n	8007ce2 <_printf_common+0x96>
 8007c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c98:	1e13      	subs	r3, r2, #0
 8007c9a:	6822      	ldr	r2, [r4, #0]
 8007c9c:	bf18      	it	ne
 8007c9e:	2301      	movne	r3, #1
 8007ca0:	0692      	lsls	r2, r2, #26
 8007ca2:	d42b      	bmi.n	8007cfc <_printf_common+0xb0>
 8007ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ca8:	4649      	mov	r1, r9
 8007caa:	4638      	mov	r0, r7
 8007cac:	47c0      	blx	r8
 8007cae:	3001      	adds	r0, #1
 8007cb0:	d01e      	beq.n	8007cf0 <_printf_common+0xa4>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	6922      	ldr	r2, [r4, #16]
 8007cb6:	f003 0306 	and.w	r3, r3, #6
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	bf02      	ittt	eq
 8007cbe:	68e5      	ldreq	r5, [r4, #12]
 8007cc0:	6833      	ldreq	r3, [r6, #0]
 8007cc2:	1aed      	subeq	r5, r5, r3
 8007cc4:	68a3      	ldr	r3, [r4, #8]
 8007cc6:	bf0c      	ite	eq
 8007cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ccc:	2500      	movne	r5, #0
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	bfc4      	itt	gt
 8007cd2:	1a9b      	subgt	r3, r3, r2
 8007cd4:	18ed      	addgt	r5, r5, r3
 8007cd6:	2600      	movs	r6, #0
 8007cd8:	341a      	adds	r4, #26
 8007cda:	42b5      	cmp	r5, r6
 8007cdc:	d11a      	bne.n	8007d14 <_printf_common+0xc8>
 8007cde:	2000      	movs	r0, #0
 8007ce0:	e008      	b.n	8007cf4 <_printf_common+0xa8>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4652      	mov	r2, sl
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	4638      	mov	r0, r7
 8007cea:	47c0      	blx	r8
 8007cec:	3001      	adds	r0, #1
 8007cee:	d103      	bne.n	8007cf8 <_printf_common+0xac>
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf8:	3501      	adds	r5, #1
 8007cfa:	e7c6      	b.n	8007c8a <_printf_common+0x3e>
 8007cfc:	18e1      	adds	r1, r4, r3
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	2030      	movs	r0, #48	; 0x30
 8007d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d06:	4422      	add	r2, r4
 8007d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d10:	3302      	adds	r3, #2
 8007d12:	e7c7      	b.n	8007ca4 <_printf_common+0x58>
 8007d14:	2301      	movs	r3, #1
 8007d16:	4622      	mov	r2, r4
 8007d18:	4649      	mov	r1, r9
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	47c0      	blx	r8
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d0e6      	beq.n	8007cf0 <_printf_common+0xa4>
 8007d22:	3601      	adds	r6, #1
 8007d24:	e7d9      	b.n	8007cda <_printf_common+0x8e>
	...

08007d28 <_printf_i>:
 8007d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	7e0f      	ldrb	r7, [r1, #24]
 8007d2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d30:	2f78      	cmp	r7, #120	; 0x78
 8007d32:	4691      	mov	r9, r2
 8007d34:	4680      	mov	r8, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	469a      	mov	sl, r3
 8007d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d3e:	d807      	bhi.n	8007d50 <_printf_i+0x28>
 8007d40:	2f62      	cmp	r7, #98	; 0x62
 8007d42:	d80a      	bhi.n	8007d5a <_printf_i+0x32>
 8007d44:	2f00      	cmp	r7, #0
 8007d46:	f000 80d4 	beq.w	8007ef2 <_printf_i+0x1ca>
 8007d4a:	2f58      	cmp	r7, #88	; 0x58
 8007d4c:	f000 80c0 	beq.w	8007ed0 <_printf_i+0x1a8>
 8007d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d58:	e03a      	b.n	8007dd0 <_printf_i+0xa8>
 8007d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d5e:	2b15      	cmp	r3, #21
 8007d60:	d8f6      	bhi.n	8007d50 <_printf_i+0x28>
 8007d62:	a101      	add	r1, pc, #4	; (adr r1, 8007d68 <_printf_i+0x40>)
 8007d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d68:	08007dc1 	.word	0x08007dc1
 8007d6c:	08007dd5 	.word	0x08007dd5
 8007d70:	08007d51 	.word	0x08007d51
 8007d74:	08007d51 	.word	0x08007d51
 8007d78:	08007d51 	.word	0x08007d51
 8007d7c:	08007d51 	.word	0x08007d51
 8007d80:	08007dd5 	.word	0x08007dd5
 8007d84:	08007d51 	.word	0x08007d51
 8007d88:	08007d51 	.word	0x08007d51
 8007d8c:	08007d51 	.word	0x08007d51
 8007d90:	08007d51 	.word	0x08007d51
 8007d94:	08007ed9 	.word	0x08007ed9
 8007d98:	08007e01 	.word	0x08007e01
 8007d9c:	08007e93 	.word	0x08007e93
 8007da0:	08007d51 	.word	0x08007d51
 8007da4:	08007d51 	.word	0x08007d51
 8007da8:	08007efb 	.word	0x08007efb
 8007dac:	08007d51 	.word	0x08007d51
 8007db0:	08007e01 	.word	0x08007e01
 8007db4:	08007d51 	.word	0x08007d51
 8007db8:	08007d51 	.word	0x08007d51
 8007dbc:	08007e9b 	.word	0x08007e9b
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	1d1a      	adds	r2, r3, #4
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	602a      	str	r2, [r5, #0]
 8007dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e09f      	b.n	8007f14 <_printf_i+0x1ec>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	0607      	lsls	r7, r0, #24
 8007dda:	f103 0104 	add.w	r1, r3, #4
 8007dde:	6029      	str	r1, [r5, #0]
 8007de0:	d501      	bpl.n	8007de6 <_printf_i+0xbe>
 8007de2:	681e      	ldr	r6, [r3, #0]
 8007de4:	e003      	b.n	8007dee <_printf_i+0xc6>
 8007de6:	0646      	lsls	r6, r0, #25
 8007de8:	d5fb      	bpl.n	8007de2 <_printf_i+0xba>
 8007dea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007dee:	2e00      	cmp	r6, #0
 8007df0:	da03      	bge.n	8007dfa <_printf_i+0xd2>
 8007df2:	232d      	movs	r3, #45	; 0x2d
 8007df4:	4276      	negs	r6, r6
 8007df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfa:	485a      	ldr	r0, [pc, #360]	; (8007f64 <_printf_i+0x23c>)
 8007dfc:	230a      	movs	r3, #10
 8007dfe:	e012      	b.n	8007e26 <_printf_i+0xfe>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	6820      	ldr	r0, [r4, #0]
 8007e04:	1d19      	adds	r1, r3, #4
 8007e06:	6029      	str	r1, [r5, #0]
 8007e08:	0605      	lsls	r5, r0, #24
 8007e0a:	d501      	bpl.n	8007e10 <_printf_i+0xe8>
 8007e0c:	681e      	ldr	r6, [r3, #0]
 8007e0e:	e002      	b.n	8007e16 <_printf_i+0xee>
 8007e10:	0641      	lsls	r1, r0, #25
 8007e12:	d5fb      	bpl.n	8007e0c <_printf_i+0xe4>
 8007e14:	881e      	ldrh	r6, [r3, #0]
 8007e16:	4853      	ldr	r0, [pc, #332]	; (8007f64 <_printf_i+0x23c>)
 8007e18:	2f6f      	cmp	r7, #111	; 0x6f
 8007e1a:	bf0c      	ite	eq
 8007e1c:	2308      	moveq	r3, #8
 8007e1e:	230a      	movne	r3, #10
 8007e20:	2100      	movs	r1, #0
 8007e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e26:	6865      	ldr	r5, [r4, #4]
 8007e28:	60a5      	str	r5, [r4, #8]
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	bfa2      	ittt	ge
 8007e2e:	6821      	ldrge	r1, [r4, #0]
 8007e30:	f021 0104 	bicge.w	r1, r1, #4
 8007e34:	6021      	strge	r1, [r4, #0]
 8007e36:	b90e      	cbnz	r6, 8007e3c <_printf_i+0x114>
 8007e38:	2d00      	cmp	r5, #0
 8007e3a:	d04b      	beq.n	8007ed4 <_printf_i+0x1ac>
 8007e3c:	4615      	mov	r5, r2
 8007e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e42:	fb03 6711 	mls	r7, r3, r1, r6
 8007e46:	5dc7      	ldrb	r7, [r0, r7]
 8007e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e4c:	4637      	mov	r7, r6
 8007e4e:	42bb      	cmp	r3, r7
 8007e50:	460e      	mov	r6, r1
 8007e52:	d9f4      	bls.n	8007e3e <_printf_i+0x116>
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d10b      	bne.n	8007e70 <_printf_i+0x148>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	07de      	lsls	r6, r3, #31
 8007e5c:	d508      	bpl.n	8007e70 <_printf_i+0x148>
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	6861      	ldr	r1, [r4, #4]
 8007e62:	4299      	cmp	r1, r3
 8007e64:	bfde      	ittt	le
 8007e66:	2330      	movle	r3, #48	; 0x30
 8007e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e70:	1b52      	subs	r2, r2, r5
 8007e72:	6122      	str	r2, [r4, #16]
 8007e74:	f8cd a000 	str.w	sl, [sp]
 8007e78:	464b      	mov	r3, r9
 8007e7a:	aa03      	add	r2, sp, #12
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f7ff fee4 	bl	8007c4c <_printf_common>
 8007e84:	3001      	adds	r0, #1
 8007e86:	d14a      	bne.n	8007f1e <_printf_i+0x1f6>
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e8c:	b004      	add	sp, #16
 8007e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	f043 0320 	orr.w	r3, r3, #32
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	4833      	ldr	r0, [pc, #204]	; (8007f68 <_printf_i+0x240>)
 8007e9c:	2778      	movs	r7, #120	; 0x78
 8007e9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	6829      	ldr	r1, [r5, #0]
 8007ea6:	061f      	lsls	r7, r3, #24
 8007ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007eac:	d402      	bmi.n	8007eb4 <_printf_i+0x18c>
 8007eae:	065f      	lsls	r7, r3, #25
 8007eb0:	bf48      	it	mi
 8007eb2:	b2b6      	uxthmi	r6, r6
 8007eb4:	07df      	lsls	r7, r3, #31
 8007eb6:	bf48      	it	mi
 8007eb8:	f043 0320 	orrmi.w	r3, r3, #32
 8007ebc:	6029      	str	r1, [r5, #0]
 8007ebe:	bf48      	it	mi
 8007ec0:	6023      	strmi	r3, [r4, #0]
 8007ec2:	b91e      	cbnz	r6, 8007ecc <_printf_i+0x1a4>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	f023 0320 	bic.w	r3, r3, #32
 8007eca:	6023      	str	r3, [r4, #0]
 8007ecc:	2310      	movs	r3, #16
 8007ece:	e7a7      	b.n	8007e20 <_printf_i+0xf8>
 8007ed0:	4824      	ldr	r0, [pc, #144]	; (8007f64 <_printf_i+0x23c>)
 8007ed2:	e7e4      	b.n	8007e9e <_printf_i+0x176>
 8007ed4:	4615      	mov	r5, r2
 8007ed6:	e7bd      	b.n	8007e54 <_printf_i+0x12c>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	6826      	ldr	r6, [r4, #0]
 8007edc:	6961      	ldr	r1, [r4, #20]
 8007ede:	1d18      	adds	r0, r3, #4
 8007ee0:	6028      	str	r0, [r5, #0]
 8007ee2:	0635      	lsls	r5, r6, #24
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	d501      	bpl.n	8007eec <_printf_i+0x1c4>
 8007ee8:	6019      	str	r1, [r3, #0]
 8007eea:	e002      	b.n	8007ef2 <_printf_i+0x1ca>
 8007eec:	0670      	lsls	r0, r6, #25
 8007eee:	d5fb      	bpl.n	8007ee8 <_printf_i+0x1c0>
 8007ef0:	8019      	strh	r1, [r3, #0]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	6123      	str	r3, [r4, #16]
 8007ef6:	4615      	mov	r5, r2
 8007ef8:	e7bc      	b.n	8007e74 <_printf_i+0x14c>
 8007efa:	682b      	ldr	r3, [r5, #0]
 8007efc:	1d1a      	adds	r2, r3, #4
 8007efe:	602a      	str	r2, [r5, #0]
 8007f00:	681d      	ldr	r5, [r3, #0]
 8007f02:	6862      	ldr	r2, [r4, #4]
 8007f04:	2100      	movs	r1, #0
 8007f06:	4628      	mov	r0, r5
 8007f08:	f7f8 f962 	bl	80001d0 <memchr>
 8007f0c:	b108      	cbz	r0, 8007f12 <_printf_i+0x1ea>
 8007f0e:	1b40      	subs	r0, r0, r5
 8007f10:	6060      	str	r0, [r4, #4]
 8007f12:	6863      	ldr	r3, [r4, #4]
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	2300      	movs	r3, #0
 8007f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f1c:	e7aa      	b.n	8007e74 <_printf_i+0x14c>
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	462a      	mov	r2, r5
 8007f22:	4649      	mov	r1, r9
 8007f24:	4640      	mov	r0, r8
 8007f26:	47d0      	blx	sl
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d0ad      	beq.n	8007e88 <_printf_i+0x160>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	079b      	lsls	r3, r3, #30
 8007f30:	d413      	bmi.n	8007f5a <_printf_i+0x232>
 8007f32:	68e0      	ldr	r0, [r4, #12]
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	4298      	cmp	r0, r3
 8007f38:	bfb8      	it	lt
 8007f3a:	4618      	movlt	r0, r3
 8007f3c:	e7a6      	b.n	8007e8c <_printf_i+0x164>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4632      	mov	r2, r6
 8007f42:	4649      	mov	r1, r9
 8007f44:	4640      	mov	r0, r8
 8007f46:	47d0      	blx	sl
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d09d      	beq.n	8007e88 <_printf_i+0x160>
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	68e3      	ldr	r3, [r4, #12]
 8007f50:	9903      	ldr	r1, [sp, #12]
 8007f52:	1a5b      	subs	r3, r3, r1
 8007f54:	42ab      	cmp	r3, r5
 8007f56:	dcf2      	bgt.n	8007f3e <_printf_i+0x216>
 8007f58:	e7eb      	b.n	8007f32 <_printf_i+0x20a>
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	f104 0619 	add.w	r6, r4, #25
 8007f60:	e7f5      	b.n	8007f4e <_printf_i+0x226>
 8007f62:	bf00      	nop
 8007f64:	08008261 	.word	0x08008261
 8007f68:	08008272 	.word	0x08008272

08007f6c <memmove>:
 8007f6c:	4288      	cmp	r0, r1
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	eb01 0402 	add.w	r4, r1, r2
 8007f74:	d902      	bls.n	8007f7c <memmove+0x10>
 8007f76:	4284      	cmp	r4, r0
 8007f78:	4623      	mov	r3, r4
 8007f7a:	d807      	bhi.n	8007f8c <memmove+0x20>
 8007f7c:	1e43      	subs	r3, r0, #1
 8007f7e:	42a1      	cmp	r1, r4
 8007f80:	d008      	beq.n	8007f94 <memmove+0x28>
 8007f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f8a:	e7f8      	b.n	8007f7e <memmove+0x12>
 8007f8c:	4402      	add	r2, r0
 8007f8e:	4601      	mov	r1, r0
 8007f90:	428a      	cmp	r2, r1
 8007f92:	d100      	bne.n	8007f96 <memmove+0x2a>
 8007f94:	bd10      	pop	{r4, pc}
 8007f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f9e:	e7f7      	b.n	8007f90 <memmove+0x24>

08007fa0 <_sbrk_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d06      	ldr	r5, [pc, #24]	; (8007fbc <_sbrk_r+0x1c>)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	602b      	str	r3, [r5, #0]
 8007fac:	f7f8 ffe6 	bl	8000f7c <_sbrk>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_sbrk_r+0x1a>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_sbrk_r+0x1a>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	20002c50 	.word	0x20002c50

08007fc0 <_realloc_r>:
 8007fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	4680      	mov	r8, r0
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	460e      	mov	r6, r1
 8007fca:	b921      	cbnz	r1, 8007fd6 <_realloc_r+0x16>
 8007fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	f7ff bc57 	b.w	8007884 <_malloc_r>
 8007fd6:	b92a      	cbnz	r2, 8007fe4 <_realloc_r+0x24>
 8007fd8:	f7ff fbe8 	bl	80077ac <_free_r>
 8007fdc:	4625      	mov	r5, r4
 8007fde:	4628      	mov	r0, r5
 8007fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe4:	f000 f81b 	bl	800801e <_malloc_usable_size_r>
 8007fe8:	4284      	cmp	r4, r0
 8007fea:	4607      	mov	r7, r0
 8007fec:	d802      	bhi.n	8007ff4 <_realloc_r+0x34>
 8007fee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ff2:	d812      	bhi.n	800801a <_realloc_r+0x5a>
 8007ff4:	4621      	mov	r1, r4
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	f7ff fc44 	bl	8007884 <_malloc_r>
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d0ed      	beq.n	8007fde <_realloc_r+0x1e>
 8008002:	42bc      	cmp	r4, r7
 8008004:	4622      	mov	r2, r4
 8008006:	4631      	mov	r1, r6
 8008008:	bf28      	it	cs
 800800a:	463a      	movcs	r2, r7
 800800c:	f7ff fbc0 	bl	8007790 <memcpy>
 8008010:	4631      	mov	r1, r6
 8008012:	4640      	mov	r0, r8
 8008014:	f7ff fbca 	bl	80077ac <_free_r>
 8008018:	e7e1      	b.n	8007fde <_realloc_r+0x1e>
 800801a:	4635      	mov	r5, r6
 800801c:	e7df      	b.n	8007fde <_realloc_r+0x1e>

0800801e <_malloc_usable_size_r>:
 800801e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008022:	1f18      	subs	r0, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfbc      	itt	lt
 8008028:	580b      	ldrlt	r3, [r1, r0]
 800802a:	18c0      	addlt	r0, r0, r3
 800802c:	4770      	bx	lr
	...

08008030 <_init>:
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	bf00      	nop
 8008034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008036:	bc08      	pop	{r3}
 8008038:	469e      	mov	lr, r3
 800803a:	4770      	bx	lr

0800803c <_fini>:
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	bf00      	nop
 8008040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008042:	bc08      	pop	{r3}
 8008044:	469e      	mov	lr, r3
 8008046:	4770      	bx	lr
