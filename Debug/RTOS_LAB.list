
RTOS_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007120  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080072b0  080072b0  000172b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007504  08007504  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800750c  0800750c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800750c  0800750c  0001750c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007514  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002360  20000088  0800759c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023e8  0800759c  000223e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019fa3  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000348e  00000000  00000000  0003a09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112b  00000000  00000000  0003eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e21  00000000  00000000  0003fc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e53  00000000  00000000  00043a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fde3b  00000000  00000000  0005b8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061f4  00000000  00000000  00159724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0015f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007298 	.word	0x08007298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007298 	.word	0x08007298

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_GPIO_EXTI_Callback>:
* @brief Callback for S1-S3 SHIELD BUTTONS interrupt.
* @param GPIO_Pin: The GPIO_Pin of the button that generated the interrupt.
* @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b09c      	sub	sp, #112	; 0x70
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[100];
	int data_size;
	data_size = sprintf((char*)buffer, "A BUTTON PRESSED!!\r\n");
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	4923      	ldr	r1, [pc, #140]	; (8000608 <HAL_GPIO_EXTI_Callback+0x9c>)
 800057c:	4618      	mov	r0, r3
 800057e:	f006 f9e7 	bl	8006950 <siprintf>
 8000582:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 8000584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000586:	b29a      	uxth	r2, r3
 8000588:	f107 0108 	add.w	r1, r7, #8
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	481f      	ldr	r0, [pc, #124]	; (800060c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000590:	f003 f98a 	bl	80038a8 <HAL_UART_Transmit>
	if(GPIO_Pin == S1_SHLD_BUTTON_Pin)
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d10e      	bne.n	80005b8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		data_size = sprintf((char*)buffer, "S1 BUTTON PRESSED!!\r\n");
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	491c      	ldr	r1, [pc, #112]	; (8000610 <HAL_GPIO_EXTI_Callback+0xa4>)
 80005a0:	4618      	mov	r0, r3
 80005a2:	f006 f9d5 	bl	8006950 <siprintf>
 80005a6:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 80005a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f107 0108 	add.w	r1, r7, #8
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	4816      	ldr	r0, [pc, #88]	; (800060c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005b4:	f003 f978 	bl	80038a8 <HAL_UART_Transmit>
	}

	if(GPIO_Pin == S2_SHLD_BUTTON_Pin)
 80005b8:	88fb      	ldrh	r3, [r7, #6]
 80005ba:	2b10      	cmp	r3, #16
 80005bc:	d10e      	bne.n	80005dc <HAL_GPIO_EXTI_Callback+0x70>
	{
		data_size = sprintf((char*)buffer, "S2 BUTTON PRESSED!!\r\n");
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	4914      	ldr	r1, [pc, #80]	; (8000614 <HAL_GPIO_EXTI_Callback+0xa8>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f006 f9c3 	bl	8006950 <siprintf>
 80005ca:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 80005cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f107 0108 	add.w	r1, r7, #8
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005d8:	f003 f966 	bl	80038a8 <HAL_UART_Transmit>
	}

	if(GPIO_Pin == S3_SHLD_BUTTON_Pin)
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d10e      	bne.n	8000600 <HAL_GPIO_EXTI_Callback+0x94>
	{
		data_size = sprintf((char*)buffer, "S3 BUTTON PRESSED!!\r\n");
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	490c      	ldr	r1, [pc, #48]	; (8000618 <HAL_GPIO_EXTI_Callback+0xac>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f006 f9b1 	bl	8006950 <siprintf>
 80005ee:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 80005f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f107 0108 	add.w	r1, r7, #8
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005fc:	f003 f954 	bl	80038a8 <HAL_UART_Transmit>
	}
}
 8000600:	bf00      	nop
 8000602:	3770      	adds	r7, #112	; 0x70
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	08007308 	.word	0x08007308
 800060c:	200000f0 	.word	0x200000f0
 8000610:	08007320 	.word	0x08007320
 8000614:	08007338 	.word	0x08007338
 8000618:	08007350 	.word	0x08007350

0800061c <shiftOut>:
* @param clock_port: The port of the GPIO pin associated with the clock used to operate shift register.
* @param clock_pin: The GPIO clock pin.
* @param value: The value to shift into the data pin.
* @retval None
*/
static inline void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	607a      	str	r2, [r7, #4]
 8000626:	461a      	mov	r2, r3
 8000628:	460b      	mov	r3, r1
 800062a:	817b      	strh	r3, [r7, #10]
 800062c:	4613      	mov	r3, r2
 800062e:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	e01d      	b.n	8000672 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8000636:	893b      	ldrh	r3, [r7, #8]
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f001 f8cd 	bl	80017dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8000642:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	4013      	ands	r3, r2
 800064a:	2b00      	cmp	r3, #0
 800064c:	bf14      	ite	ne
 800064e:	2301      	movne	r3, #1
 8000650:	2300      	moveq	r3, #0
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	897b      	ldrh	r3, [r7, #10]
 8000658:	4619      	mov	r1, r3
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f001 f8be 	bl	80017dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8000660:	893b      	ldrh	r3, [r7, #8]
 8000662:	2201      	movs	r2, #1
 8000664:	4619      	mov	r1, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f001 f8b8 	bl	80017dc <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	105b      	asrs	r3, r3, #1
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1de      	bne.n	8000636 <shiftOut+0x1a>
	}
}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <set_segment_digit>:
* @param digit: The digit to set (four in total).
* @param value: The value to set.
* @retval None
*/
static inline void set_segment_digit(uint8_t digit, uint8_t value)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af02      	add	r7, sp, #8
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2120      	movs	r1, #32
 8000698:	4811      	ldr	r0, [pc, #68]	; (80006e0 <set_segment_digit+0x5c>)
 800069a:	f001 f89f 	bl	80017dc <HAL_GPIO_WritePin>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, value);
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b2:	f7ff ffb3 	bl	800061c <shiftOut>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, digit);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ca:	f7ff ffa7 	bl	800061c <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2120      	movs	r1, #32
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <set_segment_digit+0x5c>)
 80006d4:	f001 f882 	bl	80017dc <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	48000400 	.word	0x48000400

080006e4 <set_segment_display>:
*
* @param num: The four digit number to set the display to (MAX: 9999).
* @retval None
*/
void set_segment_display(uint16_t num)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
	uint8_t value;
	while((num > 0) && (digit < NUM_SEGMENT_DIGITS))
 80006f2:	e01e      	b.n	8000732 <set_segment_display+0x4e>
	{
		value = num % 10;
 80006f4:	88fa      	ldrh	r2, [r7, #6]
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <set_segment_display+0x6c>)
 80006f8:	fba3 1302 	umull	r1, r3, r3, r2
 80006fc:	08d9      	lsrs	r1, r3, #3
 80006fe:	460b      	mov	r3, r1
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	440b      	add	r3, r1
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	b29b      	uxth	r3, r3
 800070a:	73bb      	strb	r3, [r7, #14]
		set_segment_digit(SEGMENT_DIGIT[digit], SEGMENT_NUM[value]);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <set_segment_display+0x70>)
 8000710:	5cd2      	ldrb	r2, [r2, r3]
 8000712:	7bbb      	ldrb	r3, [r7, #14]
 8000714:	4910      	ldr	r1, [pc, #64]	; (8000758 <set_segment_display+0x74>)
 8000716:	5ccb      	ldrb	r3, [r1, r3]
 8000718:	4619      	mov	r1, r3
 800071a:	4610      	mov	r0, r2
 800071c:	f7ff ffb2 	bl	8000684 <set_segment_digit>
		num /= 10;
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <set_segment_display+0x6c>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	08db      	lsrs	r3, r3, #3
 800072a:	80fb      	strh	r3, [r7, #6]
		digit++;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	3301      	adds	r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]
	while((num > 0) && (digit < NUM_SEGMENT_DIGITS))
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <set_segment_display+0x5a>
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b03      	cmp	r3, #3
 800073c:	d9da      	bls.n	80006f4 <set_segment_display+0x10>
	}
	set_segment_digit(0, 0);
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff ff9f 	bl	8000684 <set_segment_digit>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	cccccccd 	.word	0xcccccccd
 8000754:	20000004 	.word	0x20000004
 8000758:	20000008 	.word	0x20000008

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 fd6e 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f89c 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f96a 	bl	8000a44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000770:	f000 f938 	bl	80009e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000774:	f000 f8e8 	bl	8000948 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f003 fdfe 	bl	8004378 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 800077c:	4833      	ldr	r0, [pc, #204]	; (800084c <main+0xf0>)
 800077e:	f003 feed 	bl	800455c <osMutexNew>
 8000782:	4603      	mov	r3, r0
 8000784:	4a32      	ldr	r2, [pc, #200]	; (8000850 <main+0xf4>)
 8000786:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of customerQueue */
  customerQueueHandle = osMessageQueueNew (421, sizeof(uint16_t), &customerQueue_attributes);
 8000788:	4a32      	ldr	r2, [pc, #200]	; (8000854 <main+0xf8>)
 800078a:	2102      	movs	r1, #2
 800078c:	f240 10a5 	movw	r0, #421	; 0x1a5
 8000790:	f003 fff2 	bl	8004778 <osMessageQueueNew>
 8000794:	4603      	mov	r3, r0
 8000796:	4a30      	ldr	r2, [pc, #192]	; (8000858 <main+0xfc>)
 8000798:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of updateSegment */
  updateSegmentHandle = osThreadNew(StartUpdateSegment, NULL, &updateSegment_attributes);
 800079a:	4a30      	ldr	r2, [pc, #192]	; (800085c <main+0x100>)
 800079c:	2100      	movs	r1, #0
 800079e:	4830      	ldr	r0, [pc, #192]	; (8000860 <main+0x104>)
 80007a0:	f003 fe0e 	bl	80043c0 <osThreadNew>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <main+0x108>)
 80007a8:	6013      	str	r3, [r2, #0]

  /* creation of genCustomer */
  genCustomerHandle = osThreadNew(StartGenCustomerTask, NULL, &genCustomer_attributes);
 80007aa:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <main+0x10c>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	482f      	ldr	r0, [pc, #188]	; (800086c <main+0x110>)
 80007b0:	f003 fe06 	bl	80043c0 <osThreadNew>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a2e      	ldr	r2, [pc, #184]	; (8000870 <main+0x114>)
 80007b8:	6013      	str	r3, [r2, #0]

  /* creation of teller01 */
  teller01Handle = osThreadNew(StartTeller01, NULL, &teller01_attributes);
 80007ba:	4a2e      	ldr	r2, [pc, #184]	; (8000874 <main+0x118>)
 80007bc:	2100      	movs	r1, #0
 80007be:	482e      	ldr	r0, [pc, #184]	; (8000878 <main+0x11c>)
 80007c0:	f003 fdfe 	bl	80043c0 <osThreadNew>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a2d      	ldr	r2, [pc, #180]	; (800087c <main+0x120>)
 80007c8:	6013      	str	r3, [r2, #0]

  /* creation of teller02 */
  teller02Handle = osThreadNew(StartTeller02, NULL, &teller02_attributes);
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <main+0x124>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	482d      	ldr	r0, [pc, #180]	; (8000884 <main+0x128>)
 80007d0:	f003 fdf6 	bl	80043c0 <osThreadNew>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a2c      	ldr	r2, [pc, #176]	; (8000888 <main+0x12c>)
 80007d8:	6013      	str	r3, [r2, #0]

  /* creation of teller03 */
  teller03Handle = osThreadNew(StartTeller03, NULL, &teller03_attributes);
 80007da:	4a2c      	ldr	r2, [pc, #176]	; (800088c <main+0x130>)
 80007dc:	2100      	movs	r1, #0
 80007de:	482c      	ldr	r0, [pc, #176]	; (8000890 <main+0x134>)
 80007e0:	f003 fdee 	bl	80043c0 <osThreadNew>
 80007e4:	4603      	mov	r3, r0
 80007e6:	4a2b      	ldr	r2, [pc, #172]	; (8000894 <main+0x138>)
 80007e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Grab reference point to get an accurate reading of simulated time.
  SIMULATED_TIME_START = HAL_GetTick();
 80007ea:	f000 fd5f 	bl	80012ac <HAL_GetTick>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <main+0x13c>)
 80007f4:	601a      	str	r2, [r3, #0]

//  osThreadSuspend(genCustomerHandle);
  osThreadSuspend(teller01Handle);
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <main+0x120>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fe72 	bl	80044e4 <osThreadSuspend>
  osThreadSuspend(teller02Handle);
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <main+0x12c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fe6d 	bl	80044e4 <osThreadSuspend>
  osThreadSuspend(teller03Handle);
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <main+0x138>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f003 fe68 	bl	80044e4 <osThreadSuspend>

  uint8_t buffer[1000];
  int n;
  while(1)
   {;
 		n = sprintf((char*)buffer, "RANDOM NUMBER: %ld \r\n", rand_range(1, 1000));
 8000814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000818:	f04f 0300 	mov.w	r3, #0
 800081c:	f04f 0001 	mov.w	r0, #1
 8000820:	f04f 0100 	mov.w	r1, #0
 8000824:	f000 fb1e 	bl	8000e64 <rand_range>
 8000828:	4602      	mov	r2, r0
 800082a:	460b      	mov	r3, r1
 800082c:	1d38      	adds	r0, r7, #4
 800082e:	491b      	ldr	r1, [pc, #108]	; (800089c <main+0x140>)
 8000830:	f006 f88e 	bl	8006950 <siprintf>
 8000834:	f8c7 03ec 	str.w	r0, [r7, #1004]	; 0x3ec
 		HAL_UART_Transmit(&huart2, buffer, n, 1000U);
 8000838:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800083c:	b29a      	uxth	r2, r3
 800083e:	1d39      	adds	r1, r7, #4
 8000840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000844:	4816      	ldr	r0, [pc, #88]	; (80008a0 <main+0x144>)
 8000846:	f003 f82f 	bl	80038a8 <HAL_UART_Transmit>
 		n = sprintf((char*)buffer, "RANDOM NUMBER: %ld \r\n", rand_range(1, 1000));
 800084a:	e7e3      	b.n	8000814 <main+0xb8>
 800084c:	08007478 	.word	0x08007478
 8000850:	20000190 	.word	0x20000190
 8000854:	08007460 	.word	0x08007460
 8000858:	2000018c 	.word	0x2000018c
 800085c:	080073ac 	.word	0x080073ac
 8000860:	08000bc5 	.word	0x08000bc5
 8000864:	20000178 	.word	0x20000178
 8000868:	080073d0 	.word	0x080073d0
 800086c:	08000be5 	.word	0x08000be5
 8000870:	2000017c 	.word	0x2000017c
 8000874:	080073f4 	.word	0x080073f4
 8000878:	08000c05 	.word	0x08000c05
 800087c:	20000180 	.word	0x20000180
 8000880:	08007418 	.word	0x08007418
 8000884:	08000c59 	.word	0x08000c59
 8000888:	20000184 	.word	0x20000184
 800088c:	0800743c 	.word	0x0800743c
 8000890:	08000cad 	.word	0x08000cad
 8000894:	20000188 	.word	0x20000188
 8000898:	20000194 	.word	0x20000194
 800089c:	08007368 	.word	0x08007368
 80008a0:	200000f0 	.word	0x200000f0

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b096      	sub	sp, #88	; 0x58
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2244      	movs	r2, #68	; 0x44
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f006 f86c 	bl	8006990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	463b      	mov	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ca:	f000 ffc5 	bl	8001858 <HAL_PWREx_ControlVoltageScaling>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008d4:	f000 fa26 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e2:	2310      	movs	r3, #16
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ea:	2302      	movs	r3, #2
 80008ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008f2:	230a      	movs	r3, #10
 80008f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008f6:	2307      	movs	r3, #7
 80008f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fffc 	bl	8001904 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000912:	f000 fa07 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2303      	movs	r3, #3
 800091c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	2104      	movs	r1, #4
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fbc4 	bl	80020bc <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800093a:	f000 f9f3 	bl	8000d24 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3758      	adds	r7, #88	; 0x58
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_TIM2_Init+0x98>)
 800097c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM2_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_TIM2_Init+0x98>)
 8000990:	f002 faa6 	bl	8002ee0 <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800099a:	f000 f9c3 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_TIM2_Init+0x98>)
 80009ac:	f002 fc62 	bl	8003274 <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009b6:	f000 f9b5 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_TIM2_Init+0x98>)
 80009c8:	f002 fe7a 	bl	80036c0 <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009d2:	f000 f9a7 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3720      	adds	r7, #32
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000a4 	.word	0x200000a4

080009e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 80009ea:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <MX_USART2_UART_Init+0x5c>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a28:	f002 fef0 	bl	800380c <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a32:	f000 f977 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000f0 	.word	0x200000f0
 8000a40:	40004400 	.word	0x40004400

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b57      	ldr	r3, [pc, #348]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a56      	ldr	r2, [pc, #344]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b54      	ldr	r3, [pc, #336]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a72:	4b51      	ldr	r3, [pc, #324]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a50      	ldr	r2, [pc, #320]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b4e      	ldr	r3, [pc, #312]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a4a      	ldr	r2, [pc, #296]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a44      	ldr	r2, [pc, #272]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <MX_GPIO_Init+0x174>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 fe8a 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2120      	movs	r1, #32
 8000acc:	483b      	ldr	r0, [pc, #236]	; (8000bbc <MX_GPIO_Init+0x178>)
 8000ace:	f000 fe85 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4835      	ldr	r0, [pc, #212]	; (8000bc0 <MX_GPIO_Init+0x17c>)
 8000aea:	f000 fccd 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_SHLD_BUTTON_Pin S2_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S1_SHLD_BUTTON_Pin|S2_SHLD_BUTTON_Pin;
 8000aee:	2312      	movs	r3, #18
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000af2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f000 fcbf 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 fcb0 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S3_SHLD_BUTTON_Pin;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b2c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S3_SHLD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481f      	ldr	r0, [pc, #124]	; (8000bbc <MX_GPIO_Init+0x178>)
 8000b3e:	f000 fca3 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_D7_SEG7_Clock_Pin SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin;
 8000b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b50:	2301      	movs	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f000 fc93 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8000b62:	2320      	movs	r3, #32
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4810      	ldr	r0, [pc, #64]	; (8000bbc <MX_GPIO_Init+0x178>)
 8000b7a:	f000 fc85 	bl	8001488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // S1_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	2007      	movs	r0, #7
 8000b84:	f000 fc56 	bl	8001434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b88:	2007      	movs	r0, #7
 8000b8a:	f000 fc6f 	bl	800146c <HAL_NVIC_EnableIRQ>

  // S2_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	200a      	movs	r0, #10
 8000b94:	f000 fc4e 	bl	8001434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f000 fc67 	bl	800146c <HAL_NVIC_EnableIRQ>

  // S3_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2006      	movs	r0, #6
 8000ba4:	f000 fc46 	bl	8001434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ba8:	2006      	movs	r0, #6
 8000baa:	f000 fc5f 	bl	800146c <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000800 	.word	0x48000800

08000bc4 <StartUpdateSegment>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateSegment */
void StartUpdateSegment(void *argument)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	set_segment_display(CUSTOMER_QUEUE_COUNT);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <StartUpdateSegment+0x1c>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd87 	bl	80006e4 <set_segment_display>
    osDelay(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f003 fca5 	bl	8004526 <osDelay>
	set_segment_display(CUSTOMER_QUEUE_COUNT);
 8000bdc:	e7f6      	b.n	8000bcc <StartUpdateSegment+0x8>
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000

08000be4 <StartGenCustomerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGenCustomerTask */
void StartGenCustomerTask(void *argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGenCustomerTask */
  /* Infinite loop */

  for(;;)
  {
	CUSTOMER_QUEUE_COUNT--; // testing purposes
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <StartGenCustomerTask+0x1c>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <StartGenCustomerTask+0x1c>)
 8000bf6:	801a      	strh	r2, [r3, #0]
	osDelay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f003 fc94 	bl	8004526 <osDelay>
	CUSTOMER_QUEUE_COUNT--; // testing purposes
 8000bfe:	e7f5      	b.n	8000bec <StartGenCustomerTask+0x8>
 8000c00:	20000000 	.word	0x20000000

08000c04 <StartTeller01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller01 */
void StartTeller01(void *argument)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b09c      	sub	sp, #112	; 0x70
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint8_t buffer[100];
  int n;
  for(;;)
  {
	n = sprintf((char*)buffer, "HEY ITS A TELLER! %d\r\n", (int)SIM_SEC_TO_MS(23));
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	2226      	movs	r2, #38	; 0x26
 8000c12:	490e      	ldr	r1, [pc, #56]	; (8000c4c <StartTeller01+0x48>)
 8000c14:	4618      	mov	r0, r3
 8000c16:	f005 fe9b 	bl	8006950 <siprintf>
 8000c1a:	66f8      	str	r0, [r7, #108]	; 0x6c
	osMutexAcquire(Mutex01Handle, osWaitForever);
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <StartTeller01+0x4c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fd1f 	bl	8004668 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, buffer, n, 10U);
 8000c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f107 0108 	add.w	r1, r7, #8
 8000c32:	230a      	movs	r3, #10
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <StartTeller01+0x50>)
 8000c36:	f002 fe37 	bl	80038a8 <HAL_UART_Transmit>
	osMutexRelease(Mutex01Handle);
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <StartTeller01+0x4c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 fd5d 	bl	80046fe <osMutexRelease>
    osDelay(100);
 8000c44:	2064      	movs	r0, #100	; 0x64
 8000c46:	f003 fc6e 	bl	8004526 <osDelay>
	n = sprintf((char*)buffer, "HEY ITS A TELLER! %d\r\n", (int)SIM_SEC_TO_MS(23));
 8000c4a:	e7df      	b.n	8000c0c <StartTeller01+0x8>
 8000c4c:	08007380 	.word	0x08007380
 8000c50:	20000190 	.word	0x20000190
 8000c54:	200000f0 	.word	0x200000f0

08000c58 <StartTeller02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller02 */
void StartTeller02(void *argument)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b09c      	sub	sp, #112	; 0x70
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint8_t buffer[100];
  int n;
  for(;;)
  {
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	490e      	ldr	r1, [pc, #56]	; (8000ca0 <StartTeller02+0x48>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	f005 fe72 	bl	8006950 <siprintf>
 8000c6c:	66f8      	str	r0, [r7, #108]	; 0x6c
	osMutexAcquire(Mutex01Handle, osWaitForever);
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <StartTeller02+0x4c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 fcf6 	bl	8004668 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, buffer, n, 10U);
 8000c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	f107 0108 	add.w	r1, r7, #8
 8000c84:	230a      	movs	r3, #10
 8000c86:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <StartTeller02+0x50>)
 8000c88:	f002 fe0e 	bl	80038a8 <HAL_UART_Transmit>
	osMutexRelease(Mutex01Handle);
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <StartTeller02+0x4c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fd34 	bl	80046fe <osMutexRelease>
	osDelay(100);
 8000c96:	2064      	movs	r0, #100	; 0x64
 8000c98:	f003 fc45 	bl	8004526 <osDelay>
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000c9c:	e7e0      	b.n	8000c60 <StartTeller02+0x8>
 8000c9e:	bf00      	nop
 8000ca0:	08007398 	.word	0x08007398
 8000ca4:	20000190 	.word	0x20000190
 8000ca8:	200000f0 	.word	0x200000f0

08000cac <StartTeller03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller03 */
void StartTeller03(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b09c      	sub	sp, #112	; 0x70
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint8_t buffer[100];
  int n;
  for(;;)
  {
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <StartTeller03+0x48>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f005 fe48 	bl	8006950 <siprintf>
 8000cc0:	66f8      	str	r0, [r7, #108]	; 0x6c
	osMutexAcquire(Mutex01Handle, osWaitForever);
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <StartTeller03+0x4c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 fccc 	bl	8004668 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, buffer, n, 10U);
 8000cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f107 0108 	add.w	r1, r7, #8
 8000cd8:	230a      	movs	r3, #10
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <StartTeller03+0x50>)
 8000cdc:	f002 fde4 	bl	80038a8 <HAL_UART_Transmit>
	osMutexRelease(Mutex01Handle);
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <StartTeller03+0x4c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fd0a 	bl	80046fe <osMutexRelease>
    osDelay(100);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f003 fc1b 	bl	8004526 <osDelay>
	n = sprintf((char*)buffer, "HEY ITS A TELLER!");
 8000cf0:	e7e0      	b.n	8000cb4 <StartTeller03+0x8>
 8000cf2:	bf00      	nop
 8000cf4:	08007398 	.word	0x08007398
 8000cf8:	20000190 	.word	0x20000190
 8000cfc:	200000f0 	.word	0x200000f0

08000d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d12:	f000 fab7 	bl	8001284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40001000 	.word	0x40001000

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>

08000d2e <rotl>:

#include <stdint.h>
#include "rng.h"

static inline uint64_t rotl(const uint64_t x, int k)
{
 8000d2e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	return (x << k) | (x >> (64 - k));
 8000d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	f1a1 0620 	sub.w	r6, r1, #32
 8000d46:	f1c1 0020 	rsb	r0, r1, #32
 8000d4a:	fa03 f901 	lsl.w	r9, r3, r1
 8000d4e:	fa02 f606 	lsl.w	r6, r2, r6
 8000d52:	ea49 0906 	orr.w	r9, r9, r6
 8000d56:	fa22 f000 	lsr.w	r0, r2, r0
 8000d5a:	ea49 0900 	orr.w	r9, r9, r0
 8000d5e:	fa02 f801 	lsl.w	r8, r2, r1
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4249      	negs	r1, r1
 8000d66:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8000d6a:	f1c1 0620 	rsb	r6, r1, #32
 8000d6e:	f1a1 0020 	sub.w	r0, r1, #32
 8000d72:	fa22 f401 	lsr.w	r4, r2, r1
 8000d76:	fa03 f606 	lsl.w	r6, r3, r6
 8000d7a:	4334      	orrs	r4, r6
 8000d7c:	fa23 f000 	lsr.w	r0, r3, r0
 8000d80:	4304      	orrs	r4, r0
 8000d82:	fa23 f501 	lsr.w	r5, r3, r1
 8000d86:	ea48 0a04 	orr.w	sl, r8, r4
 8000d8a:	ea49 0b05 	orr.w	fp, r9, r5
 8000d8e:	4654      	mov	r4, sl
 8000d90:	465d      	mov	r5, fp
 8000d92:	4622      	mov	r2, r4
 8000d94:	462b      	mov	r3, r5
}
 8000d96:	4610      	mov	r0, r2
 8000d98:	4619      	mov	r1, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000da2:	4770      	bx	lr

08000da4 <generate_random_u64>:

// setting the seeds
static uint64_t s[2] = {SEED1, SEED2};

uint64_t generate_random_u64(void)
{
 8000da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000da8:	b08b      	sub	sp, #44	; 0x2c
 8000daa:	af00      	add	r7, sp, #0
	const uint64_t s0 = s[0];
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <generate_random_u64+0xbc>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t s1 = s[1];
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <generate_random_u64+0xbc>)
 8000db8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000dbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	const uint64_t result = rotl(s0 + s1, 17) + s0;
 8000dc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000dc8:	1886      	adds	r6, r0, r2
 8000dca:	60be      	str	r6, [r7, #8]
 8000dcc:	eb41 0303 	adc.w	r3, r1, r3
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	2211      	movs	r2, #17
 8000dd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dd8:	f7ff ffa9 	bl	8000d2e <rotl>
 8000ddc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000de0:	1816      	adds	r6, r2, r0
 8000de2:	603e      	str	r6, [r7, #0]
 8000de4:	414b      	adcs	r3, r1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dec:	e9c7 2304 	strd	r2, r3, [r7, #16]

	s1 ^= s0;
 8000df0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000df4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000df8:	ea80 0a02 	eor.w	sl, r0, r2
 8000dfc:	ea81 0b03 	eor.w	fp, r1, r3
 8000e00:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	s[0] = rotl(s0, 49) ^ s1 ^ (s1 << 21); // a, b
 8000e04:	2231      	movs	r2, #49	; 0x31
 8000e06:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e0a:	f7ff ff90 	bl	8000d2e <rotl>
 8000e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e12:	ea80 0402 	eor.w	r4, r0, r2
 8000e16:	ea81 0503 	eor.w	r5, r1, r3
 8000e1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e1e:	f04f 0200 	mov.w	r2, #0
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	054b      	lsls	r3, r1, #21
 8000e28:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 8000e2c:	0542      	lsls	r2, r0, #21
 8000e2e:	ea84 0802 	eor.w	r8, r4, r2
 8000e32:	ea85 0903 	eor.w	r9, r5, r3
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <generate_random_u64+0xbc>)
 8000e38:	e9c3 8900 	strd	r8, r9, [r3]
	s[1] = rotl(s1, 28); // c
 8000e3c:	221c      	movs	r2, #28
 8000e3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e42:	f7ff ff74 	bl	8000d2e <rotl>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4905      	ldr	r1, [pc, #20]	; (8000e60 <generate_random_u64+0xbc>)
 8000e4c:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return result;
 8000e50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000e54:	4610      	mov	r0, r2
 8000e56:	4619      	mov	r1, r3
 8000e58:	372c      	adds	r7, #44	; 0x2c
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e60:	20000018 	.word	0x20000018

08000e64 <rand_range>:

uint64_t rand_range(uint64_t start_inclusive, uint64_t end_inclusive)
{
 8000e64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000e70:	e9c7 2300 	strd	r2, r3, [r7]
	uint64_t rand_num;
	do
	{
		rand_num = (generate_random_u64() % end_inclusive) + start_inclusive + 1;
 8000e74:	f7ff ff96 	bl	8000da4 <generate_random_u64>
 8000e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e7c:	f7ff f9f8 	bl	8000270 <__aeabi_uldivmod>
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e88:	1884      	adds	r4, r0, r2
 8000e8a:	eb41 0503 	adc.w	r5, r1, r3
 8000e8e:	f114 0801 	adds.w	r8, r4, #1
 8000e92:	f145 0900 	adc.w	r9, r5, #0
 8000e96:	e9c7 8904 	strd	r8, r9, [r7, #16]
	}
	while(rand_num > end_inclusive);
 8000e9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	eb71 0303 	sbcs.w	r3, r1, r3
 8000ea8:	d3e4      	bcc.n	8000e74 <rand_range+0x10>

	return rand_num;
 8000eaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_MspInit+0x4c>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_MspInit+0x4c>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	f06f 0001 	mvn.w	r0, #1
 8000efa:	f000 fa9b 	bl	8001434 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1c:	d10b      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_TIM_Base_MspInit+0x38>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_TIM_Base_MspInit+0x38>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_TIM_Base_MspInit+0x38>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ac      	sub	sp, #176	; 0xb0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2288      	movs	r2, #136	; 0x88
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f005 fd11 	bl	8006990 <memset>
  if(huart->Instance==USART2)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <HAL_UART_MspInit+0xb0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d13b      	bne.n	8000ff0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 faef 	bl	8002568 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff fec8 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <HAL_UART_MspInit+0xb4>)
 8000f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f98:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <HAL_UART_MspInit+0xb4>)
 8000f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <HAL_UART_MspInit+0xb4>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_UART_MspInit+0xb4>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <HAL_UART_MspInit+0xb4>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_UART_MspInit+0xb4>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fec:	f000 fa4c 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	37b0      	adds	r7, #176	; 0xb0
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40004400 	.word	0x40004400
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <HAL_InitTick+0xe0>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	4a33      	ldr	r2, [pc, #204]	; (80010e0 <HAL_InitTick+0xe0>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6593      	str	r3, [r2, #88]	; 0x58
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <HAL_InitTick+0xe0>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001026:	f107 0210 	add.w	r2, r7, #16
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fa07 	bl	8002444 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	2b00      	cmp	r3, #0
 800103e:	d103      	bne.n	8001048 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001040:	f001 f9d4 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8001044:	6378      	str	r0, [r7, #52]	; 0x34
 8001046:	e004      	b.n	8001052 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001048:	f001 f9d0 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 800104c:	4603      	mov	r3, r0
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001054:	4a23      	ldr	r2, [pc, #140]	; (80010e4 <HAL_InitTick+0xe4>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	0c9b      	lsrs	r3, r3, #18
 800105c:	3b01      	subs	r3, #1
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <HAL_InitTick+0xe8>)
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <HAL_InitTick+0xec>)
 8001064:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_InitTick+0xe8>)
 8001068:	f240 32e7 	movw	r2, #999	; 0x3e7
 800106c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <HAL_InitTick+0xe8>)
 8001070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001072:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_InitTick+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_InitTick+0xe8>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_InitTick+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001086:	4818      	ldr	r0, [pc, #96]	; (80010e8 <HAL_InitTick+0xe8>)
 8001088:	f001 ff2a 	bl	8002ee0 <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001096:	2b00      	cmp	r3, #0
 8001098:	d11b      	bne.n	80010d2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800109a:	4813      	ldr	r0, [pc, #76]	; (80010e8 <HAL_InitTick+0xe8>)
 800109c:	f001 ff78 	bl	8002f90 <HAL_TIM_Base_Start_IT>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d111      	bne.n	80010d2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010ae:	2036      	movs	r0, #54	; 0x36
 80010b0:	f000 f9dc 	bl	800146c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	d808      	bhi.n	80010cc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010ba:	2200      	movs	r2, #0
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	2036      	movs	r0, #54	; 0x36
 80010c0:	f000 f9b8 	bl	8001434 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_InitTick+0xf0>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e002      	b.n	80010d2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3738      	adds	r7, #56	; 0x38
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000
 80010e4:	431bde83 	.word	0x431bde83
 80010e8:	20000198 	.word	0x20000198
 80010ec:	40001000 	.word	0x40001000
 80010f0:	2000002c 	.word	0x2000002c

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <TIM6_DAC_IRQHandler+0x10>)
 8001126:	f001 ffa3 	bl	8003070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000198 	.word	0x20000198

08001134 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001138:	2002      	movs	r0, #2
 800113a:	f000 fb67 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001146:	2010      	movs	r0, #16
 8001148:	f000 fb60 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001154:	2001      	movs	r0, #1
 8001156:	f000 fb59 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f005 fc06 	bl	80069a0 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20018000 	.word	0x20018000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	200001e4 	.word	0x200001e4
 80011c8:	200023e8 	.word	0x200023e8

080011cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001228 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f4:	f7ff ffea 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <LoopForever+0x6>)
  ldr r1, =_edata
 80011fa:	490d      	ldr	r1, [pc, #52]	; (8001230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <LoopForever+0xe>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001210:	4c0a      	ldr	r4, [pc, #40]	; (800123c <LoopForever+0x16>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121e:	f005 fbc5 	bl	80069ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001222:	f7ff fa9b 	bl	800075c <main>

08001226 <LoopForever>:

LoopForever:
    b LoopForever
 8001226:	e7fe      	b.n	8001226 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001228:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001234:	08007514 	.word	0x08007514
  ldr r2, =_sbss
 8001238:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800123c:	200023e8 	.word	0x200023e8

08001240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC1_2_IRQHandler>
	...

08001244 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_Init+0x3c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_Init+0x3c>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125a:	2003      	movs	r0, #3
 800125c:	f000 f8df 	bl	800141e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001260:	200f      	movs	r0, #15
 8001262:	f7ff fecd 	bl	8001000 <HAL_InitTick>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	e001      	b.n	8001276 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001272:	f7ff fe23 	bl	8000ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001276:	79fb      	ldrb	r3, [r7, #7]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x20>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x24>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_IncTick+0x24>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000030 	.word	0x20000030
 80012a8:	200001e8 	.word	0x200001e8

080012ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <HAL_GetTick+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	200001e8 	.word	0x200001e8

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4907      	ldr	r1, [pc, #28]	; (8001360 <__NVIC_EnableIRQ+0x38>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ff4c 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001446:	f7ff ff61 	bl	800130c <__NVIC_GetPriorityGrouping>
 800144a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	6978      	ldr	r0, [r7, #20]
 8001452:	f7ff ffb1 	bl	80013b8 <NVIC_EncodePriority>
 8001456:	4602      	mov	r2, r0
 8001458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff80 	bl	8001364 <__NVIC_SetPriority>
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff54 	bl	8001328 <__NVIC_EnableIRQ>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e17f      	b.n	8001798 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2101      	movs	r1, #1
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	4013      	ands	r3, r2
 80014a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8171 	beq.w	8001792 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d005      	beq.n	80014c8 <HAL_GPIO_Init+0x40>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d130      	bne.n	800152a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68da      	ldr	r2, [r3, #12]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 0201 	and.w	r2, r3, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b03      	cmp	r3, #3
 8001534:	d118      	bne.n	8001568 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800153c:	2201      	movs	r2, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b03      	cmp	r3, #3
 8001572:	d017      	beq.n	80015a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d123      	bne.n	80015f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	6939      	ldr	r1, [r7, #16]
 80015f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0203 	and.w	r2, r3, #3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80ac 	beq.w	8001792 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <HAL_GPIO_Init+0x330>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	4a5e      	ldr	r2, [pc, #376]	; (80017b8 <HAL_GPIO_Init+0x330>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6613      	str	r3, [r2, #96]	; 0x60
 8001646:	4b5c      	ldr	r3, [pc, #368]	; (80017b8 <HAL_GPIO_Init+0x330>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001652:	4a5a      	ldr	r2, [pc, #360]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800167c:	d025      	beq.n	80016ca <HAL_GPIO_Init+0x242>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4f      	ldr	r2, [pc, #316]	; (80017c0 <HAL_GPIO_Init+0x338>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x23e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4e      	ldr	r2, [pc, #312]	; (80017c4 <HAL_GPIO_Init+0x33c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x23a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4d      	ldr	r2, [pc, #308]	; (80017c8 <HAL_GPIO_Init+0x340>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x236>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_GPIO_Init+0x344>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x232>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4b      	ldr	r2, [pc, #300]	; (80017d0 <HAL_GPIO_Init+0x348>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x22e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4a      	ldr	r2, [pc, #296]	; (80017d4 <HAL_GPIO_Init+0x34c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x22a>
 80016ae:	2306      	movs	r3, #6
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x244>
 80016ca:	2300      	movs	r3, #0
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016dc:	4937      	ldr	r1, [pc, #220]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HAL_GPIO_Init+0x350>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800170e:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <HAL_GPIO_Init+0x350>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_GPIO_Init+0x350>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001738:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <HAL_GPIO_Init+0x350>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_GPIO_Init+0x350>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_GPIO_Init+0x350>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_GPIO_Init+0x350>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_GPIO_Init+0x350>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f47f ae78 	bne.w	8001498 <HAL_GPIO_Init+0x10>
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000
 80017c0:	48000400 	.word	0x48000400
 80017c4:	48000800 	.word	0x48000800
 80017c8:	48000c00 	.word	0x48000c00
 80017cc:	48001000 	.word	0x48001000
 80017d0:	48001400 	.word	0x48001400
 80017d4:	48001800 	.word	0x48001800
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe9e 	bl	800056c <HAL_GPIO_EXTI_Callback>
  }
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_PWREx_GetVoltageRange+0x18>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40007000 	.word	0x40007000

08001858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001866:	d130      	bne.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001874:	d038      	beq.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800187e:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2232      	movs	r2, #50	; 0x32
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	0c9b      	lsrs	r3, r3, #18
 8001898:	3301      	adds	r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800189c:	e002      	b.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b0:	d102      	bne.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f2      	bne.n	800189e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c4:	d110      	bne.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e00f      	b.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d007      	beq.n	80018e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018e0:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000
 80018fc:	20000028 	.word	0x20000028
 8001900:	431bde83 	.word	0x431bde83

08001904 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e3ca      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	4b97      	ldr	r3, [pc, #604]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001920:	4b94      	ldr	r3, [pc, #592]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80e4 	beq.w	8001b00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_RCC_OscConfig+0x4a>
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b0c      	cmp	r3, #12
 8001942:	f040 808b 	bne.w	8001a5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b01      	cmp	r3, #1
 800194a:	f040 8087 	bne.w	8001a5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194e:	4b89      	ldr	r3, [pc, #548]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x62>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e3a2      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1a      	ldr	r2, [r3, #32]
 800196a:	4b82      	ldr	r3, [pc, #520]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d004      	beq.n	8001980 <HAL_RCC_OscConfig+0x7c>
 8001976:	4b7f      	ldr	r3, [pc, #508]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800197e:	e005      	b.n	800198c <HAL_RCC_OscConfig+0x88>
 8001980:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198c:	4293      	cmp	r3, r2
 800198e:	d223      	bcs.n	80019d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fd87 	bl	80024a8 <RCC_SetFlashLatencyFromMSIRange>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e383      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019a4:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a72      	ldr	r2, [pc, #456]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	496d      	ldr	r1, [pc, #436]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c2:	4b6c      	ldr	r3, [pc, #432]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	4968      	ldr	r1, [pc, #416]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
 80019d6:	e025      	b.n	8001a24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4960      	ldr	r1, [pc, #384]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	495b      	ldr	r1, [pc, #364]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 fd47 	bl	80024a8 <RCC_SetFlashLatencyFromMSIRange>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e343      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a24:	f000 fc4a 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	4950      	ldr	r1, [pc, #320]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	4a4e      	ldr	r2, [pc, #312]	; (8001b7c <HAL_RCC_OscConfig+0x278>)
 8001a42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a44:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <HAL_RCC_OscConfig+0x27c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fad9 	bl	8001000 <HAL_InitTick>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d052      	beq.n	8001afe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	e327      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d032      	beq.n	8001aca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a42      	ldr	r2, [pc, #264]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fc1c 	bl	80012ac <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a78:	f7ff fc18 	bl	80012ac <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e310      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a36      	ldr	r2, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4931      	ldr	r1, [pc, #196]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	492c      	ldr	r1, [pc, #176]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
 8001ac8:	e01a      	b.n	8001b00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fbe9 	bl	80012ac <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ade:	f7ff fbe5 	bl	80012ac <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e2dd      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af0:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x1da>
 8001afc:	e000      	b.n	8001b00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001afe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d074      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x21a>
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	d10e      	bne.n	8001b36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d10b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d064      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d160      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e2ba      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x24a>
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e026      	b.n	8001b9c <HAL_RCC_OscConfig+0x298>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b56:	d115      	bne.n	8001b84 <HAL_RCC_OscConfig+0x280>
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a02      	ldr	r2, [pc, #8]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e014      	b.n	8001b9c <HAL_RCC_OscConfig+0x298>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08007488 	.word	0x08007488
 8001b7c:	20000028 	.word	0x20000028
 8001b80:	2000002c 	.word	0x2000002c
 8001b84:	4ba0      	ldr	r3, [pc, #640]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a9f      	ldr	r2, [pc, #636]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b9d      	ldr	r3, [pc, #628]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a9c      	ldr	r2, [pc, #624]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb82 	bl	80012ac <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fb7e 	bl	80012ac <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e276      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bbe:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x2a8>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fb6e 	bl	80012ac <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fb6a 	bl	80012ac <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e262      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be6:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2d0>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d060      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x310>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d119      	bne.n	8001c42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d116      	bne.n	8001c42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c14:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_OscConfig+0x328>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e23f      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	4973      	ldr	r1, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c40:	e040      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d023      	beq.n	8001c92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb29 	bl	80012ac <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fb25 	bl	80012ac <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e21d      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c70:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7c:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	495f      	ldr	r1, [pc, #380]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
 8001c90:	e018      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a5c      	ldr	r2, [pc, #368]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fb05 	bl	80012ac <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fb01 	bl	80012ac <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e1f9      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cb8:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d03c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01c      	beq.n	8001d12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd8:	4b4b      	ldr	r3, [pc, #300]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cde:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fae0 	bl	80012ac <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fadc 	bl	80012ac <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1d4      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d02:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0ef      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x3ec>
 8001d10:	e01b      	b.n	8001d4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	4a3b      	ldr	r2, [pc, #236]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff fac3 	bl	80012ac <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fabf 	bl	80012ac <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1b7      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d3c:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ef      	bne.n	8001d2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80a6 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10d      	bne.n	8001d84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	4a26      	ldr	r2, [pc, #152]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d72:	6593      	str	r3, [r2, #88]	; 0x58
 8001d74:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d80:	2301      	movs	r3, #1
 8001d82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_RCC_OscConfig+0x508>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d118      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCC_OscConfig+0x508>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_RCC_OscConfig+0x508>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fa86 	bl	80012ac <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7ff fa82 	bl	80012ac <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e17a      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x508>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d108      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4d8>
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dda:	e029      	b.n	8001e30 <HAL_RCC_OscConfig+0x52c>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d115      	bne.n	8001e10 <HAL_RCC_OscConfig+0x50c>
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	4a03      	ldr	r2, [pc, #12]	; (8001e08 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x52c>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	4b9c      	ldr	r3, [pc, #624]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	4a9b      	ldr	r2, [pc, #620]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e20:	4b98      	ldr	r3, [pc, #608]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e26:	4a97      	ldr	r2, [pc, #604]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d016      	beq.n	8001e66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff fa38 	bl	80012ac <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7ff fa34 	bl	80012ac <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e12a      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e56:	4b8b      	ldr	r3, [pc, #556]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0ed      	beq.n	8001e40 <HAL_RCC_OscConfig+0x53c>
 8001e64:	e015      	b.n	8001e92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7ff fa21 	bl	80012ac <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e6c:	e00a      	b.n	8001e84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7ff fa1d 	bl	80012ac <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e113      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e84:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ed      	bne.n	8001e6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e92:	7ffb      	ldrb	r3, [r7, #31]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e98:	4b7a      	ldr	r3, [pc, #488]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a79      	ldr	r2, [pc, #484]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80fe 	beq.w	80020aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	f040 80d0 	bne.w	8002058 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001eb8:	4b72      	ldr	r3, [pc, #456]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d130      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d127      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d11f      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ef8:	2a07      	cmp	r2, #7
 8001efa:	bf14      	ite	ne
 8001efc:	2201      	movne	r2, #1
 8001efe:	2200      	moveq	r2, #0
 8001f00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d113      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
 8001f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	3b01      	subs	r3, #1
 8001f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d06e      	beq.n	800200c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b0c      	cmp	r3, #12
 8001f32:	d069      	beq.n	8002008 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f34:	4b53      	ldr	r3, [pc, #332]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f40:	4b50      	ldr	r3, [pc, #320]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0ad      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f50:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f5c:	f7ff f9a6 	bl	80012ac <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff f9a2 	bl	80012ac <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e09a      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f76:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f82:	4b40      	ldr	r3, [pc, #256]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_RCC_OscConfig+0x784>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f92:	3a01      	subs	r2, #1
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f9c:	0212      	lsls	r2, r2, #8
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fa4:	0852      	lsrs	r2, r2, #1
 8001fa6:	3a01      	subs	r2, #1
 8001fa8:	0552      	lsls	r2, r2, #21
 8001faa:	4311      	orrs	r1, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fb0:	0852      	lsrs	r2, r2, #1
 8001fb2:	3a01      	subs	r2, #1
 8001fb4:	0652      	lsls	r2, r2, #25
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fbc:	0912      	lsrs	r2, r2, #4
 8001fbe:	0452      	lsls	r2, r2, #17
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	4930      	ldr	r1, [pc, #192]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2d      	ldr	r2, [pc, #180]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a2a      	ldr	r2, [pc, #168]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fe0:	f7ff f964 	bl	80012ac <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7ff f960 	bl	80012ac <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e058      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002006:	e050      	b.n	80020aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e04f      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d148      	bne.n	80020aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 800201e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 800202a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002030:	f7ff f93c 	bl	80012ac <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7ff f938 	bl	80012ac <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e030      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x734>
 8002056:	e028      	b.n	80020aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d023      	beq.n	80020a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_RCC_OscConfig+0x780>)
 8002064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff f91f 	bl	80012ac <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002070:	e00c      	b.n	800208c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff f91b 	bl	80012ac <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d905      	bls.n	800208c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
 8002084:	40021000 	.word	0x40021000
 8002088:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_OscConfig+0x7b0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ec      	bne.n	8002072 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_OscConfig+0x7b0>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	4905      	ldr	r1, [pc, #20]	; (80020b4 <HAL_RCC_OscConfig+0x7b0>)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x7b4>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
 80020a4:	e001      	b.n	80020aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	feeefffc 	.word	0xfeeefffc

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0e7      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b75      	ldr	r3, [pc, #468]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b72      	ldr	r3, [pc, #456]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4970      	ldr	r1, [pc, #448]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b6e      	ldr	r3, [pc, #440]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0cf      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4b66      	ldr	r3, [pc, #408]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002118:	429a      	cmp	r2, r3
 800211a:	d908      	bls.n	800212e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211c:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4960      	ldr	r1, [pc, #384]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04c      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002142:	4b5a      	ldr	r3, [pc, #360]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d121      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0a6      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215a:	4b54      	ldr	r3, [pc, #336]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d115      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e09a      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d107      	bne.n	8002182 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002172:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e08e      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002182:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e086      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b46      	ldr	r3, [pc, #280]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4943      	ldr	r1, [pc, #268]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a4:	f7ff f882 	bl	80012ac <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7ff f87e 	bl	80012ac <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e06e      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b3a      	ldr	r3, [pc, #232]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d208      	bcs.n	8002202 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	492b      	ldr	r1, [pc, #172]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d210      	bcs.n	8002232 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 0207 	bic.w	r2, r3, #7
 8002218:	4923      	ldr	r1, [pc, #140]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e036      	b.n	80022a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	4918      	ldr	r1, [pc, #96]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4910      	ldr	r1, [pc, #64]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002270:	f000 f824 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	490b      	ldr	r1, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1f8>)
 800228e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe feb3 	bl	8001000 <HAL_InitTick>
 800229a:	4603      	mov	r3, r0
 800229c:	72fb      	strb	r3, [r7, #11]

  return status;
 800229e:	7afb      	ldrb	r3, [r7, #11]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08007488 	.word	0x08007488
 80022b4:	20000028 	.word	0x20000028
 80022b8:	2000002c 	.word	0x2000002c

080022bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d4:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x34>
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d121      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d11e      	bne.n	800232e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022f0:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d107      	bne.n	800230c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e005      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800230c:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002318:	4a2b      	ldr	r2, [pc, #172]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b04      	cmp	r3, #4
 8002332:	d102      	bne.n	800233a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e004      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d101      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002342:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	2b0c      	cmp	r3, #12
 8002348:	d134      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d003      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0xa6>
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d003      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0xac>
 8002360:	e005      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002364:	617b      	str	r3, [r7, #20]
      break;
 8002366:	e005      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800236a:	617b      	str	r3, [r7, #20]
      break;
 800236c:	e002      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	617b      	str	r3, [r7, #20]
      break;
 8002372:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	3301      	adds	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	fb03 f202 	mul.w	r2, r3, r2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	0e5b      	lsrs	r3, r3, #25
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	3301      	adds	r3, #1
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023b4:	69bb      	ldr	r3, [r7, #24]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	; 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	080074a0 	.word	0x080074a0
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	007a1200 	.word	0x007a1200

080023d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000028 	.word	0x20000028

080023ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023f0:	f7ff fff0 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4904      	ldr	r1, [pc, #16]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08007498 	.word	0x08007498

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800241c:	f7ff ffda 	bl	80023d4 <HAL_RCC_GetHCLKFreq>
 8002420:	4602      	mov	r2, r0
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	0adb      	lsrs	r3, r3, #11
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4904      	ldr	r1, [pc, #16]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800242e:	5ccb      	ldrb	r3, [r1, r3]
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	08007498 	.word	0x08007498

08002444 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	220f      	movs	r2, #15
 8002452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_RCC_GetClockConfig+0x5c>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_GetClockConfig+0x5c>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	08db      	lsrs	r3, r3, #3
 800247e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_RCC_GetClockConfig+0x60>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0207 	and.w	r2, r3, #7
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40022000 	.word	0x40022000

080024a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024c0:	f7ff f9bc 	bl	800183c <HAL_PWREx_GetVoltageRange>
 80024c4:	6178      	str	r0, [r7, #20]
 80024c6:	e014      	b.n	80024f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	4a24      	ldr	r2, [pc, #144]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d2:	6593      	str	r3, [r2, #88]	; 0x58
 80024d4:	4b22      	ldr	r3, [pc, #136]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024e0:	f7ff f9ac 	bl	800183c <HAL_PWREx_GetVoltageRange>
 80024e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f8:	d10b      	bne.n	8002512 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b80      	cmp	r3, #128	; 0x80
 80024fe:	d919      	bls.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2ba0      	cmp	r3, #160	; 0xa0
 8002504:	d902      	bls.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002506:	2302      	movs	r3, #2
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	e013      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800250c:	2301      	movs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	e010      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d902      	bls.n	800251e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002518:	2303      	movs	r3, #3
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	e00a      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b80      	cmp	r3, #128	; 0x80
 8002522:	d102      	bne.n	800252a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002524:	2302      	movs	r3, #2
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e004      	b.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b70      	cmp	r3, #112	; 0x70
 800252e:	d101      	bne.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002530:	2301      	movs	r3, #1
 8002532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 0207 	bic.w	r2, r3, #7
 800253c:	4909      	ldr	r1, [pc, #36]	; (8002564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	40022000 	.word	0x40022000

08002568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002570:	2300      	movs	r3, #0
 8002572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002574:	2300      	movs	r3, #0
 8002576:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002580:	2b00      	cmp	r3, #0
 8002582:	d041      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002588:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800258c:	d02a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800258e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002592:	d824      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002598:	d008      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800259a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800259e:	d81e      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a8:	d010      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025aa:	e018      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025ac:	4b86      	ldr	r3, [pc, #536]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a85      	ldr	r2, [pc, #532]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b8:	e015      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3304      	adds	r3, #4
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fabb 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ca:	e00c      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3320      	adds	r3, #32
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fba6 	bl	8002d24 <RCCEx_PLLSAI2_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025dc:	e003      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	74fb      	strb	r3, [r7, #19]
      break;
 80025e2:	e000      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ec:	4b76      	ldr	r3, [pc, #472]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025fa:	4973      	ldr	r1, [pc, #460]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002602:	e001      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d041      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002618:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800261c:	d02a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800261e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002622:	d824      	bhi.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002628:	d008      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800262a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800262e:	d81e      	bhi.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002638:	d010      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800263a:	e018      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800263c:	4b62      	ldr	r3, [pc, #392]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a61      	ldr	r2, [pc, #388]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002646:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002648:	e015      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3304      	adds	r3, #4
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fa73 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 8002656:	4603      	mov	r3, r0
 8002658:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800265a:	e00c      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3320      	adds	r3, #32
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fb5e 	bl	8002d24 <RCCEx_PLLSAI2_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800266c:	e003      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	74fb      	strb	r3, [r7, #19]
      break;
 8002672:	e000      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10b      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800267c:	4b52      	ldr	r3, [pc, #328]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800268a:	494f      	ldr	r1, [pc, #316]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002692:	e001      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a0 	beq.w	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	4b41      	ldr	r3, [pc, #260]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	4a40      	ldr	r2, [pc, #256]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ca:	6593      	str	r3, [r2, #88]	; 0x58
 80026cc:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fde0 	bl	80012ac <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026ee:	e009      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fddc 	bl	80012ac <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d902      	bls.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	74fb      	strb	r3, [r7, #19]
        break;
 8002702:	e005      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ef      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d15c      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002716:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002720:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01f      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	d019      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002734:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe fd9b 	bl	80012ac <HAL_GetTick>
 8002776:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002778:	e00b      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe fd97 	bl	80012ac <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
            break;
 8002790:	e006      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ec      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b6:	4904      	ldr	r1, [pc, #16]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027be:	e009      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
 80027c4:	e006      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d0:	7cfb      	ldrb	r3, [r7, #19]
 80027d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d4:	7c7b      	ldrb	r3, [r7, #17]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027da:	4b9e      	ldr	r3, [pc, #632]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4a9d      	ldr	r2, [pc, #628]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f2:	4b98      	ldr	r3, [pc, #608]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f023 0203 	bic.w	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	4994      	ldr	r1, [pc, #592]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002814:	4b8f      	ldr	r3, [pc, #572]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	f023 020c 	bic.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	498c      	ldr	r1, [pc, #560]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002836:	4b87      	ldr	r3, [pc, #540]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	4983      	ldr	r1, [pc, #524]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002858:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	497b      	ldr	r1, [pc, #492]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800287a:	4b76      	ldr	r3, [pc, #472]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002888:	4972      	ldr	r1, [pc, #456]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800289c:	4b6d      	ldr	r3, [pc, #436]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	496a      	ldr	r1, [pc, #424]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028be:	4b65      	ldr	r3, [pc, #404]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	4961      	ldr	r1, [pc, #388]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028e0:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	4959      	ldr	r1, [pc, #356]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002902:	4b54      	ldr	r3, [pc, #336]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002910:	4950      	ldr	r1, [pc, #320]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002924:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	4948      	ldr	r1, [pc, #288]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002946:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	493f      	ldr	r1, [pc, #252]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d028      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002968:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002976:	4937      	ldr	r1, [pc, #220]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002986:	d106      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002988:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a31      	ldr	r2, [pc, #196]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002992:	60d3      	str	r3, [r2, #12]
 8002994:	e011      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800299e:	d10c      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	2101      	movs	r1, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f8c8 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d028      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	491f      	ldr	r1, [pc, #124]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029e4:	d106      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4a1a      	ldr	r2, [pc, #104]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f0:	60d3      	str	r3, [r2, #12]
 80029f2:	e011      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f899 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d02b      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a32:	4908      	ldr	r1, [pc, #32]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a42:	d109      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a02      	ldr	r2, [pc, #8]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a4e:	60d3      	str	r3, [r2, #12]
 8002a50:	e014      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f867 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02f      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a96:	4928      	ldr	r1, [pc, #160]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aa6:	d10d      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f844 	bl	8002b3c <RCCEx_PLLSAI1_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d014      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	74bb      	strb	r3, [r7, #18]
 8002ac2:	e011      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3320      	adds	r3, #32
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f925 	bl	8002d24 <RCCEx_PLLSAI2_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b02:	490d      	ldr	r1, [pc, #52]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b26:	4904      	ldr	r1, [pc, #16]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000

08002b3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b4a:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d018      	beq.n	8002b88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b56:	4b72      	ldr	r3, [pc, #456]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0203 	and.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d10d      	bne.n	8002b82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
       ||
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b6e:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d047      	beq.n	8002c12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	e044      	b.n	8002c12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d018      	beq.n	8002bc2 <RCCEx_PLLSAI1_Config+0x86>
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d825      	bhi.n	8002be0 <RCCEx_PLLSAI1_Config+0xa4>
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d002      	beq.n	8002b9e <RCCEx_PLLSAI1_Config+0x62>
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d009      	beq.n	8002bb0 <RCCEx_PLLSAI1_Config+0x74>
 8002b9c:	e020      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b9e:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11d      	bne.n	8002be6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bae:	e01a      	b.n	8002be6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bb0:	4b5b      	ldr	r3, [pc, #364]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d116      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc0:	e013      	b.n	8002bea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bc2:	4b57      	ldr	r3, [pc, #348]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bce:	4b54      	ldr	r3, [pc, #336]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bde:	e006      	b.n	8002bee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
      break;
 8002be4:	e004      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002be6:	bf00      	nop
 8002be8:	e002      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bea:	bf00      	nop
 8002bec:	e000      	b.n	8002bf0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bee:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10d      	bne.n	8002c12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	4944      	ldr	r1, [pc, #272]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d17d      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c18:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a40      	ldr	r2, [pc, #256]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c24:	f7fe fb42 	bl	80012ac <HAL_GetTick>
 8002c28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c2a:	e009      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c2c:	f7fe fb3e 	bl	80012ac <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d902      	bls.n	8002c40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c3e:	e005      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c40:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ef      	bne.n	8002c2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d160      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d111      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c58:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6892      	ldr	r2, [r2, #8]
 8002c68:	0211      	lsls	r1, r2, #8
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68d2      	ldr	r2, [r2, #12]
 8002c6e:	0912      	lsrs	r2, r2, #4
 8002c70:	0452      	lsls	r2, r2, #17
 8002c72:	430a      	orrs	r2, r1
 8002c74:	492a      	ldr	r1, [pc, #168]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	610b      	str	r3, [r1, #16]
 8002c7a:	e027      	b.n	8002ccc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d112      	bne.n	8002ca8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6892      	ldr	r2, [r2, #8]
 8002c92:	0211      	lsls	r1, r2, #8
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6912      	ldr	r2, [r2, #16]
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0552      	lsls	r2, r2, #21
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	491f      	ldr	r1, [pc, #124]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	610b      	str	r3, [r1, #16]
 8002ca6:	e011      	b.n	8002ccc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	0211      	lsls	r1, r2, #8
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6952      	ldr	r2, [r2, #20]
 8002cbe:	0852      	lsrs	r2, r2, #1
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	0652      	lsls	r2, r2, #25
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	4916      	ldr	r1, [pc, #88]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fae8 	bl	80012ac <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cde:	e009      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce0:	f7fe fae4 	bl	80012ac <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	73fb      	strb	r3, [r7, #15]
          break;
 8002cf2:	e005      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ef      	beq.n	8002ce0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	4904      	ldr	r1, [pc, #16]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000

08002d24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d32:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d018      	beq.n	8002d70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d3e:	4b67      	ldr	r3, [pc, #412]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0203 	and.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d10d      	bne.n	8002d6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
       ||
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d56:	4b61      	ldr	r3, [pc, #388]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
       ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d047      	beq.n	8002dfa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	e044      	b.n	8002dfa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d018      	beq.n	8002daa <RCCEx_PLLSAI2_Config+0x86>
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d825      	bhi.n	8002dc8 <RCCEx_PLLSAI2_Config+0xa4>
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d002      	beq.n	8002d86 <RCCEx_PLLSAI2_Config+0x62>
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d009      	beq.n	8002d98 <RCCEx_PLLSAI2_Config+0x74>
 8002d84:	e020      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d86:	4b55      	ldr	r3, [pc, #340]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d11d      	bne.n	8002dce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d96:	e01a      	b.n	8002dce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d116      	bne.n	8002dd2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da8:	e013      	b.n	8002dd2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002daa:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002db6:	4b49      	ldr	r3, [pc, #292]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dc6:	e006      	b.n	8002dd6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      break;
 8002dcc:	e004      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e002      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e000      	b.n	8002dd8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10d      	bne.n	8002dfa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dde:	4b3f      	ldr	r3, [pc, #252]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6819      	ldr	r1, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	430b      	orrs	r3, r1
 8002df4:	4939      	ldr	r1, [pc, #228]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d167      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e00:	4b36      	ldr	r3, [pc, #216]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a35      	ldr	r2, [pc, #212]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fa4e 	bl	80012ac <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e12:	e009      	b.n	8002e28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e14:	f7fe fa4a 	bl	80012ac <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	73fb      	strb	r3, [r7, #15]
        break;
 8002e26:	e005      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e28:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ef      	bne.n	8002e14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d14a      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d111      	bne.n	8002e64 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6892      	ldr	r2, [r2, #8]
 8002e50:	0211      	lsls	r1, r2, #8
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68d2      	ldr	r2, [r2, #12]
 8002e56:	0912      	lsrs	r2, r2, #4
 8002e58:	0452      	lsls	r2, r2, #17
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	491f      	ldr	r1, [pc, #124]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	614b      	str	r3, [r1, #20]
 8002e62:	e011      	b.n	8002e88 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	0211      	lsls	r1, r2, #8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6912      	ldr	r2, [r2, #16]
 8002e7a:	0852      	lsrs	r2, r2, #1
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	0652      	lsls	r2, r2, #25
 8002e80:	430a      	orrs	r2, r1
 8002e82:	4916      	ldr	r1, [pc, #88]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a13      	ldr	r2, [pc, #76]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fa0a 	bl	80012ac <HAL_GetTick>
 8002e98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e9a:	e009      	b.n	8002eb0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e9c:	f7fe fa06 	bl	80012ac <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d902      	bls.n	8002eb0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	73fb      	strb	r3, [r7, #15]
          break;
 8002eae:	e005      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ef      	beq.n	8002e9c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4904      	ldr	r1, [pc, #16]	; (8002edc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e049      	b.n	8002f86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe f800 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 fa9a 	bl	8003458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d001      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e04f      	b.n	8003048 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a23      	ldr	r2, [pc, #140]	; (8003054 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01d      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0x76>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd2:	d018      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0x76>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0x76>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1e      	ldr	r2, [pc, #120]	; (800305c <HAL_TIM_Base_Start_IT+0xcc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0x76>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0x76>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIM_Base_Start_IT+0x76>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a19      	ldr	r2, [pc, #100]	; (8003068 <HAL_TIM_Base_Start_IT+0xd8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d115      	bne.n	8003032 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_TIM_Base_Start_IT+0xdc>)
 800300e:	4013      	ands	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b06      	cmp	r3, #6
 8003016:	d015      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0xb4>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d011      	beq.n	8003044 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003030:	e008      	b.n	8003044 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e000      	b.n	8003046 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003044:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800
 8003060:	40000c00 	.word	0x40000c00
 8003064:	40013400 	.word	0x40013400
 8003068:	40014000 	.word	0x40014000
 800306c:	00010007 	.word	0x00010007

08003070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d020      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01b      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0202 	mvn.w	r2, #2
 80030a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f9ad 	bl	800341a <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f99f 	bl	8003406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f9b0 	bl	800342e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d020      	beq.n	8003120 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01b      	beq.n	8003120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0204 	mvn.w	r2, #4
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f987 	bl	800341a <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f979 	bl	8003406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f98a 	bl	800342e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d020      	beq.n	800316c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01b      	beq.n	800316c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0208 	mvn.w	r2, #8
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2204      	movs	r2, #4
 8003142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f961 	bl	800341a <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f953 	bl	8003406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f964 	bl	800342e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	d020      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01b      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0210 	mvn.w	r2, #16
 8003188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2208      	movs	r2, #8
 800318e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f93b 	bl	800341a <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f92d 	bl	8003406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f93e 	bl	800342e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0201 	mvn.w	r2, #1
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fd92 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 faf2 	bl	80037e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00c      	beq.n	8003224 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800321c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 faea 	bl	80037f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00c      	beq.n	8003248 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f8fd 	bl	8003442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00c      	beq.n	800326c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0220 	mvn.w	r2, #32
 8003264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fab2 	bl	80037d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_TIM_ConfigClockSource+0x1c>
 800328c:	2302      	movs	r3, #2
 800328e:	e0b6      	b.n	80033fe <HAL_TIM_ConfigClockSource+0x18a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032cc:	d03e      	beq.n	800334c <HAL_TIM_ConfigClockSource+0xd8>
 80032ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032d2:	f200 8087 	bhi.w	80033e4 <HAL_TIM_ConfigClockSource+0x170>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032da:	f000 8086 	beq.w	80033ea <HAL_TIM_ConfigClockSource+0x176>
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d87f      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x170>
 80032e4:	2b70      	cmp	r3, #112	; 0x70
 80032e6:	d01a      	beq.n	800331e <HAL_TIM_ConfigClockSource+0xaa>
 80032e8:	2b70      	cmp	r3, #112	; 0x70
 80032ea:	d87b      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x170>
 80032ec:	2b60      	cmp	r3, #96	; 0x60
 80032ee:	d050      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x11e>
 80032f0:	2b60      	cmp	r3, #96	; 0x60
 80032f2:	d877      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x170>
 80032f4:	2b50      	cmp	r3, #80	; 0x50
 80032f6:	d03c      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0xfe>
 80032f8:	2b50      	cmp	r3, #80	; 0x50
 80032fa:	d873      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x170>
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d058      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0x13e>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d86f      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x170>
 8003304:	2b30      	cmp	r3, #48	; 0x30
 8003306:	d064      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15e>
 8003308:	2b30      	cmp	r3, #48	; 0x30
 800330a:	d86b      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x170>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d060      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15e>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d867      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x170>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d05c      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15e>
 8003318:	2b10      	cmp	r3, #16
 800331a:	d05a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15e>
 800331c:	e062      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800332e:	f000 f9a7 	bl	8003680 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	609a      	str	r2, [r3, #8]
      break;
 800334a:	e04f      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800335c:	f000 f990 	bl	8003680 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336e:	609a      	str	r2, [r3, #8]
      break;
 8003370:	e03c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	461a      	mov	r2, r3
 8003380:	f000 f904 	bl	800358c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2150      	movs	r1, #80	; 0x50
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f95d 	bl	800364a <TIM_ITRx_SetConfig>
      break;
 8003390:	e02c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800339e:	461a      	mov	r2, r3
 80033a0:	f000 f923 	bl	80035ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2160      	movs	r1, #96	; 0x60
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f94d 	bl	800364a <TIM_ITRx_SetConfig>
      break;
 80033b0:	e01c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 f8e4 	bl	800358c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f93d 	bl	800364a <TIM_ITRx_SetConfig>
      break;
 80033d0:	e00c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f000 f934 	bl	800364a <TIM_ITRx_SetConfig>
      break;
 80033e2:	e003      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e000      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80033ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a40      	ldr	r2, [pc, #256]	; (800356c <TIM_Base_SetConfig+0x114>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d013      	beq.n	8003498 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d00f      	beq.n	8003498 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3d      	ldr	r2, [pc, #244]	; (8003570 <TIM_Base_SetConfig+0x118>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00b      	beq.n	8003498 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3c      	ldr	r2, [pc, #240]	; (8003574 <TIM_Base_SetConfig+0x11c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d007      	beq.n	8003498 <TIM_Base_SetConfig+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a3b      	ldr	r2, [pc, #236]	; (8003578 <TIM_Base_SetConfig+0x120>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d003      	beq.n	8003498 <TIM_Base_SetConfig+0x40>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3a      	ldr	r2, [pc, #232]	; (800357c <TIM_Base_SetConfig+0x124>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d108      	bne.n	80034aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2f      	ldr	r2, [pc, #188]	; (800356c <TIM_Base_SetConfig+0x114>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01f      	beq.n	80034f2 <TIM_Base_SetConfig+0x9a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d01b      	beq.n	80034f2 <TIM_Base_SetConfig+0x9a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <TIM_Base_SetConfig+0x118>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d017      	beq.n	80034f2 <TIM_Base_SetConfig+0x9a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2b      	ldr	r2, [pc, #172]	; (8003574 <TIM_Base_SetConfig+0x11c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <TIM_Base_SetConfig+0x9a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <TIM_Base_SetConfig+0x120>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <TIM_Base_SetConfig+0x9a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a29      	ldr	r2, [pc, #164]	; (800357c <TIM_Base_SetConfig+0x124>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0x9a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a28      	ldr	r2, [pc, #160]	; (8003580 <TIM_Base_SetConfig+0x128>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0x9a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a27      	ldr	r2, [pc, #156]	; (8003584 <TIM_Base_SetConfig+0x12c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0x9a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a26      	ldr	r2, [pc, #152]	; (8003588 <TIM_Base_SetConfig+0x130>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a10      	ldr	r2, [pc, #64]	; (800356c <TIM_Base_SetConfig+0x114>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00f      	beq.n	8003550 <TIM_Base_SetConfig+0xf8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a12      	ldr	r2, [pc, #72]	; (800357c <TIM_Base_SetConfig+0x124>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00b      	beq.n	8003550 <TIM_Base_SetConfig+0xf8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a11      	ldr	r2, [pc, #68]	; (8003580 <TIM_Base_SetConfig+0x128>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d007      	beq.n	8003550 <TIM_Base_SetConfig+0xf8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a10      	ldr	r2, [pc, #64]	; (8003584 <TIM_Base_SetConfig+0x12c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <TIM_Base_SetConfig+0xf8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <TIM_Base_SetConfig+0x130>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	615a      	str	r2, [r3, #20]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40000c00 	.word	0x40000c00
 800357c:	40013400 	.word	0x40013400
 8003580:	40014000 	.word	0x40014000
 8003584:	40014400 	.word	0x40014400
 8003588:	40014800 	.word	0x40014800

0800358c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f023 0201 	bic.w	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f023 030a 	bic.w	r3, r3, #10
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b087      	sub	sp, #28
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f023 0210 	bic.w	r2, r3, #16
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	031b      	lsls	r3, r3, #12
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003626:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	f043 0307 	orr.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	609a      	str	r2, [r3, #8]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800369a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	021a      	lsls	r2, r3, #8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e068      	b.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2e      	ldr	r2, [pc, #184]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d108      	bne.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003712:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003724:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01d      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d018      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a13      	ldr	r2, [pc, #76]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d10c      	bne.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	4313      	orrs	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40013400 	.word	0x40013400
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40000c00 	.word	0x40000c00
 80037cc:	40014000 	.word	0x40014000

080037d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e040      	b.n	80038a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fb8a 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fb6a 	bl	8003f2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8af 	bl	80039bc <UART_SetConfig>
 800385e:	4603      	mov	r3, r0
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e01b      	b.n	80038a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0201 	orr.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fbe9 	bl	8004070 <UART_CheckIdleState>
 800389e:	4603      	mov	r3, r0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d178      	bne.n	80039b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_UART_Transmit+0x24>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e071      	b.n	80039b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2221      	movs	r2, #33	; 0x21
 80038dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038de:	f7fd fce5 	bl	80012ac <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fc:	d108      	bne.n	8003910 <HAL_UART_Transmit+0x68>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d104      	bne.n	8003910 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	e003      	b.n	8003918 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003918:	e030      	b.n	800397c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2200      	movs	r2, #0
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fc4b 	bl	80041c0 <UART_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e03c      	b.n	80039b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394c:	b292      	uxth	r2, r2
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	3302      	adds	r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e008      	b.n	800396a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	b292      	uxth	r2, r2
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1c8      	bne.n	800391a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	2140      	movs	r1, #64	; 0x40
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fc14 	bl	80041c0 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e005      	b.n	80039b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c0:	b08a      	sub	sp, #40	; 0x28
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	431a      	orrs	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4ba4      	ldr	r3, [pc, #656]	; (8003c7c <UART_SetConfig+0x2c0>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a99      	ldr	r2, [pc, #612]	; (8003c80 <UART_SetConfig+0x2c4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d004      	beq.n	8003a28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	4313      	orrs	r3, r2
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a90      	ldr	r2, [pc, #576]	; (8003c84 <UART_SetConfig+0x2c8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d126      	bne.n	8003a94 <UART_SetConfig+0xd8>
 8003a46:	4b90      	ldr	r3, [pc, #576]	; (8003c88 <UART_SetConfig+0x2cc>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d81b      	bhi.n	8003a8c <UART_SetConfig+0xd0>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0xa0>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a6d 	.word	0x08003a6d
 8003a60:	08003a7d 	.word	0x08003a7d
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a85 	.word	0x08003a85
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e116      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7a:	e112      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a82:	e10e      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a84:	2308      	movs	r3, #8
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8a:	e10a      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e106      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a7c      	ldr	r2, [pc, #496]	; (8003c8c <UART_SetConfig+0x2d0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d138      	bne.n	8003b10 <UART_SetConfig+0x154>
 8003a9e:	4b7a      	ldr	r3, [pc, #488]	; (8003c88 <UART_SetConfig+0x2cc>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b0c      	cmp	r3, #12
 8003aaa:	d82d      	bhi.n	8003b08 <UART_SetConfig+0x14c>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0xf8>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ae9 	.word	0x08003ae9
 8003ab8:	08003b09 	.word	0x08003b09
 8003abc:	08003b09 	.word	0x08003b09
 8003ac0:	08003b09 	.word	0x08003b09
 8003ac4:	08003af9 	.word	0x08003af9
 8003ac8:	08003b09 	.word	0x08003b09
 8003acc:	08003b09 	.word	0x08003b09
 8003ad0:	08003b09 	.word	0x08003b09
 8003ad4:	08003af1 	.word	0x08003af1
 8003ad8:	08003b09 	.word	0x08003b09
 8003adc:	08003b09 	.word	0x08003b09
 8003ae0:	08003b09 	.word	0x08003b09
 8003ae4:	08003b01 	.word	0x08003b01
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e0d8      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af6:	e0d4      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003af8:	2304      	movs	r3, #4
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afe:	e0d0      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b00:	2308      	movs	r3, #8
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b06:	e0cc      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0e:	e0c8      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5e      	ldr	r2, [pc, #376]	; (8003c90 <UART_SetConfig+0x2d4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d125      	bne.n	8003b66 <UART_SetConfig+0x1aa>
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <UART_SetConfig+0x2cc>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b24:	2b30      	cmp	r3, #48	; 0x30
 8003b26:	d016      	beq.n	8003b56 <UART_SetConfig+0x19a>
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	d818      	bhi.n	8003b5e <UART_SetConfig+0x1a2>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d00a      	beq.n	8003b46 <UART_SetConfig+0x18a>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d814      	bhi.n	8003b5e <UART_SetConfig+0x1a2>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <UART_SetConfig+0x182>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d008      	beq.n	8003b4e <UART_SetConfig+0x192>
 8003b3c:	e00f      	b.n	8003b5e <UART_SetConfig+0x1a2>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b44:	e0ad      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b46:	2302      	movs	r3, #2
 8003b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4c:	e0a9      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b4e:	2304      	movs	r3, #4
 8003b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b54:	e0a5      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b56:	2308      	movs	r3, #8
 8003b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5c:	e0a1      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b5e:	2310      	movs	r3, #16
 8003b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b64:	e09d      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4a      	ldr	r2, [pc, #296]	; (8003c94 <UART_SetConfig+0x2d8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d125      	bne.n	8003bbc <UART_SetConfig+0x200>
 8003b70:	4b45      	ldr	r3, [pc, #276]	; (8003c88 <UART_SetConfig+0x2cc>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b7c:	d016      	beq.n	8003bac <UART_SetConfig+0x1f0>
 8003b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b80:	d818      	bhi.n	8003bb4 <UART_SetConfig+0x1f8>
 8003b82:	2b80      	cmp	r3, #128	; 0x80
 8003b84:	d00a      	beq.n	8003b9c <UART_SetConfig+0x1e0>
 8003b86:	2b80      	cmp	r3, #128	; 0x80
 8003b88:	d814      	bhi.n	8003bb4 <UART_SetConfig+0x1f8>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <UART_SetConfig+0x1d8>
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d008      	beq.n	8003ba4 <UART_SetConfig+0x1e8>
 8003b92:	e00f      	b.n	8003bb4 <UART_SetConfig+0x1f8>
 8003b94:	2300      	movs	r3, #0
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	e082      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba2:	e07e      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e07a      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003bac:	2308      	movs	r3, #8
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb2:	e076      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bba:	e072      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a35      	ldr	r2, [pc, #212]	; (8003c98 <UART_SetConfig+0x2dc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d12a      	bne.n	8003c1c <UART_SetConfig+0x260>
 8003bc6:	4b30      	ldr	r3, [pc, #192]	; (8003c88 <UART_SetConfig+0x2cc>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd4:	d01a      	beq.n	8003c0c <UART_SetConfig+0x250>
 8003bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bda:	d81b      	bhi.n	8003c14 <UART_SetConfig+0x258>
 8003bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be0:	d00c      	beq.n	8003bfc <UART_SetConfig+0x240>
 8003be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be6:	d815      	bhi.n	8003c14 <UART_SetConfig+0x258>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <UART_SetConfig+0x238>
 8003bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf0:	d008      	beq.n	8003c04 <UART_SetConfig+0x248>
 8003bf2:	e00f      	b.n	8003c14 <UART_SetConfig+0x258>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfa:	e052      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c02:	e04e      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c04:	2304      	movs	r3, #4
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e04a      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e046      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c14:	2310      	movs	r3, #16
 8003c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c1a:	e042      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <UART_SetConfig+0x2c4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d13a      	bne.n	8003c9c <UART_SetConfig+0x2e0>
 8003c26:	4b18      	ldr	r3, [pc, #96]	; (8003c88 <UART_SetConfig+0x2cc>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c34:	d01a      	beq.n	8003c6c <UART_SetConfig+0x2b0>
 8003c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c3a:	d81b      	bhi.n	8003c74 <UART_SetConfig+0x2b8>
 8003c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c40:	d00c      	beq.n	8003c5c <UART_SetConfig+0x2a0>
 8003c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c46:	d815      	bhi.n	8003c74 <UART_SetConfig+0x2b8>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <UART_SetConfig+0x298>
 8003c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c50:	d008      	beq.n	8003c64 <UART_SetConfig+0x2a8>
 8003c52:	e00f      	b.n	8003c74 <UART_SetConfig+0x2b8>
 8003c54:	2300      	movs	r3, #0
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5a:	e022      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c62:	e01e      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c64:	2304      	movs	r3, #4
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6a:	e01a      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c72:	e016      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c74:	2310      	movs	r3, #16
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7a:	e012      	b.n	8003ca2 <UART_SetConfig+0x2e6>
 8003c7c:	efff69f3 	.word	0xefff69f3
 8003c80:	40008000 	.word	0x40008000
 8003c84:	40013800 	.word	0x40013800
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40004400 	.word	0x40004400
 8003c90:	40004800 	.word	0x40004800
 8003c94:	40004c00 	.word	0x40004c00
 8003c98:	40005000 	.word	0x40005000
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a9f      	ldr	r2, [pc, #636]	; (8003f24 <UART_SetConfig+0x568>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d17a      	bne.n	8003da2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d824      	bhi.n	8003cfe <UART_SetConfig+0x342>
 8003cb4:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <UART_SetConfig+0x300>)
 8003cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cba:	bf00      	nop
 8003cbc:	08003ce1 	.word	0x08003ce1
 8003cc0:	08003cff 	.word	0x08003cff
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003cff 	.word	0x08003cff
 8003ccc:	08003cef 	.word	0x08003cef
 8003cd0:	08003cff 	.word	0x08003cff
 8003cd4:	08003cff 	.word	0x08003cff
 8003cd8:	08003cff 	.word	0x08003cff
 8003cdc:	08003cf7 	.word	0x08003cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce0:	f7fe fb84 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003ce4:	61f8      	str	r0, [r7, #28]
        break;
 8003ce6:	e010      	b.n	8003d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce8:	4b8f      	ldr	r3, [pc, #572]	; (8003f28 <UART_SetConfig+0x56c>)
 8003cea:	61fb      	str	r3, [r7, #28]
        break;
 8003cec:	e00d      	b.n	8003d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cee:	f7fe fae5 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8003cf2:	61f8      	str	r0, [r7, #28]
        break;
 8003cf4:	e009      	b.n	8003d0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfa:	61fb      	str	r3, [r7, #28]
        break;
 8003cfc:	e005      	b.n	8003d0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80fb 	beq.w	8003f08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d305      	bcc.n	8003d2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d903      	bls.n	8003d36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d34:	e0e8      	b.n	8003f08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	461c      	mov	r4, r3
 8003d3c:	4615      	mov	r5, r2
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	022b      	lsls	r3, r5, #8
 8003d48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d4c:	0222      	lsls	r2, r4, #8
 8003d4e:	68f9      	ldr	r1, [r7, #12]
 8003d50:	6849      	ldr	r1, [r1, #4]
 8003d52:	0849      	lsrs	r1, r1, #1
 8003d54:	2000      	movs	r0, #0
 8003d56:	4688      	mov	r8, r1
 8003d58:	4681      	mov	r9, r0
 8003d5a:	eb12 0a08 	adds.w	sl, r2, r8
 8003d5e:	eb43 0b09 	adc.w	fp, r3, r9
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d70:	4650      	mov	r0, sl
 8003d72:	4659      	mov	r1, fp
 8003d74:	f7fc fa7c 	bl	8000270 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d86:	d308      	bcc.n	8003d9a <UART_SetConfig+0x3de>
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8e:	d204      	bcs.n	8003d9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	60da      	str	r2, [r3, #12]
 8003d98:	e0b6      	b.n	8003f08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003da0:	e0b2      	b.n	8003f08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003daa:	d15e      	bne.n	8003e6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d828      	bhi.n	8003e06 <UART_SetConfig+0x44a>
 8003db4:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <UART_SetConfig+0x400>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003df1 	.word	0x08003df1
 8003dc8:	08003e07 	.word	0x08003e07
 8003dcc:	08003df7 	.word	0x08003df7
 8003dd0:	08003e07 	.word	0x08003e07
 8003dd4:	08003e07 	.word	0x08003e07
 8003dd8:	08003e07 	.word	0x08003e07
 8003ddc:	08003dff 	.word	0x08003dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de0:	f7fe fb04 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003de4:	61f8      	str	r0, [r7, #28]
        break;
 8003de6:	e014      	b.n	8003e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7fe fb16 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8003dec:	61f8      	str	r0, [r7, #28]
        break;
 8003dee:	e010      	b.n	8003e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df0:	4b4d      	ldr	r3, [pc, #308]	; (8003f28 <UART_SetConfig+0x56c>)
 8003df2:	61fb      	str	r3, [r7, #28]
        break;
 8003df4:	e00d      	b.n	8003e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df6:	f7fe fa61 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8003dfa:	61f8      	str	r0, [r7, #28]
        break;
 8003dfc:	e009      	b.n	8003e12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	61fb      	str	r3, [r7, #28]
        break;
 8003e04:	e005      	b.n	8003e12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d077      	beq.n	8003f08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	005a      	lsls	r2, r3, #1
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	441a      	add	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b0f      	cmp	r3, #15
 8003e32:	d916      	bls.n	8003e62 <UART_SetConfig+0x4a6>
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3a:	d212      	bcs.n	8003e62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f023 030f 	bic.w	r3, r3, #15
 8003e44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	8afb      	ldrh	r3, [r7, #22]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	8afa      	ldrh	r2, [r7, #22]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e052      	b.n	8003f08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e68:	e04e      	b.n	8003f08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d827      	bhi.n	8003ec2 <UART_SetConfig+0x506>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <UART_SetConfig+0x4bc>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003eb3 	.word	0x08003eb3
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ec3 	.word	0x08003ec3
 8003e94:	08003ec3 	.word	0x08003ec3
 8003e98:	08003ebb 	.word	0x08003ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe faa6 	bl	80023ec <HAL_RCC_GetPCLK1Freq>
 8003ea0:	61f8      	str	r0, [r7, #28]
        break;
 8003ea2:	e014      	b.n	8003ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea4:	f7fe fab8 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8003ea8:	61f8      	str	r0, [r7, #28]
        break;
 8003eaa:	e010      	b.n	8003ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <UART_SetConfig+0x56c>)
 8003eae:	61fb      	str	r3, [r7, #28]
        break;
 8003eb0:	e00d      	b.n	8003ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe fa03 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8003eb6:	61f8      	str	r0, [r7, #28]
        break;
 8003eb8:	e009      	b.n	8003ece <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ebe:	61fb      	str	r3, [r7, #28]
        break;
 8003ec0:	e005      	b.n	8003ece <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d019      	beq.n	8003f08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	085a      	lsrs	r2, r3, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	441a      	add	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d909      	bls.n	8003f02 <UART_SetConfig+0x546>
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef4:	d205      	bcs.n	8003f02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	e002      	b.n	8003f08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3728      	adds	r7, #40	; 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f22:	bf00      	nop
 8003f24:	40008000 	.word	0x40008000
 8003f28:	00f42400 	.word	0x00f42400

08003f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01a      	beq.n	8004042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402a:	d10a      	bne.n	8004042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
  }
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b098      	sub	sp, #96	; 0x60
 8004074:	af02      	add	r7, sp, #8
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004080:	f7fd f914 	bl	80012ac <HAL_GetTick>
 8004084:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b08      	cmp	r3, #8
 8004092:	d12e      	bne.n	80040f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004094:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800409c:	2200      	movs	r2, #0
 800409e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f88c 	bl	80041c0 <UART_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d021      	beq.n	80040f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c2:	653b      	str	r3, [r7, #80]	; 0x50
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040cc:	647b      	str	r3, [r7, #68]	; 0x44
 80040ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e6      	bne.n	80040ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e062      	b.n	80041b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d149      	bne.n	8004194 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004108:	2200      	movs	r2, #0
 800410a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f856 	bl	80041c0 <UART_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d03c      	beq.n	8004194 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	623b      	str	r3, [r7, #32]
   return(result);
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004138:	633b      	str	r3, [r7, #48]	; 0x30
 800413a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800413e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e6      	bne.n	800411a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3308      	adds	r3, #8
 8004152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	60fb      	str	r3, [r7, #12]
   return(result);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	64bb      	str	r3, [r7, #72]	; 0x48
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800416c:	61fa      	str	r2, [r7, #28]
 800416e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	69b9      	ldr	r1, [r7, #24]
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	617b      	str	r3, [r7, #20]
   return(result);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e011      	b.n	80041b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3758      	adds	r7, #88	; 0x58
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d0:	e049      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d8:	d045      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fd f867 	bl	80012ac <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e048      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d031      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b08      	cmp	r3, #8
 800420e:	d110      	bne.n	8004232 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2208      	movs	r2, #8
 8004216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f838 	bl	800428e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2208      	movs	r2, #8
 8004222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e029      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004240:	d111      	bne.n	8004266 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800424a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f81e 	bl	800428e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e00f      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	429a      	cmp	r2, r3
 8004282:	d0a6      	beq.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428e:	b480      	push	{r7}
 8004290:	b095      	sub	sp, #84	; 0x54
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b4:	643b      	str	r3, [r7, #64]	; 0x40
 80042b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e6      	bne.n	8004296 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3308      	adds	r3, #8
 80042ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004300:	2b01      	cmp	r3, #1
 8004302:	d118      	bne.n	8004336 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	60bb      	str	r3, [r7, #8]
   return(result);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0310 	bic.w	r3, r3, #16
 8004318:	647b      	str	r3, [r7, #68]	; 0x44
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	613b      	str	r3, [r7, #16]
   return(result);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e6      	bne.n	8004304 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	669a      	str	r2, [r3, #104]	; 0x68
}
 800434a:	bf00      	nop
 800434c:	3754      	adds	r7, #84	; 0x54
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <SysTick_Handler+0x1c>)
 800435e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004360:	f001 fe04 	bl	8005f6c <xTaskGetSchedulerState>
 8004364:	4603      	mov	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d001      	beq.n	800436e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800436a:	f002 f8e5 	bl	8006538 <xPortSysTickHandler>
  }
}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	e000e010 	.word	0xe000e010

08004378 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800437e:	f3ef 8305 	mrs	r3, IPSR
 8004382:	603b      	str	r3, [r7, #0]
  return(result);
 8004384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800438a:	f06f 0305 	mvn.w	r3, #5
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	e00c      	b.n	80043ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <osKernelInitialize+0x44>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <osKernelInitialize+0x44>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	607b      	str	r3, [r7, #4]
 80043a4:	e002      	b.n	80043ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043ac:	687b      	ldr	r3, [r7, #4]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	200001ec 	.word	0x200001ec

080043c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	; 0x38
 80043c4:	af04      	add	r7, sp, #16
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043d0:	f3ef 8305 	mrs	r3, IPSR
 80043d4:	617b      	str	r3, [r7, #20]
  return(result);
 80043d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d17e      	bne.n	80044da <osThreadNew+0x11a>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d07b      	beq.n	80044da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043e6:	2318      	movs	r3, #24
 80043e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d045      	beq.n	8004486 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <osThreadNew+0x48>
        name = attr->name;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <osThreadNew+0x6e>
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b38      	cmp	r3, #56	; 0x38
 8004420:	d805      	bhi.n	800442e <osThreadNew+0x6e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <osThreadNew+0x72>
        return (NULL);
 800442e:	2300      	movs	r3, #0
 8004430:	e054      	b.n	80044dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	089b      	lsrs	r3, r3, #2
 8004440:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00e      	beq.n	8004468 <osThreadNew+0xa8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2ba7      	cmp	r3, #167	; 0xa7
 8004450:	d90a      	bls.n	8004468 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004456:	2b00      	cmp	r3, #0
 8004458:	d006      	beq.n	8004468 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <osThreadNew+0xa8>
        mem = 1;
 8004462:	2301      	movs	r3, #1
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e010      	b.n	800448a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10c      	bne.n	800448a <osThreadNew+0xca>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <osThreadNew+0xca>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <osThreadNew+0xca>
          mem = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	e001      	b.n	800448a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d110      	bne.n	80044b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004498:	9202      	str	r2, [sp, #8]
 800449a:	9301      	str	r3, [sp, #4]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	6a3a      	ldr	r2, [r7, #32]
 80044a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 ffb8 	bl	800541c <xTaskCreateStatic>
 80044ac:	4603      	mov	r3, r0
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	e013      	b.n	80044da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d110      	bne.n	80044da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	f107 0310 	add.w	r3, r7, #16
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f001 f803 	bl	80054d6 <xTaskCreate>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d001      	beq.n	80044da <osThreadNew+0x11a>
            hTask = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044da:	693b      	ldr	r3, [r7, #16]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3728      	adds	r7, #40	; 0x28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044f0:	f3ef 8305 	mrs	r3, IPSR
 80044f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80044f6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80044fc:	f06f 0305 	mvn.w	r3, #5
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	e00b      	b.n	800451c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800450a:	f06f 0303 	mvn.w	r3, #3
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e004      	b.n	800451c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8004516:	6938      	ldr	r0, [r7, #16]
 8004518:	f001 f96c 	bl	80057f4 <vTaskSuspend>
  }

  return (stat);
 800451c:	697b      	ldr	r3, [r7, #20]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800452e:	f3ef 8305 	mrs	r3, IPSR
 8004532:	60bb      	str	r3, [r7, #8]
  return(result);
 8004534:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <osDelay+0x1c>
    stat = osErrorISR;
 800453a:	f06f 0305 	mvn.w	r3, #5
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e007      	b.n	8004552 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <osDelay+0x2c>
      vTaskDelay(ticks);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 f91d 	bl	800578c <vTaskDelay>
    }
  }

  return (stat);
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004568:	f3ef 8305 	mrs	r3, IPSR
 800456c:	60bb      	str	r3, [r7, #8]
  return(result);
 800456e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004570:	2b00      	cmp	r3, #0
 8004572:	d174      	bne.n	800465e <osMutexNew+0x102>
    if (attr != NULL) {
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <osMutexNew+0x26>
      type = attr->attr_bits;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e001      	b.n	8004586 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <osMutexNew+0x3a>
      rmtx = 1U;
 8004590:	2301      	movs	r3, #1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e001      	b.n	800459a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d15c      	bne.n	800465e <osMutexNew+0x102>
      mem = -1;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045a8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d015      	beq.n	80045dc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <osMutexNew+0x6a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b4f      	cmp	r3, #79	; 0x4f
 80045be:	d902      	bls.n	80045c6 <osMutexNew+0x6a>
          mem = 1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e00c      	b.n	80045e0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <osMutexNew+0x84>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <osMutexNew+0x84>
            mem = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e001      	b.n	80045e0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d112      	bne.n	800460c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	4619      	mov	r1, r3
 80045f2:	2004      	movs	r0, #4
 80045f4:	f000 fb57 	bl	8004ca6 <xQueueCreateMutexStatic>
 80045f8:	61f8      	str	r0, [r7, #28]
 80045fa:	e016      	b.n	800462a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4619      	mov	r1, r3
 8004602:	2001      	movs	r0, #1
 8004604:	f000 fb4f 	bl	8004ca6 <xQueueCreateMutexStatic>
 8004608:	61f8      	str	r0, [r7, #28]
 800460a:	e00e      	b.n	800462a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10b      	bne.n	800462a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004618:	2004      	movs	r0, #4
 800461a:	f000 fb2c 	bl	8004c76 <xQueueCreateMutex>
 800461e:	61f8      	str	r0, [r7, #28]
 8004620:	e003      	b.n	800462a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004622:	2001      	movs	r0, #1
 8004624:	f000 fb27 	bl	8004c76 <xQueueCreateMutex>
 8004628:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <osMutexNew+0xee>
        if (attr != NULL) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <osMutexNew+0xe2>
          name = attr->name;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e001      	b.n	8004642 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	69f8      	ldr	r0, [r7, #28]
 8004646:	f000 febf 	bl	80053c8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d006      	beq.n	800465e <osMutexNew+0x102>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800465e:	69fb      	ldr	r3, [r7, #28]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004686:	f3ef 8305 	mrs	r3, IPSR
 800468a:	60bb      	str	r3, [r7, #8]
  return(result);
 800468c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004692:	f06f 0305 	mvn.w	r3, #5
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	e02c      	b.n	80046f4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80046a0:	f06f 0303 	mvn.w	r3, #3
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e025      	b.n	80046f4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	6938      	ldr	r0, [r7, #16]
 80046b2:	f000 fb47 	bl	8004d44 <xQueueTakeMutexRecursive>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d01b      	beq.n	80046f4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80046c2:	f06f 0301 	mvn.w	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e014      	b.n	80046f4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80046ca:	f06f 0302 	mvn.w	r3, #2
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e010      	b.n	80046f4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	6938      	ldr	r0, [r7, #16]
 80046d6:	f000 fc69 	bl	8004fac <xQueueSemaphoreTake>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d009      	beq.n	80046f4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80046e6:	f06f 0301 	mvn.w	r3, #1
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	e002      	b.n	80046f4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80046ee:	f06f 0302 	mvn.w	r3, #2
 80046f2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80046f4:	697b      	ldr	r3, [r7, #20]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800471a:	f3ef 8305 	mrs	r3, IPSR
 800471e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004720:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <osMutexRelease+0x30>
    stat = osErrorISR;
 8004726:	f06f 0305 	mvn.w	r3, #5
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e01f      	b.n	800476e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004734:	f06f 0303 	mvn.w	r3, #3
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e018      	b.n	800476e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004742:	6938      	ldr	r0, [r7, #16]
 8004744:	f000 faca 	bl	8004cdc <xQueueGiveMutexRecursive>
 8004748:	4603      	mov	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d00f      	beq.n	800476e <osMutexRelease+0x70>
        stat = osErrorResource;
 800474e:	f06f 0302 	mvn.w	r3, #2
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e00b      	b.n	800476e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004756:	2300      	movs	r3, #0
 8004758:	2200      	movs	r2, #0
 800475a:	2100      	movs	r1, #0
 800475c:	6938      	ldr	r0, [r7, #16]
 800475e:	f000 fb27 	bl	8004db0 <xQueueGenericSend>
 8004762:	4603      	mov	r3, r0
 8004764:	2b01      	cmp	r3, #1
 8004766:	d002      	beq.n	800476e <osMutexRelease+0x70>
        stat = osErrorResource;
 8004768:	f06f 0302 	mvn.w	r3, #2
 800476c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800476e:	697b      	ldr	r3, [r7, #20]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b08a      	sub	sp, #40	; 0x28
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004788:	f3ef 8305 	mrs	r3, IPSR
 800478c:	613b      	str	r3, [r7, #16]
  return(result);
 800478e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004790:	2b00      	cmp	r3, #0
 8004792:	d15f      	bne.n	8004854 <osMessageQueueNew+0xdc>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d05c      	beq.n	8004854 <osMessageQueueNew+0xdc>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d059      	beq.n	8004854 <osMessageQueueNew+0xdc>
    mem = -1;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d029      	beq.n	8004800 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <osMessageQueueNew+0x62>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b4f      	cmp	r3, #79	; 0x4f
 80047ba:	d90e      	bls.n	80047da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <osMessageQueueNew+0x62>
        mem = 1;
 80047d4:	2301      	movs	r3, #1
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e014      	b.n	8004804 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d110      	bne.n	8004804 <osMessageQueueNew+0x8c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10c      	bne.n	8004804 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d108      	bne.n	8004804 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <osMessageQueueNew+0x8c>
          mem = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	e001      	b.n	8004804 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10b      	bne.n	8004822 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2100      	movs	r1, #0
 8004814:	9100      	str	r1, [sp, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f93d 	bl	8004a98 <xQueueGenericCreateStatic>
 800481e:	61f8      	str	r0, [r7, #28]
 8004820:	e008      	b.n	8004834 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004828:	2200      	movs	r2, #0
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f9ab 	bl	8004b88 <xQueueGenericCreate>
 8004832:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00c      	beq.n	8004854 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e001      	b.n	800484c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800484c:	6979      	ldr	r1, [r7, #20]
 800484e:	69f8      	ldr	r0, [r7, #28]
 8004850:	f000 fdba 	bl	80053c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004854:	69fb      	ldr	r3, [r7, #28]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f103 0208 	add.w	r2, r3, #8
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004876:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f103 0208 	add.w	r2, r3, #8
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f103 0208 	add.w	r2, r3, #8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004916:	d103      	bne.n	8004920 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e00c      	b.n	800493a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3308      	adds	r3, #8
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e002      	b.n	800492e <vListInsert+0x2e>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d2f6      	bcs.n	8004928 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6892      	ldr	r2, [r2, #8]
 8004988:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6852      	ldr	r2, [r2, #4]
 8004992:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d103      	bne.n	80049a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	1e5a      	subs	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80049f2:	f001 fd11 	bl	8006418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a02:	fb01 f303 	mul.w	r3, r1, r3
 8004a06:	441a      	add	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	3b01      	subs	r3, #1
 8004a24:	68f9      	ldr	r1, [r7, #12]
 8004a26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a28:	fb01 f303 	mul.w	r3, r1, r3
 8004a2c:	441a      	add	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	22ff      	movs	r2, #255	; 0xff
 8004a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	22ff      	movs	r2, #255	; 0xff
 8004a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d114      	bne.n	8004a72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01a      	beq.n	8004a86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3310      	adds	r3, #16
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 f931 	bl	8005cbc <xTaskRemoveFromEventList>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d012      	beq.n	8004a86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <xQueueGenericReset+0xcc>)
 8004a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	e009      	b.n	8004a86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3310      	adds	r3, #16
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fef1 	bl	800485e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3324      	adds	r3, #36	; 0x24
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff feec 	bl	800485e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a86:	f001 fcf7 	bl	8006478 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a8a:	2301      	movs	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08e      	sub	sp, #56	; 0x38
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <xQueueGenericCreateStatic+0x52>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <xQueueGenericCreateStatic+0x56>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <xQueueGenericCreateStatic+0x58>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	623b      	str	r3, [r7, #32]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <xQueueGenericCreateStatic+0x7e>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <xQueueGenericCreateStatic+0x82>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <xQueueGenericCreateStatic+0x84>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	61fb      	str	r3, [r7, #28]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b36:	2350      	movs	r3, #80	; 0x50
 8004b38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b50      	cmp	r3, #80	; 0x50
 8004b3e:	d00a      	beq.n	8004b56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	61bb      	str	r3, [r7, #24]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00d      	beq.n	8004b7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	4613      	mov	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 f83f 	bl	8004bfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3730      	adds	r7, #48	; 0x30
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	613b      	str	r3, [r7, #16]
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	3350      	adds	r3, #80	; 0x50
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 fcdb 	bl	800657c <pvPortMalloc>
 8004bc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d011      	beq.n	8004bf2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	3350      	adds	r3, #80	; 0x50
 8004bd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004be0:	79fa      	ldrb	r2, [r7, #7]
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f805 	bl	8004bfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
	}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d103      	bne.n	8004c18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e002      	b.n	8004c1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	69b8      	ldr	r0, [r7, #24]
 8004c2e:	f7ff fecb 	bl	80049c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00e      	beq.n	8004c6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c62:	2300      	movs	r3, #0
 8004c64:	2200      	movs	r2, #0
 8004c66:	2100      	movs	r1, #0
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8a1 	bl	8004db0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b086      	sub	sp, #24
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c80:	2301      	movs	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6939      	ldr	r1, [r7, #16]
 8004c8e:	6978      	ldr	r0, [r7, #20]
 8004c90:	f7ff ff7a 	bl	8004b88 <xQueueGenericCreate>
 8004c94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f7ff ffd3 	bl	8004c42 <prvInitialiseMutex>

		return xNewQueue;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
	}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b088      	sub	sp, #32
 8004caa:	af02      	add	r7, sp, #8
 8004cac:	4603      	mov	r3, r0
 8004cae:	6039      	str	r1, [r7, #0]
 8004cb0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	6939      	ldr	r1, [r7, #16]
 8004cc4:	6978      	ldr	r0, [r7, #20]
 8004cc6:	f7ff fee7 	bl	8004a98 <xQueueGenericCreateStatic>
 8004cca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff ffb8 	bl	8004c42 <prvInitialiseMutex>

		return xNewQueue;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
	}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	60fb      	str	r3, [r7, #12]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	689c      	ldr	r4, [r3, #8]
 8004d08:	f001 f920 	bl	8005f4c <xTaskGetCurrentTaskHandle>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	429c      	cmp	r4, r3
 8004d10:	d111      	bne.n	8004d36 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	1e5a      	subs	r2, r3, #1
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d105      	bne.n	8004d30 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004d24:	2300      	movs	r3, #0
 8004d26:	2200      	movs	r2, #0
 8004d28:	2100      	movs	r1, #0
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f000 f840 	bl	8004db0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004d30:	2301      	movs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e001      	b.n	8004d3a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004d3a:	697b      	ldr	r3, [r7, #20]
	}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd90      	pop	{r4, r7, pc}

08004d44 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60fb      	str	r3, [r7, #12]
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	689c      	ldr	r4, [r3, #8]
 8004d72:	f001 f8eb 	bl	8005f4c <xTaskGetCurrentTaskHandle>
 8004d76:	4603      	mov	r3, r0
 8004d78:	429c      	cmp	r4, r3
 8004d7a:	d107      	bne.n	8004d8c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004d86:	2301      	movs	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e00c      	b.n	8004da6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6938      	ldr	r0, [r7, #16]
 8004d90:	f000 f90c 	bl	8004fac <xQueueSemaphoreTake>
 8004d94:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004da6:	697b      	ldr	r3, [r7, #20]
	}
 8004da8:	4618      	mov	r0, r3
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd90      	pop	{r4, r7, pc}

08004db0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08e      	sub	sp, #56	; 0x38
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <xQueueGenericSend+0x32>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <xQueueGenericSend+0x40>
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <xQueueGenericSend+0x44>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <xQueueGenericSend+0x46>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <xQueueGenericSend+0x60>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d103      	bne.n	8004e1e <xQueueGenericSend+0x6e>
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <xQueueGenericSend+0x72>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <xQueueGenericSend+0x74>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <xQueueGenericSend+0x8e>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	623b      	str	r3, [r7, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e3e:	f001 f895 	bl	8005f6c <xTaskGetSchedulerState>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <xQueueGenericSend+0x9e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <xQueueGenericSend+0xa2>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <xQueueGenericSend+0xa4>
 8004e52:	2300      	movs	r3, #0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <xQueueGenericSend+0xbe>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	61fb      	str	r3, [r7, #28]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e6e:	f001 fad3 	bl	8006418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <xQueueGenericSend+0xd4>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d129      	bne.n	8004ed8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8a:	f000 f9b3 	bl	80051f4 <prvCopyDataToQueue>
 8004e8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d010      	beq.n	8004eba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	3324      	adds	r3, #36	; 0x24
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 ff0d 	bl	8005cbc <xTaskRemoveFromEventList>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d013      	beq.n	8004ed0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ea8:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <xQueueGenericSend+0x1f8>)
 8004eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	e00a      	b.n	8004ed0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ec0:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <xQueueGenericSend+0x1f8>)
 8004ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ed0:	f001 fad2 	bl	8006478 <vPortExitCritical>
				return pdPASS;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e063      	b.n	8004fa0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ede:	f001 facb 	bl	8006478 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	e05c      	b.n	8004fa0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 ff47 	bl	8005d84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004efa:	f001 fabd 	bl	8006478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004efe:	f000 fcef 	bl	80058e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f02:	f001 fa89 	bl	8006418 <vPortEnterCritical>
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f0c:	b25b      	sxtb	r3, r3
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f12:	d103      	bne.n	8004f1c <xQueueGenericSend+0x16c>
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f22:	b25b      	sxtb	r3, r3
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f28:	d103      	bne.n	8004f32 <xQueueGenericSend+0x182>
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f32:	f001 faa1 	bl	8006478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f36:	1d3a      	adds	r2, r7, #4
 8004f38:	f107 0314 	add.w	r3, r7, #20
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 ff36 	bl	8005db0 <xTaskCheckForTimeOut>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d124      	bne.n	8004f94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f4c:	f000 fa24 	bl	8005398 <prvIsQueueFull>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d018      	beq.n	8004f88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	3310      	adds	r3, #16
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fe88 	bl	8005c74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f66:	f000 f9af 	bl	80052c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f6a:	f000 fcc7 	bl	80058fc <xTaskResumeAll>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f47f af7c 	bne.w	8004e6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <xQueueGenericSend+0x1f8>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	e772      	b.n	8004e6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f8a:	f000 f99d 	bl	80052c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f8e:	f000 fcb5 	bl	80058fc <xTaskResumeAll>
 8004f92:	e76c      	b.n	8004e6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f96:	f000 f997 	bl	80052c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f9a:	f000 fcaf 	bl	80058fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3738      	adds	r7, #56	; 0x38
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08e      	sub	sp, #56	; 0x38
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	623b      	str	r3, [r7, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	61fb      	str	r3, [r7, #28]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ffc:	f000 ffb6 	bl	8005f6c <xTaskGetSchedulerState>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <xQueueSemaphoreTake+0x60>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <xQueueSemaphoreTake+0x64>
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <xQueueSemaphoreTake+0x66>
 8005010:	2300      	movs	r3, #0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	61bb      	str	r3, [r7, #24]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800502c:	f001 f9f4 	bl	8006418 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	d024      	beq.n	8005086 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	1e5a      	subs	r2, r3, #1
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800504c:	f001 f904 	bl	8006258 <pvTaskIncrementMutexHeldCount>
 8005050:	4602      	mov	r2, r0
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00f      	beq.n	800507e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	3310      	adds	r3, #16
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fe2a 	bl	8005cbc <xTaskRemoveFromEventList>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800506e:	4b54      	ldr	r3, [pc, #336]	; (80051c0 <xQueueSemaphoreTake+0x214>)
 8005070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800507e:	f001 f9fb 	bl	8006478 <vPortExitCritical>
				return pdPASS;
 8005082:	2301      	movs	r3, #1
 8005084:	e097      	b.n	80051b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d111      	bne.n	80050b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	617b      	str	r3, [r7, #20]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80050a8:	f001 f9e6 	bl	8006478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e082      	b.n	80051b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b6:	f107 030c 	add.w	r3, r7, #12
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fe62 	bl	8005d84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050c4:	f001 f9d8 	bl	8006478 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050c8:	f000 fc0a 	bl	80058e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050cc:	f001 f9a4 	bl	8006418 <vPortEnterCritical>
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050dc:	d103      	bne.n	80050e6 <xQueueSemaphoreTake+0x13a>
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ec:	b25b      	sxtb	r3, r3
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050f2:	d103      	bne.n	80050fc <xQueueSemaphoreTake+0x150>
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050fc:	f001 f9bc 	bl	8006478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005100:	463a      	mov	r2, r7
 8005102:	f107 030c 	add.w	r3, r7, #12
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fe51 	bl	8005db0 <xTaskCheckForTimeOut>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d132      	bne.n	800517a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005116:	f000 f929 	bl	800536c <prvIsQueueEmpty>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d026      	beq.n	800516e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005128:	f001 f976 	bl	8006418 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4618      	mov	r0, r3
 8005132:	f000 ff39 	bl	8005fa8 <xTaskPriorityInherit>
 8005136:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005138:	f001 f99e 	bl	8006478 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	3324      	adds	r3, #36	; 0x24
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fd95 	bl	8005c74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800514a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800514c:	f000 f8bc 	bl	80052c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005150:	f000 fbd4 	bl	80058fc <xTaskResumeAll>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	f47f af68 	bne.w	800502c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800515c:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <xQueueSemaphoreTake+0x214>)
 800515e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	e75e      	b.n	800502c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800516e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005170:	f000 f8aa 	bl	80052c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005174:	f000 fbc2 	bl	80058fc <xTaskResumeAll>
 8005178:	e758      	b.n	800502c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800517a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800517c:	f000 f8a4 	bl	80052c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005180:	f000 fbbc 	bl	80058fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005186:	f000 f8f1 	bl	800536c <prvIsQueueEmpty>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	f43f af4d 	beq.w	800502c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00d      	beq.n	80051b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005198:	f001 f93e 	bl	8006418 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800519c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800519e:	f000 f811 	bl	80051c4 <prvGetDisinheritPriorityAfterTimeout>
 80051a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 ffd2 	bl	8006154 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80051b0:	f001 f962 	bl	8006478 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3738      	adds	r7, #56	; 0x38
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d006      	beq.n	80051e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e001      	b.n	80051e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80051e6:	68fb      	ldr	r3, [r7, #12]
	}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10d      	bne.n	800522e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d14d      	bne.n	80052b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 ff2a 	bl	8006078 <xTaskPriorityDisinherit>
 8005224:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
 800522c:	e043      	b.n	80052b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d119      	bne.n	8005268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6858      	ldr	r0, [r3, #4]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	461a      	mov	r2, r3
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	f001 fbda 	bl	80069f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	441a      	add	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	d32b      	bcc.n	80052b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	e026      	b.n	80052b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	68d8      	ldr	r0, [r3, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	461a      	mov	r2, r3
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	f001 fbc0 	bl	80069f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	425b      	negs	r3, r3
 8005282:	441a      	add	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d207      	bcs.n	80052a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	425b      	negs	r3, r3
 800529e:	441a      	add	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d105      	bne.n	80052b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80052be:	697b      	ldr	r3, [r7, #20]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052d0:	f001 f8a2 	bl	8006418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052dc:	e011      	b.n	8005302 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d012      	beq.n	800530c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3324      	adds	r3, #36	; 0x24
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fce6 	bl	8005cbc <xTaskRemoveFromEventList>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052f6:	f000 fdbd 	bl	8005e74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	dce9      	bgt.n	80052de <prvUnlockQueue+0x16>
 800530a:	e000      	b.n	800530e <prvUnlockQueue+0x46>
					break;
 800530c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	22ff      	movs	r2, #255	; 0xff
 8005312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005316:	f001 f8af 	bl	8006478 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800531a:	f001 f87d 	bl	8006418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005324:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005326:	e011      	b.n	800534c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d012      	beq.n	8005356 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3310      	adds	r3, #16
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fcc1 	bl	8005cbc <xTaskRemoveFromEventList>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005340:	f000 fd98 	bl	8005e74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005344:	7bbb      	ldrb	r3, [r7, #14]
 8005346:	3b01      	subs	r3, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800534c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005350:	2b00      	cmp	r3, #0
 8005352:	dce9      	bgt.n	8005328 <prvUnlockQueue+0x60>
 8005354:	e000      	b.n	8005358 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005356:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	22ff      	movs	r2, #255	; 0xff
 800535c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005360:	f001 f88a 	bl	8006478 <vPortExitCritical>
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005374:	f001 f850 	bl	8006418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	e001      	b.n	800538a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800538a:	f001 f875 	bl	8006478 <vPortExitCritical>

	return xReturn;
 800538e:	68fb      	ldr	r3, [r7, #12]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053a0:	f001 f83a 	bl	8006418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d102      	bne.n	80053b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80053b0:	2301      	movs	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e001      	b.n	80053ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80053ba:	f001 f85d 	bl	8006478 <vPortExitCritical>

	return xReturn;
 80053be:	68fb      	ldr	r3, [r7, #12]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e014      	b.n	8005402 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053d8:	4a0f      	ldr	r2, [pc, #60]	; (8005418 <vQueueAddToRegistry+0x50>)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10b      	bne.n	80053fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053e4:	490c      	ldr	r1, [pc, #48]	; (8005418 <vQueueAddToRegistry+0x50>)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053ee:	4a0a      	ldr	r2, [pc, #40]	; (8005418 <vQueueAddToRegistry+0x50>)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053fa:	e006      	b.n	800540a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3301      	adds	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b07      	cmp	r3, #7
 8005406:	d9e7      	bls.n	80053d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	200001f0 	.word	0x200001f0

0800541c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08e      	sub	sp, #56	; 0x38
 8005420:	af04      	add	r7, sp, #16
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	623b      	str	r3, [r7, #32]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <xTaskCreateStatic+0x46>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	61fb      	str	r3, [r7, #28]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005462:	23a8      	movs	r3, #168	; 0xa8
 8005464:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2ba8      	cmp	r3, #168	; 0xa8
 800546a:	d00a      	beq.n	8005482 <xTaskCreateStatic+0x66>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	61bb      	str	r3, [r7, #24]
}
 800547e:	bf00      	nop
 8005480:	e7fe      	b.n	8005480 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005482:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01e      	beq.n	80054c8 <xTaskCreateStatic+0xac>
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01b      	beq.n	80054c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005498:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	2202      	movs	r2, #2
 800549e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054a2:	2300      	movs	r3, #0
 80054a4:	9303      	str	r3, [sp, #12]
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	9302      	str	r3, [sp, #8]
 80054aa:	f107 0314 	add.w	r3, r7, #20
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f850 	bl	8005560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054c2:	f000 f8f3 	bl	80056ac <prvAddNewTaskToReadyList>
 80054c6:	e001      	b.n	80054cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054cc:	697b      	ldr	r3, [r7, #20]
	}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3728      	adds	r7, #40	; 0x28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b08c      	sub	sp, #48	; 0x30
 80054da:	af04      	add	r7, sp, #16
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f001 f846 	bl	800657c <pvPortMalloc>
 80054f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00e      	beq.n	8005516 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054f8:	20a8      	movs	r0, #168	; 0xa8
 80054fa:	f001 f83f 	bl	800657c <pvPortMalloc>
 80054fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	631a      	str	r2, [r3, #48]	; 0x30
 800550c:	e005      	b.n	800551a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800550e:	6978      	ldr	r0, [r7, #20]
 8005510:	f001 f900 	bl	8006714 <vPortFree>
 8005514:	e001      	b.n	800551a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d017      	beq.n	8005550 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	2300      	movs	r3, #0
 800552c:	9303      	str	r3, [sp, #12]
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	9302      	str	r3, [sp, #8]
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f80e 	bl	8005560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005544:	69f8      	ldr	r0, [r7, #28]
 8005546:	f000 f8b1 	bl	80056ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800554a:	2301      	movs	r3, #1
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e002      	b.n	8005556 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005554:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005556:	69bb      	ldr	r3, [r7, #24]
	}
 8005558:	4618      	mov	r0, r3
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	461a      	mov	r2, r3
 8005578:	21a5      	movs	r1, #165	; 0xa5
 800557a:	f001 fa09 	bl	8006990 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005588:	3b01      	subs	r3, #1
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f023 0307 	bic.w	r3, r3, #7
 8005596:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	617b      	str	r3, [r7, #20]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01f      	beq.n	80055fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	e012      	b.n	80055ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	7819      	ldrb	r1, [r3, #0]
 80055cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	3334      	adds	r3, #52	; 0x34
 80055d4:	460a      	mov	r2, r1
 80055d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d006      	beq.n	80055f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3301      	adds	r3, #1
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2b0f      	cmp	r3, #15
 80055ee:	d9e9      	bls.n	80055c4 <prvInitialiseNewTask+0x64>
 80055f0:	e000      	b.n	80055f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80055f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055fc:	e003      	b.n	8005606 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	2b37      	cmp	r3, #55	; 0x37
 800560a:	d901      	bls.n	8005610 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800560c:	2337      	movs	r3, #55	; 0x37
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	2200      	movs	r2, #0
 8005620:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	3304      	adds	r3, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff f939 	bl	800489e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	3318      	adds	r3, #24
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff f934 	bl	800489e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	2200      	movs	r2, #0
 8005658:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	3354      	adds	r3, #84	; 0x54
 8005660:	224c      	movs	r2, #76	; 0x4c
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f001 f993 	bl	8006990 <memset>
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <prvInitialiseNewTask+0x140>)
 800566e:	659a      	str	r2, [r3, #88]	; 0x58
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <prvInitialiseNewTask+0x144>)
 8005674:	65da      	str	r2, [r3, #92]	; 0x5c
 8005676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005678:	4a0b      	ldr	r2, [pc, #44]	; (80056a8 <prvInitialiseNewTask+0x148>)
 800567a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	69b8      	ldr	r0, [r7, #24]
 8005682:	f000 fe51 	bl	8006328 <pxPortInitialiseStack>
 8005686:	4602      	mov	r2, r0
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005696:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005698:	bf00      	nop
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	200022a0 	.word	0x200022a0
 80056a4:	20002308 	.word	0x20002308
 80056a8:	20002370 	.word	0x20002370

080056ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056b4:	f000 feb0 	bl	8006418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056b8:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <prvAddNewTaskToReadyList+0xc4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	4a2c      	ldr	r2, [pc, #176]	; (8005770 <prvAddNewTaskToReadyList+0xc4>)
 80056c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056c2:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <prvAddNewTaskToReadyList+0xc8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056ca:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <prvAddNewTaskToReadyList+0xc8>)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056d0:	4b27      	ldr	r3, [pc, #156]	; (8005770 <prvAddNewTaskToReadyList+0xc4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d110      	bne.n	80056fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056d8:	f000 fbd8 	bl	8005e8c <prvInitialiseTaskLists>
 80056dc:	e00d      	b.n	80056fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056de:	4b26      	ldr	r3, [pc, #152]	; (8005778 <prvAddNewTaskToReadyList+0xcc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056e6:	4b23      	ldr	r3, [pc, #140]	; (8005774 <prvAddNewTaskToReadyList+0xc8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d802      	bhi.n	80056fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056f4:	4a1f      	ldr	r2, [pc, #124]	; (8005774 <prvAddNewTaskToReadyList+0xc8>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056fa:	4b20      	ldr	r3, [pc, #128]	; (800577c <prvAddNewTaskToReadyList+0xd0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3301      	adds	r3, #1
 8005700:	4a1e      	ldr	r2, [pc, #120]	; (800577c <prvAddNewTaskToReadyList+0xd0>)
 8005702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005704:	4b1d      	ldr	r3, [pc, #116]	; (800577c <prvAddNewTaskToReadyList+0xd0>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <prvAddNewTaskToReadyList+0xd4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d903      	bls.n	8005720 <prvAddNewTaskToReadyList+0x74>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	4a18      	ldr	r2, [pc, #96]	; (8005780 <prvAddNewTaskToReadyList+0xd4>)
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4a15      	ldr	r2, [pc, #84]	; (8005784 <prvAddNewTaskToReadyList+0xd8>)
 800572e:	441a      	add	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f7ff f8be 	bl	80048b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800573c:	f000 fe9c 	bl	8006478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005740:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <prvAddNewTaskToReadyList+0xcc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00e      	beq.n	8005766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <prvAddNewTaskToReadyList+0xc8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	429a      	cmp	r2, r3
 8005754:	d207      	bcs.n	8005766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <prvAddNewTaskToReadyList+0xdc>)
 8005758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000700 	.word	0x20000700
 8005774:	20000230 	.word	0x20000230
 8005778:	2000070c 	.word	0x2000070c
 800577c:	2000071c 	.word	0x2000071c
 8005780:	20000708 	.word	0x20000708
 8005784:	20000234 	.word	0x20000234
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d017      	beq.n	80057ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800579e:	4b13      	ldr	r3, [pc, #76]	; (80057ec <vTaskDelay+0x60>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <vTaskDelay+0x30>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60bb      	str	r3, [r7, #8]
}
 80057b8:	bf00      	nop
 80057ba:	e7fe      	b.n	80057ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057bc:	f000 f890 	bl	80058e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057c0:	2100      	movs	r1, #0
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fd5c 	bl	8006280 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057c8:	f000 f898 	bl	80058fc <xTaskResumeAll>
 80057cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d107      	bne.n	80057e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057d4:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <vTaskDelay+0x64>)
 80057d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000724 	.word	0x20000724
 80057f0:	e000ed04 	.word	0xe000ed04

080057f4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80057fc:	f000 fe0c 	bl	8006418 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <vTaskSuspend+0x18>
 8005806:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <vTaskSuspend+0xd4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	e000      	b.n	800580e <vTaskSuspend+0x1a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3304      	adds	r3, #4
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff f8ac 	bl	8004972 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3318      	adds	r3, #24
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff f8a3 	bl	8004972 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4826      	ldr	r0, [pc, #152]	; (80058cc <vTaskSuspend+0xd8>)
 8005834:	f7ff f840 	bl	80048b8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d103      	bne.n	800584c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800584c:	f000 fe14 	bl	8006478 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005850:	4b1f      	ldr	r3, [pc, #124]	; (80058d0 <vTaskSuspend+0xdc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005858:	f000 fdde 	bl	8006418 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800585c:	f000 fb56 	bl	8005f0c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005860:	f000 fe0a 	bl	8006478 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005864:	4b18      	ldr	r3, [pc, #96]	; (80058c8 <vTaskSuspend+0xd4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	429a      	cmp	r2, r3
 800586c:	d127      	bne.n	80058be <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800586e:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <vTaskSuspend+0xdc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005876:	4b17      	ldr	r3, [pc, #92]	; (80058d4 <vTaskSuspend+0xe0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <vTaskSuspend+0xa0>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	60bb      	str	r3, [r7, #8]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005894:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <vTaskSuspend+0xe4>)
 8005896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058a4:	e00b      	b.n	80058be <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80058a6:	4b09      	ldr	r3, [pc, #36]	; (80058cc <vTaskSuspend+0xd8>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <vTaskSuspend+0xe8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d103      	bne.n	80058ba <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <vTaskSuspend+0xd4>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
	}
 80058b8:	e001      	b.n	80058be <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80058ba:	f000 f977 	bl	8005bac <vTaskSwitchContext>
	}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000230 	.word	0x20000230
 80058cc:	200006ec 	.word	0x200006ec
 80058d0:	2000070c 	.word	0x2000070c
 80058d4:	20000724 	.word	0x20000724
 80058d8:	e000ed04 	.word	0xe000ed04
 80058dc:	20000700 	.word	0x20000700

080058e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058e4:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <vTaskSuspendAll+0x18>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	4a03      	ldr	r2, [pc, #12]	; (80058f8 <vTaskSuspendAll+0x18>)
 80058ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058ee:	bf00      	nop
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	20000724 	.word	0x20000724

080058fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005906:	2300      	movs	r3, #0
 8005908:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800590a:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <xTaskResumeAll+0x118>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <xTaskResumeAll+0x2c>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	603b      	str	r3, [r7, #0]
}
 8005924:	bf00      	nop
 8005926:	e7fe      	b.n	8005926 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005928:	f000 fd76 	bl	8006418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800592c:	4b39      	ldr	r3, [pc, #228]	; (8005a14 <xTaskResumeAll+0x118>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3b01      	subs	r3, #1
 8005932:	4a38      	ldr	r2, [pc, #224]	; (8005a14 <xTaskResumeAll+0x118>)
 8005934:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005936:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <xTaskResumeAll+0x118>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d162      	bne.n	8005a04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800593e:	4b36      	ldr	r3, [pc, #216]	; (8005a18 <xTaskResumeAll+0x11c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d05e      	beq.n	8005a04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005946:	e02f      	b.n	80059a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005948:	4b34      	ldr	r3, [pc, #208]	; (8005a1c <xTaskResumeAll+0x120>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3318      	adds	r3, #24
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff f80c 	bl	8004972 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3304      	adds	r3, #4
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f807 	bl	8004972 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <xTaskResumeAll+0x124>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	429a      	cmp	r2, r3
 800596e:	d903      	bls.n	8005978 <xTaskResumeAll+0x7c>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4a2a      	ldr	r2, [pc, #168]	; (8005a20 <xTaskResumeAll+0x124>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <xTaskResumeAll+0x128>)
 8005986:	441a      	add	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fe ff92 	bl	80048b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005998:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <xTaskResumeAll+0x12c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	429a      	cmp	r2, r3
 80059a0:	d302      	bcc.n	80059a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80059a2:	4b22      	ldr	r3, [pc, #136]	; (8005a2c <xTaskResumeAll+0x130>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059a8:	4b1c      	ldr	r3, [pc, #112]	; (8005a1c <xTaskResumeAll+0x120>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1cb      	bne.n	8005948 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059b6:	f000 faa9 	bl	8005f0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <xTaskResumeAll+0x134>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d010      	beq.n	80059e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059c6:	f000 f837 	bl	8005a38 <xTaskIncrementTick>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80059d0:	4b16      	ldr	r3, [pc, #88]	; (8005a2c <xTaskResumeAll+0x130>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3b01      	subs	r3, #1
 80059da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f1      	bne.n	80059c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80059e2:	4b13      	ldr	r3, [pc, #76]	; (8005a30 <xTaskResumeAll+0x134>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <xTaskResumeAll+0x130>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d009      	beq.n	8005a04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059f0:	2301      	movs	r3, #1
 80059f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059f4:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <xTaskResumeAll+0x138>)
 80059f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a04:	f000 fd38 	bl	8006478 <vPortExitCritical>

	return xAlreadyYielded;
 8005a08:	68bb      	ldr	r3, [r7, #8]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000724 	.word	0x20000724
 8005a18:	20000700 	.word	0x20000700
 8005a1c:	200006c4 	.word	0x200006c4
 8005a20:	20000708 	.word	0x20000708
 8005a24:	20000234 	.word	0x20000234
 8005a28:	20000230 	.word	0x20000230
 8005a2c:	20000714 	.word	0x20000714
 8005a30:	20000710 	.word	0x20000710
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a42:	4b4f      	ldr	r3, [pc, #316]	; (8005b80 <xTaskIncrementTick+0x148>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f040 808f 	bne.w	8005b6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a4c:	4b4d      	ldr	r3, [pc, #308]	; (8005b84 <xTaskIncrementTick+0x14c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3301      	adds	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a54:	4a4b      	ldr	r2, [pc, #300]	; (8005b84 <xTaskIncrementTick+0x14c>)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d120      	bne.n	8005aa2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a60:	4b49      	ldr	r3, [pc, #292]	; (8005b88 <xTaskIncrementTick+0x150>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	603b      	str	r3, [r7, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <xTaskIncrementTick+0x46>
 8005a80:	4b41      	ldr	r3, [pc, #260]	; (8005b88 <xTaskIncrementTick+0x150>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	4b41      	ldr	r3, [pc, #260]	; (8005b8c <xTaskIncrementTick+0x154>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3f      	ldr	r2, [pc, #252]	; (8005b88 <xTaskIncrementTick+0x150>)
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4a3f      	ldr	r2, [pc, #252]	; (8005b8c <xTaskIncrementTick+0x154>)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <xTaskIncrementTick+0x158>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	4a3d      	ldr	r2, [pc, #244]	; (8005b90 <xTaskIncrementTick+0x158>)
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	f000 fa35 	bl	8005f0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005aa2:	4b3c      	ldr	r3, [pc, #240]	; (8005b94 <xTaskIncrementTick+0x15c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d349      	bcc.n	8005b40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aac:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <xTaskIncrementTick+0x150>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab6:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <xTaskIncrementTick+0x15c>)
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005abc:	601a      	str	r2, [r3, #0]
					break;
 8005abe:	e03f      	b.n	8005b40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac0:	4b31      	ldr	r3, [pc, #196]	; (8005b88 <xTaskIncrementTick+0x150>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d203      	bcs.n	8005ae0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ad8:	4a2e      	ldr	r2, [pc, #184]	; (8005b94 <xTaskIncrementTick+0x15c>)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ade:	e02f      	b.n	8005b40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe ff44 	bl	8004972 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3318      	adds	r3, #24
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe ff3b 	bl	8004972 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <xTaskIncrementTick+0x160>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d903      	bls.n	8005b10 <xTaskIncrementTick+0xd8>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4a22      	ldr	r2, [pc, #136]	; (8005b98 <xTaskIncrementTick+0x160>)
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <xTaskIncrementTick+0x164>)
 8005b1e:	441a      	add	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4619      	mov	r1, r3
 8005b26:	4610      	mov	r0, r2
 8005b28:	f7fe fec6 	bl	80048b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b30:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <xTaskIncrementTick+0x168>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3b8      	bcc.n	8005aac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b3e:	e7b5      	b.n	8005aac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b40:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <xTaskIncrementTick+0x168>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b46:	4915      	ldr	r1, [pc, #84]	; (8005b9c <xTaskIncrementTick+0x164>)
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d901      	bls.n	8005b5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b5c:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <xTaskIncrementTick+0x16c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b64:	2301      	movs	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e004      	b.n	8005b74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <xTaskIncrementTick+0x170>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	4a0d      	ldr	r2, [pc, #52]	; (8005ba8 <xTaskIncrementTick+0x170>)
 8005b72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b74:	697b      	ldr	r3, [r7, #20]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000724 	.word	0x20000724
 8005b84:	20000704 	.word	0x20000704
 8005b88:	200006bc 	.word	0x200006bc
 8005b8c:	200006c0 	.word	0x200006c0
 8005b90:	20000718 	.word	0x20000718
 8005b94:	20000720 	.word	0x20000720
 8005b98:	20000708 	.word	0x20000708
 8005b9c:	20000234 	.word	0x20000234
 8005ba0:	20000230 	.word	0x20000230
 8005ba4:	20000714 	.word	0x20000714
 8005ba8:	20000710 	.word	0x20000710

08005bac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bb2:	4b2a      	ldr	r3, [pc, #168]	; (8005c5c <vTaskSwitchContext+0xb0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bba:	4b29      	ldr	r3, [pc, #164]	; (8005c60 <vTaskSwitchContext+0xb4>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bc0:	e046      	b.n	8005c50 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005bc2:	4b27      	ldr	r3, [pc, #156]	; (8005c60 <vTaskSwitchContext+0xb4>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc8:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <vTaskSwitchContext+0xb8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e010      	b.n	8005bf2 <vTaskSwitchContext+0x46>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <vTaskSwitchContext+0x40>
	__asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	607b      	str	r3, [r7, #4]
}
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <vTaskSwitchContext+0x3e>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	491d      	ldr	r1, [pc, #116]	; (8005c68 <vTaskSwitchContext+0xbc>)
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0e4      	beq.n	8005bd0 <vTaskSwitchContext+0x24>
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4a15      	ldr	r2, [pc, #84]	; (8005c68 <vTaskSwitchContext+0xbc>)
 8005c12:	4413      	add	r3, r2
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	605a      	str	r2, [r3, #4]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	3308      	adds	r3, #8
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d104      	bne.n	8005c36 <vTaskSwitchContext+0x8a>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	605a      	str	r2, [r3, #4]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4a0b      	ldr	r2, [pc, #44]	; (8005c6c <vTaskSwitchContext+0xc0>)
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	4a08      	ldr	r2, [pc, #32]	; (8005c64 <vTaskSwitchContext+0xb8>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c46:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <vTaskSwitchContext+0xc0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3354      	adds	r3, #84	; 0x54
 8005c4c:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <vTaskSwitchContext+0xc4>)
 8005c4e:	6013      	str	r3, [r2, #0]
}
 8005c50:	bf00      	nop
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	20000724 	.word	0x20000724
 8005c60:	20000714 	.word	0x20000714
 8005c64:	20000708 	.word	0x20000708
 8005c68:	20000234 	.word	0x20000234
 8005c6c:	20000230 	.word	0x20000230
 8005c70:	20000084 	.word	0x20000084

08005c74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c9a:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <vTaskPlaceOnEventList+0x44>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3318      	adds	r3, #24
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fe fe2c 	bl	8004900 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ca8:	2101      	movs	r1, #1
 8005caa:	6838      	ldr	r0, [r7, #0]
 8005cac:	f000 fae8 	bl	8006280 <prvAddCurrentTaskToDelayedList>
}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20000230 	.word	0x20000230

08005cbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60fb      	str	r3, [r7, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3318      	adds	r3, #24
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe fe40 	bl	8004972 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf2:	4b1e      	ldr	r3, [pc, #120]	; (8005d6c <xTaskRemoveFromEventList+0xb0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d11d      	bne.n	8005d36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fe37 	bl	8004972 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <xTaskRemoveFromEventList+0xb4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d903      	bls.n	8005d18 <xTaskRemoveFromEventList+0x5c>
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	4a16      	ldr	r2, [pc, #88]	; (8005d70 <xTaskRemoveFromEventList+0xb4>)
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <xTaskRemoveFromEventList+0xb8>)
 8005d26:	441a      	add	r2, r3
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f7fe fdc2 	bl	80048b8 <vListInsertEnd>
 8005d34:	e005      	b.n	8005d42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	3318      	adds	r3, #24
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	480e      	ldr	r0, [pc, #56]	; (8005d78 <xTaskRemoveFromEventList+0xbc>)
 8005d3e:	f7fe fdbb 	bl	80048b8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d46:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <xTaskRemoveFromEventList+0xc0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d905      	bls.n	8005d5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d50:	2301      	movs	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <xTaskRemoveFromEventList+0xc4>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e001      	b.n	8005d60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d60:	697b      	ldr	r3, [r7, #20]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000724 	.word	0x20000724
 8005d70:	20000708 	.word	0x20000708
 8005d74:	20000234 	.word	0x20000234
 8005d78:	200006c4 	.word	0x200006c4
 8005d7c:	20000230 	.word	0x20000230
 8005d80:	20000714 	.word	0x20000714

08005d84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <vTaskInternalSetTimeOutState+0x24>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <vTaskInternalSetTimeOutState+0x28>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	605a      	str	r2, [r3, #4]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	20000718 	.word	0x20000718
 8005dac:	20000704 	.word	0x20000704

08005db0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60fb      	str	r3, [r7, #12]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005df2:	f000 fb11 	bl	8006418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <xTaskCheckForTimeOut+0xbc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0e:	d102      	bne.n	8005e16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	e023      	b.n	8005e5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b15      	ldr	r3, [pc, #84]	; (8005e70 <xTaskCheckForTimeOut+0xc0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d007      	beq.n	8005e32 <xTaskCheckForTimeOut+0x82>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d302      	bcc.n	8005e32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e015      	b.n	8005e5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d20b      	bcs.n	8005e54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	1ad2      	subs	r2, r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff ff9b 	bl	8005d84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	e004      	b.n	8005e5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e5e:	f000 fb0b 	bl	8006478 <vPortExitCritical>

	return xReturn;
 8005e62:	69fb      	ldr	r3, [r7, #28]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000704 	.word	0x20000704
 8005e70:	20000718 	.word	0x20000718

08005e74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e78:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <vTaskMissedYield+0x14>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	20000714 	.word	0x20000714

08005e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e92:	2300      	movs	r3, #0
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	e00c      	b.n	8005eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <prvInitialiseTaskLists+0x60>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fcd9 	bl	800485e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b37      	cmp	r3, #55	; 0x37
 8005eb6:	d9ef      	bls.n	8005e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eb8:	480d      	ldr	r0, [pc, #52]	; (8005ef0 <prvInitialiseTaskLists+0x64>)
 8005eba:	f7fe fcd0 	bl	800485e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ebe:	480d      	ldr	r0, [pc, #52]	; (8005ef4 <prvInitialiseTaskLists+0x68>)
 8005ec0:	f7fe fccd 	bl	800485e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ec4:	480c      	ldr	r0, [pc, #48]	; (8005ef8 <prvInitialiseTaskLists+0x6c>)
 8005ec6:	f7fe fcca 	bl	800485e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005eca:	480c      	ldr	r0, [pc, #48]	; (8005efc <prvInitialiseTaskLists+0x70>)
 8005ecc:	f7fe fcc7 	bl	800485e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ed0:	480b      	ldr	r0, [pc, #44]	; (8005f00 <prvInitialiseTaskLists+0x74>)
 8005ed2:	f7fe fcc4 	bl	800485e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <prvInitialiseTaskLists+0x78>)
 8005ed8:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <prvInitialiseTaskLists+0x64>)
 8005eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <prvInitialiseTaskLists+0x7c>)
 8005ede:	4a05      	ldr	r2, [pc, #20]	; (8005ef4 <prvInitialiseTaskLists+0x68>)
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000234 	.word	0x20000234
 8005ef0:	20000694 	.word	0x20000694
 8005ef4:	200006a8 	.word	0x200006a8
 8005ef8:	200006c4 	.word	0x200006c4
 8005efc:	200006d8 	.word	0x200006d8
 8005f00:	200006ec 	.word	0x200006ec
 8005f04:	200006bc 	.word	0x200006bc
 8005f08:	200006c0 	.word	0x200006c0

08005f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <prvResetNextTaskUnblockTime+0x38>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <prvResetNextTaskUnblockTime+0x3c>)
 8005f1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f24:	e008      	b.n	8005f38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f26:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <prvResetNextTaskUnblockTime+0x38>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4a04      	ldr	r2, [pc, #16]	; (8005f48 <prvResetNextTaskUnblockTime+0x3c>)
 8005f36:	6013      	str	r3, [r2, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	200006bc 	.word	0x200006bc
 8005f48:	20000720 	.word	0x20000720

08005f4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <xTaskGetCurrentTaskHandle+0x1c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005f58:	687b      	ldr	r3, [r7, #4]
	}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000230 	.word	0x20000230

08005f6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <xTaskGetSchedulerState+0x34>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	e008      	b.n	8005f92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f80:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <xTaskGetSchedulerState+0x38>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d102      	bne.n	8005f8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	607b      	str	r3, [r7, #4]
 8005f8c:	e001      	b.n	8005f92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f92:	687b      	ldr	r3, [r7, #4]
	}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	2000070c 	.word	0x2000070c
 8005fa4:	20000724 	.word	0x20000724

08005fa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d051      	beq.n	8006062 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	4b2a      	ldr	r3, [pc, #168]	; (800606c <xTaskPriorityInherit+0xc4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d241      	bcs.n	8006050 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	db06      	blt.n	8005fe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd4:	4b25      	ldr	r3, [pc, #148]	; (800606c <xTaskPriorityInherit+0xc4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6959      	ldr	r1, [r3, #20]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <xTaskPriorityInherit+0xc8>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	4299      	cmp	r1, r3
 8005ff8:	d122      	bne.n	8006040 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe fcb7 	bl	8004972 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006004:	4b19      	ldr	r3, [pc, #100]	; (800606c <xTaskPriorityInherit+0xc4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006012:	4b18      	ldr	r3, [pc, #96]	; (8006074 <xTaskPriorityInherit+0xcc>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d903      	bls.n	8006022 <xTaskPriorityInherit+0x7a>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	4a15      	ldr	r2, [pc, #84]	; (8006074 <xTaskPriorityInherit+0xcc>)
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4a10      	ldr	r2, [pc, #64]	; (8006070 <xTaskPriorityInherit+0xc8>)
 8006030:	441a      	add	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	3304      	adds	r3, #4
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f7fe fc3d 	bl	80048b8 <vListInsertEnd>
 800603e:	e004      	b.n	800604a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006040:	4b0a      	ldr	r3, [pc, #40]	; (800606c <xTaskPriorityInherit+0xc4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800604a:	2301      	movs	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	e008      	b.n	8006062 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006054:	4b05      	ldr	r3, [pc, #20]	; (800606c <xTaskPriorityInherit+0xc4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	429a      	cmp	r2, r3
 800605c:	d201      	bcs.n	8006062 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800605e:	2301      	movs	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006062:	68fb      	ldr	r3, [r7, #12]
	}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20000230 	.word	0x20000230
 8006070:	20000234 	.word	0x20000234
 8006074:	20000708 	.word	0x20000708

08006078 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d056      	beq.n	800613c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800608e:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <xTaskPriorityDisinherit+0xd0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	429a      	cmp	r2, r3
 8006096:	d00a      	beq.n	80060ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	60fb      	str	r3, [r7, #12]
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60bb      	str	r3, [r7, #8]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d0:	1e5a      	subs	r2, r3, #1
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060de:	429a      	cmp	r2, r3
 80060e0:	d02c      	beq.n	800613c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d128      	bne.n	800613c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fc3f 	bl	8004972 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	4b0f      	ldr	r3, [pc, #60]	; (800614c <xTaskPriorityDisinherit+0xd4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d903      	bls.n	800611c <xTaskPriorityDisinherit+0xa4>
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	4a0c      	ldr	r2, [pc, #48]	; (800614c <xTaskPriorityDisinherit+0xd4>)
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <xTaskPriorityDisinherit+0xd8>)
 800612a:	441a      	add	r2, r3
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f7fe fbc0 	bl	80048b8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800613c:	697b      	ldr	r3, [r7, #20]
	}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000230 	.word	0x20000230
 800614c:	20000708 	.word	0x20000708
 8006150:	20000234 	.word	0x20000234

08006154 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006162:	2301      	movs	r3, #1
 8006164:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d06a      	beq.n	8006242 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d902      	bls.n	800619a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	e002      	b.n	80061a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d04b      	beq.n	8006242 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d146      	bne.n	8006242 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80061b4:	4b25      	ldr	r3, [pc, #148]	; (800624c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d10a      	bne.n	80061d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	60bb      	str	r3, [r7, #8]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	db04      	blt.n	80061f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	6959      	ldr	r1, [r3, #20]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4a13      	ldr	r2, [pc, #76]	; (8006250 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006202:	4413      	add	r3, r2
 8006204:	4299      	cmp	r1, r3
 8006206:	d11c      	bne.n	8006242 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	3304      	adds	r3, #4
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe fbb0 	bl	8004972 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d903      	bls.n	8006226 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	4a0c      	ldr	r2, [pc, #48]	; (8006254 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a07      	ldr	r2, [pc, #28]	; (8006250 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006234:	441a      	add	r2, r3
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f7fe fb3b 	bl	80048b8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006242:	bf00      	nop
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000230 	.word	0x20000230
 8006250:	20000234 	.word	0x20000234
 8006254:	20000708 	.word	0x20000708

08006258 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <pvTaskIncrementMutexHeldCount+0x24>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <pvTaskIncrementMutexHeldCount+0x24>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800626a:	3201      	adds	r2, #1
 800626c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800626e:	4b03      	ldr	r3, [pc, #12]	; (800627c <pvTaskIncrementMutexHeldCount+0x24>)
 8006270:	681b      	ldr	r3, [r3, #0]
	}
 8006272:	4618      	mov	r0, r3
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	20000230 	.word	0x20000230

08006280 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800628a:	4b21      	ldr	r3, [pc, #132]	; (8006310 <prvAddCurrentTaskToDelayedList+0x90>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006290:	4b20      	ldr	r3, [pc, #128]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3304      	adds	r3, #4
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fb6b 	bl	8004972 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a2:	d10a      	bne.n	80062ba <prvAddCurrentTaskToDelayedList+0x3a>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062aa:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4619      	mov	r1, r3
 80062b2:	4819      	ldr	r0, [pc, #100]	; (8006318 <prvAddCurrentTaskToDelayedList+0x98>)
 80062b4:	f7fe fb00 	bl	80048b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062b8:	e026      	b.n	8006308 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062c2:	4b14      	ldr	r3, [pc, #80]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d209      	bcs.n	80062e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d2:	4b12      	ldr	r3, [pc, #72]	; (800631c <prvAddCurrentTaskToDelayedList+0x9c>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b0f      	ldr	r3, [pc, #60]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f7fe fb0e 	bl	8004900 <vListInsert>
}
 80062e4:	e010      	b.n	8006308 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e6:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fe fb04 	bl	8004900 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d202      	bcs.n	8006308 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006302:	4a08      	ldr	r2, [pc, #32]	; (8006324 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6013      	str	r3, [r2, #0]
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000704 	.word	0x20000704
 8006314:	20000230 	.word	0x20000230
 8006318:	200006ec 	.word	0x200006ec
 800631c:	200006c0 	.word	0x200006c0
 8006320:	200006bc 	.word	0x200006bc
 8006324:	20000720 	.word	0x20000720

08006328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3b04      	subs	r3, #4
 8006338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3b04      	subs	r3, #4
 8006346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f023 0201 	bic.w	r2, r3, #1
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3b04      	subs	r3, #4
 8006356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006358:	4a0c      	ldr	r2, [pc, #48]	; (800638c <pxPortInitialiseStack+0x64>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3b14      	subs	r3, #20
 8006362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3b04      	subs	r3, #4
 800636e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f06f 0202 	mvn.w	r2, #2
 8006376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3b20      	subs	r3, #32
 800637c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800637e:	68fb      	ldr	r3, [r7, #12]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	08006391 	.word	0x08006391

08006390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800639a:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <prvTaskExitError+0x54>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063a2:	d00a      	beq.n	80063ba <prvTaskExitError+0x2a>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	60fb      	str	r3, [r7, #12]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <prvTaskExitError+0x28>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	60bb      	str	r3, [r7, #8]
}
 80063cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063ce:	bf00      	nop
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0fc      	beq.n	80063d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	20000034 	.word	0x20000034
	...

080063f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <pxCurrentTCBConst2>)
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	6808      	ldr	r0, [r1, #0]
 80063f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fa:	f380 8809 	msr	PSP, r0
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f04f 0000 	mov.w	r0, #0
 8006406:	f380 8811 	msr	BASEPRI, r0
 800640a:	4770      	bx	lr
 800640c:	f3af 8000 	nop.w

08006410 <pxCurrentTCBConst2>:
 8006410:	20000230 	.word	0x20000230
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop

08006418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	607b      	str	r3, [r7, #4]
}
 8006430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006432:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <vPortEnterCritical+0x58>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3301      	adds	r3, #1
 8006438:	4a0d      	ldr	r2, [pc, #52]	; (8006470 <vPortEnterCritical+0x58>)
 800643a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800643c:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <vPortEnterCritical+0x58>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d10f      	bne.n	8006464 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <vPortEnterCritical+0x5c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <vPortEnterCritical+0x4c>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	603b      	str	r3, [r7, #0]
}
 8006460:	bf00      	nop
 8006462:	e7fe      	b.n	8006462 <vPortEnterCritical+0x4a>
	}
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	20000034 	.word	0x20000034
 8006474:	e000ed04 	.word	0xe000ed04

08006478 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <vPortExitCritical+0x50>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <vPortExitCritical+0x24>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	607b      	str	r3, [r7, #4]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <vPortExitCritical+0x50>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <vPortExitCritical+0x50>)
 80064a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064a6:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <vPortExitCritical+0x50>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d105      	bne.n	80064ba <vPortExitCritical+0x42>
 80064ae:	2300      	movs	r3, #0
 80064b0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000034 	.word	0x20000034
 80064cc:	00000000 	.word	0x00000000

080064d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064d0:	f3ef 8009 	mrs	r0, PSP
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	4b15      	ldr	r3, [pc, #84]	; (8006530 <pxCurrentTCBConst>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f01e 0f10 	tst.w	lr, #16
 80064e0:	bf08      	it	eq
 80064e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ea:	6010      	str	r0, [r2, #0]
 80064ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064f4:	f380 8811 	msr	BASEPRI, r0
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f7ff fb54 	bl	8005bac <vTaskSwitchContext>
 8006504:	f04f 0000 	mov.w	r0, #0
 8006508:	f380 8811 	msr	BASEPRI, r0
 800650c:	bc09      	pop	{r0, r3}
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	6808      	ldr	r0, [r1, #0]
 8006512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006516:	f01e 0f10 	tst.w	lr, #16
 800651a:	bf08      	it	eq
 800651c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006520:	f380 8809 	msr	PSP, r0
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w

08006530 <pxCurrentTCBConst>:
 8006530:	20000230 	.word	0x20000230
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop

08006538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
}
 8006550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006552:	f7ff fa71 	bl	8005a38 <xTaskIncrementTick>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <xPortSysTickHandler+0x40>)
 800655e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	2300      	movs	r3, #0
 8006566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f383 8811 	msr	BASEPRI, r3
}
 800656e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006588:	f7ff f9aa 	bl	80058e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800658c:	4b5b      	ldr	r3, [pc, #364]	; (80066fc <pvPortMalloc+0x180>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006594:	f000 f920 	bl	80067d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006598:	4b59      	ldr	r3, [pc, #356]	; (8006700 <pvPortMalloc+0x184>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4013      	ands	r3, r2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f040 8093 	bne.w	80066cc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01d      	beq.n	80065e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80065ac:	2208      	movs	r2, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4413      	add	r3, r2
 80065b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d014      	beq.n	80065e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f023 0307 	bic.w	r3, r3, #7
 80065c4:	3308      	adds	r3, #8
 80065c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <pvPortMalloc+0x6c>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	617b      	str	r3, [r7, #20]
}
 80065e4:	bf00      	nop
 80065e6:	e7fe      	b.n	80065e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d06e      	beq.n	80066cc <pvPortMalloc+0x150>
 80065ee:	4b45      	ldr	r3, [pc, #276]	; (8006704 <pvPortMalloc+0x188>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d869      	bhi.n	80066cc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065f8:	4b43      	ldr	r3, [pc, #268]	; (8006708 <pvPortMalloc+0x18c>)
 80065fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065fc:	4b42      	ldr	r3, [pc, #264]	; (8006708 <pvPortMalloc+0x18c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006602:	e004      	b.n	800660e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d903      	bls.n	8006620 <pvPortMalloc+0xa4>
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1f1      	bne.n	8006604 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006620:	4b36      	ldr	r3, [pc, #216]	; (80066fc <pvPortMalloc+0x180>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006626:	429a      	cmp	r2, r3
 8006628:	d050      	beq.n	80066cc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2208      	movs	r2, #8
 8006630:	4413      	add	r3, r2
 8006632:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	1ad2      	subs	r2, r2, r3
 8006644:	2308      	movs	r3, #8
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	429a      	cmp	r2, r3
 800664a:	d91f      	bls.n	800668c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800664c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <pvPortMalloc+0xf8>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	613b      	str	r3, [r7, #16]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006686:	69b8      	ldr	r0, [r7, #24]
 8006688:	f000 f908 	bl	800689c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800668c:	4b1d      	ldr	r3, [pc, #116]	; (8006704 <pvPortMalloc+0x188>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	4a1b      	ldr	r2, [pc, #108]	; (8006704 <pvPortMalloc+0x188>)
 8006698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800669a:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <pvPortMalloc+0x188>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b1b      	ldr	r3, [pc, #108]	; (800670c <pvPortMalloc+0x190>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d203      	bcs.n	80066ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066a6:	4b17      	ldr	r3, [pc, #92]	; (8006704 <pvPortMalloc+0x188>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a18      	ldr	r2, [pc, #96]	; (800670c <pvPortMalloc+0x190>)
 80066ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	4b13      	ldr	r3, [pc, #76]	; (8006700 <pvPortMalloc+0x184>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <pvPortMalloc+0x194>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3301      	adds	r3, #1
 80066c8:	4a11      	ldr	r2, [pc, #68]	; (8006710 <pvPortMalloc+0x194>)
 80066ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066cc:	f7ff f916 	bl	80058fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <pvPortMalloc+0x174>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	60fb      	str	r3, [r7, #12]
}
 80066ec:	bf00      	nop
 80066ee:	e7fe      	b.n	80066ee <pvPortMalloc+0x172>
	return pvReturn;
 80066f0:	69fb      	ldr	r3, [r7, #28]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3728      	adds	r7, #40	; 0x28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20002288 	.word	0x20002288
 8006700:	2000229c 	.word	0x2000229c
 8006704:	2000228c 	.word	0x2000228c
 8006708:	20002280 	.word	0x20002280
 800670c:	20002290 	.word	0x20002290
 8006710:	20002294 	.word	0x20002294

08006714 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d04d      	beq.n	80067c2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006726:	2308      	movs	r3, #8
 8006728:	425b      	negs	r3, r3
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	4b24      	ldr	r3, [pc, #144]	; (80067cc <vPortFree+0xb8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4013      	ands	r3, r2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <vPortFree+0x44>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	60fb      	str	r3, [r7, #12]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <vPortFree+0x62>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	60bb      	str	r3, [r7, #8]
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	4b14      	ldr	r3, [pc, #80]	; (80067cc <vPortFree+0xb8>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4013      	ands	r3, r2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01e      	beq.n	80067c2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11a      	bne.n	80067c2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	4b0e      	ldr	r3, [pc, #56]	; (80067cc <vPortFree+0xb8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	43db      	mvns	r3, r3
 8006796:	401a      	ands	r2, r3
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800679c:	f7ff f8a0 	bl	80058e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <vPortFree+0xbc>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4413      	add	r3, r2
 80067aa:	4a09      	ldr	r2, [pc, #36]	; (80067d0 <vPortFree+0xbc>)
 80067ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067ae:	6938      	ldr	r0, [r7, #16]
 80067b0:	f000 f874 	bl	800689c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067b4:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <vPortFree+0xc0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3301      	adds	r3, #1
 80067ba:	4a06      	ldr	r2, [pc, #24]	; (80067d4 <vPortFree+0xc0>)
 80067bc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067be:	f7ff f89d 	bl	80058fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067c2:	bf00      	nop
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2000229c 	.word	0x2000229c
 80067d0:	2000228c 	.word	0x2000228c
 80067d4:	20002298 	.word	0x20002298

080067d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067de:	f641 3358 	movw	r3, #7000	; 0x1b58
 80067e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067e4:	4b27      	ldr	r3, [pc, #156]	; (8006884 <prvHeapInit+0xac>)
 80067e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00c      	beq.n	800680c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3307      	adds	r3, #7
 80067f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0307 	bic.w	r3, r3, #7
 80067fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	4a1f      	ldr	r2, [pc, #124]	; (8006884 <prvHeapInit+0xac>)
 8006808:	4413      	add	r3, r2
 800680a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006810:	4a1d      	ldr	r2, [pc, #116]	; (8006888 <prvHeapInit+0xb0>)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006816:	4b1c      	ldr	r3, [pc, #112]	; (8006888 <prvHeapInit+0xb0>)
 8006818:	2200      	movs	r2, #0
 800681a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	4413      	add	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006824:	2208      	movs	r2, #8
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0307 	bic.w	r3, r3, #7
 8006832:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4a15      	ldr	r2, [pc, #84]	; (800688c <prvHeapInit+0xb4>)
 8006838:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <prvHeapInit+0xb4>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2200      	movs	r2, #0
 8006840:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006842:	4b12      	ldr	r3, [pc, #72]	; (800688c <prvHeapInit+0xb4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	1ad2      	subs	r2, r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006858:	4b0c      	ldr	r3, [pc, #48]	; (800688c <prvHeapInit+0xb4>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4a0a      	ldr	r2, [pc, #40]	; (8006890 <prvHeapInit+0xb8>)
 8006866:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	4a09      	ldr	r2, [pc, #36]	; (8006894 <prvHeapInit+0xbc>)
 800686e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <prvHeapInit+0xc0>)
 8006872:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006876:	601a      	str	r2, [r3, #0]
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	20000728 	.word	0x20000728
 8006888:	20002280 	.word	0x20002280
 800688c:	20002288 	.word	0x20002288
 8006890:	20002290 	.word	0x20002290
 8006894:	2000228c 	.word	0x2000228c
 8006898:	2000229c 	.word	0x2000229c

0800689c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068a4:	4b28      	ldr	r3, [pc, #160]	; (8006948 <prvInsertBlockIntoFreeList+0xac>)
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e002      	b.n	80068b0 <prvInsertBlockIntoFreeList+0x14>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d8f7      	bhi.n	80068aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	4413      	add	r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d108      	bne.n	80068de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	441a      	add	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	441a      	add	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d118      	bne.n	8006924 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	4b15      	ldr	r3, [pc, #84]	; (800694c <prvInsertBlockIntoFreeList+0xb0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d00d      	beq.n	800691a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	441a      	add	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	e008      	b.n	800692c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800691a:	4b0c      	ldr	r3, [pc, #48]	; (800694c <prvInsertBlockIntoFreeList+0xb0>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	e003      	b.n	800692c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d002      	beq.n	800693a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800693a:	bf00      	nop
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	20002280 	.word	0x20002280
 800694c:	20002288 	.word	0x20002288

08006950 <siprintf>:
 8006950:	b40e      	push	{r1, r2, r3}
 8006952:	b500      	push	{lr}
 8006954:	b09c      	sub	sp, #112	; 0x70
 8006956:	ab1d      	add	r3, sp, #116	; 0x74
 8006958:	9002      	str	r0, [sp, #8]
 800695a:	9006      	str	r0, [sp, #24]
 800695c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006960:	4809      	ldr	r0, [pc, #36]	; (8006988 <siprintf+0x38>)
 8006962:	9107      	str	r1, [sp, #28]
 8006964:	9104      	str	r1, [sp, #16]
 8006966:	4909      	ldr	r1, [pc, #36]	; (800698c <siprintf+0x3c>)
 8006968:	f853 2b04 	ldr.w	r2, [r3], #4
 800696c:	9105      	str	r1, [sp, #20]
 800696e:	6800      	ldr	r0, [r0, #0]
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	a902      	add	r1, sp, #8
 8006974:	f000 f9a0 	bl	8006cb8 <_svfiprintf_r>
 8006978:	9b02      	ldr	r3, [sp, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	b01c      	add	sp, #112	; 0x70
 8006980:	f85d eb04 	ldr.w	lr, [sp], #4
 8006984:	b003      	add	sp, #12
 8006986:	4770      	bx	lr
 8006988:	20000084 	.word	0x20000084
 800698c:	ffff0208 	.word	0xffff0208

08006990 <memset>:
 8006990:	4402      	add	r2, r0
 8006992:	4603      	mov	r3, r0
 8006994:	4293      	cmp	r3, r2
 8006996:	d100      	bne.n	800699a <memset+0xa>
 8006998:	4770      	bx	lr
 800699a:	f803 1b01 	strb.w	r1, [r3], #1
 800699e:	e7f9      	b.n	8006994 <memset+0x4>

080069a0 <__errno>:
 80069a0:	4b01      	ldr	r3, [pc, #4]	; (80069a8 <__errno+0x8>)
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20000084 	.word	0x20000084

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	4d0d      	ldr	r5, [pc, #52]	; (80069e4 <__libc_init_array+0x38>)
 80069b0:	4c0d      	ldr	r4, [pc, #52]	; (80069e8 <__libc_init_array+0x3c>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	2600      	movs	r6, #0
 80069b8:	42a6      	cmp	r6, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	4d0b      	ldr	r5, [pc, #44]	; (80069ec <__libc_init_array+0x40>)
 80069be:	4c0c      	ldr	r4, [pc, #48]	; (80069f0 <__libc_init_array+0x44>)
 80069c0:	f000 fc6a 	bl	8007298 <_init>
 80069c4:	1b64      	subs	r4, r4, r5
 80069c6:	10a4      	asrs	r4, r4, #2
 80069c8:	2600      	movs	r6, #0
 80069ca:	42a6      	cmp	r6, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d4:	4798      	blx	r3
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	f855 3b04 	ldr.w	r3, [r5], #4
 80069de:	4798      	blx	r3
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	0800750c 	.word	0x0800750c
 80069e8:	0800750c 	.word	0x0800750c
 80069ec:	0800750c 	.word	0x0800750c
 80069f0:	08007510 	.word	0x08007510

080069f4 <__retarget_lock_acquire_recursive>:
 80069f4:	4770      	bx	lr

080069f6 <__retarget_lock_release_recursive>:
 80069f6:	4770      	bx	lr

080069f8 <memcpy>:
 80069f8:	440a      	add	r2, r1
 80069fa:	4291      	cmp	r1, r2
 80069fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a00:	d100      	bne.n	8006a04 <memcpy+0xc>
 8006a02:	4770      	bx	lr
 8006a04:	b510      	push	{r4, lr}
 8006a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a0e:	4291      	cmp	r1, r2
 8006a10:	d1f9      	bne.n	8006a06 <memcpy+0xe>
 8006a12:	bd10      	pop	{r4, pc}

08006a14 <_free_r>:
 8006a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d044      	beq.n	8006aa4 <_free_r+0x90>
 8006a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1e:	9001      	str	r0, [sp, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f1a1 0404 	sub.w	r4, r1, #4
 8006a26:	bfb8      	it	lt
 8006a28:	18e4      	addlt	r4, r4, r3
 8006a2a:	f000 f8df 	bl	8006bec <__malloc_lock>
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <_free_r+0x94>)
 8006a30:	9801      	ldr	r0, [sp, #4]
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	b933      	cbnz	r3, 8006a44 <_free_r+0x30>
 8006a36:	6063      	str	r3, [r4, #4]
 8006a38:	6014      	str	r4, [r2, #0]
 8006a3a:	b003      	add	sp, #12
 8006a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a40:	f000 b8da 	b.w	8006bf8 <__malloc_unlock>
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d908      	bls.n	8006a5a <_free_r+0x46>
 8006a48:	6825      	ldr	r5, [r4, #0]
 8006a4a:	1961      	adds	r1, r4, r5
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	bf01      	itttt	eq
 8006a50:	6819      	ldreq	r1, [r3, #0]
 8006a52:	685b      	ldreq	r3, [r3, #4]
 8006a54:	1949      	addeq	r1, r1, r5
 8006a56:	6021      	streq	r1, [r4, #0]
 8006a58:	e7ed      	b.n	8006a36 <_free_r+0x22>
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	b10b      	cbz	r3, 8006a64 <_free_r+0x50>
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d9fa      	bls.n	8006a5a <_free_r+0x46>
 8006a64:	6811      	ldr	r1, [r2, #0]
 8006a66:	1855      	adds	r5, r2, r1
 8006a68:	42a5      	cmp	r5, r4
 8006a6a:	d10b      	bne.n	8006a84 <_free_r+0x70>
 8006a6c:	6824      	ldr	r4, [r4, #0]
 8006a6e:	4421      	add	r1, r4
 8006a70:	1854      	adds	r4, r2, r1
 8006a72:	42a3      	cmp	r3, r4
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	d1e0      	bne.n	8006a3a <_free_r+0x26>
 8006a78:	681c      	ldr	r4, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	6053      	str	r3, [r2, #4]
 8006a7e:	440c      	add	r4, r1
 8006a80:	6014      	str	r4, [r2, #0]
 8006a82:	e7da      	b.n	8006a3a <_free_r+0x26>
 8006a84:	d902      	bls.n	8006a8c <_free_r+0x78>
 8006a86:	230c      	movs	r3, #12
 8006a88:	6003      	str	r3, [r0, #0]
 8006a8a:	e7d6      	b.n	8006a3a <_free_r+0x26>
 8006a8c:	6825      	ldr	r5, [r4, #0]
 8006a8e:	1961      	adds	r1, r4, r5
 8006a90:	428b      	cmp	r3, r1
 8006a92:	bf04      	itt	eq
 8006a94:	6819      	ldreq	r1, [r3, #0]
 8006a96:	685b      	ldreq	r3, [r3, #4]
 8006a98:	6063      	str	r3, [r4, #4]
 8006a9a:	bf04      	itt	eq
 8006a9c:	1949      	addeq	r1, r1, r5
 8006a9e:	6021      	streq	r1, [r4, #0]
 8006aa0:	6054      	str	r4, [r2, #4]
 8006aa2:	e7ca      	b.n	8006a3a <_free_r+0x26>
 8006aa4:	b003      	add	sp, #12
 8006aa6:	bd30      	pop	{r4, r5, pc}
 8006aa8:	200023e0 	.word	0x200023e0

08006aac <sbrk_aligned>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4e0e      	ldr	r6, [pc, #56]	; (8006ae8 <sbrk_aligned+0x3c>)
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	6831      	ldr	r1, [r6, #0]
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	b911      	cbnz	r1, 8006abe <sbrk_aligned+0x12>
 8006ab8:	f000 fba6 	bl	8007208 <_sbrk_r>
 8006abc:	6030      	str	r0, [r6, #0]
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f000 fba1 	bl	8007208 <_sbrk_r>
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	d00a      	beq.n	8006ae0 <sbrk_aligned+0x34>
 8006aca:	1cc4      	adds	r4, r0, #3
 8006acc:	f024 0403 	bic.w	r4, r4, #3
 8006ad0:	42a0      	cmp	r0, r4
 8006ad2:	d007      	beq.n	8006ae4 <sbrk_aligned+0x38>
 8006ad4:	1a21      	subs	r1, r4, r0
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 fb96 	bl	8007208 <_sbrk_r>
 8006adc:	3001      	adds	r0, #1
 8006ade:	d101      	bne.n	8006ae4 <sbrk_aligned+0x38>
 8006ae0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
 8006ae8:	200023e4 	.word	0x200023e4

08006aec <_malloc_r>:
 8006aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af0:	1ccd      	adds	r5, r1, #3
 8006af2:	f025 0503 	bic.w	r5, r5, #3
 8006af6:	3508      	adds	r5, #8
 8006af8:	2d0c      	cmp	r5, #12
 8006afa:	bf38      	it	cc
 8006afc:	250c      	movcc	r5, #12
 8006afe:	2d00      	cmp	r5, #0
 8006b00:	4607      	mov	r7, r0
 8006b02:	db01      	blt.n	8006b08 <_malloc_r+0x1c>
 8006b04:	42a9      	cmp	r1, r5
 8006b06:	d905      	bls.n	8006b14 <_malloc_r+0x28>
 8006b08:	230c      	movs	r3, #12
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	2600      	movs	r6, #0
 8006b0e:	4630      	mov	r0, r6
 8006b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006be8 <_malloc_r+0xfc>
 8006b18:	f000 f868 	bl	8006bec <__malloc_lock>
 8006b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b20:	461c      	mov	r4, r3
 8006b22:	bb5c      	cbnz	r4, 8006b7c <_malloc_r+0x90>
 8006b24:	4629      	mov	r1, r5
 8006b26:	4638      	mov	r0, r7
 8006b28:	f7ff ffc0 	bl	8006aac <sbrk_aligned>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	4604      	mov	r4, r0
 8006b30:	d155      	bne.n	8006bde <_malloc_r+0xf2>
 8006b32:	f8d8 4000 	ldr.w	r4, [r8]
 8006b36:	4626      	mov	r6, r4
 8006b38:	2e00      	cmp	r6, #0
 8006b3a:	d145      	bne.n	8006bc8 <_malloc_r+0xdc>
 8006b3c:	2c00      	cmp	r4, #0
 8006b3e:	d048      	beq.n	8006bd2 <_malloc_r+0xe6>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	4631      	mov	r1, r6
 8006b44:	4638      	mov	r0, r7
 8006b46:	eb04 0903 	add.w	r9, r4, r3
 8006b4a:	f000 fb5d 	bl	8007208 <_sbrk_r>
 8006b4e:	4581      	cmp	r9, r0
 8006b50:	d13f      	bne.n	8006bd2 <_malloc_r+0xe6>
 8006b52:	6821      	ldr	r1, [r4, #0]
 8006b54:	1a6d      	subs	r5, r5, r1
 8006b56:	4629      	mov	r1, r5
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff ffa7 	bl	8006aac <sbrk_aligned>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d037      	beq.n	8006bd2 <_malloc_r+0xe6>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	442b      	add	r3, r5
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	f8d8 3000 	ldr.w	r3, [r8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d038      	beq.n	8006be2 <_malloc_r+0xf6>
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	42a2      	cmp	r2, r4
 8006b74:	d12b      	bne.n	8006bce <_malloc_r+0xe2>
 8006b76:	2200      	movs	r2, #0
 8006b78:	605a      	str	r2, [r3, #4]
 8006b7a:	e00f      	b.n	8006b9c <_malloc_r+0xb0>
 8006b7c:	6822      	ldr	r2, [r4, #0]
 8006b7e:	1b52      	subs	r2, r2, r5
 8006b80:	d41f      	bmi.n	8006bc2 <_malloc_r+0xd6>
 8006b82:	2a0b      	cmp	r2, #11
 8006b84:	d917      	bls.n	8006bb6 <_malloc_r+0xca>
 8006b86:	1961      	adds	r1, r4, r5
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	6025      	str	r5, [r4, #0]
 8006b8c:	bf18      	it	ne
 8006b8e:	6059      	strne	r1, [r3, #4]
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	bf08      	it	eq
 8006b94:	f8c8 1000 	streq.w	r1, [r8]
 8006b98:	5162      	str	r2, [r4, r5]
 8006b9a:	604b      	str	r3, [r1, #4]
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	f104 060b 	add.w	r6, r4, #11
 8006ba2:	f000 f829 	bl	8006bf8 <__malloc_unlock>
 8006ba6:	f026 0607 	bic.w	r6, r6, #7
 8006baa:	1d23      	adds	r3, r4, #4
 8006bac:	1af2      	subs	r2, r6, r3
 8006bae:	d0ae      	beq.n	8006b0e <_malloc_r+0x22>
 8006bb0:	1b9b      	subs	r3, r3, r6
 8006bb2:	50a3      	str	r3, [r4, r2]
 8006bb4:	e7ab      	b.n	8006b0e <_malloc_r+0x22>
 8006bb6:	42a3      	cmp	r3, r4
 8006bb8:	6862      	ldr	r2, [r4, #4]
 8006bba:	d1dd      	bne.n	8006b78 <_malloc_r+0x8c>
 8006bbc:	f8c8 2000 	str.w	r2, [r8]
 8006bc0:	e7ec      	b.n	8006b9c <_malloc_r+0xb0>
 8006bc2:	4623      	mov	r3, r4
 8006bc4:	6864      	ldr	r4, [r4, #4]
 8006bc6:	e7ac      	b.n	8006b22 <_malloc_r+0x36>
 8006bc8:	4634      	mov	r4, r6
 8006bca:	6876      	ldr	r6, [r6, #4]
 8006bcc:	e7b4      	b.n	8006b38 <_malloc_r+0x4c>
 8006bce:	4613      	mov	r3, r2
 8006bd0:	e7cc      	b.n	8006b6c <_malloc_r+0x80>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	f000 f80e 	bl	8006bf8 <__malloc_unlock>
 8006bdc:	e797      	b.n	8006b0e <_malloc_r+0x22>
 8006bde:	6025      	str	r5, [r4, #0]
 8006be0:	e7dc      	b.n	8006b9c <_malloc_r+0xb0>
 8006be2:	605b      	str	r3, [r3, #4]
 8006be4:	deff      	udf	#255	; 0xff
 8006be6:	bf00      	nop
 8006be8:	200023e0 	.word	0x200023e0

08006bec <__malloc_lock>:
 8006bec:	4801      	ldr	r0, [pc, #4]	; (8006bf4 <__malloc_lock+0x8>)
 8006bee:	f7ff bf01 	b.w	80069f4 <__retarget_lock_acquire_recursive>
 8006bf2:	bf00      	nop
 8006bf4:	200023dc 	.word	0x200023dc

08006bf8 <__malloc_unlock>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	; (8006c00 <__malloc_unlock+0x8>)
 8006bfa:	f7ff befc 	b.w	80069f6 <__retarget_lock_release_recursive>
 8006bfe:	bf00      	nop
 8006c00:	200023dc 	.word	0x200023dc

08006c04 <__ssputs_r>:
 8006c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	688e      	ldr	r6, [r1, #8]
 8006c0a:	461f      	mov	r7, r3
 8006c0c:	42be      	cmp	r6, r7
 8006c0e:	680b      	ldr	r3, [r1, #0]
 8006c10:	4682      	mov	sl, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	4690      	mov	r8, r2
 8006c16:	d82c      	bhi.n	8006c72 <__ssputs_r+0x6e>
 8006c18:	898a      	ldrh	r2, [r1, #12]
 8006c1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c1e:	d026      	beq.n	8006c6e <__ssputs_r+0x6a>
 8006c20:	6965      	ldr	r5, [r4, #20]
 8006c22:	6909      	ldr	r1, [r1, #16]
 8006c24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c28:	eba3 0901 	sub.w	r9, r3, r1
 8006c2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c30:	1c7b      	adds	r3, r7, #1
 8006c32:	444b      	add	r3, r9
 8006c34:	106d      	asrs	r5, r5, #1
 8006c36:	429d      	cmp	r5, r3
 8006c38:	bf38      	it	cc
 8006c3a:	461d      	movcc	r5, r3
 8006c3c:	0553      	lsls	r3, r2, #21
 8006c3e:	d527      	bpl.n	8006c90 <__ssputs_r+0x8c>
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7ff ff53 	bl	8006aec <_malloc_r>
 8006c46:	4606      	mov	r6, r0
 8006c48:	b360      	cbz	r0, 8006ca4 <__ssputs_r+0xa0>
 8006c4a:	6921      	ldr	r1, [r4, #16]
 8006c4c:	464a      	mov	r2, r9
 8006c4e:	f7ff fed3 	bl	80069f8 <memcpy>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	6126      	str	r6, [r4, #16]
 8006c60:	6165      	str	r5, [r4, #20]
 8006c62:	444e      	add	r6, r9
 8006c64:	eba5 0509 	sub.w	r5, r5, r9
 8006c68:	6026      	str	r6, [r4, #0]
 8006c6a:	60a5      	str	r5, [r4, #8]
 8006c6c:	463e      	mov	r6, r7
 8006c6e:	42be      	cmp	r6, r7
 8006c70:	d900      	bls.n	8006c74 <__ssputs_r+0x70>
 8006c72:	463e      	mov	r6, r7
 8006c74:	6820      	ldr	r0, [r4, #0]
 8006c76:	4632      	mov	r2, r6
 8006c78:	4641      	mov	r1, r8
 8006c7a:	f000 faab 	bl	80071d4 <memmove>
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	1b9b      	subs	r3, r3, r6
 8006c82:	60a3      	str	r3, [r4, #8]
 8006c84:	6823      	ldr	r3, [r4, #0]
 8006c86:	4433      	add	r3, r6
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c90:	462a      	mov	r2, r5
 8006c92:	f000 fac9 	bl	8007228 <_realloc_r>
 8006c96:	4606      	mov	r6, r0
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d1e0      	bne.n	8006c5e <__ssputs_r+0x5a>
 8006c9c:	6921      	ldr	r1, [r4, #16]
 8006c9e:	4650      	mov	r0, sl
 8006ca0:	f7ff feb8 	bl	8006a14 <_free_r>
 8006ca4:	230c      	movs	r3, #12
 8006ca6:	f8ca 3000 	str.w	r3, [sl]
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb0:	81a3      	strh	r3, [r4, #12]
 8006cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb6:	e7e9      	b.n	8006c8c <__ssputs_r+0x88>

08006cb8 <_svfiprintf_r>:
 8006cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cbc:	4698      	mov	r8, r3
 8006cbe:	898b      	ldrh	r3, [r1, #12]
 8006cc0:	061b      	lsls	r3, r3, #24
 8006cc2:	b09d      	sub	sp, #116	; 0x74
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	460d      	mov	r5, r1
 8006cc8:	4614      	mov	r4, r2
 8006cca:	d50e      	bpl.n	8006cea <_svfiprintf_r+0x32>
 8006ccc:	690b      	ldr	r3, [r1, #16]
 8006cce:	b963      	cbnz	r3, 8006cea <_svfiprintf_r+0x32>
 8006cd0:	2140      	movs	r1, #64	; 0x40
 8006cd2:	f7ff ff0b 	bl	8006aec <_malloc_r>
 8006cd6:	6028      	str	r0, [r5, #0]
 8006cd8:	6128      	str	r0, [r5, #16]
 8006cda:	b920      	cbnz	r0, 8006ce6 <_svfiprintf_r+0x2e>
 8006cdc:	230c      	movs	r3, #12
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce4:	e0d0      	b.n	8006e88 <_svfiprintf_r+0x1d0>
 8006ce6:	2340      	movs	r3, #64	; 0x40
 8006ce8:	616b      	str	r3, [r5, #20]
 8006cea:	2300      	movs	r3, #0
 8006cec:	9309      	str	r3, [sp, #36]	; 0x24
 8006cee:	2320      	movs	r3, #32
 8006cf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cf8:	2330      	movs	r3, #48	; 0x30
 8006cfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006ea0 <_svfiprintf_r+0x1e8>
 8006cfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d02:	f04f 0901 	mov.w	r9, #1
 8006d06:	4623      	mov	r3, r4
 8006d08:	469a      	mov	sl, r3
 8006d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d0e:	b10a      	cbz	r2, 8006d14 <_svfiprintf_r+0x5c>
 8006d10:	2a25      	cmp	r2, #37	; 0x25
 8006d12:	d1f9      	bne.n	8006d08 <_svfiprintf_r+0x50>
 8006d14:	ebba 0b04 	subs.w	fp, sl, r4
 8006d18:	d00b      	beq.n	8006d32 <_svfiprintf_r+0x7a>
 8006d1a:	465b      	mov	r3, fp
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	4629      	mov	r1, r5
 8006d20:	4638      	mov	r0, r7
 8006d22:	f7ff ff6f 	bl	8006c04 <__ssputs_r>
 8006d26:	3001      	adds	r0, #1
 8006d28:	f000 80a9 	beq.w	8006e7e <_svfiprintf_r+0x1c6>
 8006d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d2e:	445a      	add	r2, fp
 8006d30:	9209      	str	r2, [sp, #36]	; 0x24
 8006d32:	f89a 3000 	ldrb.w	r3, [sl]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80a1 	beq.w	8006e7e <_svfiprintf_r+0x1c6>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d46:	f10a 0a01 	add.w	sl, sl, #1
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	9307      	str	r3, [sp, #28]
 8006d4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d52:	931a      	str	r3, [sp, #104]	; 0x68
 8006d54:	4654      	mov	r4, sl
 8006d56:	2205      	movs	r2, #5
 8006d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5c:	4850      	ldr	r0, [pc, #320]	; (8006ea0 <_svfiprintf_r+0x1e8>)
 8006d5e:	f7f9 fa37 	bl	80001d0 <memchr>
 8006d62:	9a04      	ldr	r2, [sp, #16]
 8006d64:	b9d8      	cbnz	r0, 8006d9e <_svfiprintf_r+0xe6>
 8006d66:	06d0      	lsls	r0, r2, #27
 8006d68:	bf44      	itt	mi
 8006d6a:	2320      	movmi	r3, #32
 8006d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d70:	0711      	lsls	r1, r2, #28
 8006d72:	bf44      	itt	mi
 8006d74:	232b      	movmi	r3, #43	; 0x2b
 8006d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d80:	d015      	beq.n	8006dae <_svfiprintf_r+0xf6>
 8006d82:	9a07      	ldr	r2, [sp, #28]
 8006d84:	4654      	mov	r4, sl
 8006d86:	2000      	movs	r0, #0
 8006d88:	f04f 0c0a 	mov.w	ip, #10
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d92:	3b30      	subs	r3, #48	; 0x30
 8006d94:	2b09      	cmp	r3, #9
 8006d96:	d94d      	bls.n	8006e34 <_svfiprintf_r+0x17c>
 8006d98:	b1b0      	cbz	r0, 8006dc8 <_svfiprintf_r+0x110>
 8006d9a:	9207      	str	r2, [sp, #28]
 8006d9c:	e014      	b.n	8006dc8 <_svfiprintf_r+0x110>
 8006d9e:	eba0 0308 	sub.w	r3, r0, r8
 8006da2:	fa09 f303 	lsl.w	r3, r9, r3
 8006da6:	4313      	orrs	r3, r2
 8006da8:	9304      	str	r3, [sp, #16]
 8006daa:	46a2      	mov	sl, r4
 8006dac:	e7d2      	b.n	8006d54 <_svfiprintf_r+0x9c>
 8006dae:	9b03      	ldr	r3, [sp, #12]
 8006db0:	1d19      	adds	r1, r3, #4
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	9103      	str	r1, [sp, #12]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bfbb      	ittet	lt
 8006dba:	425b      	neglt	r3, r3
 8006dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8006dc0:	9307      	strge	r3, [sp, #28]
 8006dc2:	9307      	strlt	r3, [sp, #28]
 8006dc4:	bfb8      	it	lt
 8006dc6:	9204      	strlt	r2, [sp, #16]
 8006dc8:	7823      	ldrb	r3, [r4, #0]
 8006dca:	2b2e      	cmp	r3, #46	; 0x2e
 8006dcc:	d10c      	bne.n	8006de8 <_svfiprintf_r+0x130>
 8006dce:	7863      	ldrb	r3, [r4, #1]
 8006dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd2:	d134      	bne.n	8006e3e <_svfiprintf_r+0x186>
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	1d1a      	adds	r2, r3, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	9203      	str	r2, [sp, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bfb8      	it	lt
 8006de0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006de4:	3402      	adds	r4, #2
 8006de6:	9305      	str	r3, [sp, #20]
 8006de8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006eb0 <_svfiprintf_r+0x1f8>
 8006dec:	7821      	ldrb	r1, [r4, #0]
 8006dee:	2203      	movs	r2, #3
 8006df0:	4650      	mov	r0, sl
 8006df2:	f7f9 f9ed 	bl	80001d0 <memchr>
 8006df6:	b138      	cbz	r0, 8006e08 <_svfiprintf_r+0x150>
 8006df8:	9b04      	ldr	r3, [sp, #16]
 8006dfa:	eba0 000a 	sub.w	r0, r0, sl
 8006dfe:	2240      	movs	r2, #64	; 0x40
 8006e00:	4082      	lsls	r2, r0
 8006e02:	4313      	orrs	r3, r2
 8006e04:	3401      	adds	r4, #1
 8006e06:	9304      	str	r3, [sp, #16]
 8006e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0c:	4825      	ldr	r0, [pc, #148]	; (8006ea4 <_svfiprintf_r+0x1ec>)
 8006e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e12:	2206      	movs	r2, #6
 8006e14:	f7f9 f9dc 	bl	80001d0 <memchr>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d038      	beq.n	8006e8e <_svfiprintf_r+0x1d6>
 8006e1c:	4b22      	ldr	r3, [pc, #136]	; (8006ea8 <_svfiprintf_r+0x1f0>)
 8006e1e:	bb1b      	cbnz	r3, 8006e68 <_svfiprintf_r+0x1b0>
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	3307      	adds	r3, #7
 8006e24:	f023 0307 	bic.w	r3, r3, #7
 8006e28:	3308      	adds	r3, #8
 8006e2a:	9303      	str	r3, [sp, #12]
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	4433      	add	r3, r6
 8006e30:	9309      	str	r3, [sp, #36]	; 0x24
 8006e32:	e768      	b.n	8006d06 <_svfiprintf_r+0x4e>
 8006e34:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e38:	460c      	mov	r4, r1
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	e7a6      	b.n	8006d8c <_svfiprintf_r+0xd4>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	3401      	adds	r4, #1
 8006e42:	9305      	str	r3, [sp, #20]
 8006e44:	4619      	mov	r1, r3
 8006e46:	f04f 0c0a 	mov.w	ip, #10
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e50:	3a30      	subs	r2, #48	; 0x30
 8006e52:	2a09      	cmp	r2, #9
 8006e54:	d903      	bls.n	8006e5e <_svfiprintf_r+0x1a6>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0c6      	beq.n	8006de8 <_svfiprintf_r+0x130>
 8006e5a:	9105      	str	r1, [sp, #20]
 8006e5c:	e7c4      	b.n	8006de8 <_svfiprintf_r+0x130>
 8006e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e62:	4604      	mov	r4, r0
 8006e64:	2301      	movs	r3, #1
 8006e66:	e7f0      	b.n	8006e4a <_svfiprintf_r+0x192>
 8006e68:	ab03      	add	r3, sp, #12
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	462a      	mov	r2, r5
 8006e6e:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <_svfiprintf_r+0x1f4>)
 8006e70:	a904      	add	r1, sp, #16
 8006e72:	4638      	mov	r0, r7
 8006e74:	f3af 8000 	nop.w
 8006e78:	1c42      	adds	r2, r0, #1
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	d1d6      	bne.n	8006e2c <_svfiprintf_r+0x174>
 8006e7e:	89ab      	ldrh	r3, [r5, #12]
 8006e80:	065b      	lsls	r3, r3, #25
 8006e82:	f53f af2d 	bmi.w	8006ce0 <_svfiprintf_r+0x28>
 8006e86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e88:	b01d      	add	sp, #116	; 0x74
 8006e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8e:	ab03      	add	r3, sp, #12
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	462a      	mov	r2, r5
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <_svfiprintf_r+0x1f4>)
 8006e96:	a904      	add	r1, sp, #16
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f000 f879 	bl	8006f90 <_printf_i>
 8006e9e:	e7eb      	b.n	8006e78 <_svfiprintf_r+0x1c0>
 8006ea0:	080074d0 	.word	0x080074d0
 8006ea4:	080074da 	.word	0x080074da
 8006ea8:	00000000 	.word	0x00000000
 8006eac:	08006c05 	.word	0x08006c05
 8006eb0:	080074d6 	.word	0x080074d6

08006eb4 <_printf_common>:
 8006eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb8:	4616      	mov	r6, r2
 8006eba:	4699      	mov	r9, r3
 8006ebc:	688a      	ldr	r2, [r1, #8]
 8006ebe:	690b      	ldr	r3, [r1, #16]
 8006ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	bfb8      	it	lt
 8006ec8:	4613      	movlt	r3, r2
 8006eca:	6033      	str	r3, [r6, #0]
 8006ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b10a      	cbz	r2, 8006eda <_printf_common+0x26>
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	6033      	str	r3, [r6, #0]
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	0699      	lsls	r1, r3, #26
 8006ede:	bf42      	ittt	mi
 8006ee0:	6833      	ldrmi	r3, [r6, #0]
 8006ee2:	3302      	addmi	r3, #2
 8006ee4:	6033      	strmi	r3, [r6, #0]
 8006ee6:	6825      	ldr	r5, [r4, #0]
 8006ee8:	f015 0506 	ands.w	r5, r5, #6
 8006eec:	d106      	bne.n	8006efc <_printf_common+0x48>
 8006eee:	f104 0a19 	add.w	sl, r4, #25
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	6832      	ldr	r2, [r6, #0]
 8006ef6:	1a9b      	subs	r3, r3, r2
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	dc26      	bgt.n	8006f4a <_printf_common+0x96>
 8006efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f00:	1e13      	subs	r3, r2, #0
 8006f02:	6822      	ldr	r2, [r4, #0]
 8006f04:	bf18      	it	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	0692      	lsls	r2, r2, #26
 8006f0a:	d42b      	bmi.n	8006f64 <_printf_common+0xb0>
 8006f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f10:	4649      	mov	r1, r9
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c0      	blx	r8
 8006f16:	3001      	adds	r0, #1
 8006f18:	d01e      	beq.n	8006f58 <_printf_common+0xa4>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	6922      	ldr	r2, [r4, #16]
 8006f1e:	f003 0306 	and.w	r3, r3, #6
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	bf02      	ittt	eq
 8006f26:	68e5      	ldreq	r5, [r4, #12]
 8006f28:	6833      	ldreq	r3, [r6, #0]
 8006f2a:	1aed      	subeq	r5, r5, r3
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	bf0c      	ite	eq
 8006f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f34:	2500      	movne	r5, #0
 8006f36:	4293      	cmp	r3, r2
 8006f38:	bfc4      	itt	gt
 8006f3a:	1a9b      	subgt	r3, r3, r2
 8006f3c:	18ed      	addgt	r5, r5, r3
 8006f3e:	2600      	movs	r6, #0
 8006f40:	341a      	adds	r4, #26
 8006f42:	42b5      	cmp	r5, r6
 8006f44:	d11a      	bne.n	8006f7c <_printf_common+0xc8>
 8006f46:	2000      	movs	r0, #0
 8006f48:	e008      	b.n	8006f5c <_printf_common+0xa8>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4638      	mov	r0, r7
 8006f52:	47c0      	blx	r8
 8006f54:	3001      	adds	r0, #1
 8006f56:	d103      	bne.n	8006f60 <_printf_common+0xac>
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f60:	3501      	adds	r5, #1
 8006f62:	e7c6      	b.n	8006ef2 <_printf_common+0x3e>
 8006f64:	18e1      	adds	r1, r4, r3
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	2030      	movs	r0, #48	; 0x30
 8006f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f6e:	4422      	add	r2, r4
 8006f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f78:	3302      	adds	r3, #2
 8006f7a:	e7c7      	b.n	8006f0c <_printf_common+0x58>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	4622      	mov	r2, r4
 8006f80:	4649      	mov	r1, r9
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c0      	blx	r8
 8006f86:	3001      	adds	r0, #1
 8006f88:	d0e6      	beq.n	8006f58 <_printf_common+0xa4>
 8006f8a:	3601      	adds	r6, #1
 8006f8c:	e7d9      	b.n	8006f42 <_printf_common+0x8e>
	...

08006f90 <_printf_i>:
 8006f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	7e0f      	ldrb	r7, [r1, #24]
 8006f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f98:	2f78      	cmp	r7, #120	; 0x78
 8006f9a:	4691      	mov	r9, r2
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	469a      	mov	sl, r3
 8006fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fa6:	d807      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fa8:	2f62      	cmp	r7, #98	; 0x62
 8006faa:	d80a      	bhi.n	8006fc2 <_printf_i+0x32>
 8006fac:	2f00      	cmp	r7, #0
 8006fae:	f000 80d4 	beq.w	800715a <_printf_i+0x1ca>
 8006fb2:	2f58      	cmp	r7, #88	; 0x58
 8006fb4:	f000 80c0 	beq.w	8007138 <_printf_i+0x1a8>
 8006fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fc0:	e03a      	b.n	8007038 <_printf_i+0xa8>
 8006fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fc6:	2b15      	cmp	r3, #21
 8006fc8:	d8f6      	bhi.n	8006fb8 <_printf_i+0x28>
 8006fca:	a101      	add	r1, pc, #4	; (adr r1, 8006fd0 <_printf_i+0x40>)
 8006fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd0:	08007029 	.word	0x08007029
 8006fd4:	0800703d 	.word	0x0800703d
 8006fd8:	08006fb9 	.word	0x08006fb9
 8006fdc:	08006fb9 	.word	0x08006fb9
 8006fe0:	08006fb9 	.word	0x08006fb9
 8006fe4:	08006fb9 	.word	0x08006fb9
 8006fe8:	0800703d 	.word	0x0800703d
 8006fec:	08006fb9 	.word	0x08006fb9
 8006ff0:	08006fb9 	.word	0x08006fb9
 8006ff4:	08006fb9 	.word	0x08006fb9
 8006ff8:	08006fb9 	.word	0x08006fb9
 8006ffc:	08007141 	.word	0x08007141
 8007000:	08007069 	.word	0x08007069
 8007004:	080070fb 	.word	0x080070fb
 8007008:	08006fb9 	.word	0x08006fb9
 800700c:	08006fb9 	.word	0x08006fb9
 8007010:	08007163 	.word	0x08007163
 8007014:	08006fb9 	.word	0x08006fb9
 8007018:	08007069 	.word	0x08007069
 800701c:	08006fb9 	.word	0x08006fb9
 8007020:	08006fb9 	.word	0x08006fb9
 8007024:	08007103 	.word	0x08007103
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	1d1a      	adds	r2, r3, #4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	602a      	str	r2, [r5, #0]
 8007030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007038:	2301      	movs	r3, #1
 800703a:	e09f      	b.n	800717c <_printf_i+0x1ec>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	682b      	ldr	r3, [r5, #0]
 8007040:	0607      	lsls	r7, r0, #24
 8007042:	f103 0104 	add.w	r1, r3, #4
 8007046:	6029      	str	r1, [r5, #0]
 8007048:	d501      	bpl.n	800704e <_printf_i+0xbe>
 800704a:	681e      	ldr	r6, [r3, #0]
 800704c:	e003      	b.n	8007056 <_printf_i+0xc6>
 800704e:	0646      	lsls	r6, r0, #25
 8007050:	d5fb      	bpl.n	800704a <_printf_i+0xba>
 8007052:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007056:	2e00      	cmp	r6, #0
 8007058:	da03      	bge.n	8007062 <_printf_i+0xd2>
 800705a:	232d      	movs	r3, #45	; 0x2d
 800705c:	4276      	negs	r6, r6
 800705e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007062:	485a      	ldr	r0, [pc, #360]	; (80071cc <_printf_i+0x23c>)
 8007064:	230a      	movs	r3, #10
 8007066:	e012      	b.n	800708e <_printf_i+0xfe>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	6820      	ldr	r0, [r4, #0]
 800706c:	1d19      	adds	r1, r3, #4
 800706e:	6029      	str	r1, [r5, #0]
 8007070:	0605      	lsls	r5, r0, #24
 8007072:	d501      	bpl.n	8007078 <_printf_i+0xe8>
 8007074:	681e      	ldr	r6, [r3, #0]
 8007076:	e002      	b.n	800707e <_printf_i+0xee>
 8007078:	0641      	lsls	r1, r0, #25
 800707a:	d5fb      	bpl.n	8007074 <_printf_i+0xe4>
 800707c:	881e      	ldrh	r6, [r3, #0]
 800707e:	4853      	ldr	r0, [pc, #332]	; (80071cc <_printf_i+0x23c>)
 8007080:	2f6f      	cmp	r7, #111	; 0x6f
 8007082:	bf0c      	ite	eq
 8007084:	2308      	moveq	r3, #8
 8007086:	230a      	movne	r3, #10
 8007088:	2100      	movs	r1, #0
 800708a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800708e:	6865      	ldr	r5, [r4, #4]
 8007090:	60a5      	str	r5, [r4, #8]
 8007092:	2d00      	cmp	r5, #0
 8007094:	bfa2      	ittt	ge
 8007096:	6821      	ldrge	r1, [r4, #0]
 8007098:	f021 0104 	bicge.w	r1, r1, #4
 800709c:	6021      	strge	r1, [r4, #0]
 800709e:	b90e      	cbnz	r6, 80070a4 <_printf_i+0x114>
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	d04b      	beq.n	800713c <_printf_i+0x1ac>
 80070a4:	4615      	mov	r5, r2
 80070a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80070aa:	fb03 6711 	mls	r7, r3, r1, r6
 80070ae:	5dc7      	ldrb	r7, [r0, r7]
 80070b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070b4:	4637      	mov	r7, r6
 80070b6:	42bb      	cmp	r3, r7
 80070b8:	460e      	mov	r6, r1
 80070ba:	d9f4      	bls.n	80070a6 <_printf_i+0x116>
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d10b      	bne.n	80070d8 <_printf_i+0x148>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	07de      	lsls	r6, r3, #31
 80070c4:	d508      	bpl.n	80070d8 <_printf_i+0x148>
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	6861      	ldr	r1, [r4, #4]
 80070ca:	4299      	cmp	r1, r3
 80070cc:	bfde      	ittt	le
 80070ce:	2330      	movle	r3, #48	; 0x30
 80070d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80070d8:	1b52      	subs	r2, r2, r5
 80070da:	6122      	str	r2, [r4, #16]
 80070dc:	f8cd a000 	str.w	sl, [sp]
 80070e0:	464b      	mov	r3, r9
 80070e2:	aa03      	add	r2, sp, #12
 80070e4:	4621      	mov	r1, r4
 80070e6:	4640      	mov	r0, r8
 80070e8:	f7ff fee4 	bl	8006eb4 <_printf_common>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d14a      	bne.n	8007186 <_printf_i+0x1f6>
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070f4:	b004      	add	sp, #16
 80070f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	f043 0320 	orr.w	r3, r3, #32
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	4833      	ldr	r0, [pc, #204]	; (80071d0 <_printf_i+0x240>)
 8007104:	2778      	movs	r7, #120	; 0x78
 8007106:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	6829      	ldr	r1, [r5, #0]
 800710e:	061f      	lsls	r7, r3, #24
 8007110:	f851 6b04 	ldr.w	r6, [r1], #4
 8007114:	d402      	bmi.n	800711c <_printf_i+0x18c>
 8007116:	065f      	lsls	r7, r3, #25
 8007118:	bf48      	it	mi
 800711a:	b2b6      	uxthmi	r6, r6
 800711c:	07df      	lsls	r7, r3, #31
 800711e:	bf48      	it	mi
 8007120:	f043 0320 	orrmi.w	r3, r3, #32
 8007124:	6029      	str	r1, [r5, #0]
 8007126:	bf48      	it	mi
 8007128:	6023      	strmi	r3, [r4, #0]
 800712a:	b91e      	cbnz	r6, 8007134 <_printf_i+0x1a4>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	f023 0320 	bic.w	r3, r3, #32
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	2310      	movs	r3, #16
 8007136:	e7a7      	b.n	8007088 <_printf_i+0xf8>
 8007138:	4824      	ldr	r0, [pc, #144]	; (80071cc <_printf_i+0x23c>)
 800713a:	e7e4      	b.n	8007106 <_printf_i+0x176>
 800713c:	4615      	mov	r5, r2
 800713e:	e7bd      	b.n	80070bc <_printf_i+0x12c>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	6826      	ldr	r6, [r4, #0]
 8007144:	6961      	ldr	r1, [r4, #20]
 8007146:	1d18      	adds	r0, r3, #4
 8007148:	6028      	str	r0, [r5, #0]
 800714a:	0635      	lsls	r5, r6, #24
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	d501      	bpl.n	8007154 <_printf_i+0x1c4>
 8007150:	6019      	str	r1, [r3, #0]
 8007152:	e002      	b.n	800715a <_printf_i+0x1ca>
 8007154:	0670      	lsls	r0, r6, #25
 8007156:	d5fb      	bpl.n	8007150 <_printf_i+0x1c0>
 8007158:	8019      	strh	r1, [r3, #0]
 800715a:	2300      	movs	r3, #0
 800715c:	6123      	str	r3, [r4, #16]
 800715e:	4615      	mov	r5, r2
 8007160:	e7bc      	b.n	80070dc <_printf_i+0x14c>
 8007162:	682b      	ldr	r3, [r5, #0]
 8007164:	1d1a      	adds	r2, r3, #4
 8007166:	602a      	str	r2, [r5, #0]
 8007168:	681d      	ldr	r5, [r3, #0]
 800716a:	6862      	ldr	r2, [r4, #4]
 800716c:	2100      	movs	r1, #0
 800716e:	4628      	mov	r0, r5
 8007170:	f7f9 f82e 	bl	80001d0 <memchr>
 8007174:	b108      	cbz	r0, 800717a <_printf_i+0x1ea>
 8007176:	1b40      	subs	r0, r0, r5
 8007178:	6060      	str	r0, [r4, #4]
 800717a:	6863      	ldr	r3, [r4, #4]
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	2300      	movs	r3, #0
 8007180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007184:	e7aa      	b.n	80070dc <_printf_i+0x14c>
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	462a      	mov	r2, r5
 800718a:	4649      	mov	r1, r9
 800718c:	4640      	mov	r0, r8
 800718e:	47d0      	blx	sl
 8007190:	3001      	adds	r0, #1
 8007192:	d0ad      	beq.n	80070f0 <_printf_i+0x160>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	079b      	lsls	r3, r3, #30
 8007198:	d413      	bmi.n	80071c2 <_printf_i+0x232>
 800719a:	68e0      	ldr	r0, [r4, #12]
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	4298      	cmp	r0, r3
 80071a0:	bfb8      	it	lt
 80071a2:	4618      	movlt	r0, r3
 80071a4:	e7a6      	b.n	80070f4 <_printf_i+0x164>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4632      	mov	r2, r6
 80071aa:	4649      	mov	r1, r9
 80071ac:	4640      	mov	r0, r8
 80071ae:	47d0      	blx	sl
 80071b0:	3001      	adds	r0, #1
 80071b2:	d09d      	beq.n	80070f0 <_printf_i+0x160>
 80071b4:	3501      	adds	r5, #1
 80071b6:	68e3      	ldr	r3, [r4, #12]
 80071b8:	9903      	ldr	r1, [sp, #12]
 80071ba:	1a5b      	subs	r3, r3, r1
 80071bc:	42ab      	cmp	r3, r5
 80071be:	dcf2      	bgt.n	80071a6 <_printf_i+0x216>
 80071c0:	e7eb      	b.n	800719a <_printf_i+0x20a>
 80071c2:	2500      	movs	r5, #0
 80071c4:	f104 0619 	add.w	r6, r4, #25
 80071c8:	e7f5      	b.n	80071b6 <_printf_i+0x226>
 80071ca:	bf00      	nop
 80071cc:	080074e1 	.word	0x080074e1
 80071d0:	080074f2 	.word	0x080074f2

080071d4 <memmove>:
 80071d4:	4288      	cmp	r0, r1
 80071d6:	b510      	push	{r4, lr}
 80071d8:	eb01 0402 	add.w	r4, r1, r2
 80071dc:	d902      	bls.n	80071e4 <memmove+0x10>
 80071de:	4284      	cmp	r4, r0
 80071e0:	4623      	mov	r3, r4
 80071e2:	d807      	bhi.n	80071f4 <memmove+0x20>
 80071e4:	1e43      	subs	r3, r0, #1
 80071e6:	42a1      	cmp	r1, r4
 80071e8:	d008      	beq.n	80071fc <memmove+0x28>
 80071ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071f2:	e7f8      	b.n	80071e6 <memmove+0x12>
 80071f4:	4402      	add	r2, r0
 80071f6:	4601      	mov	r1, r0
 80071f8:	428a      	cmp	r2, r1
 80071fa:	d100      	bne.n	80071fe <memmove+0x2a>
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007206:	e7f7      	b.n	80071f8 <memmove+0x24>

08007208 <_sbrk_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d06      	ldr	r5, [pc, #24]	; (8007224 <_sbrk_r+0x1c>)
 800720c:	2300      	movs	r3, #0
 800720e:	4604      	mov	r4, r0
 8007210:	4608      	mov	r0, r1
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	f7f9 ffa4 	bl	8001160 <_sbrk>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_sbrk_r+0x1a>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_sbrk_r+0x1a>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	200023d8 	.word	0x200023d8

08007228 <_realloc_r>:
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	4680      	mov	r8, r0
 800722e:	4614      	mov	r4, r2
 8007230:	460e      	mov	r6, r1
 8007232:	b921      	cbnz	r1, 800723e <_realloc_r+0x16>
 8007234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	4611      	mov	r1, r2
 800723a:	f7ff bc57 	b.w	8006aec <_malloc_r>
 800723e:	b92a      	cbnz	r2, 800724c <_realloc_r+0x24>
 8007240:	f7ff fbe8 	bl	8006a14 <_free_r>
 8007244:	4625      	mov	r5, r4
 8007246:	4628      	mov	r0, r5
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	f000 f81b 	bl	8007286 <_malloc_usable_size_r>
 8007250:	4284      	cmp	r4, r0
 8007252:	4607      	mov	r7, r0
 8007254:	d802      	bhi.n	800725c <_realloc_r+0x34>
 8007256:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800725a:	d812      	bhi.n	8007282 <_realloc_r+0x5a>
 800725c:	4621      	mov	r1, r4
 800725e:	4640      	mov	r0, r8
 8007260:	f7ff fc44 	bl	8006aec <_malloc_r>
 8007264:	4605      	mov	r5, r0
 8007266:	2800      	cmp	r0, #0
 8007268:	d0ed      	beq.n	8007246 <_realloc_r+0x1e>
 800726a:	42bc      	cmp	r4, r7
 800726c:	4622      	mov	r2, r4
 800726e:	4631      	mov	r1, r6
 8007270:	bf28      	it	cs
 8007272:	463a      	movcs	r2, r7
 8007274:	f7ff fbc0 	bl	80069f8 <memcpy>
 8007278:	4631      	mov	r1, r6
 800727a:	4640      	mov	r0, r8
 800727c:	f7ff fbca 	bl	8006a14 <_free_r>
 8007280:	e7e1      	b.n	8007246 <_realloc_r+0x1e>
 8007282:	4635      	mov	r5, r6
 8007284:	e7df      	b.n	8007246 <_realloc_r+0x1e>

08007286 <_malloc_usable_size_r>:
 8007286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800728a:	1f18      	subs	r0, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	bfbc      	itt	lt
 8007290:	580b      	ldrlt	r3, [r1, r0]
 8007292:	18c0      	addlt	r0, r0, r3
 8007294:	4770      	bx	lr
	...

08007298 <_init>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	bf00      	nop
 800729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729e:	bc08      	pop	{r3}
 80072a0:	469e      	mov	lr, r3
 80072a2:	4770      	bx	lr

080072a4 <_fini>:
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a6:	bf00      	nop
 80072a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072aa:	bc08      	pop	{r3}
 80072ac:	469e      	mov	lr, r3
 80072ae:	4770      	bx	lr
