
RTOS_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de8  08006de8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df0  08006df0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000240c  20000060  08006e58  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000246c  08006e58  0002246c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2fa  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000361f  00000000  00000000  0003b3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  0003e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001197  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028931  00000000  00000000  00041227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189a9  00000000  00000000  00069b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc7ff  00000000  00000000  00082501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006230  00000000  00000000  0017ed00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00184f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c40 	.word	0x08006c40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006c40 	.word	0x08006c40

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
	...

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fb9a 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f868 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f936 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f904 	bl	80006f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004f0:	f000 f8b4 	bl	800065c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f003 fbbc 	bl	8003c70 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 80004f8:	481c      	ldr	r0, [pc, #112]	; (800056c <main+0x90>)
 80004fa:	f003 fcb0 	bl	8003e5e <osMutexNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <main+0x94>)
 8000502:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of customerQueue */
  customerQueueHandle = osMessageQueueNew (421, sizeof(uint16_t), &customerQueue_attributes);
 8000504:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <main+0x98>)
 8000506:	2102      	movs	r1, #2
 8000508:	f240 10a5 	movw	r0, #421	; 0x1a5
 800050c:	f003 fd2d 	bl	8003f6a <osMessageQueueNew>
 8000510:	4603      	mov	r3, r0
 8000512:	4a19      	ldr	r2, [pc, #100]	; (8000578 <main+0x9c>)
 8000514:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000516:	4a19      	ldr	r2, [pc, #100]	; (800057c <main+0xa0>)
 8000518:	2100      	movs	r1, #0
 800051a:	4819      	ldr	r0, [pc, #100]	; (8000580 <main+0xa4>)
 800051c:	f003 fbf2 	bl	8003d04 <osThreadNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <main+0xa8>)
 8000524:	6013      	str	r3, [r2, #0]

  /* creation of genCustomer */
  genCustomerHandle = osThreadNew(StartGenCustomerTask, NULL, &genCustomer_attributes);
 8000526:	4a18      	ldr	r2, [pc, #96]	; (8000588 <main+0xac>)
 8000528:	2100      	movs	r1, #0
 800052a:	4818      	ldr	r0, [pc, #96]	; (800058c <main+0xb0>)
 800052c:	f003 fbea 	bl	8003d04 <osThreadNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <main+0xb4>)
 8000534:	6013      	str	r3, [r2, #0]

  /* creation of teller01 */
  teller01Handle = osThreadNew(StartTeller01, NULL, &teller01_attributes);
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <main+0xb8>)
 8000538:	2100      	movs	r1, #0
 800053a:	4817      	ldr	r0, [pc, #92]	; (8000598 <main+0xbc>)
 800053c:	f003 fbe2 	bl	8003d04 <osThreadNew>
 8000540:	4603      	mov	r3, r0
 8000542:	4a16      	ldr	r2, [pc, #88]	; (800059c <main+0xc0>)
 8000544:	6013      	str	r3, [r2, #0]

  /* creation of teller02 */
  teller02Handle = osThreadNew(StartTeller02, NULL, &teller02_attributes);
 8000546:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <main+0xc4>)
 8000548:	2100      	movs	r1, #0
 800054a:	4816      	ldr	r0, [pc, #88]	; (80005a4 <main+0xc8>)
 800054c:	f003 fbda 	bl	8003d04 <osThreadNew>
 8000550:	4603      	mov	r3, r0
 8000552:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <main+0xcc>)
 8000554:	6013      	str	r3, [r2, #0]

  /* creation of teller03 */
  teller03Handle = osThreadNew(StartTeller03, NULL, &teller03_attributes);
 8000556:	4a15      	ldr	r2, [pc, #84]	; (80005ac <main+0xd0>)
 8000558:	2100      	movs	r1, #0
 800055a:	4815      	ldr	r0, [pc, #84]	; (80005b0 <main+0xd4>)
 800055c:	f003 fbd2 	bl	8003d04 <osThreadNew>
 8000560:	4603      	mov	r3, r0
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <main+0xd8>)
 8000564:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000566:	f003 fba7 	bl	8003cb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x8e>
 800056c:	08006d90 	.word	0x08006d90
 8000570:	20000168 	.word	0x20000168
 8000574:	08006d78 	.word	0x08006d78
 8000578:	20000164 	.word	0x20000164
 800057c:	08006cc4 	.word	0x08006cc4
 8000580:	080008a9 	.word	0x080008a9
 8000584:	20000150 	.word	0x20000150
 8000588:	08006ce8 	.word	0x08006ce8
 800058c:	080008b9 	.word	0x080008b9
 8000590:	20000154 	.word	0x20000154
 8000594:	08006d0c 	.word	0x08006d0c
 8000598:	080008c9 	.word	0x080008c9
 800059c:	20000158 	.word	0x20000158
 80005a0:	08006d30 	.word	0x08006d30
 80005a4:	080008d9 	.word	0x080008d9
 80005a8:	2000015c 	.word	0x2000015c
 80005ac:	08006d54 	.word	0x08006d54
 80005b0:	080008e9 	.word	0x080008e9
 80005b4:	20000160 	.word	0x20000160

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	; 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f006 fa50 	bl	8006a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005de:	f000 fe0d 	bl	80011fc <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f000 f998 	bl	800091c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f6:	2310      	movs	r3, #16
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fe:	2302      	movs	r3, #2
 8000600:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000606:	230a      	movs	r3, #10
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fe44 	bl	80012a8 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000626:	f000 f979 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2303      	movs	r3, #3
 8000630:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fa0c 	bl	8001a60 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064e:	f000 f965 	bl	800091c <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3758      	adds	r7, #88	; 0x58
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_TIM2_Init+0x98>)
 800067c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_TIM2_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_TIM2_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_TIM2_Init+0x98>)
 8000690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000694:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_TIM2_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_TIM2_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <MX_TIM2_Init+0x98>)
 80006a4:	f002 f8ee 	bl	8002884 <HAL_TIM_Base_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006ae:	f000 f935 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_TIM2_Init+0x98>)
 80006c0:	f002 faaa 	bl	8002c18 <HAL_TIM_ConfigClockSource>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006ca:	f000 f927 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <MX_TIM2_Init+0x98>)
 80006dc:	f002 fcc2 	bl	8003064 <HAL_TIMEx_MasterConfigSynchronization>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006e6:	f000 f919 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000007c 	.word	0x2000007c

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f002 fd38 	bl	80031b0 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f8e9 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000c8 	.word	0x200000c8
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b4b      	ldr	r3, [pc, #300]	; (800089c <MX_GPIO_Init+0x144>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a4a      	ldr	r2, [pc, #296]	; (800089c <MX_GPIO_Init+0x144>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b48      	ldr	r3, [pc, #288]	; (800089c <MX_GPIO_Init+0x144>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b45      	ldr	r3, [pc, #276]	; (800089c <MX_GPIO_Init+0x144>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a44      	ldr	r2, [pc, #272]	; (800089c <MX_GPIO_Init+0x144>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b42      	ldr	r3, [pc, #264]	; (800089c <MX_GPIO_Init+0x144>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b3f      	ldr	r3, [pc, #252]	; (800089c <MX_GPIO_Init+0x144>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a3e      	ldr	r2, [pc, #248]	; (800089c <MX_GPIO_Init+0x144>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b3c      	ldr	r3, [pc, #240]	; (800089c <MX_GPIO_Init+0x144>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b39      	ldr	r3, [pc, #228]	; (800089c <MX_GPIO_Init+0x144>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a38      	ldr	r2, [pc, #224]	; (800089c <MX_GPIO_Init+0x144>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b36      	ldr	r3, [pc, #216]	; (800089c <MX_GPIO_Init+0x144>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f000 fcea 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2120      	movs	r1, #32
 80007e0:	482f      	ldr	r0, [pc, #188]	; (80008a0 <MX_GPIO_Init+0x148>)
 80007e2:	f000 fce5 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4829      	ldr	r0, [pc, #164]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007fe:	f000 fb2d 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_SHLD_BUTTON_Pin S2_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S1_SHLD_BUTTON_Pin|S2_SHLD_BUTTON_Pin;
 8000802:	2312      	movs	r3, #18
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000806:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 fb1f 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081e:	2320      	movs	r3, #32
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000838:	f000 fb10 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S3_SHLD_BUTTON_Pin;
 800083c:	2301      	movs	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000840:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S3_SHLD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <MX_GPIO_Init+0x148>)
 8000852:	f000 fb03 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_D7_SEG7_Clock_Pin SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin;
 8000856:	f44f 7340 	mov.w	r3, #768	; 0x300
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 faf3 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8000876:	2320      	movs	r3, #32
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0x148>)
 800088e:	f000 fae5 	bl	8000e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	; 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000400 	.word	0x48000400
 80008a4:	48000800 	.word	0x48000800

080008a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f003 fab9 	bl	8003e28 <osDelay>
 80008b6:	e7fb      	b.n	80008b0 <StartDefaultTask+0x8>

080008b8 <StartGenCustomerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGenCustomerTask */
void StartGenCustomerTask(void *argument)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGenCustomerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f003 fab1 	bl	8003e28 <osDelay>
 80008c6:	e7fb      	b.n	80008c0 <StartGenCustomerTask+0x8>

080008c8 <StartTeller01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller01 */
void StartTeller01(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller01 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f003 faa9 	bl	8003e28 <osDelay>
 80008d6:	e7fb      	b.n	80008d0 <StartTeller01+0x8>

080008d8 <StartTeller02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller02 */
void StartTeller02(void *argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f003 faa1 	bl	8003e28 <osDelay>
 80008e6:	e7fb      	b.n	80008e0 <StartTeller02+0x8>

080008e8 <StartTeller03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller03 */
void StartTeller03(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f003 fa99 	bl	8003e28 <osDelay>
 80008f6:	e7fb      	b.n	80008f0 <StartTeller03+0x8>

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f000 f9a5 	bl	8000c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40001000 	.word	0x40001000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_MspInit+0x4c>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	; 0x60
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_MspInit+0x4c>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_MspInit+0x4c>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_MspInit+0x4c>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	210f      	movs	r1, #15
 8000962:	f06f 0001 	mvn.w	r0, #1
 8000966:	f000 fa4f 	bl	8000e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000988:	d10b      	bne.n	80009a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_TIM_Base_MspInit+0x38>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_TIM_Base_MspInit+0x38>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_TIM_Base_MspInit+0x38>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0ac      	sub	sp, #176	; 0xb0
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2288      	movs	r2, #136	; 0x88
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f006 f849 	bl	8006a6c <memset>
  if(huart->Instance==USART2)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <HAL_UART_MspInit+0xb0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d13b      	bne.n	8000a5c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fa8b 	bl	8001f0c <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009fc:	f7ff ff8e 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0xb4>)
 8000a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a04:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <HAL_UART_MspInit+0xb4>)
 8000a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_UART_MspInit+0xb4>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_UART_MspInit+0xb4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <HAL_UART_MspInit+0xb4>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_UART_MspInit+0xb4>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a30:	230c      	movs	r3, #12
 8000a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fa00 	bl	8000e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	37b0      	adds	r7, #176	; 0xb0
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a7a:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <HAL_InitTick+0xe0>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	4a33      	ldr	r2, [pc, #204]	; (8000b4c <HAL_InitTick+0xe0>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	6593      	str	r3, [r2, #88]	; 0x58
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <HAL_InitTick+0xe0>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	f003 0310 	and.w	r3, r3, #16
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a92:	f107 0210 	add.w	r2, r7, #16
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f9a3 	bl	8001de8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aa2:	6a3b      	ldr	r3, [r7, #32]
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d103      	bne.n	8000ab4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aac:	f001 f970 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8000ab0:	6378      	str	r0, [r7, #52]	; 0x34
 8000ab2:	e004      	b.n	8000abe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ab4:	f001 f96c 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac0:	4a23      	ldr	r2, [pc, #140]	; (8000b50 <HAL_InitTick+0xe4>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	0c9b      	lsrs	r3, r3, #18
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_InitTick+0xe8>)
 8000ace:	4a22      	ldr	r2, [pc, #136]	; (8000b58 <HAL_InitTick+0xec>)
 8000ad0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_InitTick+0xe8>)
 8000ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ada:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <HAL_InitTick+0xe8>)
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_InitTick+0xe8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_InitTick+0xe8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_InitTick+0xe8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000af2:	4818      	ldr	r0, [pc, #96]	; (8000b54 <HAL_InitTick+0xe8>)
 8000af4:	f001 fec6 	bl	8002884 <HAL_TIM_Base_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d11b      	bne.n	8000b3e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <HAL_InitTick+0xe8>)
 8000b08:	f001 ff14 	bl	8002934 <HAL_TIM_Base_Start_IT>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d111      	bne.n	8000b3e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b1a:	2036      	movs	r0, #54	; 0x36
 8000b1c:	f000 f990 	bl	8000e40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	d808      	bhi.n	8000b38 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b26:	2200      	movs	r2, #0
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	2036      	movs	r0, #54	; 0x36
 8000b2c:	f000 f96c 	bl	8000e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_InitTick+0xf0>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e002      	b.n	8000b3e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3738      	adds	r7, #56	; 0x38
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	2000016c 	.word	0x2000016c
 8000b58:	40001000 	.word	0x40001000
 8000b5c:	20000004 	.word	0x20000004

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <TIM6_DAC_IRQHandler+0x10>)
 8000b92:	f001 ff3f 	bl	8002a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000016c 	.word	0x2000016c

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ffea 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	; (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f005 ff99 	bl	8006b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fc71 	bl	80004dc <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c08:	08006df8 	.word	0x08006df8
  ldr r2, =_sbss
 8000c0c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c10:	2000246c 	.word	0x2000246c

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_Init+0x3c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <HAL_Init+0x3c>)
 8000c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f000 f8df 	bl	8000df2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c34:	200f      	movs	r0, #15
 8000c36:	f7ff ff19 	bl	8000a6c <HAL_InitTick>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	e001      	b.n	8000c4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c46:	f7ff fe6f 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40022000 	.word	0x40022000

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	200001b8 	.word	0x200001b8

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	200001b8 	.word	0x200001b8

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff4c 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1a:	f7ff ff61 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	6978      	ldr	r0, [r7, #20]
 8000e26:	f7ff ffb1 	bl	8000d8c <NVIC_EncodePriority>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff80 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff54 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	e17f      	b.n	800116c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 8171 	beq.w	8001166 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d005      	beq.n	8000e9c <HAL_GPIO_Init+0x40>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d130      	bne.n	8000efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	f003 0201 	and.w	r2, r3, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d118      	bne.n	8000f3c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f10:	2201      	movs	r2, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	f003 0201 	and.w	r2, r3, #1
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d017      	beq.n	8000f78 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d123      	bne.n	8000fcc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	6939      	ldr	r1, [r7, #16]
 8000fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0203 	and.w	r2, r3, #3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80ac 	beq.w	8001166 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b5f      	ldr	r3, [pc, #380]	; (800118c <HAL_GPIO_Init+0x330>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	4a5e      	ldr	r2, [pc, #376]	; (800118c <HAL_GPIO_Init+0x330>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6613      	str	r3, [r2, #96]	; 0x60
 800101a:	4b5c      	ldr	r3, [pc, #368]	; (800118c <HAL_GPIO_Init+0x330>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001026:	4a5a      	ldr	r2, [pc, #360]	; (8001190 <HAL_GPIO_Init+0x334>)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001050:	d025      	beq.n	800109e <HAL_GPIO_Init+0x242>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4f      	ldr	r2, [pc, #316]	; (8001194 <HAL_GPIO_Init+0x338>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d01f      	beq.n	800109a <HAL_GPIO_Init+0x23e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4e      	ldr	r2, [pc, #312]	; (8001198 <HAL_GPIO_Init+0x33c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x23a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4d      	ldr	r2, [pc, #308]	; (800119c <HAL_GPIO_Init+0x340>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x236>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_GPIO_Init+0x344>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x232>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4b      	ldr	r2, [pc, #300]	; (80011a4 <HAL_GPIO_Init+0x348>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x22e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4a      	ldr	r2, [pc, #296]	; (80011a8 <HAL_GPIO_Init+0x34c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x22a>
 8001082:	2306      	movs	r3, #6
 8001084:	e00c      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 8001086:	2307      	movs	r3, #7
 8001088:	e00a      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 800108a:	2305      	movs	r3, #5
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 800108e:	2304      	movs	r3, #4
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x244>
 800109e:	2300      	movs	r3, #0
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010b0:	4937      	ldr	r1, [pc, #220]	; (8001190 <HAL_GPIO_Init+0x334>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <HAL_GPIO_Init+0x350>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e2:	4a32      	ldr	r2, [pc, #200]	; (80011ac <HAL_GPIO_Init+0x350>)
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <HAL_GPIO_Init+0x350>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_GPIO_Init+0x350>)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_GPIO_Init+0x350>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001136:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <HAL_GPIO_Init+0x350>)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_GPIO_Init+0x350>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <HAL_GPIO_Init+0x350>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa22 f303 	lsr.w	r3, r2, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	f47f ae78 	bne.w	8000e6c <HAL_GPIO_Init+0x10>
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000
 8001194:	48000400 	.word	0x48000400
 8001198:	48000800 	.word	0x48000800
 800119c:	48000c00 	.word	0x48000c00
 80011a0:	48001000 	.word	0x48001000
 80011a4:	48001400 	.word	0x48001400
 80011a8:	48001800 	.word	0x48001800
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40007000 	.word	0x40007000

080011fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120a:	d130      	bne.n	800126e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001218:	d038      	beq.n	800128c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001222:	4a1e      	ldr	r2, [pc, #120]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2232      	movs	r2, #50	; 0x32
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001240:	e002      	b.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3b01      	subs	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001254:	d102      	bne.n	800125c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f2      	bne.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001268:	d110      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e00f      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127a:	d007      	beq.n	800128c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001284:	4a05      	ldr	r2, [pc, #20]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40007000 	.word	0x40007000
 80012a0:	20000000 	.word	0x20000000
 80012a4:	431bde83 	.word	0x431bde83

080012a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e3ca      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ba:	4b97      	ldr	r3, [pc, #604]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c4:	4b94      	ldr	r3, [pc, #592]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80e4 	beq.w	80014a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_RCC_OscConfig+0x4a>
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	f040 808b 	bne.w	8001400 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f040 8087 	bne.w	8001400 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f2:	4b89      	ldr	r3, [pc, #548]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x62>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e3a2      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1a      	ldr	r2, [r3, #32]
 800130e:	4b82      	ldr	r3, [pc, #520]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <HAL_RCC_OscConfig+0x7c>
 800131a:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001322:	e005      	b.n	8001330 <HAL_RCC_OscConfig+0x88>
 8001324:	4b7c      	ldr	r3, [pc, #496]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001330:	4293      	cmp	r3, r2
 8001332:	d223      	bcs.n	800137c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fd87 	bl	8001e4c <RCC_SetFlashLatencyFromMSIRange>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e383      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001348:	4b73      	ldr	r3, [pc, #460]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a72      	ldr	r2, [pc, #456]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b70      	ldr	r3, [pc, #448]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	496d      	ldr	r1, [pc, #436]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	4968      	ldr	r1, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
 800137a:	e025      	b.n	80013c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137c:	4b66      	ldr	r3, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a65      	ldr	r2, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b63      	ldr	r3, [pc, #396]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4960      	ldr	r1, [pc, #384]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	495b      	ldr	r1, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fd47 	bl	8001e4c <RCC_SetFlashLatencyFromMSIRange>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e343      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013c8:	f000 fc4a 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 80013cc:	4602      	mov	r2, r0
 80013ce:	4b52      	ldr	r3, [pc, #328]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	4950      	ldr	r1, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x274>)
 80013da:	5ccb      	ldrb	r3, [r1, r3]
 80013dc:	f003 031f 	and.w	r3, r3, #31
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <HAL_RCC_OscConfig+0x278>)
 80013e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013e8:	4b4e      	ldr	r3, [pc, #312]	; (8001524 <HAL_RCC_OscConfig+0x27c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fb3d 	bl	8000a6c <HAL_InitTick>
 80013f2:	4603      	mov	r3, r0
 80013f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d052      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	e327      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d032      	beq.n	800146e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a42      	ldr	r2, [pc, #264]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001414:	f7ff fc34 	bl	8000c80 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800141c:	f7ff fc30 	bl	8000c80 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e310      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a36      	ldr	r2, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4931      	ldr	r1, [pc, #196]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	492c      	ldr	r1, [pc, #176]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e01a      	b.n	80014a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a29      	ldr	r2, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800147a:	f7ff fc01 	bl	8000c80 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001482:	f7ff fbfd 	bl	8000c80 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e2dd      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001494:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x1da>
 80014a0:	e000      	b.n	80014a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d074      	beq.n	800159a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d005      	beq.n	80014c2 <HAL_RCC_OscConfig+0x21a>
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d10e      	bne.n	80014da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d10b      	bne.n	80014da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d064      	beq.n	8001598 <HAL_RCC_OscConfig+0x2f0>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d160      	bne.n	8001598 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e2ba      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x24a>
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e026      	b.n	8001540 <HAL_RCC_OscConfig+0x298>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014fa:	d115      	bne.n	8001528 <HAL_RCC_OscConfig+0x280>
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a05      	ldr	r2, [pc, #20]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001502:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a02      	ldr	r2, [pc, #8]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x298>
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	08006da0 	.word	0x08006da0
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004
 8001528:	4ba0      	ldr	r3, [pc, #640]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a9f      	ldr	r2, [pc, #636]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b9d      	ldr	r3, [pc, #628]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a9c      	ldr	r2, [pc, #624]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fb9a 	bl	8000c80 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fb96 	bl	8000c80 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e276      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	4b92      	ldr	r3, [pc, #584]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x2a8>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fb86 	bl	8000c80 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fb82 	bl	8000c80 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e262      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158a:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x2d0>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d060      	beq.n	8001668 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_OscConfig+0x310>
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d119      	bne.n	80015e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d116      	bne.n	80015e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b8:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x328>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e23f      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	4973      	ldr	r1, [pc, #460]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e4:	e040      	b.n	8001668 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d023      	beq.n	8001636 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ee:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb41 	bl	8000c80 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fb3d 	bl	8000c80 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e21d      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001614:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b62      	ldr	r3, [pc, #392]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	495f      	ldr	r1, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e018      	b.n	8001668 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a5c      	ldr	r2, [pc, #368]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800163c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fb1d 	bl	8000c80 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fb19 	bl	8000c80 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1f9      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d03c      	beq.n	80016ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167c:	4b4b      	ldr	r3, [pc, #300]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff faf8 	bl	8000c80 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff faf4 	bl	8000c80 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1d4      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ef      	beq.n	8001694 <HAL_RCC_OscConfig+0x3ec>
 80016b4:	e01b      	b.n	80016ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff fadb 	bl	8000c80 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fad7 	bl	8000c80 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1b7      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e0:	4b32      	ldr	r3, [pc, #200]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ef      	bne.n	80016ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80a6 	beq.w	8001848 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6593      	str	r3, [r2, #88]	; 0x58
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001724:	2301      	movs	r3, #1
 8001726:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d118      	bne.n	8001766 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a1d      	ldr	r2, [pc, #116]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001740:	f7ff fa9e 	bl	8000c80 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001748:	f7ff fa9a 	bl	8000c80 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e17a      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_RCC_OscConfig+0x4d8>
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177e:	e029      	b.n	80017d4 <HAL_RCC_OscConfig+0x52c>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d115      	bne.n	80017b4 <HAL_RCC_OscConfig+0x50c>
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a8:	e014      	b.n	80017d4 <HAL_RCC_OscConfig+0x52c>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40007000 	.word	0x40007000
 80017b4:	4b9c      	ldr	r3, [pc, #624]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	4a9b      	ldr	r2, [pc, #620]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c4:	4b98      	ldr	r3, [pc, #608]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a97      	ldr	r2, [pc, #604]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d016      	beq.n	800180a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa50 	bl	8000c80 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff fa4c 	bl	8000c80 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e12a      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fa:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80017fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ed      	beq.n	80017e4 <HAL_RCC_OscConfig+0x53c>
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fa39 	bl	8000c80 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fa35 	bl	8000c80 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e113      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001828:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ed      	bne.n	8001812 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001836:	7ffb      	ldrb	r3, [r7, #31]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b7a      	ldr	r3, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a79      	ldr	r2, [pc, #484]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80fe 	beq.w	8001a4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	2b02      	cmp	r3, #2
 8001858:	f040 80d0 	bne.w	80019fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800185c:	4b72      	ldr	r3, [pc, #456]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	429a      	cmp	r2, r3
 800186e:	d130      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	3b01      	subs	r3, #1
 800187c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d127      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d11f      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800189c:	2a07      	cmp	r2, #7
 800189e:	bf14      	ite	ne
 80018a0:	2201      	movne	r2, #1
 80018a2:	2200      	moveq	r2, #0
 80018a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d113      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d109      	bne.n	80018d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d06e      	beq.n	80019b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	d069      	beq.n	80019ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0ad      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018f4:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80018fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001900:	f7ff f9be 	bl	8000c80 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff f9ba 	bl	8000c80 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e09a      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001926:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	4b40      	ldr	r3, [pc, #256]	; (8001a2c <HAL_RCC_OscConfig+0x784>)
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001936:	3a01      	subs	r2, #1
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	4311      	orrs	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001940:	0212      	lsls	r2, r2, #8
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001948:	0852      	lsrs	r2, r2, #1
 800194a:	3a01      	subs	r2, #1
 800194c:	0552      	lsls	r2, r2, #21
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	3a01      	subs	r2, #1
 8001958:	0652      	lsls	r2, r2, #25
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001960:	0912      	lsrs	r2, r2, #4
 8001962:	0452      	lsls	r2, r2, #17
 8001964:	430a      	orrs	r2, r1
 8001966:	4930      	ldr	r1, [pc, #192]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001968:	4313      	orrs	r3, r2
 800196a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2d      	ldr	r2, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001976:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001982:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001984:	f7ff f97c 	bl	8000c80 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f978 	bl	8000c80 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e058      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019aa:	e050      	b.n	8001a4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e04f      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d148      	bne.n	8001a4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d4:	f7ff f954 	bl	8000c80 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f950 	bl	8000c80 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e030      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x734>
 80019fa:	e028      	b.n	8001a4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d023      	beq.n	8001a4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_RCC_OscConfig+0x780>)
 8001a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f937 	bl	8000c80 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a14:	e00c      	b.n	8001a30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff f933 	bl	8000c80 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d905      	bls.n	8001a30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e013      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x7b0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ec      	bne.n	8001a16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCC_OscConfig+0x7b0>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	4905      	ldr	r1, [pc, #20]	; (8001a58 <HAL_RCC_OscConfig+0x7b0>)
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x7b4>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
 8001a48:	e001      	b.n	8001a4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	feeefffc 	.word	0xfeeefffc

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0e7      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d910      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 0207 	bic.w	r2, r3, #7
 8001a8a:	4970      	ldr	r1, [pc, #448]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a92:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0cf      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d908      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4960      	ldr	r1, [pc, #384]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d04c      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d121      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0a6      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afe:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d115      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e09a      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b16:	4b4e      	ldr	r3, [pc, #312]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e08e      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e086      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4943      	ldr	r1, [pc, #268]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff f89a 	bl	8000c80 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f896 	bl	8000c80 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e06e      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d208      	bcs.n	8001ba6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	492b      	ldr	r1, [pc, #172]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d210      	bcs.n	8001bd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 0207 	bic.w	r2, r3, #7
 8001bbc:	4923      	ldr	r1, [pc, #140]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e036      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d008      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4918      	ldr	r1, [pc, #96]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4910      	ldr	r1, [pc, #64]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c14:	f000 f824 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	490b      	ldr	r1, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x1f4>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1fc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe ff17 	bl	8000a6c <HAL_InitTick>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c42:	7afb      	ldrb	r3, [r7, #11]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08006da0 	.word	0x08006da0
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c78:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x34>
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d121      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d11e      	bne.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e005      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cbc:	4a2b      	ldr	r2, [pc, #172]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10d      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d102      	bne.n	8001cde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cd8:	4b25      	ldr	r3, [pc, #148]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	e004      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ce6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d134      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d003      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0xac>
 8001d04:	e005      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d08:	617b      	str	r3, [r7, #20]
      break;
 8001d0a:	e005      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d0e:	617b      	str	r3, [r7, #20]
      break;
 8001d10:	e002      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	617b      	str	r3, [r7, #20]
      break;
 8001d16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	3301      	adds	r3, #1
 8001d24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	fb03 f202 	mul.w	r2, r3, r2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	0e5b      	lsrs	r3, r3, #25
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d58:	69bb      	ldr	r3, [r7, #24]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08006db8 	.word	0x08006db8
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	007a1200 	.word	0x007a1200

08001d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000

08001d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d94:	f7ff fff0 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4904      	ldr	r1, [pc, #16]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08006db0 	.word	0x08006db0

08001dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dc0:	f7ff ffda 	bl	8001d78 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0adb      	lsrs	r3, r3, #11
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08006db0 	.word	0x08006db0

08001de8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	220f      	movs	r2, #15
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_RCC_GetClockConfig+0x60>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0207 	and.w	r2, r3, #7
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40022000 	.word	0x40022000

08001e4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e64:	f7ff f9bc 	bl	80011e0 <HAL_PWREx_GetVoltageRange>
 8001e68:	6178      	str	r0, [r7, #20]
 8001e6a:	e014      	b.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e76:	6593      	str	r3, [r2, #88]	; 0x58
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e84:	f7ff f9ac 	bl	80011e0 <HAL_PWREx_GetVoltageRange>
 8001e88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9c:	d10b      	bne.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d919      	bls.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ea8:	d902      	bls.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eaa:	2302      	movs	r3, #2
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	e013      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e010      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d902      	bls.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e00a      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d102      	bne.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec8:	2302      	movs	r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e004      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b70      	cmp	r3, #112	; 0x70
 8001ed2:	d101      	bne.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 0207 	bic.w	r2, r3, #7
 8001ee0:	4909      	ldr	r1, [pc, #36]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40022000 	.word	0x40022000

08001f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f14:	2300      	movs	r3, #0
 8001f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d041      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f30:	d02a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f36:	d824      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f42:	d81e      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f4e:	e018      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f50:	4b86      	ldr	r3, [pc, #536]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a85      	ldr	r2, [pc, #532]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5c:	e015      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fabb 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6e:	e00c      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3320      	adds	r3, #32
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fba6 	bl	80026c8 <RCCEx_PLLSAI2_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f80:	e003      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	74fb      	strb	r3, [r7, #19]
      break;
 8001f86:	e000      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f90:	4b76      	ldr	r3, [pc, #472]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f9e:	4973      	ldr	r1, [pc, #460]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fa6:	e001      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d041      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fc0:	d02a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fc6:	d824      	bhi.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fcc:	d008      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fd2:	d81e      	bhi.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fdc:	d010      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fde:	e018      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fe0:	4b62      	ldr	r3, [pc, #392]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a61      	ldr	r2, [pc, #388]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fec:	e015      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fa73 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ffe:	e00c      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3320      	adds	r3, #32
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fb5e 	bl	80026c8 <RCCEx_PLLSAI2_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002010:	e003      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	74fb      	strb	r3, [r7, #19]
      break;
 8002016:	e000      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800201a:	7cfb      	ldrb	r3, [r7, #19]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10b      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002020:	4b52      	ldr	r3, [pc, #328]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800202e:	494f      	ldr	r1, [pc, #316]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002036:	e001      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a0 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800205e:	2300      	movs	r3, #0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002064:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	4a40      	ldr	r2, [pc, #256]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206e:	6593      	str	r3, [r2, #88]	; 0x58
 8002070:	4b3e      	ldr	r3, [pc, #248]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207c:	2301      	movs	r3, #1
 800207e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002080:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800208c:	f7fe fdf8 	bl	8000c80 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002092:	e009      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7fe fdf4 	bl	8000c80 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d902      	bls.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	74fb      	strb	r3, [r7, #19]
        break;
 80020a6:	e005      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ef      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d15c      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ba:	4b2c      	ldr	r3, [pc, #176]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01f      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d019      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	4a20      	ldr	r2, [pc, #128]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7fe fdb3 	bl	8000c80 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211c:	e00b      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fdaf 	bl	8000c80 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	; 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d902      	bls.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	74fb      	strb	r3, [r7, #19]
            break;
 8002134:	e006      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ec      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800215a:	4904      	ldr	r1, [pc, #16]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002162:	e009      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	74bb      	strb	r3, [r7, #18]
 8002168:	e006      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002178:	7c7b      	ldrb	r3, [r7, #17]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4b9e      	ldr	r3, [pc, #632]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a9d      	ldr	r2, [pc, #628]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002196:	4b98      	ldr	r3, [pc, #608]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	f023 0203 	bic.w	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	4994      	ldr	r1, [pc, #592]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00a      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021b8:	4b8f      	ldr	r3, [pc, #572]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021be:	f023 020c 	bic.w	r2, r3, #12
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	498c      	ldr	r1, [pc, #560]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021da:	4b87      	ldr	r3, [pc, #540]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4983      	ldr	r1, [pc, #524]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021fc:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	497b      	ldr	r1, [pc, #492]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800221e:	4b76      	ldr	r3, [pc, #472]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222c:	4972      	ldr	r1, [pc, #456]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002240:	4b6d      	ldr	r3, [pc, #436]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	496a      	ldr	r1, [pc, #424]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002262:	4b65      	ldr	r3, [pc, #404]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002268:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	4961      	ldr	r1, [pc, #388]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002284:	4b5c      	ldr	r3, [pc, #368]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	4959      	ldr	r1, [pc, #356]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022a6:	4b54      	ldr	r3, [pc, #336]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b4:	4950      	ldr	r1, [pc, #320]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022c8:	4b4b      	ldr	r3, [pc, #300]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	4948      	ldr	r1, [pc, #288]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	493f      	ldr	r1, [pc, #252]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d028      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800230c:	4b3a      	ldr	r3, [pc, #232]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231a:	4937      	ldr	r1, [pc, #220]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800232a:	d106      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232c:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002336:	60d3      	str	r3, [r2, #12]
 8002338:	e011      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800233e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002342:	d10c      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	2101      	movs	r1, #1
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f8c8 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8002350:	4603      	mov	r3, r0
 8002352:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d028      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	491f      	ldr	r1, [pc, #124]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002388:	d106      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	4a1a      	ldr	r2, [pc, #104]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002394:	60d3      	str	r3, [r2, #12]
 8002396:	e011      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f899 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b2:	7cfb      	ldrb	r3, [r7, #19]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02b      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e6:	d109      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a02      	ldr	r2, [pc, #8]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f2:	60d3      	str	r3, [r2, #12]
 80023f4:	e014      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002404:	d10c      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3304      	adds	r3, #4
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f867 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8002412:	4603      	mov	r3, r0
 8002414:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d02f      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800243a:	4928      	ldr	r1, [pc, #160]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800244a:	d10d      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	2102      	movs	r1, #2
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f844 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d014      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	74bb      	strb	r3, [r7, #18]
 8002466:	e011      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800246c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002470:	d10c      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3320      	adds	r3, #32
 8002476:	2102      	movs	r1, #2
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f925 	bl	80026c8 <RCCEx_PLLSAI2_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a6:	490d      	ldr	r1, [pc, #52]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024ca:	4904      	ldr	r1, [pc, #16]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000

080024e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ee:	4b75      	ldr	r3, [pc, #468]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d018      	beq.n	800252c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024fa:	4b72      	ldr	r3, [pc, #456]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d10d      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
       ||
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002512:	4b6c      	ldr	r3, [pc, #432]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
       ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d047      	beq.n	80025b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e044      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d018      	beq.n	8002566 <RCCEx_PLLSAI1_Config+0x86>
 8002534:	2b03      	cmp	r3, #3
 8002536:	d825      	bhi.n	8002584 <RCCEx_PLLSAI1_Config+0xa4>
 8002538:	2b01      	cmp	r3, #1
 800253a:	d002      	beq.n	8002542 <RCCEx_PLLSAI1_Config+0x62>
 800253c:	2b02      	cmp	r3, #2
 800253e:	d009      	beq.n	8002554 <RCCEx_PLLSAI1_Config+0x74>
 8002540:	e020      	b.n	8002584 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002542:	4b60      	ldr	r3, [pc, #384]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11d      	bne.n	800258a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002552:	e01a      	b.n	800258a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002554:	4b5b      	ldr	r3, [pc, #364]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d116      	bne.n	800258e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002564:	e013      	b.n	800258e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002566:	4b57      	ldr	r3, [pc, #348]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002572:	4b54      	ldr	r3, [pc, #336]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002582:	e006      	b.n	8002592 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      break;
 8002588:	e004      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002592:	bf00      	nop
    }

    if(status == HAL_OK)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800259a:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	430b      	orrs	r3, r1
 80025b0:	4944      	ldr	r1, [pc, #272]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d17d      	bne.n	80026b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025bc:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a40      	ldr	r2, [pc, #256]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c8:	f7fe fb5a 	bl	8000c80 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ce:	e009      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d0:	f7fe fb56 	bl	8000c80 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d902      	bls.n	80025e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	73fb      	strb	r3, [r7, #15]
        break;
 80025e2:	e005      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025e4:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ef      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d160      	bne.n	80026b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d111      	bne.n	8002620 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6892      	ldr	r2, [r2, #8]
 800260c:	0211      	lsls	r1, r2, #8
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	0912      	lsrs	r2, r2, #4
 8002614:	0452      	lsls	r2, r2, #17
 8002616:	430a      	orrs	r2, r1
 8002618:	492a      	ldr	r1, [pc, #168]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	610b      	str	r3, [r1, #16]
 800261e:	e027      	b.n	8002670 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d112      	bne.n	800264c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002626:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800262e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6892      	ldr	r2, [r2, #8]
 8002636:	0211      	lsls	r1, r2, #8
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6912      	ldr	r2, [r2, #16]
 800263c:	0852      	lsrs	r2, r2, #1
 800263e:	3a01      	subs	r2, #1
 8002640:	0552      	lsls	r2, r2, #21
 8002642:	430a      	orrs	r2, r1
 8002644:	491f      	ldr	r1, [pc, #124]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	610b      	str	r3, [r1, #16]
 800264a:	e011      	b.n	8002670 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002654:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6892      	ldr	r2, [r2, #8]
 800265c:	0211      	lsls	r1, r2, #8
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6952      	ldr	r2, [r2, #20]
 8002662:	0852      	lsrs	r2, r2, #1
 8002664:	3a01      	subs	r2, #1
 8002666:	0652      	lsls	r2, r2, #25
 8002668:	430a      	orrs	r2, r1
 800266a:	4916      	ldr	r1, [pc, #88]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800267a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fb00 	bl	8000c80 <HAL_GetTick>
 8002680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002682:	e009      	b.n	8002698 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002684:	f7fe fafc 	bl	8000c80 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d902      	bls.n	8002698 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	73fb      	strb	r3, [r7, #15]
          break;
 8002696:	e005      	b.n	80026a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ef      	beq.n	8002684 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	4904      	ldr	r1, [pc, #16]	; (80026c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000

080026c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026d6:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d018      	beq.n	8002714 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0203 	and.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d10d      	bne.n	800270e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
       ||
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026fa:	4b61      	ldr	r3, [pc, #388]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
       ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d047      	beq.n	800279e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	e044      	b.n	800279e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d018      	beq.n	800274e <RCCEx_PLLSAI2_Config+0x86>
 800271c:	2b03      	cmp	r3, #3
 800271e:	d825      	bhi.n	800276c <RCCEx_PLLSAI2_Config+0xa4>
 8002720:	2b01      	cmp	r3, #1
 8002722:	d002      	beq.n	800272a <RCCEx_PLLSAI2_Config+0x62>
 8002724:	2b02      	cmp	r3, #2
 8002726:	d009      	beq.n	800273c <RCCEx_PLLSAI2_Config+0x74>
 8002728:	e020      	b.n	800276c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800272a:	4b55      	ldr	r3, [pc, #340]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11d      	bne.n	8002772 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800273a:	e01a      	b.n	8002772 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d116      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274c:	e013      	b.n	8002776 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800274e:	4b4c      	ldr	r3, [pc, #304]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800275a:	4b49      	ldr	r3, [pc, #292]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800276a:	e006      	b.n	800277a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      break;
 8002770:	e004      	b.n	800277c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002772:	bf00      	nop
 8002774:	e002      	b.n	800277c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002776:	bf00      	nop
 8002778:	e000      	b.n	800277c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800277a:	bf00      	nop
    }

    if(status == HAL_OK)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002782:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6819      	ldr	r1, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	3b01      	subs	r3, #1
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	430b      	orrs	r3, r1
 8002798:	4939      	ldr	r1, [pc, #228]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279a:	4313      	orrs	r3, r2
 800279c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d167      	bne.n	8002874 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027a4:	4b36      	ldr	r3, [pc, #216]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a35      	ldr	r2, [pc, #212]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b0:	f7fe fa66 	bl	8000c80 <HAL_GetTick>
 80027b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027b6:	e009      	b.n	80027cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027b8:	f7fe fa62 	bl	8000c80 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d902      	bls.n	80027cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	73fb      	strb	r3, [r7, #15]
        break;
 80027ca:	e005      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ef      	bne.n	80027b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d14a      	bne.n	8002874 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027e4:	4b26      	ldr	r3, [pc, #152]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6892      	ldr	r2, [r2, #8]
 80027f4:	0211      	lsls	r1, r2, #8
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68d2      	ldr	r2, [r2, #12]
 80027fa:	0912      	lsrs	r2, r2, #4
 80027fc:	0452      	lsls	r2, r2, #17
 80027fe:	430a      	orrs	r2, r1
 8002800:	491f      	ldr	r1, [pc, #124]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	614b      	str	r3, [r1, #20]
 8002806:	e011      	b.n	800282c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002808:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002810:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6892      	ldr	r2, [r2, #8]
 8002818:	0211      	lsls	r1, r2, #8
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6912      	ldr	r2, [r2, #16]
 800281e:	0852      	lsrs	r2, r2, #1
 8002820:	3a01      	subs	r2, #1
 8002822:	0652      	lsls	r2, r2, #25
 8002824:	430a      	orrs	r2, r1
 8002826:	4916      	ldr	r1, [pc, #88]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fa22 	bl	8000c80 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800283e:	e009      	b.n	8002854 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002840:	f7fe fa1e 	bl	8000c80 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d902      	bls.n	8002854 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	73fb      	strb	r3, [r7, #15]
          break;
 8002852:	e005      	b.n	8002860 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ef      	beq.n	8002840 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	4904      	ldr	r1, [pc, #16]	; (8002880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002870:	4313      	orrs	r3, r2
 8002872:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e049      	b.n	800292a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe f864 	bl	8000978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4610      	mov	r0, r2
 80028c4:	f000 fa9a 	bl	8002dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d001      	beq.n	800294c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e04f      	b.n	80029ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01d      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x76>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002976:	d018      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x76>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <HAL_TIM_Base_Start_IT+0xc8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x76>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00e      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x76>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x76>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x76>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d115      	bne.n	80029d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b06      	cmp	r3, #6
 80029ba:	d015      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0xb4>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c2:	d011      	beq.n	80029e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d4:	e008      	b.n	80029e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e000      	b.n	80029ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40000800 	.word	0x40000800
 8002a04:	40000c00 	.word	0x40000c00
 8002a08:	40013400 	.word	0x40013400
 8002a0c:	40014000 	.word	0x40014000
 8002a10:	00010007 	.word	0x00010007

08002a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d020      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01b      	beq.n	8002a78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0202 	mvn.w	r2, #2
 8002a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f9ad 	bl	8002dbe <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f99f 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f9b0 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d020      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0204 	mvn.w	r2, #4
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f987 	bl	8002dbe <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f979 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f98a 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d020      	beq.n	8002b10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0208 	mvn.w	r2, #8
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f961 	bl	8002dbe <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f953 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f964 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d020      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01b      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0210 	mvn.w	r2, #16
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2208      	movs	r2, #8
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f93b 	bl	8002dbe <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f92d 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f93e 	bl	8002dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0201 	mvn.w	r2, #1
 8002b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fd febc 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 faf2 	bl	8003188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00c      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 faea 	bl	800319c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8fd 	bl	8002de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0220 	mvn.w	r2, #32
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fab2 	bl	8003174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e0b6      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0x18a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	d03e      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0xd8>
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c76:	f200 8087 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x170>
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	f000 8086 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x176>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c86:	d87f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x170>
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d01a      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xaa>
 8002c8c:	2b70      	cmp	r3, #112	; 0x70
 8002c8e:	d87b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x170>
 8002c90:	2b60      	cmp	r3, #96	; 0x60
 8002c92:	d050      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x11e>
 8002c94:	2b60      	cmp	r3, #96	; 0x60
 8002c96:	d877      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x170>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d03c      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xfe>
 8002c9c:	2b50      	cmp	r3, #80	; 0x50
 8002c9e:	d873      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x170>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d058      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x13e>
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d86f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x170>
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d064      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15e>
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d86b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x170>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d060      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15e>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d867      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x170>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15e>
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d05a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15e>
 8002cc0:	e062      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cd2:	f000 f9a7 	bl	8003024 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	609a      	str	r2, [r3, #8]
      break;
 8002cee:	e04f      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d00:	f000 f990 	bl	8003024 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e03c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f904 	bl	8002f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	; 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f95d 	bl	8002fee <TIM_ITRx_SetConfig>
      break;
 8002d34:	e02c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f923 	bl	8002f8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	; 0x60
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f94d 	bl	8002fee <TIM_ITRx_SetConfig>
      break;
 8002d54:	e01c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f8e4 	bl	8002f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f93d 	bl	8002fee <TIM_ITRx_SetConfig>
      break;
 8002d74:	e00c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f000 f934 	bl	8002fee <TIM_ITRx_SetConfig>
      break;
 8002d86:	e003      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e000      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a40      	ldr	r2, [pc, #256]	; (8002f10 <TIM_Base_SetConfig+0x114>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d013      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d00f      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3d      	ldr	r2, [pc, #244]	; (8002f14 <TIM_Base_SetConfig+0x118>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3c      	ldr	r2, [pc, #240]	; (8002f18 <TIM_Base_SetConfig+0x11c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <TIM_Base_SetConfig+0x120>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0x40>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a3a      	ldr	r2, [pc, #232]	; (8002f20 <TIM_Base_SetConfig+0x124>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d108      	bne.n	8002e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2f      	ldr	r2, [pc, #188]	; (8002f10 <TIM_Base_SetConfig+0x114>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d01f      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d01b      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <TIM_Base_SetConfig+0x118>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d017      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <TIM_Base_SetConfig+0x11c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a2a      	ldr	r2, [pc, #168]	; (8002f1c <TIM_Base_SetConfig+0x120>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00f      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <TIM_Base_SetConfig+0x124>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a28      	ldr	r2, [pc, #160]	; (8002f24 <TIM_Base_SetConfig+0x128>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <TIM_Base_SetConfig+0x12c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <TIM_Base_SetConfig+0x9a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <TIM_Base_SetConfig+0x130>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d108      	bne.n	8002ea8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <TIM_Base_SetConfig+0x114>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00f      	beq.n	8002ef4 <TIM_Base_SetConfig+0xf8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <TIM_Base_SetConfig+0x124>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_Base_SetConfig+0xf8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a11      	ldr	r2, [pc, #68]	; (8002f24 <TIM_Base_SetConfig+0x128>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_Base_SetConfig+0xf8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a10      	ldr	r2, [pc, #64]	; (8002f28 <TIM_Base_SetConfig+0x12c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_Base_SetConfig+0xf8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a0f      	ldr	r2, [pc, #60]	; (8002f2c <TIM_Base_SetConfig+0x130>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d103      	bne.n	8002efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	615a      	str	r2, [r3, #20]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	40000c00 	.word	0x40000c00
 8002f20:	40013400 	.word	0x40013400
 8002f24:	40014000 	.word	0x40014000
 8002f28:	40014400 	.word	0x40014400
 8002f2c:	40014800 	.word	0x40014800

08002f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f023 0201 	bic.w	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f023 030a 	bic.w	r3, r3, #10
 8002f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b087      	sub	sp, #28
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f023 0210 	bic.w	r2, r3, #16
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	031b      	lsls	r3, r3, #12
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	f043 0307 	orr.w	r3, r3, #7
 8003010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	609a      	str	r2, [r3, #8]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
 8003030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800303e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	021a      	lsls	r2, r3, #8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	431a      	orrs	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4313      	orrs	r3, r2
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003078:	2302      	movs	r3, #2
 800307a:	e068      	b.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a2e      	ldr	r2, [pc, #184]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d108      	bne.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01d      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d018      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1a      	ldr	r2, [pc, #104]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00e      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a18      	ldr	r2, [pc, #96]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d009      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d004      	beq.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d10c      	bne.n	800313c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	4313      	orrs	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40013400 	.word	0x40013400
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40014000 	.word	0x40014000

08003174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e040      	b.n	8003244 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fd fbee 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2224      	movs	r2, #36	; 0x24
 80031dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fae0 	bl	80037bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f825 	bl	800324c <UART_SetConfig>
 8003202:	4603      	mov	r3, r0
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e01b      	b.n	8003244 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800321a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800322a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fb5f 	bl	8003900 <UART_CheckIdleState>
 8003242:	4603      	mov	r3, r0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800324c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003250:	b08a      	sub	sp, #40	; 0x28
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4313      	orrs	r3, r2
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4ba4      	ldr	r3, [pc, #656]	; (800350c <UART_SetConfig+0x2c0>)
 800327c:	4013      	ands	r3, r2
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003284:	430b      	orrs	r3, r1
 8003286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a99      	ldr	r2, [pc, #612]	; (8003510 <UART_SetConfig+0x2c4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d004      	beq.n	80032b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	4313      	orrs	r3, r2
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a90      	ldr	r2, [pc, #576]	; (8003514 <UART_SetConfig+0x2c8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d126      	bne.n	8003324 <UART_SetConfig+0xd8>
 80032d6:	4b90      	ldr	r3, [pc, #576]	; (8003518 <UART_SetConfig+0x2cc>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d81b      	bhi.n	800331c <UART_SetConfig+0xd0>
 80032e4:	a201      	add	r2, pc, #4	; (adr r2, 80032ec <UART_SetConfig+0xa0>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	080032fd 	.word	0x080032fd
 80032f0:	0800330d 	.word	0x0800330d
 80032f4:	08003305 	.word	0x08003305
 80032f8:	08003315 	.word	0x08003315
 80032fc:	2301      	movs	r3, #1
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003302:	e116      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003304:	2302      	movs	r3, #2
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e112      	b.n	8003532 <UART_SetConfig+0x2e6>
 800330c:	2304      	movs	r3, #4
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003312:	e10e      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003314:	2308      	movs	r3, #8
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331a:	e10a      	b.n	8003532 <UART_SetConfig+0x2e6>
 800331c:	2310      	movs	r3, #16
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003322:	e106      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a7c      	ldr	r2, [pc, #496]	; (800351c <UART_SetConfig+0x2d0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d138      	bne.n	80033a0 <UART_SetConfig+0x154>
 800332e:	4b7a      	ldr	r3, [pc, #488]	; (8003518 <UART_SetConfig+0x2cc>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d82d      	bhi.n	8003398 <UART_SetConfig+0x14c>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0xf8>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003379 	.word	0x08003379
 8003348:	08003399 	.word	0x08003399
 800334c:	08003399 	.word	0x08003399
 8003350:	08003399 	.word	0x08003399
 8003354:	08003389 	.word	0x08003389
 8003358:	08003399 	.word	0x08003399
 800335c:	08003399 	.word	0x08003399
 8003360:	08003399 	.word	0x08003399
 8003364:	08003381 	.word	0x08003381
 8003368:	08003399 	.word	0x08003399
 800336c:	08003399 	.word	0x08003399
 8003370:	08003399 	.word	0x08003399
 8003374:	08003391 	.word	0x08003391
 8003378:	2300      	movs	r3, #0
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337e:	e0d8      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003380:	2302      	movs	r3, #2
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003386:	e0d4      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003388:	2304      	movs	r3, #4
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338e:	e0d0      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003390:	2308      	movs	r3, #8
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003396:	e0cc      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003398:	2310      	movs	r3, #16
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339e:	e0c8      	b.n	8003532 <UART_SetConfig+0x2e6>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a5e      	ldr	r2, [pc, #376]	; (8003520 <UART_SetConfig+0x2d4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d125      	bne.n	80033f6 <UART_SetConfig+0x1aa>
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <UART_SetConfig+0x2cc>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033b4:	2b30      	cmp	r3, #48	; 0x30
 80033b6:	d016      	beq.n	80033e6 <UART_SetConfig+0x19a>
 80033b8:	2b30      	cmp	r3, #48	; 0x30
 80033ba:	d818      	bhi.n	80033ee <UART_SetConfig+0x1a2>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d00a      	beq.n	80033d6 <UART_SetConfig+0x18a>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d814      	bhi.n	80033ee <UART_SetConfig+0x1a2>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <UART_SetConfig+0x182>
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d008      	beq.n	80033de <UART_SetConfig+0x192>
 80033cc:	e00f      	b.n	80033ee <UART_SetConfig+0x1a2>
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d4:	e0ad      	b.n	8003532 <UART_SetConfig+0x2e6>
 80033d6:	2302      	movs	r3, #2
 80033d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033dc:	e0a9      	b.n	8003532 <UART_SetConfig+0x2e6>
 80033de:	2304      	movs	r3, #4
 80033e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e4:	e0a5      	b.n	8003532 <UART_SetConfig+0x2e6>
 80033e6:	2308      	movs	r3, #8
 80033e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ec:	e0a1      	b.n	8003532 <UART_SetConfig+0x2e6>
 80033ee:	2310      	movs	r3, #16
 80033f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f4:	e09d      	b.n	8003532 <UART_SetConfig+0x2e6>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a4a      	ldr	r2, [pc, #296]	; (8003524 <UART_SetConfig+0x2d8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d125      	bne.n	800344c <UART_SetConfig+0x200>
 8003400:	4b45      	ldr	r3, [pc, #276]	; (8003518 <UART_SetConfig+0x2cc>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800340a:	2bc0      	cmp	r3, #192	; 0xc0
 800340c:	d016      	beq.n	800343c <UART_SetConfig+0x1f0>
 800340e:	2bc0      	cmp	r3, #192	; 0xc0
 8003410:	d818      	bhi.n	8003444 <UART_SetConfig+0x1f8>
 8003412:	2b80      	cmp	r3, #128	; 0x80
 8003414:	d00a      	beq.n	800342c <UART_SetConfig+0x1e0>
 8003416:	2b80      	cmp	r3, #128	; 0x80
 8003418:	d814      	bhi.n	8003444 <UART_SetConfig+0x1f8>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <UART_SetConfig+0x1d8>
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d008      	beq.n	8003434 <UART_SetConfig+0x1e8>
 8003422:	e00f      	b.n	8003444 <UART_SetConfig+0x1f8>
 8003424:	2300      	movs	r3, #0
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342a:	e082      	b.n	8003532 <UART_SetConfig+0x2e6>
 800342c:	2302      	movs	r3, #2
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003432:	e07e      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003434:	2304      	movs	r3, #4
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800343a:	e07a      	b.n	8003532 <UART_SetConfig+0x2e6>
 800343c:	2308      	movs	r3, #8
 800343e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003442:	e076      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003444:	2310      	movs	r3, #16
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344a:	e072      	b.n	8003532 <UART_SetConfig+0x2e6>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a35      	ldr	r2, [pc, #212]	; (8003528 <UART_SetConfig+0x2dc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d12a      	bne.n	80034ac <UART_SetConfig+0x260>
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <UART_SetConfig+0x2cc>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003464:	d01a      	beq.n	800349c <UART_SetConfig+0x250>
 8003466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800346a:	d81b      	bhi.n	80034a4 <UART_SetConfig+0x258>
 800346c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003470:	d00c      	beq.n	800348c <UART_SetConfig+0x240>
 8003472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003476:	d815      	bhi.n	80034a4 <UART_SetConfig+0x258>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <UART_SetConfig+0x238>
 800347c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003480:	d008      	beq.n	8003494 <UART_SetConfig+0x248>
 8003482:	e00f      	b.n	80034a4 <UART_SetConfig+0x258>
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348a:	e052      	b.n	8003532 <UART_SetConfig+0x2e6>
 800348c:	2302      	movs	r3, #2
 800348e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003492:	e04e      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003494:	2304      	movs	r3, #4
 8003496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349a:	e04a      	b.n	8003532 <UART_SetConfig+0x2e6>
 800349c:	2308      	movs	r3, #8
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a2:	e046      	b.n	8003532 <UART_SetConfig+0x2e6>
 80034a4:	2310      	movs	r3, #16
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034aa:	e042      	b.n	8003532 <UART_SetConfig+0x2e6>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a17      	ldr	r2, [pc, #92]	; (8003510 <UART_SetConfig+0x2c4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d13a      	bne.n	800352c <UART_SetConfig+0x2e0>
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <UART_SetConfig+0x2cc>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034c4:	d01a      	beq.n	80034fc <UART_SetConfig+0x2b0>
 80034c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ca:	d81b      	bhi.n	8003504 <UART_SetConfig+0x2b8>
 80034cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d0:	d00c      	beq.n	80034ec <UART_SetConfig+0x2a0>
 80034d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d6:	d815      	bhi.n	8003504 <UART_SetConfig+0x2b8>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <UART_SetConfig+0x298>
 80034dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e0:	d008      	beq.n	80034f4 <UART_SetConfig+0x2a8>
 80034e2:	e00f      	b.n	8003504 <UART_SetConfig+0x2b8>
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ea:	e022      	b.n	8003532 <UART_SetConfig+0x2e6>
 80034ec:	2302      	movs	r3, #2
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f2:	e01e      	b.n	8003532 <UART_SetConfig+0x2e6>
 80034f4:	2304      	movs	r3, #4
 80034f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fa:	e01a      	b.n	8003532 <UART_SetConfig+0x2e6>
 80034fc:	2308      	movs	r3, #8
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003502:	e016      	b.n	8003532 <UART_SetConfig+0x2e6>
 8003504:	2310      	movs	r3, #16
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350a:	e012      	b.n	8003532 <UART_SetConfig+0x2e6>
 800350c:	efff69f3 	.word	0xefff69f3
 8003510:	40008000 	.word	0x40008000
 8003514:	40013800 	.word	0x40013800
 8003518:	40021000 	.word	0x40021000
 800351c:	40004400 	.word	0x40004400
 8003520:	40004800 	.word	0x40004800
 8003524:	40004c00 	.word	0x40004c00
 8003528:	40005000 	.word	0x40005000
 800352c:	2310      	movs	r3, #16
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a9f      	ldr	r2, [pc, #636]	; (80037b4 <UART_SetConfig+0x568>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d17a      	bne.n	8003632 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800353c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003540:	2b08      	cmp	r3, #8
 8003542:	d824      	bhi.n	800358e <UART_SetConfig+0x342>
 8003544:	a201      	add	r2, pc, #4	; (adr r2, 800354c <UART_SetConfig+0x300>)
 8003546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354a:	bf00      	nop
 800354c:	08003571 	.word	0x08003571
 8003550:	0800358f 	.word	0x0800358f
 8003554:	08003579 	.word	0x08003579
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800357f 	.word	0x0800357f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	0800358f 	.word	0x0800358f
 8003568:	0800358f 	.word	0x0800358f
 800356c:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003570:	f7fe fc0e 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8003574:	61f8      	str	r0, [r7, #28]
        break;
 8003576:	e010      	b.n	800359a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b8f      	ldr	r3, [pc, #572]	; (80037b8 <UART_SetConfig+0x56c>)
 800357a:	61fb      	str	r3, [r7, #28]
        break;
 800357c:	e00d      	b.n	800359a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7fe fb6f 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8003582:	61f8      	str	r0, [r7, #28]
        break;
 8003584:	e009      	b.n	800359a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	61fb      	str	r3, [r7, #28]
        break;
 800358c:	e005      	b.n	800359a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003598:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80fb 	beq.w	8003798 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	4413      	add	r3, r2
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d305      	bcc.n	80035be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d903      	bls.n	80035c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035c4:	e0e8      	b.n	8003798 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2200      	movs	r2, #0
 80035ca:	461c      	mov	r4, r3
 80035cc:	4615      	mov	r5, r2
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	022b      	lsls	r3, r5, #8
 80035d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80035dc:	0222      	lsls	r2, r4, #8
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	6849      	ldr	r1, [r1, #4]
 80035e2:	0849      	lsrs	r1, r1, #1
 80035e4:	2000      	movs	r0, #0
 80035e6:	4688      	mov	r8, r1
 80035e8:	4681      	mov	r9, r0
 80035ea:	eb12 0a08 	adds.w	sl, r2, r8
 80035ee:	eb43 0b09 	adc.w	fp, r3, r9
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003600:	4650      	mov	r0, sl
 8003602:	4659      	mov	r1, fp
 8003604:	f7fc fde4 	bl	80001d0 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4613      	mov	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003616:	d308      	bcc.n	800362a <UART_SetConfig+0x3de>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800361e:	d204      	bcs.n	800362a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	e0b6      	b.n	8003798 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003630:	e0b2      	b.n	8003798 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363a:	d15e      	bne.n	80036fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800363c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003640:	2b08      	cmp	r3, #8
 8003642:	d828      	bhi.n	8003696 <UART_SetConfig+0x44a>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <UART_SetConfig+0x400>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	08003671 	.word	0x08003671
 8003650:	08003679 	.word	0x08003679
 8003654:	08003681 	.word	0x08003681
 8003658:	08003697 	.word	0x08003697
 800365c:	08003687 	.word	0x08003687
 8003660:	08003697 	.word	0x08003697
 8003664:	08003697 	.word	0x08003697
 8003668:	08003697 	.word	0x08003697
 800366c:	0800368f 	.word	0x0800368f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003670:	f7fe fb8e 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8003674:	61f8      	str	r0, [r7, #28]
        break;
 8003676:	e014      	b.n	80036a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003678:	f7fe fba0 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 800367c:	61f8      	str	r0, [r7, #28]
        break;
 800367e:	e010      	b.n	80036a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003680:	4b4d      	ldr	r3, [pc, #308]	; (80037b8 <UART_SetConfig+0x56c>)
 8003682:	61fb      	str	r3, [r7, #28]
        break;
 8003684:	e00d      	b.n	80036a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003686:	f7fe faeb 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 800368a:	61f8      	str	r0, [r7, #28]
        break;
 800368c:	e009      	b.n	80036a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003692:	61fb      	str	r3, [r7, #28]
        break;
 8003694:	e005      	b.n	80036a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d077      	beq.n	8003798 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005a      	lsls	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d916      	bls.n	80036f2 <UART_SetConfig+0x4a6>
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ca:	d212      	bcs.n	80036f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f023 030f 	bic.w	r3, r3, #15
 80036d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	8afb      	ldrh	r3, [r7, #22]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	8afa      	ldrh	r2, [r7, #22]
 80036ee:	60da      	str	r2, [r3, #12]
 80036f0:	e052      	b.n	8003798 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036f8:	e04e      	b.n	8003798 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d827      	bhi.n	8003752 <UART_SetConfig+0x506>
 8003702:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <UART_SetConfig+0x4bc>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	0800372d 	.word	0x0800372d
 800370c:	08003735 	.word	0x08003735
 8003710:	0800373d 	.word	0x0800373d
 8003714:	08003753 	.word	0x08003753
 8003718:	08003743 	.word	0x08003743
 800371c:	08003753 	.word	0x08003753
 8003720:	08003753 	.word	0x08003753
 8003724:	08003753 	.word	0x08003753
 8003728:	0800374b 	.word	0x0800374b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7fe fb30 	bl	8001d90 <HAL_RCC_GetPCLK1Freq>
 8003730:	61f8      	str	r0, [r7, #28]
        break;
 8003732:	e014      	b.n	800375e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003734:	f7fe fb42 	bl	8001dbc <HAL_RCC_GetPCLK2Freq>
 8003738:	61f8      	str	r0, [r7, #28]
        break;
 800373a:	e010      	b.n	800375e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800373c:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <UART_SetConfig+0x56c>)
 800373e:	61fb      	str	r3, [r7, #28]
        break;
 8003740:	e00d      	b.n	800375e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003742:	f7fe fa8d 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8003746:	61f8      	str	r0, [r7, #28]
        break;
 8003748:	e009      	b.n	800375e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374e:	61fb      	str	r3, [r7, #28]
        break;
 8003750:	e005      	b.n	800375e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800375c:	bf00      	nop
    }

    if (pclk != 0U)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d019      	beq.n	8003798 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	085a      	lsrs	r2, r3, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	441a      	add	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b0f      	cmp	r3, #15
 800377c:	d909      	bls.n	8003792 <UART_SetConfig+0x546>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d205      	bcs.n	8003792 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60da      	str	r2, [r3, #12]
 8003790:	e002      	b.n	8003798 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3728      	adds	r7, #40	; 0x28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037b2:	bf00      	nop
 80037b4:	40008000 	.word	0x40008000
 80037b8:	00f42400 	.word	0x00f42400

080037bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01a      	beq.n	80038d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ba:	d10a      	bne.n	80038d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]
  }
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b098      	sub	sp, #96	; 0x60
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003910:	f7fd f9b6 	bl	8000c80 <HAL_GetTick>
 8003914:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d12e      	bne.n	8003982 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392c:	2200      	movs	r2, #0
 800392e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f88c 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d021      	beq.n	8003982 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800394c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003952:	653b      	str	r3, [r7, #80]	; 0x50
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395c:	647b      	str	r3, [r7, #68]	; 0x44
 800395e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003962:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003964:	e841 2300 	strex	r3, r2, [r1]
 8003968:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e6      	bne.n	800393e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e062      	b.n	8003a48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d149      	bne.n	8003a24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003998:	2200      	movs	r2, #0
 800399a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f856 	bl	8003a50 <UART_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d03c      	beq.n	8003a24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	623b      	str	r3, [r7, #32]
   return(result);
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30
 80039ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e6      	bne.n	80039aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3308      	adds	r3, #8
 80039fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fc:	61fa      	str	r2, [r7, #28]
 80039fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	69b9      	ldr	r1, [r7, #24]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	617b      	str	r3, [r7, #20]
   return(result);
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e011      	b.n	8003a48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3758      	adds	r7, #88	; 0x58
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a60:	e049      	b.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a68:	d045      	beq.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fd f909 	bl	8000c80 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e048      	b.n	8003b16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d031      	beq.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d110      	bne.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f838 	bl	8003b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e029      	b.n	8003b16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad0:	d111      	bne.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f81e 	bl	8003b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e00f      	b.n	8003b16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4013      	ands	r3, r2
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	bf0c      	ite	eq
 8003b06:	2301      	moveq	r3, #1
 8003b08:	2300      	movne	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d0a6      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b095      	sub	sp, #84	; 0x54
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b44:	643b      	str	r3, [r7, #64]	; 0x40
 8003b46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e6      	bne.n	8003b26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3308      	adds	r3, #8
 8003b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e5      	bne.n	8003b58 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d118      	bne.n	8003bc6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f023 0310 	bic.w	r3, r3, #16
 8003ba8:	647b      	str	r3, [r7, #68]	; 0x44
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e6      	bne.n	8003b94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bda:	bf00      	nop
 8003bdc:	3754      	adds	r7, #84	; 0x54
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <__NVIC_SetPriority>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	db0a      	blt.n	8003c12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	490c      	ldr	r1, [pc, #48]	; (8003c34 <__NVIC_SetPriority+0x4c>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c10:	e00a      	b.n	8003c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4908      	ldr	r1, [pc, #32]	; (8003c38 <__NVIC_SetPriority+0x50>)
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	440b      	add	r3, r1
 8003c26:	761a      	strb	r2, [r3, #24]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000e100 	.word	0xe000e100
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <SysTick_Handler+0x1c>)
 8003c42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c44:	f001 fea8 	bl	8005998 <xTaskGetSchedulerState>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d001      	beq.n	8003c52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c4e:	f002 fc93 	bl	8006578 <xPortSysTickHandler>
  }
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000e010 	.word	0xe000e010

08003c5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c60:	2100      	movs	r1, #0
 8003c62:	f06f 0004 	mvn.w	r0, #4
 8003c66:	f7ff ffbf 	bl	8003be8 <__NVIC_SetPriority>
#endif
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c76:	f3ef 8305 	mrs	r3, IPSR
 8003c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c82:	f06f 0305 	mvn.w	r3, #5
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	e00c      	b.n	8003ca4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <osKernelInitialize+0x44>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <osKernelInitialize+0x44>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	e002      	b.n	8003ca4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ca4:	687b      	ldr	r3, [r7, #4]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	200001bc 	.word	0x200001bc

08003cb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cbe:	f3ef 8305 	mrs	r3, IPSR
 8003cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8003cc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003cca:	f06f 0305 	mvn.w	r3, #5
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	e010      	b.n	8003cf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <osKernelStart+0x48>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d109      	bne.n	8003cee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003cda:	f7ff ffbf 	bl	8003c5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <osKernelStart+0x48>)
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ce4:	f001 f9fa 	bl	80050dc <vTaskStartScheduler>
      stat = osOK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	e002      	b.n	8003cf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200001bc 	.word	0x200001bc

08003d04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08e      	sub	sp, #56	; 0x38
 8003d08:	af04      	add	r7, sp, #16
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d14:	f3ef 8305 	mrs	r3, IPSR
 8003d18:	617b      	str	r3, [r7, #20]
  return(result);
 8003d1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d17e      	bne.n	8003e1e <osThreadNew+0x11a>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d07b      	beq.n	8003e1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d2a:	2318      	movs	r3, #24
 8003d2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d045      	beq.n	8003dca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <osThreadNew+0x48>
        name = attr->name;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <osThreadNew+0x6e>
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b38      	cmp	r3, #56	; 0x38
 8003d64:	d805      	bhi.n	8003d72 <osThreadNew+0x6e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <osThreadNew+0x72>
        return (NULL);
 8003d72:	2300      	movs	r3, #0
 8003d74:	e054      	b.n	8003e20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00e      	beq.n	8003dac <osThreadNew+0xa8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2ba7      	cmp	r3, #167	; 0xa7
 8003d94:	d90a      	bls.n	8003dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <osThreadNew+0xa8>
        mem = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	e010      	b.n	8003dce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10c      	bne.n	8003dce <osThreadNew+0xca>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d108      	bne.n	8003dce <osThreadNew+0xca>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d104      	bne.n	8003dce <osThreadNew+0xca>
          mem = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	e001      	b.n	8003dce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d110      	bne.n	8003df6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ddc:	9202      	str	r2, [sp, #8]
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 ff8a 	bl	8004d04 <xTaskCreateStatic>
 8003df0:	4603      	mov	r3, r0
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	e013      	b.n	8003e1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d110      	bne.n	8003e1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	f107 0310 	add.w	r3, r7, #16
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 ffd5 	bl	8004dbe <xTaskCreate>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d001      	beq.n	8003e1e <osThreadNew+0x11a>
            hTask = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e1e:	693b      	ldr	r3, [r7, #16]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3728      	adds	r7, #40	; 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e30:	f3ef 8305 	mrs	r3, IPSR
 8003e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <osDelay+0x1c>
    stat = osErrorISR;
 8003e3c:	f06f 0305 	mvn.w	r3, #5
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	e007      	b.n	8003e54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f001 f910 	bl	8005074 <vTaskDelay>
    }
  }

  return (stat);
 8003e54:	68fb      	ldr	r3, [r7, #12]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b088      	sub	sp, #32
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e6a:	f3ef 8305 	mrs	r3, IPSR
 8003e6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e70:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d174      	bne.n	8003f60 <osMutexNew+0x102>
    if (attr != NULL) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	e001      	b.n	8003e88 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <osMutexNew+0x3a>
      rmtx = 1U;
 8003e92:	2301      	movs	r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e001      	b.n	8003e9c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d15c      	bne.n	8003f60 <osMutexNew+0x102>
      mem = -1;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eaa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d015      	beq.n	8003ede <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <osMutexNew+0x6a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b4f      	cmp	r3, #79	; 0x4f
 8003ec0:	d902      	bls.n	8003ec8 <osMutexNew+0x6a>
          mem = 1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e00c      	b.n	8003ee2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d108      	bne.n	8003ee2 <osMutexNew+0x84>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <osMutexNew+0x84>
            mem = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	e001      	b.n	8003ee2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d112      	bne.n	8003f0e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	2004      	movs	r0, #4
 8003ef6:	f000 fb02 	bl	80044fe <xQueueCreateMutexStatic>
 8003efa:	61f8      	str	r0, [r7, #28]
 8003efc:	e016      	b.n	8003f2c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4619      	mov	r1, r3
 8003f04:	2001      	movs	r0, #1
 8003f06:	f000 fafa 	bl	80044fe <xQueueCreateMutexStatic>
 8003f0a:	61f8      	str	r0, [r7, #28]
 8003f0c:	e00e      	b.n	8003f2c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003f1a:	2004      	movs	r0, #4
 8003f1c:	f000 fad7 	bl	80044ce <xQueueCreateMutex>
 8003f20:	61f8      	str	r0, [r7, #28]
 8003f22:	e003      	b.n	8003f2c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003f24:	2001      	movs	r0, #1
 8003f26:	f000 fad2 	bl	80044ce <xQueueCreateMutex>
 8003f2a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <osMutexNew+0xee>
        if (attr != NULL) {
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <osMutexNew+0xe2>
          name = attr->name;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e001      	b.n	8003f44 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003f44:	68f9      	ldr	r1, [r7, #12]
 8003f46:	69f8      	ldr	r0, [r7, #28]
 8003f48:	f000 fe7e 	bl	8004c48 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <osMutexNew+0x102>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003f60:	69fb      	ldr	r3, [r7, #28]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b08a      	sub	sp, #40	; 0x28
 8003f6e:	af02      	add	r7, sp, #8
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f7a:	f3ef 8305 	mrs	r3, IPSR
 8003f7e:	613b      	str	r3, [r7, #16]
  return(result);
 8003f80:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d15f      	bne.n	8004046 <osMessageQueueNew+0xdc>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d05c      	beq.n	8004046 <osMessageQueueNew+0xdc>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d059      	beq.n	8004046 <osMessageQueueNew+0xdc>
    mem = -1;
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d029      	beq.n	8003ff2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <osMessageQueueNew+0x62>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b4f      	cmp	r3, #79	; 0x4f
 8003fac:	d90e      	bls.n	8003fcc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d302      	bcc.n	8003fcc <osMessageQueueNew+0x62>
        mem = 1;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e014      	b.n	8003ff6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d110      	bne.n	8003ff6 <osMessageQueueNew+0x8c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10c      	bne.n	8003ff6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d108      	bne.n	8003ff6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <osMessageQueueNew+0x8c>
          mem = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	e001      	b.n	8003ff6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d10b      	bne.n	8004014 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2100      	movs	r1, #0
 8004006:	9100      	str	r1, [sp, #0]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f970 	bl	80042f0 <xQueueGenericCreateStatic>
 8004010:	61f8      	str	r0, [r7, #28]
 8004012:	e008      	b.n	8004026 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d105      	bne.n	8004026 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800401a:	2200      	movs	r2, #0
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f9de 	bl	80043e0 <xQueueGenericCreate>
 8004024:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00c      	beq.n	8004046 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <osMessageQueueNew+0xd0>
        name = attr->name;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e001      	b.n	800403e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800403e:	6979      	ldr	r1, [r7, #20]
 8004040:	69f8      	ldr	r0, [r7, #28]
 8004042:	f000 fe01 	bl	8004c48 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004046:	69fb      	ldr	r3, [r7, #28]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <vApplicationGetIdleTaskMemory+0x2c>)
 8004060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4a06      	ldr	r2, [pc, #24]	; (8004080 <vApplicationGetIdleTaskMemory+0x30>)
 8004066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	200001c0 	.word	0x200001c0
 8004080:	20000268 	.word	0x20000268

08004084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a07      	ldr	r2, [pc, #28]	; (80040b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a06      	ldr	r2, [pc, #24]	; (80040b4 <vApplicationGetTimerTaskMemory+0x30>)
 800409a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	20000468 	.word	0x20000468
 80040b4:	20000510 	.word	0x20000510

080040b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f103 0208 	add.w	r2, r3, #8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f103 0208 	add.w	r2, r3, #8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f103 0208 	add.w	r2, r3, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004170:	d103      	bne.n	800417a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e00c      	b.n	8004194 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3308      	adds	r3, #8
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e002      	b.n	8004188 <vListInsert+0x2e>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	429a      	cmp	r2, r3
 8004192:	d2f6      	bcs.n	8004182 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	601a      	str	r2, [r3, #0]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6892      	ldr	r2, [r2, #8]
 80041e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6852      	ldr	r2, [r2, #4]
 80041ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d103      	bne.n	8004200 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	1e5a      	subs	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800424a:	f002 f903 	bl	8006454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	441a      	add	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	3b01      	subs	r3, #1
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	441a      	add	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	22ff      	movs	r2, #255	; 0xff
 800428e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	22ff      	movs	r2, #255	; 0xff
 8004296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d114      	bne.n	80042ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01a      	beq.n	80042de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3310      	adds	r3, #16
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 f9af 	bl	8005610 <xTaskRemoveFromEventList>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d012      	beq.n	80042de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042b8:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <xQueueGenericReset+0xcc>)
 80042ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	e009      	b.n	80042de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3310      	adds	r3, #16
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fef2 	bl	80040b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3324      	adds	r3, #36	; 0x24
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff feed 	bl	80040b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042de:	f002 f8e9 	bl	80064b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042e2:	2301      	movs	r3, #1
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	e000ed04 	.word	0xe000ed04

080042f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08e      	sub	sp, #56	; 0x38
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <xQueueGenericCreateStatic+0x52>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <xQueueGenericCreateStatic+0x56>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <xQueueGenericCreateStatic+0x58>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	623b      	str	r3, [r7, #32]
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <xQueueGenericCreateStatic+0x7e>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <xQueueGenericCreateStatic+0x82>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <xQueueGenericCreateStatic+0x84>
 8004372:	2300      	movs	r3, #0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	61fb      	str	r3, [r7, #28]
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800438e:	2350      	movs	r3, #80	; 0x50
 8004390:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b50      	cmp	r3, #80	; 0x50
 8004396:	d00a      	beq.n	80043ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	61bb      	str	r3, [r7, #24]
}
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00d      	beq.n	80043d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4613      	mov	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f83f 	bl	8004454 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043d8:	4618      	mov	r0, r3
 80043da:	3730      	adds	r7, #48	; 0x30
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <xQueueGenericCreate+0x2a>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	613b      	str	r3, [r7, #16]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	3350      	adds	r3, #80	; 0x50
 8004418:	4618      	mov	r0, r3
 800441a:	f002 f93d 	bl	8006698 <pvPortMalloc>
 800441e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d011      	beq.n	800444a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	3350      	adds	r3, #80	; 0x50
 800442e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004438:	79fa      	ldrb	r2, [r7, #7]
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f805 	bl	8004454 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800444a:	69bb      	ldr	r3, [r7, #24]
	}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
 8004460:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d103      	bne.n	8004470 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e002      	b.n	8004476 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004482:	2101      	movs	r1, #1
 8004484:	69b8      	ldr	r0, [r7, #24]
 8004486:	f7ff fecb 	bl	8004220 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80044ba:	2300      	movs	r3, #0
 80044bc:	2200      	movs	r2, #0
 80044be:	2100      	movs	r1, #0
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f837 	bl	8004534 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	461a      	mov	r2, r3
 80044e4:	6939      	ldr	r1, [r7, #16]
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	f7ff ff7a 	bl	80043e0 <xQueueGenericCreate>
 80044ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff ffd3 	bl	800449a <prvInitialiseMutex>

		return xNewQueue;
 80044f4:	68fb      	ldr	r3, [r7, #12]
	}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b088      	sub	sp, #32
 8004502:	af02      	add	r7, sp, #8
 8004504:	4603      	mov	r3, r0
 8004506:	6039      	str	r1, [r7, #0]
 8004508:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800450a:	2301      	movs	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	6939      	ldr	r1, [r7, #16]
 800451c:	6978      	ldr	r0, [r7, #20]
 800451e:	f7ff fee7 	bl	80042f0 <xQueueGenericCreateStatic>
 8004522:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff ffb8 	bl	800449a <prvInitialiseMutex>

		return xNewQueue;
 800452a:	68fb      	ldr	r3, [r7, #12]
	}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08e      	sub	sp, #56	; 0x38
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004542:	2300      	movs	r3, #0
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <xQueueGenericSend+0x32>
	__asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d103      	bne.n	8004574 <xQueueGenericSend+0x40>
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <xQueueGenericSend+0x44>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <xQueueGenericSend+0x46>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <xQueueGenericSend+0x60>
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004590:	bf00      	nop
 8004592:	e7fe      	b.n	8004592 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d103      	bne.n	80045a2 <xQueueGenericSend+0x6e>
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <xQueueGenericSend+0x72>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <xQueueGenericSend+0x74>
 80045a6:	2300      	movs	r3, #0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	623b      	str	r3, [r7, #32]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045c2:	f001 f9e9 	bl	8005998 <xTaskGetSchedulerState>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d102      	bne.n	80045d2 <xQueueGenericSend+0x9e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <xQueueGenericSend+0xa2>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <xQueueGenericSend+0xa4>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10a      	bne.n	80045f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	61fb      	str	r3, [r7, #28]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045f2:	f001 ff2f 	bl	8006454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	429a      	cmp	r2, r3
 8004600:	d302      	bcc.n	8004608 <xQueueGenericSend+0xd4>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d129      	bne.n	800465c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800460e:	f000 fa0b 	bl	8004a28 <prvCopyDataToQueue>
 8004612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	3324      	adds	r3, #36	; 0x24
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fff5 	bl	8005610 <xTaskRemoveFromEventList>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800462c:	4b3f      	ldr	r3, [pc, #252]	; (800472c <xQueueGenericSend+0x1f8>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	e00a      	b.n	8004654 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <xQueueGenericSend+0x1f8>)
 8004646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004654:	f001 ff2e 	bl	80064b4 <vPortExitCritical>
				return pdPASS;
 8004658:	2301      	movs	r3, #1
 800465a:	e063      	b.n	8004724 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004662:	f001 ff27 	bl	80064b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004666:	2300      	movs	r3, #0
 8004668:	e05c      	b.n	8004724 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	4618      	mov	r0, r3
 8004676:	f001 f82f 	bl	80056d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800467a:	2301      	movs	r3, #1
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800467e:	f001 ff19 	bl	80064b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004682:	f000 fd9b 	bl	80051bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004686:	f001 fee5 	bl	8006454 <vPortEnterCritical>
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004690:	b25b      	sxtb	r3, r3
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004696:	d103      	bne.n	80046a0 <xQueueGenericSend+0x16c>
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ac:	d103      	bne.n	80046b6 <xQueueGenericSend+0x182>
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b6:	f001 fefd 	bl	80064b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ba:	1d3a      	adds	r2, r7, #4
 80046bc:	f107 0314 	add.w	r3, r7, #20
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 f81e 	bl	8005704 <xTaskCheckForTimeOut>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d124      	bne.n	8004718 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d0:	f000 faa2 	bl	8004c18 <prvIsQueueFull>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d018      	beq.n	800470c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	3310      	adds	r3, #16
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 ff44 	bl	8005570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ea:	f000 fa2d 	bl	8004b48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046ee:	f000 fd73 	bl	80051d8 <xTaskResumeAll>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f47f af7c 	bne.w	80045f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <xQueueGenericSend+0x1f8>)
 80046fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	e772      	b.n	80045f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800470c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800470e:	f000 fa1b 	bl	8004b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004712:	f000 fd61 	bl	80051d8 <xTaskResumeAll>
 8004716:	e76c      	b.n	80045f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800471a:	f000 fa15 	bl	8004b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800471e:	f000 fd5b 	bl	80051d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004724:	4618      	mov	r0, r3
 8004726:	3738      	adds	r7, #56	; 0x38
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	e000ed04 	.word	0xe000ed04

08004730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b090      	sub	sp, #64	; 0x40
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800475a:	bf00      	nop
 800475c:	e7fe      	b.n	800475c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d103      	bne.n	800476c <xQueueGenericSendFromISR+0x3c>
 8004764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <xQueueGenericSendFromISR+0x40>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <xQueueGenericSendFromISR+0x42>
 8004770:	2300      	movs	r3, #0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d103      	bne.n	800479a <xQueueGenericSendFromISR+0x6a>
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <xQueueGenericSendFromISR+0x6e>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <xQueueGenericSendFromISR+0x70>
 800479e:	2300      	movs	r3, #0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10a      	bne.n	80047ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	623b      	str	r3, [r7, #32]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ba:	f001 ff2d 	bl	8006618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047be:	f3ef 8211 	mrs	r2, BASEPRI
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	61fa      	str	r2, [r7, #28]
 80047d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <xQueueGenericSendFromISR+0xbc>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d12f      	bne.n	800484c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004802:	f000 f911 	bl	8004a28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004806:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480e:	d112      	bne.n	8004836 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d016      	beq.n	8004846 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	3324      	adds	r3, #36	; 0x24
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fef7 	bl	8005610 <xTaskRemoveFromEventList>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00e      	beq.n	8004846 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e007      	b.n	8004846 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004836:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800483a:	3301      	adds	r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	b25a      	sxtb	r2, r3
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004846:	2301      	movs	r3, #1
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800484a:	e001      	b.n	8004850 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800484c:	2300      	movs	r3, #0
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004852:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800485a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800485e:	4618      	mov	r0, r3
 8004860:	3740      	adds	r7, #64	; 0x40
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	; 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004874:	2300      	movs	r3, #0
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <xQueueReceive+0x30>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	623b      	str	r3, [r7, #32]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d103      	bne.n	80048a6 <xQueueReceive+0x3e>
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <xQueueReceive+0x42>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <xQueueReceive+0x44>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xQueueReceive+0x5e>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	61fb      	str	r3, [r7, #28]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048c6:	f001 f867 	bl	8005998 <xTaskGetSchedulerState>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <xQueueReceive+0x6e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <xQueueReceive+0x72>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <xQueueReceive+0x74>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xQueueReceive+0x8e>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	61bb      	str	r3, [r7, #24]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048f6:	f001 fdad 	bl	8006454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01f      	beq.n	8004946 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800490a:	f000 f8f7 	bl	8004afc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	1e5a      	subs	r2, r3, #1
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00f      	beq.n	800493e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	3310      	adds	r3, #16
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fe74 	bl	8005610 <xTaskRemoveFromEventList>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800492e:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <xQueueReceive+0x1bc>)
 8004930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800493e:	f001 fdb9 	bl	80064b4 <vPortExitCritical>
				return pdPASS;
 8004942:	2301      	movs	r3, #1
 8004944:	e069      	b.n	8004a1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800494c:	f001 fdb2 	bl	80064b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004950:	2300      	movs	r3, #0
 8004952:	e062      	b.n	8004a1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800495a:	f107 0310 	add.w	r3, r7, #16
 800495e:	4618      	mov	r0, r3
 8004960:	f000 feba 	bl	80056d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004968:	f001 fda4 	bl	80064b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800496c:	f000 fc26 	bl	80051bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004970:	f001 fd70 	bl	8006454 <vPortEnterCritical>
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800497a:	b25b      	sxtb	r3, r3
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004980:	d103      	bne.n	800498a <xQueueReceive+0x122>
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004990:	b25b      	sxtb	r3, r3
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004996:	d103      	bne.n	80049a0 <xQueueReceive+0x138>
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a0:	f001 fd88 	bl	80064b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a4:	1d3a      	adds	r2, r7, #4
 80049a6:	f107 0310 	add.w	r3, r7, #16
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fea9 	bl	8005704 <xTaskCheckForTimeOut>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d123      	bne.n	8004a00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ba:	f000 f917 	bl	8004bec <prvIsQueueEmpty>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d017      	beq.n	80049f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	3324      	adds	r3, #36	; 0x24
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fdcf 	bl	8005570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d4:	f000 f8b8 	bl	8004b48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049d8:	f000 fbfe 	bl	80051d8 <xTaskResumeAll>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d189      	bne.n	80048f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049e2:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <xQueueReceive+0x1bc>)
 80049e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	e780      	b.n	80048f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f6:	f000 f8a7 	bl	8004b48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049fa:	f000 fbed 	bl	80051d8 <xTaskResumeAll>
 80049fe:	e77a      	b.n	80048f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a02:	f000 f8a1 	bl	8004b48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a06:	f000 fbe7 	bl	80051d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0c:	f000 f8ee 	bl	8004bec <prvIsQueueEmpty>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f43f af6f 	beq.w	80048f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3730      	adds	r7, #48	; 0x30
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10d      	bne.n	8004a62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d14d      	bne.n	8004aea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 ffbe 	bl	80059d4 <xTaskPriorityDisinherit>
 8004a58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]
 8004a60:	e043      	b.n	8004aea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d119      	bne.n	8004a9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6858      	ldr	r0, [r3, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	461a      	mov	r2, r3
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	f002 f87e 	bl	8006b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	441a      	add	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d32b      	bcc.n	8004aea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	e026      	b.n	8004aea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68d8      	ldr	r0, [r3, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	f002 f864 	bl	8006b74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	425b      	negs	r3, r3
 8004ab6:	441a      	add	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d207      	bcs.n	8004ad8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	425b      	negs	r3, r3
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d105      	bne.n	8004aea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004af2:	697b      	ldr	r3, [r7, #20]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	441a      	add	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d303      	bcc.n	8004b30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68d9      	ldr	r1, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	461a      	mov	r2, r3
 8004b3a:	6838      	ldr	r0, [r7, #0]
 8004b3c:	f002 f81a 	bl	8006b74 <memcpy>
	}
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b50:	f001 fc80 	bl	8006454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b5c:	e011      	b.n	8004b82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d012      	beq.n	8004b8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3324      	adds	r3, #36	; 0x24
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fd50 	bl	8005610 <xTaskRemoveFromEventList>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b76:	f000 fe27 	bl	80057c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	dce9      	bgt.n	8004b5e <prvUnlockQueue+0x16>
 8004b8a:	e000      	b.n	8004b8e <prvUnlockQueue+0x46>
					break;
 8004b8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	22ff      	movs	r2, #255	; 0xff
 8004b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b96:	f001 fc8d 	bl	80064b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b9a:	f001 fc5b 	bl	8006454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ba4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ba6:	e011      	b.n	8004bcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d012      	beq.n	8004bd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3310      	adds	r3, #16
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fd2b 	bl	8005610 <xTaskRemoveFromEventList>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004bc0:	f000 fe02 	bl	80057c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004bc4:	7bbb      	ldrb	r3, [r7, #14]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	dce9      	bgt.n	8004ba8 <prvUnlockQueue+0x60>
 8004bd4:	e000      	b.n	8004bd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	22ff      	movs	r2, #255	; 0xff
 8004bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004be0:	f001 fc68 	bl	80064b4 <vPortExitCritical>
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bf4:	f001 fc2e 	bl	8006454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c00:	2301      	movs	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e001      	b.n	8004c0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c0a:	f001 fc53 	bl	80064b4 <vPortExitCritical>

	return xReturn;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c20:	f001 fc18 	bl	8006454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d102      	bne.n	8004c36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e001      	b.n	8004c3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c3a:	f001 fc3b 	bl	80064b4 <vPortExitCritical>

	return xReturn;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e014      	b.n	8004c82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c58:	4a0f      	ldr	r2, [pc, #60]	; (8004c98 <vQueueAddToRegistry+0x50>)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c64:	490c      	ldr	r1, [pc, #48]	; (8004c98 <vQueueAddToRegistry+0x50>)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c6e:	4a0a      	ldr	r2, [pc, #40]	; (8004c98 <vQueueAddToRegistry+0x50>)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c7a:	e006      	b.n	8004c8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b07      	cmp	r3, #7
 8004c86:	d9e7      	bls.n	8004c58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000910 	.word	0x20000910

08004c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cac:	f001 fbd2 	bl	8006454 <vPortEnterCritical>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cb6:	b25b      	sxtb	r3, r3
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbc:	d103      	bne.n	8004cc6 <vQueueWaitForMessageRestricted+0x2a>
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ccc:	b25b      	sxtb	r3, r3
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd2:	d103      	bne.n	8004cdc <vQueueWaitForMessageRestricted+0x40>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cdc:	f001 fbea 	bl	80064b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3324      	adds	r3, #36	; 0x24
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fc61 	bl	80055b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cf6:	6978      	ldr	r0, [r7, #20]
 8004cf8:	f7ff ff26 	bl	8004b48 <prvUnlockQueue>
	}
 8004cfc:	bf00      	nop
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08e      	sub	sp, #56	; 0x38
 8004d08:	af04      	add	r7, sp, #16
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	623b      	str	r3, [r7, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <xTaskCreateStatic+0x46>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	61fb      	str	r3, [r7, #28]
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d4a:	23a8      	movs	r3, #168	; 0xa8
 8004d4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2ba8      	cmp	r3, #168	; 0xa8
 8004d52:	d00a      	beq.n	8004d6a <xTaskCreateStatic+0x66>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	61bb      	str	r3, [r7, #24]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01e      	beq.n	8004db0 <xTaskCreateStatic+0xac>
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01b      	beq.n	8004db0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	9303      	str	r3, [sp, #12]
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	9302      	str	r3, [sp, #8]
 8004d92:	f107 0314 	add.w	r3, r7, #20
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 f850 	bl	8004e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004daa:	f000 f8f3 	bl	8004f94 <prvAddNewTaskToReadyList>
 8004dae:	e001      	b.n	8004db4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004db4:	697b      	ldr	r3, [r7, #20]
	}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3728      	adds	r7, #40	; 0x28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b08c      	sub	sp, #48	; 0x30
 8004dc2:	af04      	add	r7, sp, #16
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 fc60 	bl	8006698 <pvPortMalloc>
 8004dd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00e      	beq.n	8004dfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004de0:	20a8      	movs	r0, #168	; 0xa8
 8004de2:	f001 fc59 	bl	8006698 <pvPortMalloc>
 8004de6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
 8004df4:	e005      	b.n	8004e02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004df6:	6978      	ldr	r0, [r7, #20]
 8004df8:	f001 fd1a 	bl	8006830 <vPortFree>
 8004dfc:	e001      	b.n	8004e02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d017      	beq.n	8004e38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e10:	88fa      	ldrh	r2, [r7, #6]
 8004e12:	2300      	movs	r3, #0
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	9302      	str	r3, [sp, #8]
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f80e 	bl	8004e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e2c:	69f8      	ldr	r0, [r7, #28]
 8004e2e:	f000 f8b1 	bl	8004f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	e002      	b.n	8004e3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e3e:	69bb      	ldr	r3, [r7, #24]
	}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3720      	adds	r7, #32
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	461a      	mov	r2, r3
 8004e60:	21a5      	movs	r1, #165	; 0xa5
 8004e62:	f001 fe03 	bl	8006a6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e70:	3b01      	subs	r3, #1
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	617b      	str	r3, [r7, #20]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d01f      	beq.n	8004ee6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	e012      	b.n	8004ed2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	7819      	ldrb	r1, [r3, #0]
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	3334      	adds	r3, #52	; 0x34
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d006      	beq.n	8004eda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b0f      	cmp	r3, #15
 8004ed6:	d9e9      	bls.n	8004eac <prvInitialiseNewTask+0x64>
 8004ed8:	e000      	b.n	8004edc <prvInitialiseNewTask+0x94>
			{
				break;
 8004eda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee4:	e003      	b.n	8004eee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	2b37      	cmp	r3, #55	; 0x37
 8004ef2:	d901      	bls.n	8004ef8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ef4:	2337      	movs	r3, #55	; 0x37
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004efc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	2200      	movs	r2, #0
 8004f08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff f8f2 	bl	80040f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	3318      	adds	r3, #24
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff f8ed 	bl	80040f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	3354      	adds	r3, #84	; 0x54
 8004f48:	224c      	movs	r2, #76	; 0x4c
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f001 fd8d 	bl	8006a6c <memset>
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <prvInitialiseNewTask+0x140>)
 8004f56:	659a      	str	r2, [r3, #88]	; 0x58
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	4a0c      	ldr	r2, [pc, #48]	; (8004f8c <prvInitialiseNewTask+0x144>)
 8004f5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	4a0b      	ldr	r2, [pc, #44]	; (8004f90 <prvInitialiseNewTask+0x148>)
 8004f62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	68f9      	ldr	r1, [r7, #12]
 8004f68:	69b8      	ldr	r0, [r7, #24]
 8004f6a:	f001 f943 	bl	80061f4 <pxPortInitialiseStack>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f80:	bf00      	nop
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	2000232c 	.word	0x2000232c
 8004f8c:	20002394 	.word	0x20002394
 8004f90:	200023fc 	.word	0x200023fc

08004f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f9c:	f001 fa5a 	bl	8006454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fa0:	4b2d      	ldr	r3, [pc, #180]	; (8005058 <prvAddNewTaskToReadyList+0xc4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	4a2c      	ldr	r2, [pc, #176]	; (8005058 <prvAddNewTaskToReadyList+0xc4>)
 8004fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004faa:	4b2c      	ldr	r3, [pc, #176]	; (800505c <prvAddNewTaskToReadyList+0xc8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fb2:	4a2a      	ldr	r2, [pc, #168]	; (800505c <prvAddNewTaskToReadyList+0xc8>)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fb8:	4b27      	ldr	r3, [pc, #156]	; (8005058 <prvAddNewTaskToReadyList+0xc4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d110      	bne.n	8004fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fc0:	f000 fc28 	bl	8005814 <prvInitialiseTaskLists>
 8004fc4:	e00d      	b.n	8004fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fc6:	4b26      	ldr	r3, [pc, #152]	; (8005060 <prvAddNewTaskToReadyList+0xcc>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fce:	4b23      	ldr	r3, [pc, #140]	; (800505c <prvAddNewTaskToReadyList+0xc8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d802      	bhi.n	8004fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	; (800505c <prvAddNewTaskToReadyList+0xc8>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fe2:	4b20      	ldr	r3, [pc, #128]	; (8005064 <prvAddNewTaskToReadyList+0xd0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <prvAddNewTaskToReadyList+0xd0>)
 8004fea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <prvAddNewTaskToReadyList+0xd0>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <prvAddNewTaskToReadyList+0xd4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d903      	bls.n	8005008 <prvAddNewTaskToReadyList+0x74>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	4a18      	ldr	r2, [pc, #96]	; (8005068 <prvAddNewTaskToReadyList+0xd4>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a15      	ldr	r2, [pc, #84]	; (800506c <prvAddNewTaskToReadyList+0xd8>)
 8005016:	441a      	add	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7ff f877 	bl	8004112 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005024:	f001 fa46 	bl	80064b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005028:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <prvAddNewTaskToReadyList+0xcc>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00e      	beq.n	800504e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <prvAddNewTaskToReadyList+0xc8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	429a      	cmp	r2, r3
 800503c:	d207      	bcs.n	800504e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <prvAddNewTaskToReadyList+0xdc>)
 8005040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000e24 	.word	0x20000e24
 800505c:	20000950 	.word	0x20000950
 8005060:	20000e30 	.word	0x20000e30
 8005064:	20000e40 	.word	0x20000e40
 8005068:	20000e2c 	.word	0x20000e2c
 800506c:	20000954 	.word	0x20000954
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d017      	beq.n	80050b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005086:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <vTaskDelay+0x60>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <vTaskDelay+0x30>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60bb      	str	r3, [r7, #8]
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050a4:	f000 f88a 	bl	80051bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050a8:	2100      	movs	r1, #0
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fd00 	bl	8005ab0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050b0:	f000 f892 	bl	80051d8 <xTaskResumeAll>
 80050b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d107      	bne.n	80050cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <vTaskDelay+0x64>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000e4c 	.word	0x20000e4c
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050ea:	463a      	mov	r2, r7
 80050ec:	1d39      	adds	r1, r7, #4
 80050ee:	f107 0308 	add.w	r3, r7, #8
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe ffac 	bl	8004050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	9202      	str	r2, [sp, #8]
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	2300      	movs	r3, #0
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	2300      	movs	r3, #0
 8005108:	460a      	mov	r2, r1
 800510a:	4924      	ldr	r1, [pc, #144]	; (800519c <vTaskStartScheduler+0xc0>)
 800510c:	4824      	ldr	r0, [pc, #144]	; (80051a0 <vTaskStartScheduler+0xc4>)
 800510e:	f7ff fdf9 	bl	8004d04 <xTaskCreateStatic>
 8005112:	4603      	mov	r3, r0
 8005114:	4a23      	ldr	r2, [pc, #140]	; (80051a4 <vTaskStartScheduler+0xc8>)
 8005116:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005118:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <vTaskStartScheduler+0xc8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005120:	2301      	movs	r3, #1
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e001      	b.n	800512a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d102      	bne.n	8005136 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005130:	f000 fd12 	bl	8005b58 <xTimerCreateTimerTask>
 8005134:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d11b      	bne.n	8005174 <vTaskStartScheduler+0x98>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	613b      	str	r3, [r7, #16]
}
 800514e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005150:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <vTaskStartScheduler+0xcc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3354      	adds	r3, #84	; 0x54
 8005156:	4a15      	ldr	r2, [pc, #84]	; (80051ac <vTaskStartScheduler+0xd0>)
 8005158:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <vTaskStartScheduler+0xd4>)
 800515c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005160:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005162:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <vTaskStartScheduler+0xd8>)
 8005164:	2201      	movs	r2, #1
 8005166:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005168:	4b13      	ldr	r3, [pc, #76]	; (80051b8 <vTaskStartScheduler+0xdc>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800516e:	f001 f8cf 	bl	8006310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005172:	e00e      	b.n	8005192 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800517a:	d10a      	bne.n	8005192 <vTaskStartScheduler+0xb6>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	60fb      	str	r3, [r7, #12]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <vTaskStartScheduler+0xb4>
}
 8005192:	bf00      	nop
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	08006cac 	.word	0x08006cac
 80051a0:	080057e1 	.word	0x080057e1
 80051a4:	20000e48 	.word	0x20000e48
 80051a8:	20000950 	.word	0x20000950
 80051ac:	2000005c 	.word	0x2000005c
 80051b0:	20000e44 	.word	0x20000e44
 80051b4:	20000e30 	.word	0x20000e30
 80051b8:	20000e28 	.word	0x20000e28

080051bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <vTaskSuspendAll+0x18>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3301      	adds	r3, #1
 80051c6:	4a03      	ldr	r2, [pc, #12]	; (80051d4 <vTaskSuspendAll+0x18>)
 80051c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051ca:	bf00      	nop
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	20000e4c 	.word	0x20000e4c

080051d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051e6:	4b42      	ldr	r3, [pc, #264]	; (80052f0 <xTaskResumeAll+0x118>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <xTaskResumeAll+0x2c>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	603b      	str	r3, [r7, #0]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005204:	f001 f926 	bl	8006454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005208:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <xTaskResumeAll+0x118>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3b01      	subs	r3, #1
 800520e:	4a38      	ldr	r2, [pc, #224]	; (80052f0 <xTaskResumeAll+0x118>)
 8005210:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005212:	4b37      	ldr	r3, [pc, #220]	; (80052f0 <xTaskResumeAll+0x118>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d162      	bne.n	80052e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800521a:	4b36      	ldr	r3, [pc, #216]	; (80052f4 <xTaskResumeAll+0x11c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d05e      	beq.n	80052e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005222:	e02f      	b.n	8005284 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005224:	4b34      	ldr	r3, [pc, #208]	; (80052f8 <xTaskResumeAll+0x120>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3318      	adds	r3, #24
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe ffcb 	bl	80041cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3304      	adds	r3, #4
 800523a:	4618      	mov	r0, r3
 800523c:	f7fe ffc6 	bl	80041cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005244:	4b2d      	ldr	r3, [pc, #180]	; (80052fc <xTaskResumeAll+0x124>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d903      	bls.n	8005254 <xTaskResumeAll+0x7c>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	4a2a      	ldr	r2, [pc, #168]	; (80052fc <xTaskResumeAll+0x124>)
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4a27      	ldr	r2, [pc, #156]	; (8005300 <xTaskResumeAll+0x128>)
 8005262:	441a      	add	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3304      	adds	r3, #4
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f7fe ff51 	bl	8004112 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4b23      	ldr	r3, [pc, #140]	; (8005304 <xTaskResumeAll+0x12c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800527e:	4b22      	ldr	r3, [pc, #136]	; (8005308 <xTaskResumeAll+0x130>)
 8005280:	2201      	movs	r2, #1
 8005282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005284:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <xTaskResumeAll+0x120>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1cb      	bne.n	8005224 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005292:	f000 fb61 	bl	8005958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <xTaskResumeAll+0x134>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d010      	beq.n	80052c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052a2:	f000 f847 	bl	8005334 <xTaskIncrementTick>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052ac:	4b16      	ldr	r3, [pc, #88]	; (8005308 <xTaskResumeAll+0x130>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f1      	bne.n	80052a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <xTaskResumeAll+0x134>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052c4:	4b10      	ldr	r3, [pc, #64]	; (8005308 <xTaskResumeAll+0x130>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052cc:	2301      	movs	r3, #1
 80052ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <xTaskResumeAll+0x138>)
 80052d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052e0:	f001 f8e8 	bl	80064b4 <vPortExitCritical>

	return xAlreadyYielded;
 80052e4:	68bb      	ldr	r3, [r7, #8]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000e4c 	.word	0x20000e4c
 80052f4:	20000e24 	.word	0x20000e24
 80052f8:	20000de4 	.word	0x20000de4
 80052fc:	20000e2c 	.word	0x20000e2c
 8005300:	20000954 	.word	0x20000954
 8005304:	20000950 	.word	0x20000950
 8005308:	20000e38 	.word	0x20000e38
 800530c:	20000e34 	.word	0x20000e34
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <xTaskGetTickCount+0x1c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005320:	687b      	ldr	r3, [r7, #4]
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000e28 	.word	0x20000e28

08005334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800533a:	2300      	movs	r3, #0
 800533c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800533e:	4b4f      	ldr	r3, [pc, #316]	; (800547c <xTaskIncrementTick+0x148>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 808f 	bne.w	8005466 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005348:	4b4d      	ldr	r3, [pc, #308]	; (8005480 <xTaskIncrementTick+0x14c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005350:	4a4b      	ldr	r2, [pc, #300]	; (8005480 <xTaskIncrementTick+0x14c>)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d120      	bne.n	800539e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800535c:	4b49      	ldr	r3, [pc, #292]	; (8005484 <xTaskIncrementTick+0x150>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <xTaskIncrementTick+0x48>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	603b      	str	r3, [r7, #0]
}
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <xTaskIncrementTick+0x46>
 800537c:	4b41      	ldr	r3, [pc, #260]	; (8005484 <xTaskIncrementTick+0x150>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	4b41      	ldr	r3, [pc, #260]	; (8005488 <xTaskIncrementTick+0x154>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a3f      	ldr	r2, [pc, #252]	; (8005484 <xTaskIncrementTick+0x150>)
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4a3f      	ldr	r2, [pc, #252]	; (8005488 <xTaskIncrementTick+0x154>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	4b3e      	ldr	r3, [pc, #248]	; (800548c <xTaskIncrementTick+0x158>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	4a3d      	ldr	r2, [pc, #244]	; (800548c <xTaskIncrementTick+0x158>)
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	f000 fadd 	bl	8005958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800539e:	4b3c      	ldr	r3, [pc, #240]	; (8005490 <xTaskIncrementTick+0x15c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d349      	bcc.n	800543c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <xTaskIncrementTick+0x150>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b2:	4b37      	ldr	r3, [pc, #220]	; (8005490 <xTaskIncrementTick+0x15c>)
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053b8:	601a      	str	r2, [r3, #0]
					break;
 80053ba:	e03f      	b.n	800543c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053bc:	4b31      	ldr	r3, [pc, #196]	; (8005484 <xTaskIncrementTick+0x150>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d203      	bcs.n	80053dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053d4:	4a2e      	ldr	r2, [pc, #184]	; (8005490 <xTaskIncrementTick+0x15c>)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053da:	e02f      	b.n	800543c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	3304      	adds	r3, #4
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe fef3 	bl	80041cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	3318      	adds	r3, #24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe feea 	bl	80041cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <xTaskIncrementTick+0x160>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d903      	bls.n	800540c <xTaskIncrementTick+0xd8>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	4a22      	ldr	r2, [pc, #136]	; (8005494 <xTaskIncrementTick+0x160>)
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <xTaskIncrementTick+0x164>)
 800541a:	441a      	add	r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7fe fe75 	bl	8004112 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	4b1b      	ldr	r3, [pc, #108]	; (800549c <xTaskIncrementTick+0x168>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	429a      	cmp	r2, r3
 8005434:	d3b8      	bcc.n	80053a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005436:	2301      	movs	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800543a:	e7b5      	b.n	80053a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800543c:	4b17      	ldr	r3, [pc, #92]	; (800549c <xTaskIncrementTick+0x168>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005442:	4915      	ldr	r1, [pc, #84]	; (8005498 <xTaskIncrementTick+0x164>)
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d901      	bls.n	8005458 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005454:	2301      	movs	r3, #1
 8005456:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005458:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <xTaskIncrementTick+0x16c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e004      	b.n	8005470 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005466:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <xTaskIncrementTick+0x170>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	4a0d      	ldr	r2, [pc, #52]	; (80054a4 <xTaskIncrementTick+0x170>)
 800546e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005470:	697b      	ldr	r3, [r7, #20]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000e4c 	.word	0x20000e4c
 8005480:	20000e28 	.word	0x20000e28
 8005484:	20000ddc 	.word	0x20000ddc
 8005488:	20000de0 	.word	0x20000de0
 800548c:	20000e3c 	.word	0x20000e3c
 8005490:	20000e44 	.word	0x20000e44
 8005494:	20000e2c 	.word	0x20000e2c
 8005498:	20000954 	.word	0x20000954
 800549c:	20000950 	.word	0x20000950
 80054a0:	20000e38 	.word	0x20000e38
 80054a4:	20000e34 	.word	0x20000e34

080054a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ae:	4b2a      	ldr	r3, [pc, #168]	; (8005558 <vTaskSwitchContext+0xb0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054b6:	4b29      	ldr	r3, [pc, #164]	; (800555c <vTaskSwitchContext+0xb4>)
 80054b8:	2201      	movs	r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054bc:	e046      	b.n	800554c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80054be:	4b27      	ldr	r3, [pc, #156]	; (800555c <vTaskSwitchContext+0xb4>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c4:	4b26      	ldr	r3, [pc, #152]	; (8005560 <vTaskSwitchContext+0xb8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e010      	b.n	80054ee <vTaskSwitchContext+0x46>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	607b      	str	r3, [r7, #4]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <vTaskSwitchContext+0x3e>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	491d      	ldr	r1, [pc, #116]	; (8005564 <vTaskSwitchContext+0xbc>)
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0e4      	beq.n	80054cc <vTaskSwitchContext+0x24>
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4a15      	ldr	r2, [pc, #84]	; (8005564 <vTaskSwitchContext+0xbc>)
 800550e:	4413      	add	r3, r2
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	605a      	str	r2, [r3, #4]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	3308      	adds	r3, #8
 8005524:	429a      	cmp	r2, r3
 8005526:	d104      	bne.n	8005532 <vTaskSwitchContext+0x8a>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4a0b      	ldr	r2, [pc, #44]	; (8005568 <vTaskSwitchContext+0xc0>)
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	4a08      	ldr	r2, [pc, #32]	; (8005560 <vTaskSwitchContext+0xb8>)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <vTaskSwitchContext+0xc0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3354      	adds	r3, #84	; 0x54
 8005548:	4a08      	ldr	r2, [pc, #32]	; (800556c <vTaskSwitchContext+0xc4>)
 800554a:	6013      	str	r3, [r2, #0]
}
 800554c:	bf00      	nop
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	20000e4c 	.word	0x20000e4c
 800555c:	20000e38 	.word	0x20000e38
 8005560:	20000e2c 	.word	0x20000e2c
 8005564:	20000954 	.word	0x20000954
 8005568:	20000950 	.word	0x20000950
 800556c:	2000005c 	.word	0x2000005c

08005570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	60fb      	str	r3, [r7, #12]
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005596:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <vTaskPlaceOnEventList+0x44>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3318      	adds	r3, #24
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fe fddb 	bl	800415a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055a4:	2101      	movs	r1, #1
 80055a6:	6838      	ldr	r0, [r7, #0]
 80055a8:	f000 fa82 	bl	8005ab0 <prvAddCurrentTaskToDelayedList>
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000950 	.word	0x20000950

080055b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	617b      	str	r3, [r7, #20]
}
 80055dc:	bf00      	nop
 80055de:	e7fe      	b.n	80055de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <vTaskPlaceOnEventListRestricted+0x54>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3318      	adds	r3, #24
 80055e6:	4619      	mov	r1, r3
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7fe fd92 	bl	8004112 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f000 fa57 	bl	8005ab0 <prvAddCurrentTaskToDelayedList>
	}
 8005602:	bf00      	nop
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000950 	.word	0x20000950

08005610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	60fb      	str	r3, [r7, #12]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	3318      	adds	r3, #24
 8005640:	4618      	mov	r0, r3
 8005642:	f7fe fdc3 	bl	80041cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005646:	4b1e      	ldr	r3, [pc, #120]	; (80056c0 <xTaskRemoveFromEventList+0xb0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d11d      	bne.n	800568a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	3304      	adds	r3, #4
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fdba 	bl	80041cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <xTaskRemoveFromEventList+0xb4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d903      	bls.n	800566c <xTaskRemoveFromEventList+0x5c>
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	4a16      	ldr	r2, [pc, #88]	; (80056c4 <xTaskRemoveFromEventList+0xb4>)
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <xTaskRemoveFromEventList+0xb8>)
 800567a:	441a      	add	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fe fd45 	bl	8004112 <vListInsertEnd>
 8005688:	e005      	b.n	8005696 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	3318      	adds	r3, #24
 800568e:	4619      	mov	r1, r3
 8005690:	480e      	ldr	r0, [pc, #56]	; (80056cc <xTaskRemoveFromEventList+0xbc>)
 8005692:	f7fe fd3e 	bl	8004112 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569a:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <xTaskRemoveFromEventList+0xc0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d905      	bls.n	80056b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <xTaskRemoveFromEventList+0xc4>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e001      	b.n	80056b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056b4:	697b      	ldr	r3, [r7, #20]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000e4c 	.word	0x20000e4c
 80056c4:	20000e2c 	.word	0x20000e2c
 80056c8:	20000954 	.word	0x20000954
 80056cc:	20000de4 	.word	0x20000de4
 80056d0:	20000950 	.word	0x20000950
 80056d4:	20000e38 	.word	0x20000e38

080056d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056e0:	4b06      	ldr	r3, [pc, #24]	; (80056fc <vTaskInternalSetTimeOutState+0x24>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <vTaskInternalSetTimeOutState+0x28>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	605a      	str	r2, [r3, #4]
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20000e3c 	.word	0x20000e3c
 8005700:	20000e28 	.word	0x20000e28

08005704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	613b      	str	r3, [r7, #16]
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	60fb      	str	r3, [r7, #12]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005746:	f000 fe85 	bl	8006454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800574a:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <xTaskCheckForTimeOut+0xbc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005762:	d102      	bne.n	800576a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005764:	2300      	movs	r3, #0
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	e023      	b.n	80057b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <xTaskCheckForTimeOut+0xc0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d007      	beq.n	8005786 <xTaskCheckForTimeOut+0x82>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	429a      	cmp	r2, r3
 800577e:	d302      	bcc.n	8005786 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	e015      	b.n	80057b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	429a      	cmp	r2, r3
 800578e:	d20b      	bcs.n	80057a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad2      	subs	r2, r2, r3
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ff9b 	bl	80056d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	e004      	b.n	80057b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057b2:	f000 fe7f 	bl	80064b4 <vPortExitCritical>

	return xReturn;
 80057b6:	69fb      	ldr	r3, [r7, #28]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000e28 	.word	0x20000e28
 80057c4:	20000e3c 	.word	0x20000e3c

080057c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057cc:	4b03      	ldr	r3, [pc, #12]	; (80057dc <vTaskMissedYield+0x14>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000e38 	.word	0x20000e38

080057e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057e8:	f000 f854 	bl	8005894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <prvIdleTask+0x2c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d907      	bls.n	8005804 <prvIdleTask+0x24>
			{
				taskYIELD();
 80057f4:	4b06      	ldr	r3, [pc, #24]	; (8005810 <prvIdleTask+0x30>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005804:	f7fa fe62 	bl	80004cc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005808:	e7ee      	b.n	80057e8 <prvIdleTask+0x8>
 800580a:	bf00      	nop
 800580c:	20000954 	.word	0x20000954
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
 800581e:	e00c      	b.n	800583a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <prvInitialiseTaskLists+0x60>)
 800582c:	4413      	add	r3, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fc42 	bl	80040b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3301      	adds	r3, #1
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b37      	cmp	r3, #55	; 0x37
 800583e:	d9ef      	bls.n	8005820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005840:	480d      	ldr	r0, [pc, #52]	; (8005878 <prvInitialiseTaskLists+0x64>)
 8005842:	f7fe fc39 	bl	80040b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005846:	480d      	ldr	r0, [pc, #52]	; (800587c <prvInitialiseTaskLists+0x68>)
 8005848:	f7fe fc36 	bl	80040b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800584c:	480c      	ldr	r0, [pc, #48]	; (8005880 <prvInitialiseTaskLists+0x6c>)
 800584e:	f7fe fc33 	bl	80040b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005852:	480c      	ldr	r0, [pc, #48]	; (8005884 <prvInitialiseTaskLists+0x70>)
 8005854:	f7fe fc30 	bl	80040b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005858:	480b      	ldr	r0, [pc, #44]	; (8005888 <prvInitialiseTaskLists+0x74>)
 800585a:	f7fe fc2d 	bl	80040b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800585e:	4b0b      	ldr	r3, [pc, #44]	; (800588c <prvInitialiseTaskLists+0x78>)
 8005860:	4a05      	ldr	r2, [pc, #20]	; (8005878 <prvInitialiseTaskLists+0x64>)
 8005862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005864:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <prvInitialiseTaskLists+0x7c>)
 8005866:	4a05      	ldr	r2, [pc, #20]	; (800587c <prvInitialiseTaskLists+0x68>)
 8005868:	601a      	str	r2, [r3, #0]
}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000954 	.word	0x20000954
 8005878:	20000db4 	.word	0x20000db4
 800587c:	20000dc8 	.word	0x20000dc8
 8005880:	20000de4 	.word	0x20000de4
 8005884:	20000df8 	.word	0x20000df8
 8005888:	20000e10 	.word	0x20000e10
 800588c:	20000ddc 	.word	0x20000ddc
 8005890:	20000de0 	.word	0x20000de0

08005894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800589a:	e019      	b.n	80058d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800589c:	f000 fdda 	bl	8006454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a0:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <prvCheckTasksWaitingTermination+0x50>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe fc8d 	bl	80041cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <prvCheckTasksWaitingTermination+0x54>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	4a0b      	ldr	r2, [pc, #44]	; (80058e8 <prvCheckTasksWaitingTermination+0x54>)
 80058ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <prvCheckTasksWaitingTermination+0x58>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <prvCheckTasksWaitingTermination+0x58>)
 80058c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058c6:	f000 fdf5 	bl	80064b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f810 	bl	80058f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <prvCheckTasksWaitingTermination+0x58>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e1      	bne.n	800589c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000df8 	.word	0x20000df8
 80058e8:	20000e24 	.word	0x20000e24
 80058ec:	20000e0c 	.word	0x20000e0c

080058f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3354      	adds	r3, #84	; 0x54
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 f8bd 	bl	8006a7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005908:	2b00      	cmp	r3, #0
 800590a:	d108      	bne.n	800591e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	4618      	mov	r0, r3
 8005912:	f000 ff8d 	bl	8006830 <vPortFree>
				vPortFree( pxTCB );
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 ff8a 	bl	8006830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800591c:	e018      	b.n	8005950 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005924:	2b01      	cmp	r3, #1
 8005926:	d103      	bne.n	8005930 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 ff81 	bl	8006830 <vPortFree>
	}
 800592e:	e00f      	b.n	8005950 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005936:	2b02      	cmp	r3, #2
 8005938:	d00a      	beq.n	8005950 <prvDeleteTCB+0x60>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	60fb      	str	r3, [r7, #12]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <prvDeleteTCB+0x5e>
	}
 8005950:	bf00      	nop
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800595e:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <prvResetNextTaskUnblockTime+0x38>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <prvResetNextTaskUnblockTime+0x3c>)
 800596a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800596e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005970:	e008      	b.n	8005984 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005972:	4b07      	ldr	r3, [pc, #28]	; (8005990 <prvResetNextTaskUnblockTime+0x38>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	4a04      	ldr	r2, [pc, #16]	; (8005994 <prvResetNextTaskUnblockTime+0x3c>)
 8005982:	6013      	str	r3, [r2, #0]
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20000ddc 	.word	0x20000ddc
 8005994:	20000e44 	.word	0x20000e44

08005998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <xTaskGetSchedulerState+0x34>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059a6:	2301      	movs	r3, #1
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	e008      	b.n	80059be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <xTaskGetSchedulerState+0x38>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059b4:	2302      	movs	r3, #2
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	e001      	b.n	80059be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059be:	687b      	ldr	r3, [r7, #4]
	}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	20000e30 	.word	0x20000e30
 80059d0:	20000e4c 	.word	0x20000e4c

080059d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d056      	beq.n	8005a98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059ea:	4b2e      	ldr	r3, [pc, #184]	; (8005aa4 <xTaskPriorityDisinherit+0xd0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d00a      	beq.n	8005a0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60fb      	str	r3, [r7, #12]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	60bb      	str	r3, [r7, #8]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2c:	1e5a      	subs	r2, r3, #1
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d02c      	beq.n	8005a98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d128      	bne.n	8005a98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fbbe 	bl	80041cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a68:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <xTaskPriorityDisinherit+0xd4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d903      	bls.n	8005a78 <xTaskPriorityDisinherit+0xa4>
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4a0c      	ldr	r2, [pc, #48]	; (8005aa8 <xTaskPriorityDisinherit+0xd4>)
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4a09      	ldr	r2, [pc, #36]	; (8005aac <xTaskPriorityDisinherit+0xd8>)
 8005a86:	441a      	add	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7fe fb3f 	bl	8004112 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a98:	697b      	ldr	r3, [r7, #20]
	}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000950 	.word	0x20000950
 8005aa8:	20000e2c 	.word	0x20000e2c
 8005aac:	20000954 	.word	0x20000954

08005ab0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aba:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <prvAddCurrentTaskToDelayedList+0x90>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac0:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe fb80 	bl	80041cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad2:	d10a      	bne.n	8005aea <prvAddCurrentTaskToDelayedList+0x3a>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ada:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4819      	ldr	r0, [pc, #100]	; (8005b48 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ae4:	f7fe fb15 	bl	8004112 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ae8:	e026      	b.n	8005b38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4413      	add	r3, r2
 8005af0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d209      	bcs.n	8005b16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b02:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fe fb23 	bl	800415a <vListInsert>
}
 8005b14:	e010      	b.n	8005b38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b16:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f7fe fb19 	bl	800415a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d202      	bcs.n	8005b38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b32:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6013      	str	r3, [r2, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000e28 	.word	0x20000e28
 8005b44:	20000950 	.word	0x20000950
 8005b48:	20000e10 	.word	0x20000e10
 8005b4c:	20000de0 	.word	0x20000de0
 8005b50:	20000ddc 	.word	0x20000ddc
 8005b54:	20000e44 	.word	0x20000e44

08005b58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b62:	f000 fb07 	bl	8006174 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b66:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <xTimerCreateTimerTask+0x80>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d021      	beq.n	8005bb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b76:	1d3a      	adds	r2, r7, #4
 8005b78:	f107 0108 	add.w	r1, r7, #8
 8005b7c:	f107 030c 	add.w	r3, r7, #12
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe fa7f 	bl	8004084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	9202      	str	r2, [sp, #8]
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	2302      	movs	r3, #2
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	460a      	mov	r2, r1
 8005b98:	4910      	ldr	r1, [pc, #64]	; (8005bdc <xTimerCreateTimerTask+0x84>)
 8005b9a:	4811      	ldr	r0, [pc, #68]	; (8005be0 <xTimerCreateTimerTask+0x88>)
 8005b9c:	f7ff f8b2 	bl	8004d04 <xTaskCreateStatic>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <xTimerCreateTimerTask+0x8c>)
 8005ba4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ba6:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <xTimerCreateTimerTask+0x8c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbc:	f383 8811 	msr	BASEPRI, r3
 8005bc0:	f3bf 8f6f 	isb	sy
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	613b      	str	r3, [r7, #16]
}
 8005bca:	bf00      	nop
 8005bcc:	e7fe      	b.n	8005bcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bce:	697b      	ldr	r3, [r7, #20]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000e80 	.word	0x20000e80
 8005bdc:	08006cb4 	.word	0x08006cb4
 8005be0:	08005d1d 	.word	0x08005d1d
 8005be4:	20000e84 	.word	0x20000e84

08005be8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	; 0x28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	623b      	str	r3, [r7, #32]
}
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c16:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <xTimerGenericCommand+0x98>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d02a      	beq.n	8005c74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b05      	cmp	r3, #5
 8005c2e:	dc18      	bgt.n	8005c62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c30:	f7ff feb2 	bl	8005998 <xTaskGetSchedulerState>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d109      	bne.n	8005c4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c3a:	4b11      	ldr	r3, [pc, #68]	; (8005c80 <xTimerGenericCommand+0x98>)
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	f107 0110 	add.w	r1, r7, #16
 8005c42:	2300      	movs	r3, #0
 8005c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c46:	f7fe fc75 	bl	8004534 <xQueueGenericSend>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24
 8005c4c:	e012      	b.n	8005c74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <xTimerGenericCommand+0x98>)
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	f107 0110 	add.w	r1, r7, #16
 8005c56:	2300      	movs	r3, #0
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f7fe fc6b 	bl	8004534 <xQueueGenericSend>
 8005c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8005c60:	e008      	b.n	8005c74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c62:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <xTimerGenericCommand+0x98>)
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	f107 0110 	add.w	r1, r7, #16
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	f7fe fd5f 	bl	8004730 <xQueueGenericSendFromISR>
 8005c72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3728      	adds	r7, #40	; 0x28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000e80 	.word	0x20000e80

08005c84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8e:	4b22      	ldr	r3, [pc, #136]	; (8005d18 <prvProcessExpiredTimer+0x94>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fa95 	bl	80041cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d022      	beq.n	8005cf6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	699a      	ldr	r2, [r3, #24]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	18d1      	adds	r1, r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	6978      	ldr	r0, [r7, #20]
 8005cbe:	f000 f8d1 	bl	8005e64 <prvInsertTimerInActiveList>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01f      	beq.n	8005d08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cc8:	2300      	movs	r3, #0
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	6978      	ldr	r0, [r7, #20]
 8005cd4:	f7ff ff88 	bl	8005be8 <xTimerGenericCommand>
 8005cd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d113      	bne.n	8005d08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	60fb      	str	r3, [r7, #12]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	6978      	ldr	r0, [r7, #20]
 8005d0e:	4798      	blx	r3
}
 8005d10:	bf00      	nop
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000e78 	.word	0x20000e78

08005d1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d24:	f107 0308 	add.w	r3, r7, #8
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 f857 	bl	8005ddc <prvGetNextExpireTime>
 8005d2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4619      	mov	r1, r3
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f803 	bl	8005d40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d3a:	f000 f8d5 	bl	8005ee8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d3e:	e7f1      	b.n	8005d24 <prvTimerTask+0x8>

08005d40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d4a:	f7ff fa37 	bl	80051bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d4e:	f107 0308 	add.w	r3, r7, #8
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f866 	bl	8005e24 <prvSampleTimeNow>
 8005d58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d130      	bne.n	8005dc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <prvProcessTimerOrBlockTask+0x3c>
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d806      	bhi.n	8005d7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d6e:	f7ff fa33 	bl	80051d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff ff85 	bl	8005c84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d7a:	e024      	b.n	8005dc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d008      	beq.n	8005d94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d82:	4b13      	ldr	r3, [pc, #76]	; (8005dd0 <prvProcessTimerOrBlockTask+0x90>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <prvProcessTimerOrBlockTask+0x50>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <prvProcessTimerOrBlockTask+0x52>
 8005d90:	2300      	movs	r3, #0
 8005d92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d94:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <prvProcessTimerOrBlockTask+0x94>)
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	4619      	mov	r1, r3
 8005da2:	f7fe ff7b 	bl	8004c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005da6:	f7ff fa17 	bl	80051d8 <xTaskResumeAll>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005db0:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <prvProcessTimerOrBlockTask+0x98>)
 8005db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
}
 8005dc0:	e001      	b.n	8005dc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dc2:	f7ff fa09 	bl	80051d8 <xTaskResumeAll>
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000e7c 	.word	0x20000e7c
 8005dd4:	20000e80 	.word	0x20000e80
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <prvGetNextExpireTime+0x44>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <prvGetNextExpireTime+0x16>
 8005dee:	2201      	movs	r2, #1
 8005df0:	e000      	b.n	8005df4 <prvGetNextExpireTime+0x18>
 8005df2:	2200      	movs	r2, #0
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d105      	bne.n	8005e0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <prvGetNextExpireTime+0x44>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e001      	b.n	8005e10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e10:	68fb      	ldr	r3, [r7, #12]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000e78 	.word	0x20000e78

08005e24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e2c:	f7ff fa72 	bl	8005314 <xTaskGetTickCount>
 8005e30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e32:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <prvSampleTimeNow+0x3c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d205      	bcs.n	8005e48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e3c:	f000 f936 	bl	80060ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e002      	b.n	8005e4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e4e:	4a04      	ldr	r2, [pc, #16]	; (8005e60 <prvSampleTimeNow+0x3c>)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e54:	68fb      	ldr	r3, [r7, #12]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000e88 	.word	0x20000e88

08005e64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d812      	bhi.n	8005eb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	1ad2      	subs	r2, r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e01b      	b.n	8005ed6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <prvInsertTimerInActiveList+0x7c>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	f7fe f956 	bl	800415a <vListInsert>
 8005eae:	e012      	b.n	8005ed6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d206      	bcs.n	8005ec6 <prvInsertTimerInActiveList+0x62>
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d302      	bcc.n	8005ec6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e007      	b.n	8005ed6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <prvInsertTimerInActiveList+0x80>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7fe f942 	bl	800415a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ed6:	697b      	ldr	r3, [r7, #20]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000e7c 	.word	0x20000e7c
 8005ee4:	20000e78 	.word	0x20000e78

08005ee8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08e      	sub	sp, #56	; 0x38
 8005eec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eee:	e0ca      	b.n	8006086 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	da18      	bge.n	8005f28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ef6:	1d3b      	adds	r3, r7, #4
 8005ef8:	3304      	adds	r3, #4
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	61fb      	str	r3, [r7, #28]
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f1e:	6850      	ldr	r0, [r2, #4]
 8005f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f22:	6892      	ldr	r2, [r2, #8]
 8005f24:	4611      	mov	r1, r2
 8005f26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f2c0 80ab 	blt.w	8006086 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe f943 	bl	80041cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f46:	463b      	mov	r3, r7
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff ff6b 	bl	8005e24 <prvSampleTimeNow>
 8005f4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b09      	cmp	r3, #9
 8005f54:	f200 8096 	bhi.w	8006084 <prvProcessReceivedCommands+0x19c>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <prvProcessReceivedCommands+0x78>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f89 	.word	0x08005f89
 8005f6c:	08005ffd 	.word	0x08005ffd
 8005f70:	08006011 	.word	0x08006011
 8005f74:	0800605b 	.word	0x0800605b
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08005f89 	.word	0x08005f89
 8005f80:	08005ffd 	.word	0x08005ffd
 8005f84:	08006011 	.word	0x08006011
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f8e:	f043 0301 	orr.w	r3, r3, #1
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	18d1      	adds	r1, r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa8:	f7ff ff5c 	bl	8005e64 <prvInsertTimerInActiveList>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d069      	beq.n	8006086 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05e      	beq.n	8006086 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	441a      	add	r2, r3
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fda:	f7ff fe05 	bl	8005be8 <xTimerGenericCommand>
 8005fde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d14f      	bne.n	8006086 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	61bb      	str	r3, [r7, #24]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006002:	f023 0301 	bic.w	r3, r3, #1
 8006006:	b2da      	uxtb	r2, r3
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800600e:	e03a      	b.n	8006086 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	b2da      	uxtb	r2, r3
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10a      	bne.n	8006046 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	617b      	str	r3, [r7, #20]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	18d1      	adds	r1, r2, r3
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006054:	f7ff ff06 	bl	8005e64 <prvInsertTimerInActiveList>
					break;
 8006058:	e015      	b.n	8006086 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800606a:	f000 fbe1 	bl	8006830 <vPortFree>
 800606e:	e00a      	b.n	8006086 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006082:	e000      	b.n	8006086 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006084:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <prvProcessReceivedCommands+0x1c0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	1d39      	adds	r1, r7, #4
 800608c:	2200      	movs	r2, #0
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fbea 	bl	8004868 <xQueueReceive>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	f47f af2a 	bne.w	8005ef0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	3730      	adds	r7, #48	; 0x30
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000e80 	.word	0x20000e80

080060ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060b2:	e048      	b.n	8006146 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060b4:	4b2d      	ldr	r3, [pc, #180]	; (800616c <prvSwitchTimerLists+0xc0>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060be:	4b2b      	ldr	r3, [pc, #172]	; (800616c <prvSwitchTimerLists+0xc0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fe f87d 	bl	80041cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d02e      	beq.n	8006146 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4413      	add	r3, r2
 80060f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d90e      	bls.n	8006118 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006106:	4b19      	ldr	r3, [pc, #100]	; (800616c <prvSwitchTimerLists+0xc0>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3304      	adds	r3, #4
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f7fe f822 	bl	800415a <vListInsert>
 8006116:	e016      	b.n	8006146 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006118:	2300      	movs	r3, #0
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	2300      	movs	r3, #0
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	2100      	movs	r1, #0
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f7ff fd60 	bl	8005be8 <xTimerGenericCommand>
 8006128:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	603b      	str	r3, [r7, #0]
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <prvSwitchTimerLists+0xc0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1b1      	bne.n	80060b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <prvSwitchTimerLists+0xc0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <prvSwitchTimerLists+0xc4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a04      	ldr	r2, [pc, #16]	; (800616c <prvSwitchTimerLists+0xc0>)
 800615c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800615e:	4a04      	ldr	r2, [pc, #16]	; (8006170 <prvSwitchTimerLists+0xc4>)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	6013      	str	r3, [r2, #0]
}
 8006164:	bf00      	nop
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000e78 	.word	0x20000e78
 8006170:	20000e7c 	.word	0x20000e7c

08006174 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800617a:	f000 f96b 	bl	8006454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800617e:	4b15      	ldr	r3, [pc, #84]	; (80061d4 <prvCheckForValidListAndQueue+0x60>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d120      	bne.n	80061c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006186:	4814      	ldr	r0, [pc, #80]	; (80061d8 <prvCheckForValidListAndQueue+0x64>)
 8006188:	f7fd ff96 	bl	80040b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800618c:	4813      	ldr	r0, [pc, #76]	; (80061dc <prvCheckForValidListAndQueue+0x68>)
 800618e:	f7fd ff93 	bl	80040b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006192:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <prvCheckForValidListAndQueue+0x6c>)
 8006194:	4a10      	ldr	r2, [pc, #64]	; (80061d8 <prvCheckForValidListAndQueue+0x64>)
 8006196:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006198:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <prvCheckForValidListAndQueue+0x70>)
 800619a:	4a10      	ldr	r2, [pc, #64]	; (80061dc <prvCheckForValidListAndQueue+0x68>)
 800619c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800619e:	2300      	movs	r3, #0
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <prvCheckForValidListAndQueue+0x74>)
 80061a4:	4a11      	ldr	r2, [pc, #68]	; (80061ec <prvCheckForValidListAndQueue+0x78>)
 80061a6:	2110      	movs	r1, #16
 80061a8:	200a      	movs	r0, #10
 80061aa:	f7fe f8a1 	bl	80042f0 <xQueueGenericCreateStatic>
 80061ae:	4603      	mov	r3, r0
 80061b0:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <prvCheckForValidListAndQueue+0x60>)
 80061b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061b4:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <prvCheckForValidListAndQueue+0x60>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <prvCheckForValidListAndQueue+0x60>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	490b      	ldr	r1, [pc, #44]	; (80061f0 <prvCheckForValidListAndQueue+0x7c>)
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fd40 	bl	8004c48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061c8:	f000 f974 	bl	80064b4 <vPortExitCritical>
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000e80 	.word	0x20000e80
 80061d8:	20000e50 	.word	0x20000e50
 80061dc:	20000e64 	.word	0x20000e64
 80061e0:	20000e78 	.word	0x20000e78
 80061e4:	20000e7c 	.word	0x20000e7c
 80061e8:	20000f2c 	.word	0x20000f2c
 80061ec:	20000e8c 	.word	0x20000e8c
 80061f0:	08006cbc 	.word	0x08006cbc

080061f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3b04      	subs	r3, #4
 8006204:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800620c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3b04      	subs	r3, #4
 8006212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b04      	subs	r3, #4
 8006222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006224:	4a0c      	ldr	r2, [pc, #48]	; (8006258 <pxPortInitialiseStack+0x64>)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b14      	subs	r3, #20
 800622e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3b04      	subs	r3, #4
 800623a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f06f 0202 	mvn.w	r2, #2
 8006242:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3b20      	subs	r3, #32
 8006248:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	0800625d 	.word	0x0800625d

0800625c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006266:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <prvTaskExitError+0x54>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800626e:	d00a      	beq.n	8006286 <prvTaskExitError+0x2a>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	60fb      	str	r3, [r7, #12]
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <prvTaskExitError+0x28>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	60bb      	str	r3, [r7, #8]
}
 8006298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800629a:	bf00      	nop
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0fc      	beq.n	800629c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	2000000c 	.word	0x2000000c
	...

080062c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <pxCurrentTCBConst2>)
 80062c2:	6819      	ldr	r1, [r3, #0]
 80062c4:	6808      	ldr	r0, [r1, #0]
 80062c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	f380 8809 	msr	PSP, r0
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	f380 8811 	msr	BASEPRI, r0
 80062da:	4770      	bx	lr
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst2>:
 80062e0:	20000950 	.word	0x20000950
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062e8:	4808      	ldr	r0, [pc, #32]	; (800630c <prvPortStartFirstTask+0x24>)
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	6800      	ldr	r0, [r0, #0]
 80062ee:	f380 8808 	msr	MSP, r0
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8814 	msr	CONTROL, r0
 80062fa:	b662      	cpsie	i
 80062fc:	b661      	cpsie	f
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	df00      	svc	0
 8006308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800630a:	bf00      	nop
 800630c:	e000ed08 	.word	0xe000ed08

08006310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006316:	4b46      	ldr	r3, [pc, #280]	; (8006430 <xPortStartScheduler+0x120>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a46      	ldr	r2, [pc, #280]	; (8006434 <xPortStartScheduler+0x124>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d10a      	bne.n	8006336 <xPortStartScheduler+0x26>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006336:	4b3e      	ldr	r3, [pc, #248]	; (8006430 <xPortStartScheduler+0x120>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a3f      	ldr	r2, [pc, #252]	; (8006438 <xPortStartScheduler+0x128>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d10a      	bne.n	8006356 <xPortStartScheduler+0x46>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006356:	4b39      	ldr	r3, [pc, #228]	; (800643c <xPortStartScheduler+0x12c>)
 8006358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	22ff      	movs	r2, #255	; 0xff
 8006366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006378:	b2da      	uxtb	r2, r3
 800637a:	4b31      	ldr	r3, [pc, #196]	; (8006440 <xPortStartScheduler+0x130>)
 800637c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800637e:	4b31      	ldr	r3, [pc, #196]	; (8006444 <xPortStartScheduler+0x134>)
 8006380:	2207      	movs	r2, #7
 8006382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006384:	e009      	b.n	800639a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006386:	4b2f      	ldr	r3, [pc, #188]	; (8006444 <xPortStartScheduler+0x134>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3b01      	subs	r3, #1
 800638c:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <xPortStartScheduler+0x134>)
 800638e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d0ef      	beq.n	8006386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063a6:	4b27      	ldr	r3, [pc, #156]	; (8006444 <xPortStartScheduler+0x134>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f1c3 0307 	rsb	r3, r3, #7
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d00a      	beq.n	80063c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	60bb      	str	r3, [r7, #8]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063c8:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <xPortStartScheduler+0x134>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	4a1d      	ldr	r2, [pc, #116]	; (8006444 <xPortStartScheduler+0x134>)
 80063d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063d2:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <xPortStartScheduler+0x134>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063da:	4a1a      	ldr	r2, [pc, #104]	; (8006444 <xPortStartScheduler+0x134>)
 80063dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063e6:	4b18      	ldr	r3, [pc, #96]	; (8006448 <xPortStartScheduler+0x138>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a17      	ldr	r2, [pc, #92]	; (8006448 <xPortStartScheduler+0x138>)
 80063ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <xPortStartScheduler+0x138>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a14      	ldr	r2, [pc, #80]	; (8006448 <xPortStartScheduler+0x138>)
 80063f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063fe:	f000 f8dd 	bl	80065bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <xPortStartScheduler+0x13c>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006408:	f000 f8fc 	bl	8006604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800640c:	4b10      	ldr	r3, [pc, #64]	; (8006450 <xPortStartScheduler+0x140>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a0f      	ldr	r2, [pc, #60]	; (8006450 <xPortStartScheduler+0x140>)
 8006412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006418:	f7ff ff66 	bl	80062e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800641c:	f7ff f844 	bl	80054a8 <vTaskSwitchContext>
	prvTaskExitError();
 8006420:	f7ff ff1c 	bl	800625c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	e000ed00 	.word	0xe000ed00
 8006434:	410fc271 	.word	0x410fc271
 8006438:	410fc270 	.word	0x410fc270
 800643c:	e000e400 	.word	0xe000e400
 8006440:	20000f7c 	.word	0x20000f7c
 8006444:	20000f80 	.word	0x20000f80
 8006448:	e000ed20 	.word	0xe000ed20
 800644c:	2000000c 	.word	0x2000000c
 8006450:	e000ef34 	.word	0xe000ef34

08006454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	607b      	str	r3, [r7, #4]
}
 800646c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <vPortEnterCritical+0x58>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3301      	adds	r3, #1
 8006474:	4a0d      	ldr	r2, [pc, #52]	; (80064ac <vPortEnterCritical+0x58>)
 8006476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006478:	4b0c      	ldr	r3, [pc, #48]	; (80064ac <vPortEnterCritical+0x58>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d10f      	bne.n	80064a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006480:	4b0b      	ldr	r3, [pc, #44]	; (80064b0 <vPortEnterCritical+0x5c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	603b      	str	r3, [r7, #0]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <vPortEnterCritical+0x4a>
	}
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	2000000c 	.word	0x2000000c
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064ba:	4b12      	ldr	r3, [pc, #72]	; (8006504 <vPortExitCritical+0x50>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <vPortExitCritical+0x24>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	607b      	str	r3, [r7, #4]
}
 80064d4:	bf00      	nop
 80064d6:	e7fe      	b.n	80064d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <vPortExitCritical+0x50>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3b01      	subs	r3, #1
 80064de:	4a09      	ldr	r2, [pc, #36]	; (8006504 <vPortExitCritical+0x50>)
 80064e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <vPortExitCritical+0x50>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d105      	bne.n	80064f6 <vPortExitCritical+0x42>
 80064ea:	2300      	movs	r3, #0
 80064ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f383 8811 	msr	BASEPRI, r3
}
 80064f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	2000000c 	.word	0x2000000c
	...

08006510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006510:	f3ef 8009 	mrs	r0, PSP
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4b15      	ldr	r3, [pc, #84]	; (8006570 <pxCurrentTCBConst>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f01e 0f10 	tst.w	lr, #16
 8006520:	bf08      	it	eq
 8006522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006534:	f380 8811 	msr	BASEPRI, r0
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f7fe ffb2 	bl	80054a8 <vTaskSwitchContext>
 8006544:	f04f 0000 	mov.w	r0, #0
 8006548:	f380 8811 	msr	BASEPRI, r0
 800654c:	bc09      	pop	{r0, r3}
 800654e:	6819      	ldr	r1, [r3, #0]
 8006550:	6808      	ldr	r0, [r1, #0]
 8006552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006556:	f01e 0f10 	tst.w	lr, #16
 800655a:	bf08      	it	eq
 800655c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006560:	f380 8809 	msr	PSP, r0
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	f3af 8000 	nop.w

08006570 <pxCurrentTCBConst>:
 8006570:	20000950 	.word	0x20000950
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop

08006578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	607b      	str	r3, [r7, #4]
}
 8006590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006592:	f7fe fecf 	bl	8005334 <xTaskIncrementTick>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <xPortSysTickHandler+0x40>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f383 8811 	msr	BASEPRI, r3
}
 80065ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065c0:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <vPortSetupTimerInterrupt+0x34>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <vPortSetupTimerInterrupt+0x38>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <vPortSetupTimerInterrupt+0x3c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <vPortSetupTimerInterrupt+0x40>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	099b      	lsrs	r3, r3, #6
 80065d8:	4a09      	ldr	r2, [pc, #36]	; (8006600 <vPortSetupTimerInterrupt+0x44>)
 80065da:	3b01      	subs	r3, #1
 80065dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065de:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <vPortSetupTimerInterrupt+0x34>)
 80065e0:	2207      	movs	r2, #7
 80065e2:	601a      	str	r2, [r3, #0]
}
 80065e4:	bf00      	nop
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	e000e010 	.word	0xe000e010
 80065f4:	e000e018 	.word	0xe000e018
 80065f8:	20000000 	.word	0x20000000
 80065fc:	10624dd3 	.word	0x10624dd3
 8006600:	e000e014 	.word	0xe000e014

08006604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006614 <vPortEnableVFP+0x10>
 8006608:	6801      	ldr	r1, [r0, #0]
 800660a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800660e:	6001      	str	r1, [r0, #0]
 8006610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006612:	bf00      	nop
 8006614:	e000ed88 	.word	0xe000ed88

08006618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800661e:	f3ef 8305 	mrs	r3, IPSR
 8006622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b0f      	cmp	r3, #15
 8006628:	d914      	bls.n	8006654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800662a:	4a17      	ldr	r2, [pc, #92]	; (8006688 <vPortValidateInterruptPriority+0x70>)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006634:	4b15      	ldr	r3, [pc, #84]	; (800668c <vPortValidateInterruptPriority+0x74>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	7afa      	ldrb	r2, [r7, #11]
 800663a:	429a      	cmp	r2, r3
 800663c:	d20a      	bcs.n	8006654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	607b      	str	r3, [r7, #4]
}
 8006650:	bf00      	nop
 8006652:	e7fe      	b.n	8006652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006654:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <vPortValidateInterruptPriority+0x78>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800665c:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <vPortValidateInterruptPriority+0x7c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	429a      	cmp	r2, r3
 8006662:	d90a      	bls.n	800667a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	603b      	str	r3, [r7, #0]
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <vPortValidateInterruptPriority+0x60>
	}
 800667a:	bf00      	nop
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	e000e3f0 	.word	0xe000e3f0
 800668c:	20000f7c 	.word	0x20000f7c
 8006690:	e000ed0c 	.word	0xe000ed0c
 8006694:	20000f80 	.word	0x20000f80

08006698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	; 0x28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066a4:	f7fe fd8a 	bl	80051bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066a8:	4b5b      	ldr	r3, [pc, #364]	; (8006818 <pvPortMalloc+0x180>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066b0:	f000 f920 	bl	80068f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066b4:	4b59      	ldr	r3, [pc, #356]	; (800681c <pvPortMalloc+0x184>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f040 8093 	bne.w	80067e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01d      	beq.n	8006704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066c8:	2208      	movs	r2, #8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d014      	beq.n	8006704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f023 0307 	bic.w	r3, r3, #7
 80066e0:	3308      	adds	r3, #8
 80066e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <pvPortMalloc+0x6c>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	617b      	str	r3, [r7, #20]
}
 8006700:	bf00      	nop
 8006702:	e7fe      	b.n	8006702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d06e      	beq.n	80067e8 <pvPortMalloc+0x150>
 800670a:	4b45      	ldr	r3, [pc, #276]	; (8006820 <pvPortMalloc+0x188>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	429a      	cmp	r2, r3
 8006712:	d869      	bhi.n	80067e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006714:	4b43      	ldr	r3, [pc, #268]	; (8006824 <pvPortMalloc+0x18c>)
 8006716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006718:	4b42      	ldr	r3, [pc, #264]	; (8006824 <pvPortMalloc+0x18c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800671e:	e004      	b.n	800672a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	429a      	cmp	r2, r3
 8006732:	d903      	bls.n	800673c <pvPortMalloc+0xa4>
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f1      	bne.n	8006720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800673c:	4b36      	ldr	r3, [pc, #216]	; (8006818 <pvPortMalloc+0x180>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006742:	429a      	cmp	r2, r3
 8006744:	d050      	beq.n	80067e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2208      	movs	r2, #8
 800674c:	4413      	add	r3, r2
 800674e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	2308      	movs	r3, #8
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	429a      	cmp	r2, r3
 8006766:	d91f      	bls.n	80067a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <pvPortMalloc+0xf8>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	613b      	str	r3, [r7, #16]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	1ad2      	subs	r2, r2, r3
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067a2:	69b8      	ldr	r0, [r7, #24]
 80067a4:	f000 f908 	bl	80069b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067a8:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <pvPortMalloc+0x188>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <pvPortMalloc+0x188>)
 80067b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067b6:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <pvPortMalloc+0x188>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <pvPortMalloc+0x190>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d203      	bcs.n	80067ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067c2:	4b17      	ldr	r3, [pc, #92]	; (8006820 <pvPortMalloc+0x188>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <pvPortMalloc+0x190>)
 80067c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <pvPortMalloc+0x184>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <pvPortMalloc+0x194>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3301      	adds	r3, #1
 80067e4:	4a11      	ldr	r2, [pc, #68]	; (800682c <pvPortMalloc+0x194>)
 80067e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067e8:	f7fe fcf6 	bl	80051d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <pvPortMalloc+0x174>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	60fb      	str	r3, [r7, #12]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <pvPortMalloc+0x172>
	return pvReturn;
 800680c:	69fb      	ldr	r3, [r7, #28]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3728      	adds	r7, #40	; 0x28
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20002314 	.word	0x20002314
 800681c:	20002328 	.word	0x20002328
 8006820:	20002318 	.word	0x20002318
 8006824:	2000230c 	.word	0x2000230c
 8006828:	2000231c 	.word	0x2000231c
 800682c:	20002320 	.word	0x20002320

08006830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d04d      	beq.n	80068de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006842:	2308      	movs	r3, #8
 8006844:	425b      	negs	r3, r3
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	4b24      	ldr	r3, [pc, #144]	; (80068e8 <vPortFree+0xb8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <vPortFree+0x44>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60fb      	str	r3, [r7, #12]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <vPortFree+0x62>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	60bb      	str	r3, [r7, #8]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <vPortFree+0xb8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4013      	ands	r3, r2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01e      	beq.n	80068de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11a      	bne.n	80068de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <vPortFree+0xb8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	43db      	mvns	r3, r3
 80068b2:	401a      	ands	r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068b8:	f7fe fc80 	bl	80051bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <vPortFree+0xbc>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4413      	add	r3, r2
 80068c6:	4a09      	ldr	r2, [pc, #36]	; (80068ec <vPortFree+0xbc>)
 80068c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ca:	6938      	ldr	r0, [r7, #16]
 80068cc:	f000 f874 	bl	80069b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <vPortFree+0xc0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <vPortFree+0xc0>)
 80068d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068da:	f7fe fc7d 	bl	80051d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068de:	bf00      	nop
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20002328 	.word	0x20002328
 80068ec:	20002318 	.word	0x20002318
 80068f0:	20002324 	.word	0x20002324

080068f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80068fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006900:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <prvHeapInit+0xac>)
 8006902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00c      	beq.n	8006928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3307      	adds	r3, #7
 8006912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0307 	bic.w	r3, r3, #7
 800691a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	4a1f      	ldr	r2, [pc, #124]	; (80069a0 <prvHeapInit+0xac>)
 8006924:	4413      	add	r3, r2
 8006926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800692c:	4a1d      	ldr	r2, [pc, #116]	; (80069a4 <prvHeapInit+0xb0>)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006932:	4b1c      	ldr	r3, [pc, #112]	; (80069a4 <prvHeapInit+0xb0>)
 8006934:	2200      	movs	r2, #0
 8006936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4413      	add	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006940:	2208      	movs	r2, #8
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <prvHeapInit+0xb4>)
 8006954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006956:	4b14      	ldr	r3, [pc, #80]	; (80069a8 <prvHeapInit+0xb4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2200      	movs	r2, #0
 800695c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800695e:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <prvHeapInit+0xb4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	1ad2      	subs	r2, r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <prvHeapInit+0xb4>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <prvHeapInit+0xb8>)
 8006982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <prvHeapInit+0xbc>)
 800698a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800698c:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <prvHeapInit+0xc0>)
 800698e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20000f84 	.word	0x20000f84
 80069a4:	2000230c 	.word	0x2000230c
 80069a8:	20002314 	.word	0x20002314
 80069ac:	2000231c 	.word	0x2000231c
 80069b0:	20002318 	.word	0x20002318
 80069b4:	20002328 	.word	0x20002328

080069b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069c0:	4b28      	ldr	r3, [pc, #160]	; (8006a64 <prvInsertBlockIntoFreeList+0xac>)
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e002      	b.n	80069cc <prvInsertBlockIntoFreeList+0x14>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d8f7      	bhi.n	80069c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4413      	add	r3, r2
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d108      	bne.n	80069fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	441a      	add	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	441a      	add	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d118      	bne.n	8006a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <prvInsertBlockIntoFreeList+0xb0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d00d      	beq.n	8006a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	441a      	add	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e008      	b.n	8006a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <prvInsertBlockIntoFreeList+0xb0>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e003      	b.n	8006a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d002      	beq.n	8006a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	2000230c 	.word	0x2000230c
 8006a68:	20002314 	.word	0x20002314

08006a6c <memset>:
 8006a6c:	4402      	add	r2, r0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d100      	bne.n	8006a76 <memset+0xa>
 8006a74:	4770      	bx	lr
 8006a76:	f803 1b01 	strb.w	r1, [r3], #1
 8006a7a:	e7f9      	b.n	8006a70 <memset+0x4>

08006a7c <_reclaim_reent>:
 8006a7c:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <_reclaim_reent+0xa8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4283      	cmp	r3, r0
 8006a82:	b570      	push	{r4, r5, r6, lr}
 8006a84:	4604      	mov	r4, r0
 8006a86:	d04b      	beq.n	8006b20 <_reclaim_reent+0xa4>
 8006a88:	69c3      	ldr	r3, [r0, #28]
 8006a8a:	b143      	cbz	r3, 8006a9e <_reclaim_reent+0x22>
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d144      	bne.n	8006b1c <_reclaim_reent+0xa0>
 8006a92:	69e3      	ldr	r3, [r4, #28]
 8006a94:	6819      	ldr	r1, [r3, #0]
 8006a96:	b111      	cbz	r1, 8006a9e <_reclaim_reent+0x22>
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 f879 	bl	8006b90 <_free_r>
 8006a9e:	6961      	ldr	r1, [r4, #20]
 8006aa0:	b111      	cbz	r1, 8006aa8 <_reclaim_reent+0x2c>
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f000 f874 	bl	8006b90 <_free_r>
 8006aa8:	69e1      	ldr	r1, [r4, #28]
 8006aaa:	b111      	cbz	r1, 8006ab2 <_reclaim_reent+0x36>
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 f86f 	bl	8006b90 <_free_r>
 8006ab2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ab4:	b111      	cbz	r1, 8006abc <_reclaim_reent+0x40>
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 f86a 	bl	8006b90 <_free_r>
 8006abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006abe:	b111      	cbz	r1, 8006ac6 <_reclaim_reent+0x4a>
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 f865 	bl	8006b90 <_free_r>
 8006ac6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ac8:	b111      	cbz	r1, 8006ad0 <_reclaim_reent+0x54>
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 f860 	bl	8006b90 <_free_r>
 8006ad0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006ad2:	b111      	cbz	r1, 8006ada <_reclaim_reent+0x5e>
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 f85b 	bl	8006b90 <_free_r>
 8006ada:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006adc:	b111      	cbz	r1, 8006ae4 <_reclaim_reent+0x68>
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 f856 	bl	8006b90 <_free_r>
 8006ae4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006ae6:	b111      	cbz	r1, 8006aee <_reclaim_reent+0x72>
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 f851 	bl	8006b90 <_free_r>
 8006aee:	6a23      	ldr	r3, [r4, #32]
 8006af0:	b1b3      	cbz	r3, 8006b20 <_reclaim_reent+0xa4>
 8006af2:	4620      	mov	r0, r4
 8006af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006af8:	4718      	bx	r3
 8006afa:	5949      	ldr	r1, [r1, r5]
 8006afc:	b941      	cbnz	r1, 8006b10 <_reclaim_reent+0x94>
 8006afe:	3504      	adds	r5, #4
 8006b00:	69e3      	ldr	r3, [r4, #28]
 8006b02:	2d80      	cmp	r5, #128	; 0x80
 8006b04:	68d9      	ldr	r1, [r3, #12]
 8006b06:	d1f8      	bne.n	8006afa <_reclaim_reent+0x7e>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 f841 	bl	8006b90 <_free_r>
 8006b0e:	e7c0      	b.n	8006a92 <_reclaim_reent+0x16>
 8006b10:	680e      	ldr	r6, [r1, #0]
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 f83c 	bl	8006b90 <_free_r>
 8006b18:	4631      	mov	r1, r6
 8006b1a:	e7ef      	b.n	8006afc <_reclaim_reent+0x80>
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	e7ef      	b.n	8006b00 <_reclaim_reent+0x84>
 8006b20:	bd70      	pop	{r4, r5, r6, pc}
 8006b22:	bf00      	nop
 8006b24:	2000005c 	.word	0x2000005c

08006b28 <__libc_init_array>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	4d0d      	ldr	r5, [pc, #52]	; (8006b60 <__libc_init_array+0x38>)
 8006b2c:	4c0d      	ldr	r4, [pc, #52]	; (8006b64 <__libc_init_array+0x3c>)
 8006b2e:	1b64      	subs	r4, r4, r5
 8006b30:	10a4      	asrs	r4, r4, #2
 8006b32:	2600      	movs	r6, #0
 8006b34:	42a6      	cmp	r6, r4
 8006b36:	d109      	bne.n	8006b4c <__libc_init_array+0x24>
 8006b38:	4d0b      	ldr	r5, [pc, #44]	; (8006b68 <__libc_init_array+0x40>)
 8006b3a:	4c0c      	ldr	r4, [pc, #48]	; (8006b6c <__libc_init_array+0x44>)
 8006b3c:	f000 f880 	bl	8006c40 <_init>
 8006b40:	1b64      	subs	r4, r4, r5
 8006b42:	10a4      	asrs	r4, r4, #2
 8006b44:	2600      	movs	r6, #0
 8006b46:	42a6      	cmp	r6, r4
 8006b48:	d105      	bne.n	8006b56 <__libc_init_array+0x2e>
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b50:	4798      	blx	r3
 8006b52:	3601      	adds	r6, #1
 8006b54:	e7ee      	b.n	8006b34 <__libc_init_array+0xc>
 8006b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5a:	4798      	blx	r3
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	e7f2      	b.n	8006b46 <__libc_init_array+0x1e>
 8006b60:	08006df0 	.word	0x08006df0
 8006b64:	08006df0 	.word	0x08006df0
 8006b68:	08006df0 	.word	0x08006df0
 8006b6c:	08006df4 	.word	0x08006df4

08006b70 <__retarget_lock_acquire_recursive>:
 8006b70:	4770      	bx	lr

08006b72 <__retarget_lock_release_recursive>:
 8006b72:	4770      	bx	lr

08006b74 <memcpy>:
 8006b74:	440a      	add	r2, r1
 8006b76:	4291      	cmp	r1, r2
 8006b78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006b7c:	d100      	bne.n	8006b80 <memcpy+0xc>
 8006b7e:	4770      	bx	lr
 8006b80:	b510      	push	{r4, lr}
 8006b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b8a:	4291      	cmp	r1, r2
 8006b8c:	d1f9      	bne.n	8006b82 <memcpy+0xe>
 8006b8e:	bd10      	pop	{r4, pc}

08006b90 <_free_r>:
 8006b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b92:	2900      	cmp	r1, #0
 8006b94:	d044      	beq.n	8006c20 <_free_r+0x90>
 8006b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b9a:	9001      	str	r0, [sp, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006ba2:	bfb8      	it	lt
 8006ba4:	18e4      	addlt	r4, r4, r3
 8006ba6:	f000 f83f 	bl	8006c28 <__malloc_lock>
 8006baa:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <_free_r+0x94>)
 8006bac:	9801      	ldr	r0, [sp, #4]
 8006bae:	6813      	ldr	r3, [r2, #0]
 8006bb0:	b933      	cbnz	r3, 8006bc0 <_free_r+0x30>
 8006bb2:	6063      	str	r3, [r4, #4]
 8006bb4:	6014      	str	r4, [r2, #0]
 8006bb6:	b003      	add	sp, #12
 8006bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bbc:	f000 b83a 	b.w	8006c34 <__malloc_unlock>
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	d908      	bls.n	8006bd6 <_free_r+0x46>
 8006bc4:	6825      	ldr	r5, [r4, #0]
 8006bc6:	1961      	adds	r1, r4, r5
 8006bc8:	428b      	cmp	r3, r1
 8006bca:	bf01      	itttt	eq
 8006bcc:	6819      	ldreq	r1, [r3, #0]
 8006bce:	685b      	ldreq	r3, [r3, #4]
 8006bd0:	1949      	addeq	r1, r1, r5
 8006bd2:	6021      	streq	r1, [r4, #0]
 8006bd4:	e7ed      	b.n	8006bb2 <_free_r+0x22>
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	b10b      	cbz	r3, 8006be0 <_free_r+0x50>
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	d9fa      	bls.n	8006bd6 <_free_r+0x46>
 8006be0:	6811      	ldr	r1, [r2, #0]
 8006be2:	1855      	adds	r5, r2, r1
 8006be4:	42a5      	cmp	r5, r4
 8006be6:	d10b      	bne.n	8006c00 <_free_r+0x70>
 8006be8:	6824      	ldr	r4, [r4, #0]
 8006bea:	4421      	add	r1, r4
 8006bec:	1854      	adds	r4, r2, r1
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	6011      	str	r1, [r2, #0]
 8006bf2:	d1e0      	bne.n	8006bb6 <_free_r+0x26>
 8006bf4:	681c      	ldr	r4, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	6053      	str	r3, [r2, #4]
 8006bfa:	440c      	add	r4, r1
 8006bfc:	6014      	str	r4, [r2, #0]
 8006bfe:	e7da      	b.n	8006bb6 <_free_r+0x26>
 8006c00:	d902      	bls.n	8006c08 <_free_r+0x78>
 8006c02:	230c      	movs	r3, #12
 8006c04:	6003      	str	r3, [r0, #0]
 8006c06:	e7d6      	b.n	8006bb6 <_free_r+0x26>
 8006c08:	6825      	ldr	r5, [r4, #0]
 8006c0a:	1961      	adds	r1, r4, r5
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	bf04      	itt	eq
 8006c10:	6819      	ldreq	r1, [r3, #0]
 8006c12:	685b      	ldreq	r3, [r3, #4]
 8006c14:	6063      	str	r3, [r4, #4]
 8006c16:	bf04      	itt	eq
 8006c18:	1949      	addeq	r1, r1, r5
 8006c1a:	6021      	streq	r1, [r4, #0]
 8006c1c:	6054      	str	r4, [r2, #4]
 8006c1e:	e7ca      	b.n	8006bb6 <_free_r+0x26>
 8006c20:	b003      	add	sp, #12
 8006c22:	bd30      	pop	{r4, r5, pc}
 8006c24:	20002468 	.word	0x20002468

08006c28 <__malloc_lock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__malloc_lock+0x8>)
 8006c2a:	f7ff bfa1 	b.w	8006b70 <__retarget_lock_acquire_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20002464 	.word	0x20002464

08006c34 <__malloc_unlock>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__malloc_unlock+0x8>)
 8006c36:	f7ff bf9c 	b.w	8006b72 <__retarget_lock_release_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	20002464 	.word	0x20002464

08006c40 <_init>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr

08006c4c <_fini>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr
