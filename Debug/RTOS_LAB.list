
RTOS_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a8c  0800dd28  0800dd28  0001dd28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7b4  0800e7b4  000206ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7b4  0800e7b4  0001e7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7bc  0800e7bc  000206ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e7bc  0800e7bc  0001e7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7c4  0800e7c4  0001e7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006ec  20000000  0800e7c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d98  200006f0  0800eeb4  000206f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004488  0800eeb4  00024488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002071c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c92b  00000000  00000000  0002075f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bfd  00000000  00000000  0003d08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  00040c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001291  00000000  00000000  00042488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a867  00000000  00000000  00043719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e67  00000000  00000000  0006df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100427  00000000  00000000  00087de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007768  00000000  00000000  00188210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006f0 	.word	0x200006f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd0c 	.word	0x0800dd0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006f4 	.word	0x200006f4
 80001cc:	0800dd0c 	.word	0x0800dd0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   idle_hook_count++;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <vApplicationIdleHook+0x20>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	1c50      	adds	r0, r2, #1
 8000eb0:	f143 0100 	adc.w	r1, r3, #0
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <vApplicationIdleHook+0x20>)
 8000eb6:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20000710 	.word	0x20000710

08000ec8 <init_teller>:
uint32_t max_customer_queue_time = 0;
uint32_t max_customer_queue_depth = 0;


void init_teller(TELLER_INFO* teller)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	teller->max_wait_time = 0;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
	teller->max_service_time = 0;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
	teller->max_break_time = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
	teller->min_break_time = (uint32_t)(-1); // Max value for uint32_t
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee8:	60da      	str	r2, [r3, #12]
	teller->total_service_time = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	829a      	strh	r2, [r3, #20]
	teller->total_wait_time = 0;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	839a      	strh	r2, [r3, #28]
	teller->total_waits_taken = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	83da      	strh	r2, [r3, #30]
	teller->total_break_time = 0;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	831a      	strh	r2, [r3, #24]
	teller->total_breaks_taken = 0;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	835a      	strh	r2, [r3, #26]
	teller->total_customers_serviced = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	82da      	strh	r2, [r3, #22]
	teller->next_available_natural_break_time = rand_range(MIN_TELLER_BREAK_WAIT, MAX_TELLER_BREAK_WAIT);
 8000f0e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f1a:	f04f 0100 	mov.w	r1, #0
 8000f1e:	f001 f8fd 	bl	800211c <rand_range>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	611a      	str	r2, [r3, #16]
	teller->status = status_didnt_show_up;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	teller->forced_break_flag = false;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <reset_and_init_customer>:

void reset_and_init_customer(CUSTOMER_INFO* customer)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	customer->service_time = rand_range(MIN_SERVICE_TIME, MAX_SERVICE_TIME);
 8000f4a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	f04f 0032 	mov.w	r0, #50	; 0x32
 8000f56:	f04f 0100 	mov.w	r1, #0
 8000f5a:	f001 f8df 	bl	800211c <rand_range>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	b292      	uxth	r2, r2
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	801a      	strh	r2, [r3, #0]
	customer->time_entered_queue = HAL_GetTick();
 8000f68:	f001 fba6 	bl	80026b8 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	605a      	str	r2, [r3, #4]
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <shiftOut>:
* @param clock_port: The port of the GPIO pin associated with the clock used to operate shift register.
* @param clock_pin: The GPIO clock pin.
* @param value: The value to shift into the data pin.
* @retval None
*/
static inline void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	461a      	mov	r2, r3
 8000f86:	460b      	mov	r3, r1
 8000f88:	817b      	strh	r3, [r7, #10]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e01d      	b.n	8000fd0 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8000f94:	893b      	ldrh	r3, [r7, #8]
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 fe3c 	bl	8002c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8000fa0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf14      	ite	ne
 8000fac:	2301      	movne	r3, #1
 8000fae:	2300      	moveq	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	897b      	ldrh	r3, [r7, #10]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f001 fe2d 	bl	8002c18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8000fbe:	893b      	ldrh	r3, [r7, #8]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f001 fe27 	bl	8002c18 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	105b      	asrs	r3, r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1de      	bne.n	8000f94 <shiftOut+0x1a>
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <set_segment_digit>:
* @param digit: The digit to set (four in total)	.
* @param value: The value to set.
* @retval None
*/
static inline void set_segment_digit(uint8_t digit, uint8_t value)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460a      	mov	r2, r1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	4613      	mov	r3, r2
 8000fee:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	4811      	ldr	r0, [pc, #68]	; (800103c <set_segment_digit+0x5c>)
 8000ff6:	f001 fe0f 	bl	8002c18 <HAL_GPIO_WritePin>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, value);
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100e:	f7ff ffb4 	bl	8000f7a <shiftOut>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, digit);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800101e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f7ff ffa8 	bl	8000f7a <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 800102a:	2201      	movs	r2, #1
 800102c:	2120      	movs	r1, #32
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <set_segment_digit+0x5c>)
 8001030:	f001 fdf2 	bl	8002c18 <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	48000400 	.word	0x48000400

08001040 <set_segment_display>:
*
* @param num: The four digit number to set the display to (MAX: 9999).
* @retval None
*/
void set_segment_display(uint16_t num)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
	uint8_t value;
	while(digit < NUM_SEGMENT_DIGITS)
 800104e:	e01e      	b.n	800108e <set_segment_display+0x4e>
	{
		value = num % 10;
 8001050:	88fa      	ldrh	r2, [r7, #6]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <set_segment_display+0x64>)
 8001054:	fba3 1302 	umull	r1, r3, r3, r2
 8001058:	08d9      	lsrs	r1, r3, #3
 800105a:	460b      	mov	r3, r1
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	b29b      	uxth	r3, r3
 8001066:	73bb      	strb	r3, [r7, #14]
		set_segment_digit(SEGMENT_DIGIT[digit], SEGMENT_NUM[value]);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <set_segment_display+0x68>)
 800106c:	5cd2      	ldrb	r2, [r2, r3]
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	490e      	ldr	r1, [pc, #56]	; (80010ac <set_segment_display+0x6c>)
 8001072:	5ccb      	ldrb	r3, [r1, r3]
 8001074:	4619      	mov	r1, r3
 8001076:	4610      	mov	r0, r2
 8001078:	f7ff ffb2 	bl	8000fe0 <set_segment_digit>
		num /= 10;
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <set_segment_display+0x64>)
 8001080:	fba2 2303 	umull	r2, r3, r2, r3
 8001084:	08db      	lsrs	r3, r3, #3
 8001086:	80fb      	strh	r3, [r7, #6]
		digit++;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	3301      	adds	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
	while(digit < NUM_SEGMENT_DIGITS)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d9dd      	bls.n	8001050 <set_segment_display+0x10>
	}
	set_segment_digit(0, 0);
 8001094:	2100      	movs	r1, #0
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ffa2 	bl	8000fe0 <set_segment_digit>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	cccccccd 	.word	0xcccccccd
 80010a8:	0800e3d4 	.word	0x0800e3d4
 80010ac:	0800e3d8 	.word	0x0800e3d8

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b4:	f001 facc 	bl	8002650 <HAL_Init>

  /* USER CODE BEGIN Init */

  // Initialize tellers
  init_teller(&teller01_info);
 80010b8:	482c      	ldr	r0, [pc, #176]	; (800116c <main+0xbc>)
 80010ba:	f7ff ff05 	bl	8000ec8 <init_teller>
  init_teller(&teller02_info);
 80010be:	482c      	ldr	r0, [pc, #176]	; (8001170 <main+0xc0>)
 80010c0:	f7ff ff02 	bl	8000ec8 <init_teller>
  init_teller(&teller03_info);
 80010c4:	482b      	ldr	r0, [pc, #172]	; (8001174 <main+0xc4>)
 80010c6:	f7ff feff 	bl	8000ec8 <init_teller>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f883 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f000 f951 	bl	8001374 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d2:	f000 f91f 	bl	8001314 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010d6:	f000 f8cf 	bl	8001278 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010da:	f004 fbab 	bl	8005834 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 80010de:	4826      	ldr	r0, [pc, #152]	; (8001178 <main+0xc8>)
 80010e0:	f004 fcc1 	bl	8005a66 <osMutexNew>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a25      	ldr	r2, [pc, #148]	; (800117c <main+0xcc>)
 80010e8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of customerQueue */
  customerQueueHandle = osMessageQueueNew (421, sizeof(uint64_t), &customerQueue_attributes);
 80010ea:	4a25      	ldr	r2, [pc, #148]	; (8001180 <main+0xd0>)
 80010ec:	2108      	movs	r1, #8
 80010ee:	f240 10a5 	movw	r0, #421	; 0x1a5
 80010f2:	f004 fdc6 	bl	8005c82 <osMessageQueueNew>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a22      	ldr	r2, [pc, #136]	; (8001184 <main+0xd4>)
 80010fa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of updateSegment */
  updateSegmentHandle = osThreadNew(StartUpdateSegment, NULL, &updateSegment_attributes);
 80010fc:	4a22      	ldr	r2, [pc, #136]	; (8001188 <main+0xd8>)
 80010fe:	2100      	movs	r1, #0
 8001100:	4822      	ldr	r0, [pc, #136]	; (800118c <main+0xdc>)
 8001102:	f004 fbe1 	bl	80058c8 <osThreadNew>
 8001106:	4603      	mov	r3, r0
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <main+0xe0>)
 800110a:	6013      	str	r3, [r2, #0]

  /* creation of genCustomer */
  genCustomerHandle = osThreadNew(StartGenCustomerTask, NULL, &genCustomer_attributes);
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <main+0xe4>)
 800110e:	2100      	movs	r1, #0
 8001110:	4821      	ldr	r0, [pc, #132]	; (8001198 <main+0xe8>)
 8001112:	f004 fbd9 	bl	80058c8 <osThreadNew>
 8001116:	4603      	mov	r3, r0
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <main+0xec>)
 800111a:	6013      	str	r3, [r2, #0]

  /* creation of teller01 */
  teller01Handle = osThreadNew(StartTeller01, NULL, &teller01_attributes);
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <main+0xf0>)
 800111e:	2100      	movs	r1, #0
 8001120:	4820      	ldr	r0, [pc, #128]	; (80011a4 <main+0xf4>)
 8001122:	f004 fbd1 	bl	80058c8 <osThreadNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <main+0xf8>)
 800112a:	6013      	str	r3, [r2, #0]

  /* creation of teller02 */
  teller02Handle = osThreadNew(StartTeller02, NULL, &teller02_attributes);
 800112c:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <main+0xfc>)
 800112e:	2100      	movs	r1, #0
 8001130:	481f      	ldr	r0, [pc, #124]	; (80011b0 <main+0x100>)
 8001132:	f004 fbc9 	bl	80058c8 <osThreadNew>
 8001136:	4603      	mov	r3, r0
 8001138:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <main+0x104>)
 800113a:	6013      	str	r3, [r2, #0]

  /* creation of teller03 */
  teller03Handle = osThreadNew(StartTeller03, NULL, &teller03_attributes);
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <main+0x108>)
 800113e:	2100      	movs	r1, #0
 8001140:	481e      	ldr	r0, [pc, #120]	; (80011bc <main+0x10c>)
 8001142:	f004 fbc1 	bl	80058c8 <osThreadNew>
 8001146:	4603      	mov	r3, r0
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <main+0x110>)
 800114a:	6013      	str	r3, [r2, #0]

  /* creation of simMonitorInfo */
  simMonitorInfoHandle = osThreadNew(StartSimMonitorInfo, NULL, &simMonitorInfo_attributes);
 800114c:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <main+0x114>)
 800114e:	2100      	movs	r1, #0
 8001150:	481d      	ldr	r0, [pc, #116]	; (80011c8 <main+0x118>)
 8001152:	f004 fbb9 	bl	80058c8 <osThreadNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <main+0x11c>)
 800115a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // Grab reference point to get an accurate reading of simulated time.
  SIMULATED_TIME_START = HAL_GetTick();
 800115c:	f001 faac 	bl	80026b8 <HAL_GetTick>
 8001160:	4603      	mov	r3, r0
 8001162:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <main+0x120>)
 8001164:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001166:	f004 fb89 	bl	800587c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800116a:	e7fe      	b.n	800116a <main+0xba>
 800116c:	2000081c 	.word	0x2000081c
 8001170:	20000840 	.word	0x20000840
 8001174:	20000864 	.word	0x20000864
 8001178:	0800e3c4 	.word	0x0800e3c4
 800117c:	20000814 	.word	0x20000814
 8001180:	0800e3ac 	.word	0x0800e3ac
 8001184:	20000810 	.word	0x20000810
 8001188:	0800e2d4 	.word	0x0800e2d4
 800118c:	08001799 	.word	0x08001799
 8001190:	200007f8 	.word	0x200007f8
 8001194:	0800e2f8 	.word	0x0800e2f8
 8001198:	08001849 	.word	0x08001849
 800119c:	200007fc 	.word	0x200007fc
 80011a0:	0800e31c 	.word	0x0800e31c
 80011a4:	080018e1 	.word	0x080018e1
 80011a8:	20000800 	.word	0x20000800
 80011ac:	0800e340 	.word	0x0800e340
 80011b0:	08001909 	.word	0x08001909
 80011b4:	20000804 	.word	0x20000804
 80011b8:	0800e364 	.word	0x0800e364
 80011bc:	08001931 	.word	0x08001931
 80011c0:	20000808 	.word	0x20000808
 80011c4:	0800e388 	.word	0x0800e388
 80011c8:	0800195d 	.word	0x0800195d
 80011cc:	2000080c 	.word	0x2000080c
 80011d0:	20000818 	.word	0x20000818

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b096      	sub	sp, #88	; 0x58
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2244      	movs	r2, #68	; 0x44
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 f91d 	bl	8009422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011fa:	f001 fd57 	bl	8002cac <HAL_PWREx_ControlVoltageScaling>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001204:	f000 feea 	bl	8001fdc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001208:	2302      	movs	r3, #2
 800120a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800120c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001210:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001212:	2310      	movs	r3, #16
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001216:	2302      	movs	r3, #2
 8001218:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121a:	2302      	movs	r3, #2
 800121c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001222:	230a      	movs	r3, #10
 8001224:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001226:	2307      	movs	r3, #7
 8001228:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800122a:	2302      	movs	r3, #2
 800122c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800122e:	2302      	movs	r3, #2
 8001230:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fd8e 	bl	8002d58 <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001242:	f000 fecb 	bl	8001fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	230f      	movs	r3, #15
 8001248:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124a:	2303      	movs	r3, #3
 800124c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	2104      	movs	r1, #4
 800125e:	4618      	mov	r0, r3
 8001260:	f002 f956 	bl	8003510 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800126a:	f000 feb7 	bl	8001fdc <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3758      	adds	r7, #88	; 0x58
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_TIM2_Init+0x98>)
 8001298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_TIM2_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_TIM2_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM2_Init+0x98>)
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_TIM2_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_TIM2_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_TIM2_Init+0x98>)
 80012c0:	f003 f838 	bl	8004334 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ca:	f000 fe87 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM2_Init+0x98>)
 80012dc:	f003 f9f4 	bl	80046c8 <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012e6:	f000 fe79 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM2_Init+0x98>)
 80012f8:	f003 fc0c 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001302:	f000 fe6b 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000724 	.word	0x20000724

08001314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_USART2_UART_Init+0x58>)
 800131a:	4a15      	ldr	r2, [pc, #84]	; (8001370 <MX_USART2_UART_Init+0x5c>)
 800131c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_USART2_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART2_UART_Init+0x58>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART2_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART2_UART_Init+0x58>)
 8001358:	f003 fc82 	bl	8004c60 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001362:	f000 fe3b 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000770 	.word	0x20000770
 8001370:	40004400 	.word	0x40004400

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <MX_GPIO_Init+0x140>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a49      	ldr	r2, [pc, #292]	; (80014b4 <MX_GPIO_Init+0x140>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <MX_GPIO_Init+0x140>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <MX_GPIO_Init+0x140>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a43      	ldr	r2, [pc, #268]	; (80014b4 <MX_GPIO_Init+0x140>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <MX_GPIO_Init+0x140>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <MX_GPIO_Init+0x140>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <MX_GPIO_Init+0x140>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <MX_GPIO_Init+0x140>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <MX_GPIO_Init+0x140>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <MX_GPIO_Init+0x140>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b35      	ldr	r3, [pc, #212]	; (80014b4 <MX_GPIO_Init+0x140>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 7148 	mov.w	r1, #800	; 0x320
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f001 fc10 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2120      	movs	r1, #32
 80013fc:	482e      	ldr	r0, [pc, #184]	; (80014b8 <MX_GPIO_Init+0x144>)
 80013fe:	f001 fc0b 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001408:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4828      	ldr	r0, [pc, #160]	; (80014bc <MX_GPIO_Init+0x148>)
 800141a:	f001 fa3b 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_SHLD_BUTTON_Pin S2_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S1_SHLD_BUTTON_Pin|S2_SHLD_BUTTON_Pin;
 800141e:	2312      	movs	r3, #18
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001426:	2301      	movs	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f001 fa2e 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001438:	2320      	movs	r3, #32
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f001 fa1f 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S3_SHLD_BUTTON_Pin;
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145e:	2301      	movs	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S3_SHLD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4813      	ldr	r0, [pc, #76]	; (80014b8 <MX_GPIO_Init+0x144>)
 800146a:	f001 fa13 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_D7_SEG7_Clock_Pin SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800147c:	2301      	movs	r3, #1
 800147e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148a:	f001 fa03 	bl	8002894 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 800148e:	2320      	movs	r3, #32
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_GPIO_Init+0x144>)
 80014a6:	f001 f9f5 	bl	8002894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	48000400 	.word	0x48000400
 80014bc:	48000800 	.word	0x48000800

080014c0 <teller_functionality>:
* @param TELLER_GPIO_PORT: The port of the GPIO pin which controls the forced break functionality.
* @param TELLER_GPIO_PIN: The GPIO pin which holds the value of the forced break button.n.
* @retval None
*/
void teller_functionality(TELLER_INFO* teller_info, osThreadId_t tellerHandler, GPIO_TypeDef* TELLER_GPIO_PORT, uint16_t TELLER_GPIO_PIN)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b09b      	sub	sp, #108	; 0x6c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	807b      	strh	r3, [r7, #2]
	uint32_t pre_wait_reference;
	uint32_t wait_discrepancy;
	for(;;)
	{
		// Teller starts working.
		teller_info->status = status_working;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		// Stop teller when the day ends.
		if((osMessageQueueGetCount(customerQueueHandle) == 0) && (HAL_GetTick() >= (TIME_IN_WORK_DAY_MS + SIMULATED_TIME_START)))
 80014d6:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <teller_functionality+0x208>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fd02 	bl	8005ee4 <osMessageQueueGetCount>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d110      	bne.n	8001508 <teller_functionality+0x48>
 80014e6:	f001 f8e7 	bl	80026b8 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	4b77      	ldr	r3, [pc, #476]	; (80016cc <teller_functionality+0x20c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 80014f4:	3310      	adds	r3, #16
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d306      	bcc.n	8001508 <teller_functionality+0x48>
		{
			teller_info->status = status_done_for_the_day;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2203      	movs	r2, #3
 80014fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			osThreadSuspend(tellerHandler);
 8001502:	68b8      	ldr	r0, [r7, #8]
 8001504:	f004 fa73 	bl	80059ee <osThreadSuspend>
		}

		/* --- First step is to obtain a customer --- */

		// [A: 1/2] We assume the teller will have to wait for a customer...
		teller_info->status = status_waiting;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		// [A: 2/2] ...so we grab a reference snapshot of the current time to calculate total wait later.
		pre_wait_reference = HAL_GetTick();
 8001510:	f001 f8d2 	bl	80026b8 <HAL_GetTick>
 8001514:	6638      	str	r0, [r7, #96]	; 0x60

		// Attempt to grab the next customer from the queue.
		osMessageQueueGet(customerQueueHandle, &current_customer, 0, osWaitForever);
 8001516:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <teller_functionality+0x208>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	f107 0110 	add.w	r1, r7, #16
 800151e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001522:	2200      	movs	r2, #0
 8001524:	f004 fc80 	bl	8005e28 <osMessageQueueGet>

		// If the teller was able to unblock, it means a customer was successfully obtained -> teller is no longer waiting
		wait_discrepancy = HAL_GetTick() - pre_wait_reference;
 8001528:	f001 f8c6 	bl	80026b8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	65fb      	str	r3, [r7, #92]	; 0x5c
		teller_info->status = status_working;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		// This is time the customer had to wait in the queue before being serviced.
		customer_time_spent_in_queue = HAL_GetTick() - current_customer.time_entered_queue;
 800153c:	f001 f8bc 	bl	80026b8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	65bb      	str	r3, [r7, #88]	; 0x58

		// [B: 1/2] If the time discrepancy is too high, it probably means the teller had to wait...
		if(wait_discrepancy > TELLER_WAIT_TOLERANCE)
 8001548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d91c      	bls.n	8001588 <teller_functionality+0xc8>
		{
			// [B: 2/2] ...so update the teller's wait statistics.
			teller_info->total_wait_time += (wait_discrepancy - TELLER_WAIT_TOLERANCE);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8b9a      	ldrh	r2, [r3, #28]
 8001552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001554:	b29b      	uxth	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	3b0a      	subs	r3, #10
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	839a      	strh	r2, [r3, #28]
			teller_info->total_waits_taken++;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8bdb      	ldrh	r3, [r3, #30]
 8001566:	3301      	adds	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	83da      	strh	r2, [r3, #30]
			teller_info->max_wait_time = MAX(teller_info->max_wait_time, (wait_discrepancy - TELLER_WAIT_TOLERANCE));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	657b      	str	r3, [r7, #84]	; 0x54
 8001574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001576:	3b0a      	subs	r3, #10
 8001578:	653b      	str	r3, [r7, #80]	; 0x50
 800157a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800157c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157e:	429a      	cmp	r2, r3
 8001580:	bf38      	it	cc
 8001582:	461a      	movcc	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	601a      	str	r2, [r3, #0]
		}

		/* --- Move on to process customer --- */

		// Record statistic about customer.
		teller_info->total_customers_serviced++;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8adb      	ldrh	r3, [r3, #22]
 800158c:	3301      	adds	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	82da      	strh	r2, [r3, #22]
		teller_info->total_service_time += current_customer.service_time;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8a9a      	ldrh	r2, [r3, #20]
 8001598:	8a3b      	ldrh	r3, [r7, #16]
 800159a:	4413      	add	r3, r2
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	829a      	strh	r2, [r3, #20]
		teller_info->max_service_time = MAX(teller_info->max_service_time, current_customer.service_time);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015a8:	8a3b      	ldrh	r3, [r7, #16]
 80015aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80015ae:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80015b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015b4:	429a      	cmp	r2, r3
 80015b6:	bf38      	it	cc
 80015b8:	461a      	movcc	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	605a      	str	r2, [r3, #4]


		// Access global variables to update customer queue time statistics.
		osMutexAcquire(Mutex01Handle, osWaitForever);
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <teller_functionality+0x210>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fad3 	bl	8005b72 <osMutexAcquire>
		max_customer_queue_time = MAX(max_customer_queue_time, customer_time_spent_in_queue);
 80015cc:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <teller_functionality+0x214>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
 80015d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40
 80015d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015da:	4293      	cmp	r3, r2
 80015dc:	bf38      	it	cc
 80015de:	4613      	movcc	r3, r2
 80015e0:	4a3c      	ldr	r2, [pc, #240]	; (80016d4 <teller_functionality+0x214>)
 80015e2:	6013      	str	r3, [r2, #0]
		total_customer_queue_time += customer_time_spent_in_queue;
 80015e4:	4b3c      	ldr	r3, [pc, #240]	; (80016d8 <teller_functionality+0x218>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ea:	4413      	add	r3, r2
 80015ec:	4a3a      	ldr	r2, [pc, #232]	; (80016d8 <teller_functionality+0x218>)
 80015ee:	6013      	str	r3, [r2, #0]
		osMutexRelease(Mutex01Handle);
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <teller_functionality+0x210>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f004 fb07 	bl	8005c08 <osMutexRelease>

		// Simulate time spent servicing customer.
		osDelay(current_customer.service_time);
 80015fa:	8a3b      	ldrh	r3, [r7, #16]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 fa17 	bl	8005a30 <osDelay>


		/* --- Check for breaks only after finishing with a customer --- */
		for(int i = 0; i < 2; i++) // check twice in case of chaining of natural break -> forced break
 8001602:	2300      	movs	r3, #0
 8001604:	667b      	str	r3, [r7, #100]	; 0x64
 8001606:	e0c1      	b.n	800178c <teller_functionality+0x2cc>
		{
			// Forced break -> takes priority over natural break.
			if(HAL_GPIO_ReadPin(TELLER_GPIO_PORT, TELLER_GPIO_PIN) == FORCE_BREAK_BUTTON_PRESSED)
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f001 faeb 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d161      	bne.n	80016dc <teller_functionality+0x21c>
			{
				// Grab reference point
				forced_break_start_time = HAL_GetTick();
 8001618:	f001 f84e 	bl	80026b8 <HAL_GetTick>
 800161c:	62b8      	str	r0, [r7, #40]	; 0x28
				teller_info->status = status_on_break;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2202      	movs	r2, #2
 8001622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				// Stay until the forced break is released
				while(HAL_GPIO_ReadPin(TELLER_GPIO_PORT, TELLER_GPIO_PIN) == FORCE_BREAK_BUTTON_PRESSED)
 8001626:	e002      	b.n	800162e <teller_functionality+0x16e>
				{
					osDelay(1);
 8001628:	2001      	movs	r0, #1
 800162a:	f004 fa01 	bl	8005a30 <osDelay>
				while(HAL_GPIO_ReadPin(TELLER_GPIO_PORT, TELLER_GPIO_PIN) == FORCE_BREAK_BUTTON_PRESSED)
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 fad8 	bl	8002be8 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f4      	beq.n	8001628 <teller_functionality+0x168>
				}

				// Break ends.
				teller_info->status = status_working;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				// [C: 1/2] Calculate break time and updated statistics...
				break_time = HAL_GetTick() - forced_break_start_time;
 8001646:	f001 f837 	bl	80026b8 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	63fb      	str	r3, [r7, #60]	; 0x3c
				teller_info->max_break_time = MAX(teller_info->max_break_time, break_time);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
 8001658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	429a      	cmp	r2, r3
 8001662:	bf38      	it	cc
 8001664:	461a      	movcc	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	609a      	str	r2, [r3, #8]
				teller_info->min_break_time = MIN(teller_info->min_break_time, break_time);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	429a      	cmp	r2, r3
 800167a:	bf28      	it	cs
 800167c:	461a      	movcs	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	60da      	str	r2, [r3, #12]
				teller_info->total_break_time += break_time;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8b1a      	ldrh	r2, [r3, #24]
 8001686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001688:	b29b      	uxth	r3, r3
 800168a:	4413      	add	r3, r2
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	831a      	strh	r2, [r3, #24]
				teller_info->total_breaks_taken++;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8b5b      	ldrh	r3, [r3, #26]
 8001696:	3301      	adds	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	835a      	strh	r2, [r3, #26]

				// [C: 2/2] ...teller was just on break, so recalculate next available natural break time
				teller_info->next_available_natural_break_time = HAL_GetTick() + rand_range(MIN_TELLER_BREAK_WAIT, MAX_TELLER_BREAK_WAIT);
 800169e:	f001 f80b 	bl	80026b8 <HAL_GetTick>
 80016a2:	4604      	mov	r4, r0
 80016a4:	f241 7270 	movw	r2, #6000	; 0x1770
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	f000 fd32 	bl	800211c <rand_range>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4613      	mov	r3, r2
 80016be:	18e2      	adds	r2, r4, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	e05f      	b.n	8001786 <teller_functionality+0x2c6>
 80016c6:	bf00      	nop
 80016c8:	20000810 	.word	0x20000810
 80016cc:	20000818 	.word	0x20000818
 80016d0:	20000814 	.word	0x20000814
 80016d4:	2000071c 	.word	0x2000071c
 80016d8:	20000718 	.word	0x20000718


			} // Natural break.
			else if(HAL_GetTick() >= teller_info->next_available_natural_break_time)
 80016dc:	f000 ffec 	bl	80026b8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d34d      	bcc.n	8001786 <teller_functionality+0x2c6>
			{

				// Generate a random break duration and update statistics.
				break_time = rand_range(MIN_TELLER_BREAK_TIME, MAX_TELLER_BREAK_TIME);
 80016ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	f04f 0064 	mov.w	r0, #100	; 0x64
 80016f6:	f04f 0100 	mov.w	r1, #0
 80016fa:	f000 fd0f 	bl	800211c <rand_range>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4613      	mov	r3, r2
 8001704:	63fb      	str	r3, [r7, #60]	; 0x3c
				teller_info->max_break_time = MAX(teller_info->max_break_time, break_time);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
 800170c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
 8001710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001714:	429a      	cmp	r2, r3
 8001716:	bf38      	it	cc
 8001718:	461a      	movcc	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	609a      	str	r2, [r3, #8]
				teller_info->min_break_time = MIN(teller_info->min_break_time, break_time);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
 8001724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172c:	429a      	cmp	r2, r3
 800172e:	bf28      	it	cs
 8001730:	461a      	movcs	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	60da      	str	r2, [r3, #12]
				teller_info->total_break_time += break_time;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8b1a      	ldrh	r2, [r3, #24]
 800173a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800173c:	b29b      	uxth	r3, r3
 800173e:	4413      	add	r3, r2
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	831a      	strh	r2, [r3, #24]
				teller_info->total_breaks_taken++;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8b5b      	ldrh	r3, [r3, #26]
 800174a:	3301      	adds	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	835a      	strh	r2, [r3, #26]

				// Generate next available break.
				teller_info->next_available_natural_break_time = HAL_GetTick() + rand_range(MIN_TELLER_BREAK_WAIT, MAX_TELLER_BREAK_WAIT);
 8001752:	f000 ffb1 	bl	80026b8 <HAL_GetTick>
 8001756:	4604      	mov	r4, r0
 8001758:	f241 7270 	movw	r2, #6000	; 0x1770
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001764:	f04f 0100 	mov.w	r1, #0
 8001768:	f000 fcd8 	bl	800211c <rand_range>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	18e2      	adds	r2, r4, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	611a      	str	r2, [r3, #16]

				// Go on break.
				teller_info->status = status_on_break;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				osDelay(break_time);
 8001780:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001782:	f004 f955 	bl	8005a30 <osDelay>
		for(int i = 0; i < 2; i++) // check twice in case of chaining of natural break -> forced break
 8001786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001788:	3301      	adds	r3, #1
 800178a:	667b      	str	r3, [r7, #100]	; 0x64
 800178c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800178e:	2b01      	cmp	r3, #1
 8001790:	f77f af3a 	ble.w	8001608 <teller_functionality+0x148>
		teller_info->status = status_working;
 8001794:	e69b      	b.n	80014ce <teller_functionality+0xe>
 8001796:	bf00      	nop

08001798 <StartUpdateSegment>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateSegment */
void StartUpdateSegment(void *argument)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	// Stop generator when the day ends and all work is done.
	bool work_is_done = (osMessageQueueGetCount(customerQueueHandle) == 0) &&
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <StartUpdateSegment+0x98>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 fb9d 	bl	8005ee4 <osMessageQueueGetCount>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d119      	bne.n	80017e4 <StartUpdateSegment+0x4c>
						((eTaskGetState(teller01Handle) == eSuspended) ||
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <StartUpdateSegment+0x9c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 fe73 	bl	80074a0 <eTaskGetState>
 80017ba:	4603      	mov	r3, r0
	bool work_is_done = (osMessageQueueGetCount(customerQueueHandle) == 0) &&
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d00f      	beq.n	80017e0 <StartUpdateSegment+0x48>
	  					(eTaskGetState(teller02Handle) == eSuspended) ||
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <StartUpdateSegment+0xa0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 fe6b 	bl	80074a0 <eTaskGetState>
 80017ca:	4603      	mov	r3, r0
						((eTaskGetState(teller01Handle) == eSuspended) ||
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d007      	beq.n	80017e0 <StartUpdateSegment+0x48>
						(eTaskGetState(teller03Handle) == eSuspended));
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <StartUpdateSegment+0xa4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f005 fe63 	bl	80074a0 <eTaskGetState>
 80017da:	4603      	mov	r3, r0
	  					(eTaskGetState(teller02Handle) == eSuspended) ||
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d101      	bne.n	80017e4 <StartUpdateSegment+0x4c>
	bool work_is_done = (osMessageQueueGetCount(customerQueueHandle) == 0) &&
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <StartUpdateSegment+0x4e>
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]

	if(work_is_done && (HAL_GetTick() >= (TIME_IN_WORK_DAY_MS + SIMULATED_TIME_START)))
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00e      	beq.n	8001814 <StartUpdateSegment+0x7c>
 80017f6:	f000 ff5f 	bl	80026b8 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <StartUpdateSegment+0xa8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 8001804:	3310      	adds	r3, #16
 8001806:	429a      	cmp	r2, r3
 8001808:	d304      	bcc.n	8001814 <StartUpdateSegment+0x7c>
	{
		osThreadSuspend(updateSegmentHandle);
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <StartUpdateSegment+0xac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f004 f8ed 	bl	80059ee <osThreadSuspend>
	}

	// [A: 1/2] Constantly update the 7-segment display...
	set_segment_display(osMessageQueueGetCount(customerQueueHandle));
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <StartUpdateSegment+0x98>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f004 fb63 	bl	8005ee4 <osMessageQueueGetCount>
 800181e:	4603      	mov	r3, r0
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fc0c 	bl	8001040 <set_segment_display>

	// [A: 2/2] ... need short delay for display to stay updated properly.
    osDelay(1);
 8001828:	2001      	movs	r0, #1
 800182a:	f004 f901 	bl	8005a30 <osDelay>
  {
 800182e:	e7b7      	b.n	80017a0 <StartUpdateSegment+0x8>
 8001830:	20000810 	.word	0x20000810
 8001834:	20000800 	.word	0x20000800
 8001838:	20000804 	.word	0x20000804
 800183c:	20000808 	.word	0x20000808
 8001840:	20000818 	.word	0x20000818
 8001844:	200007f8 	.word	0x200007f8

08001848 <StartGenCustomerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGenCustomerTask */
void StartGenCustomerTask(void *argument)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	// Stop generator when the day ends.

	if(HAL_GetTick() >= (TIME_IN_WORK_DAY_MS + SIMULATED_TIME_START))
 8001850:	f000 ff32 	bl	80026b8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <StartGenCustomerTask+0x88>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 800185e:	3310      	adds	r3, #16
 8001860:	429a      	cmp	r2, r3
 8001862:	d304      	bcc.n	800186e <StartGenCustomerTask+0x26>
	{
		osThreadSuspend(genCustomerHandle);
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <StartGenCustomerTask+0x8c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f004 f8c0 	bl	80059ee <osThreadSuspend>
	}

	// New customer arrives after a random time within a set interval.
	delay_until_next_customer_arrival = rand_range(MIN_CUSTOMER_ARRIVAL_DELAY, MAX_CUSTOMER_ARRIVAL_DELAY);
 800186e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	f04f 0064 	mov.w	r0, #100	; 0x64
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	f000 fc4d 	bl	800211c <rand_range>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4613      	mov	r3, r2
 8001888:	61fb      	str	r3, [r7, #28]

	// Generate a new customer with randomized service time.
	reset_and_init_customer(&customer_template);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fb57 	bl	8000f42 <reset_and_init_customer>

	// Send customer to queue to be picked up by tellers.
	osMessageQueuePut(customerQueueHandle, &customer_template, 0U, osWaitForever);
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <StartGenCustomerTask+0x90>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	f107 010c 	add.w	r1, r7, #12
 800189c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a0:	2200      	movs	r2, #0
 80018a2:	f004 fa61 	bl	8005d68 <osMessageQueuePut>

	// Record queue statistics.
	max_customer_queue_depth = MAX(max_customer_queue_depth, osMessageQueueGetCount(customerQueueHandle));
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <StartGenCustomerTask+0x94>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <StartGenCustomerTask+0x90>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 fb17 	bl	8005ee4 <osMessageQueueGetCount>
 80018b6:	6178      	str	r0, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4293      	cmp	r3, r2
 80018be:	bf38      	it	cc
 80018c0:	4613      	movcc	r3, r2
 80018c2:	4a06      	ldr	r2, [pc, #24]	; (80018dc <StartGenCustomerTask+0x94>)
 80018c4:	6013      	str	r3, [r2, #0]

	// Simulate time between customers.
	osDelay(delay_until_next_customer_arrival);
 80018c6:	69f8      	ldr	r0, [r7, #28]
 80018c8:	f004 f8b2 	bl	8005a30 <osDelay>
	if(HAL_GetTick() >= (TIME_IN_WORK_DAY_MS + SIMULATED_TIME_START))
 80018cc:	e7c0      	b.n	8001850 <StartGenCustomerTask+0x8>
 80018ce:	bf00      	nop
 80018d0:	20000818 	.word	0x20000818
 80018d4:	200007fc 	.word	0x200007fc
 80018d8:	20000810 	.word	0x20000810
 80018dc:	20000720 	.word	0x20000720

080018e0 <StartTeller01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller01 */
void StartTeller01(void *argument)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller01 */
  /* Infinite loop */

  // All tellers share the same functionality.
  teller_functionality(&teller01_info, teller01Handle, TELLER01_FORCE_BREAK_BUTTON_PORT, TELLER01_FORCE_BREAK_BUTTON_PIN);
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <StartTeller01+0x20>)
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	2302      	movs	r3, #2
 80018ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80018f2:	4804      	ldr	r0, [pc, #16]	; (8001904 <StartTeller01+0x24>)
 80018f4:	f7ff fde4 	bl	80014c0 <teller_functionality>

  /* USER CODE END StartTeller01 */
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000800 	.word	0x20000800
 8001904:	2000081c 	.word	0x2000081c

08001908 <StartTeller02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller02 */
void StartTeller02(void *argument)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller02 */
  /* Infinite loop */

  // All tellers share the same functionality.
  teller_functionality(&teller02_info, teller02Handle, TELLER02_FORCE_BREAK_BUTTON_PORT, TELLER02_FORCE_BREAK_BUTTON_PIN);
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <StartTeller02+0x20>)
 8001912:	6819      	ldr	r1, [r3, #0]
 8001914:	2310      	movs	r3, #16
 8001916:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800191a:	4804      	ldr	r0, [pc, #16]	; (800192c <StartTeller02+0x24>)
 800191c:	f7ff fdd0 	bl	80014c0 <teller_functionality>

  /* USER CODE END StartTeller02 */
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000804 	.word	0x20000804
 800192c:	20000840 	.word	0x20000840

08001930 <StartTeller03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller03 */
void StartTeller03(void *argument)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller03 */
  /* Infinite loop */

  // All tellers share the same functionality.
  teller_functionality(&teller03_info, teller03Handle, TELLER03_FORCE_BREAK_BUTTON_PORT, TELLER03_FORCE_BREAK_BUTTON_PIN);
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <StartTeller03+0x20>)
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	2301      	movs	r3, #1
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <StartTeller03+0x24>)
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <StartTeller03+0x28>)
 8001942:	f7ff fdbd 	bl	80014c0 <teller_functionality>

  /* USER CODE END StartTeller03 */
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000808 	.word	0x20000808
 8001954:	48000400 	.word	0x48000400
 8001958:	20000864 	.word	0x20000864

0800195c <StartSimMonitorInfo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSimMonitorInfo */
void StartSimMonitorInfo(void *argument)
{
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	b09f      	sub	sp, #124	; 0x7c
 8001960:	af06      	add	r7, sp, #24
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t total_num_waits;


  for(;;)
  {
	current_time_ms = HAL_GetTick();
 8001964:	f000 fea8 	bl	80026b8 <HAL_GetTick>
 8001968:	65f8      	str	r0, [r7, #92]	; 0x5c

	sim_hours = MS_TO_SIM_HOURS(current_time_ms);
 800196a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800196c:	4a4d      	ldr	r2, [pc, #308]	; (8001aa4 <StartSimMonitorInfo+0x148>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	09db      	lsrs	r3, r3, #7
 8001974:	65bb      	str	r3, [r7, #88]	; 0x58
	sim_min = MS_TO_SIM_MIN(current_time_ms);
 8001976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001978:	4a4b      	ldr	r2, [pc, #300]	; (8001aa8 <StartSimMonitorInfo+0x14c>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	657b      	str	r3, [r7, #84]	; 0x54

	teller01_info_str = STATUS_TO_STR[teller01_info.status];
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <StartSimMonitorInfo+0x150>)
 8001984:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001988:	461a      	mov	r2, r3
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <StartSimMonitorInfo+0x154>)
 800198c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001990:	653b      	str	r3, [r7, #80]	; 0x50
	teller02_info_str = STATUS_TO_STR[teller02_info.status];
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <StartSimMonitorInfo+0x158>)
 8001994:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001998:	461a      	mov	r2, r3
 800199a:	4b45      	ldr	r3, [pc, #276]	; (8001ab0 <StartSimMonitorInfo+0x154>)
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	teller03_info_str = STATUS_TO_STR[teller03_info.status];
 80019a2:	4b45      	ldr	r3, [pc, #276]	; (8001ab8 <StartSimMonitorInfo+0x15c>)
 80019a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <StartSimMonitorInfo+0x154>)
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	64bb      	str	r3, [r7, #72]	; 0x48

	max_customer_queue_depth = MAX(max_customer_queue_depth, osMessageQueueGetCount(customerQueueHandle));
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <StartSimMonitorInfo+0x160>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
 80019b8:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <StartSimMonitorInfo+0x164>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fa91 	bl	8005ee4 <osMessageQueueGetCount>
 80019c2:	6438      	str	r0, [r7, #64]	; 0x40
 80019c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c8:	4293      	cmp	r3, r2
 80019ca:	bf38      	it	cc
 80019cc:	4613      	movcc	r3, r2
 80019ce:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <StartSimMonitorInfo+0x160>)
 80019d0:	6013      	str	r3, [r2, #0]

	// [A: 1/2] Build up the real time data...
	monitor_data_size = sprintf((char*)monitor_buffer, "\r\n\r\nCURRENT TIME: %02ld:%02ld%s\r\nCustomers in queue: %ld\r\nTeller01 status: %s\r\nTeller02 status: %s\r\nTeller03 status: %s\r\n\r\n\r\n",
															(((sim_hours + 8) % 12) + 1),
 80019d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019d4:	f103 0108 	add.w	r1, r3, #8
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <StartSimMonitorInfo+0x168>)
 80019da:	fba3 2301 	umull	r2, r3, r3, r1
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	1aca      	subs	r2, r1, r3
	monitor_data_size = sprintf((char*)monitor_buffer, "\r\n\r\nCURRENT TIME: %02ld:%02ld%s\r\nCustomers in queue: %ld\r\nTeller01 status: %s\r\nTeller02 status: %s\r\nTeller03 status: %s\r\n\r\n\r\n",
 80019ea:	1c56      	adds	r6, r2, #1
 80019ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019ee:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <StartSimMonitorInfo+0x16c>)
 80019f0:	fba3 1302 	umull	r1, r3, r3, r2
 80019f4:	095c      	lsrs	r4, r3, #5
 80019f6:	4623      	mov	r3, r4
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	1b1b      	subs	r3, r3, r4
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	1ad4      	subs	r4, r2, r3
															(sim_min % 60),
															(((sim_hours + 9) % 24) < 12 ? "am" : "pm"),
 8001a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a02:	f103 0109 	add.w	r1, r3, #9
 8001a06:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <StartSimMonitorInfo+0x168>)
 8001a08:	fba3 2301 	umull	r2, r3, r3, r1
 8001a0c:	091a      	lsrs	r2, r3, #4
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	1aca      	subs	r2, r1, r3
	monitor_data_size = sprintf((char*)monitor_buffer, "\r\n\r\nCURRENT TIME: %02ld:%02ld%s\r\nCustomers in queue: %ld\r\nTeller01 status: %s\r\nTeller02 status: %s\r\nTeller03 status: %s\r\n\r\n\r\n",
 8001a18:	2a0b      	cmp	r2, #11
 8001a1a:	d801      	bhi.n	8001a20 <StartSimMonitorInfo+0xc4>
 8001a1c:	4d2b      	ldr	r5, [pc, #172]	; (8001acc <StartSimMonitorInfo+0x170>)
 8001a1e:	e000      	b.n	8001a22 <StartSimMonitorInfo+0xc6>
 8001a20:	4d2b      	ldr	r5, [pc, #172]	; (8001ad0 <StartSimMonitorInfo+0x174>)
 8001a22:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <StartSimMonitorInfo+0x164>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 fa5c 	bl	8005ee4 <osMessageQueueGetCount>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a30:	9304      	str	r3, [sp, #16]
 8001a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a34:	9303      	str	r3, [sp, #12]
 8001a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	9201      	str	r2, [sp, #4]
 8001a3c:	9500      	str	r5, [sp, #0]
 8001a3e:	4623      	mov	r3, r4
 8001a40:	4632      	mov	r2, r6
 8001a42:	4924      	ldr	r1, [pc, #144]	; (8001ad4 <StartSimMonitorInfo+0x178>)
 8001a44:	4824      	ldr	r0, [pc, #144]	; (8001ad8 <StartSimMonitorInfo+0x17c>)
 8001a46:	f007 fc89 	bl	800935c <sprintf>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a23      	ldr	r2, [pc, #140]	; (8001adc <StartSimMonitorInfo+0x180>)
 8001a4e:	6013      	str	r3, [r2, #0]
															teller01_info_str,
															teller02_info_str,
															teller03_info_str);

	// [A: 2/2] ... and print it.
	HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <StartSimMonitorInfo+0x180>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	2364      	movs	r3, #100	; 0x64
 8001a58:	491f      	ldr	r1, [pc, #124]	; (8001ad8 <StartSimMonitorInfo+0x17c>)
 8001a5a:	4821      	ldr	r0, [pc, #132]	; (8001ae0 <StartSimMonitorInfo+0x184>)
 8001a5c:	f003 f94e 	bl	8004cfc <HAL_UART_Transmit>

	// Work is done when there are no more customers in the queue and all of the tellers are done working.
	bool work_is_done = (osMessageQueueGetCount(customerQueueHandle) == 0) &&
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <StartSimMonitorInfo+0x164>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 fa3d 	bl	8005ee4 <osMessageQueueGetCount>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d13f      	bne.n	8001af0 <StartSimMonitorInfo+0x194>
							((eTaskGetState(teller01Handle) == eSuspended) ||
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <StartSimMonitorInfo+0x188>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f005 fd13 	bl	80074a0 <eTaskGetState>
 8001a7a:	4603      	mov	r3, r0
	bool work_is_done = (osMessageQueueGetCount(customerQueueHandle) == 0) &&
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d00f      	beq.n	8001aa0 <StartSimMonitorInfo+0x144>
		  					(eTaskGetState(teller02Handle) == eSuspended) ||
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <StartSimMonitorInfo+0x18c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f005 fd0b 	bl	80074a0 <eTaskGetState>
 8001a8a:	4603      	mov	r3, r0
							((eTaskGetState(teller01Handle) == eSuspended) ||
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d007      	beq.n	8001aa0 <StartSimMonitorInfo+0x144>
							(eTaskGetState(teller03Handle) == eSuspended));
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <StartSimMonitorInfo+0x190>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f005 fd03 	bl	80074a0 <eTaskGetState>
 8001a9a:	4603      	mov	r3, r0
		  					(eTaskGetState(teller02Handle) == eSuspended) ||
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d127      	bne.n	8001af0 <StartSimMonitorInfo+0x194>
	bool work_is_done = (osMessageQueueGetCount(customerQueueHandle) == 0) &&
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e026      	b.n	8001af2 <StartSimMonitorInfo+0x196>
 8001aa4:	057619f1 	.word	0x057619f1
 8001aa8:	51eb851f 	.word	0x51eb851f
 8001aac:	2000081c 	.word	0x2000081c
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000840 	.word	0x20000840
 8001ab8:	20000864 	.word	0x20000864
 8001abc:	20000720 	.word	0x20000720
 8001ac0:	20000810 	.word	0x20000810
 8001ac4:	aaaaaaab 	.word	0xaaaaaaab
 8001ac8:	88888889 	.word	0x88888889
 8001acc:	0800ddd4 	.word	0x0800ddd4
 8001ad0:	0800ddd8 	.word	0x0800ddd8
 8001ad4:	0800dddc 	.word	0x0800dddc
 8001ad8:	20000888 	.word	0x20000888
 8001adc:	20000a7c 	.word	0x20000a7c
 8001ae0:	20000770 	.word	0x20000770
 8001ae4:	20000800 	.word	0x20000800
 8001ae8:	20000804 	.word	0x20000804
 8001aec:	20000808 	.word	0x20000808
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001af6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	// Stop when the day ends and all work is done.
	if(work_is_done && (HAL_GetTick() >= (TIME_IN_WORK_DAY_MS + SIMULATED_TIME_START)))
 8001b02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 823a 	beq.w	8001f80 <StartSimMonitorInfo+0x624>
 8001b0c:	f000 fdd4 	bl	80026b8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4ba4      	ldr	r3, [pc, #656]	; (8001da4 <StartSimMonitorInfo+0x448>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 8001b1a:	3310      	adds	r3, #16
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f0c0 822f 	bcc.w	8001f80 <StartSimMonitorInfo+0x624>
	{
		/* --- At the end of the day, gather all statistics --- */

		monitor_data_size = sprintf((char*)monitor_buffer, "---- WORK DAY STATISTICS ----\r\n\r\n");
 8001b22:	49a1      	ldr	r1, [pc, #644]	; (8001da8 <StartSimMonitorInfo+0x44c>)
 8001b24:	48a1      	ldr	r0, [pc, #644]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001b26:	f007 fc19 	bl	800935c <sprintf>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4aa0      	ldr	r2, [pc, #640]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001b2e:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001b30:	4b9f      	ldr	r3, [pc, #636]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	2364      	movs	r3, #100	; 0x64
 8001b38:	499c      	ldr	r1, [pc, #624]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001b3a:	489e      	ldr	r0, [pc, #632]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001b3c:	f003 f8de 	bl	8004cfc <HAL_UART_Transmit>

		// The total number of customers served during the day.
		total_customers_served = teller01_info.total_customers_serviced +
 8001b40:	4b9d      	ldr	r3, [pc, #628]	; (8001db8 <StartSimMonitorInfo+0x45c>)
 8001b42:	8adb      	ldrh	r3, [r3, #22]
 8001b44:	461a      	mov	r2, r3
								 teller02_info.total_customers_serviced +
 8001b46:	4b9d      	ldr	r3, [pc, #628]	; (8001dbc <StartSimMonitorInfo+0x460>)
 8001b48:	8adb      	ldrh	r3, [r3, #22]
		total_customers_served = teller01_info.total_customers_serviced +
 8001b4a:	4413      	add	r3, r2
								 teller03_info.total_customers_serviced;
 8001b4c:	4a9c      	ldr	r2, [pc, #624]	; (8001dc0 <StartSimMonitorInfo+0x464>)
 8001b4e:	8ad2      	ldrh	r2, [r2, #22]
								 teller02_info.total_customers_serviced +
 8001b50:	4413      	add	r3, r2
		total_customers_served = teller01_info.total_customers_serviced +
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38

		monitor_data_size = sprintf((char*)monitor_buffer, "Total number of customers served during the day: %ld\r\n", total_customers_served);
 8001b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b56:	499b      	ldr	r1, [pc, #620]	; (8001dc4 <StartSimMonitorInfo+0x468>)
 8001b58:	4894      	ldr	r0, [pc, #592]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001b5a:	f007 fbff 	bl	800935c <sprintf>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a93      	ldr	r2, [pc, #588]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001b62:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001b64:	4b92      	ldr	r3, [pc, #584]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	2364      	movs	r3, #100	; 0x64
 8001b6c:	498f      	ldr	r1, [pc, #572]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001b6e:	4891      	ldr	r0, [pc, #580]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001b70:	f003 f8c4 	bl	8004cfc <HAL_UART_Transmit>

		// The number of customers served by Teller 1, by Teller 2, and by Teller 3.
		monitor_data_size = sprintf((char*)monitor_buffer, "The number of customers served by\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
				teller01_info.total_customers_serviced,
 8001b74:	4b90      	ldr	r3, [pc, #576]	; (8001db8 <StartSimMonitorInfo+0x45c>)
 8001b76:	8adb      	ldrh	r3, [r3, #22]
		monitor_data_size = sprintf((char*)monitor_buffer, "The number of customers served by\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001b78:	461a      	mov	r2, r3
				teller02_info.total_customers_serviced,
 8001b7a:	4b90      	ldr	r3, [pc, #576]	; (8001dbc <StartSimMonitorInfo+0x460>)
 8001b7c:	8adb      	ldrh	r3, [r3, #22]
		monitor_data_size = sprintf((char*)monitor_buffer, "The number of customers served by\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001b7e:	4619      	mov	r1, r3
				teller03_info.total_customers_serviced);
 8001b80:	4b8f      	ldr	r3, [pc, #572]	; (8001dc0 <StartSimMonitorInfo+0x464>)
 8001b82:	8adb      	ldrh	r3, [r3, #22]
		monitor_data_size = sprintf((char*)monitor_buffer, "The number of customers served by\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	460b      	mov	r3, r1
 8001b88:	498f      	ldr	r1, [pc, #572]	; (8001dc8 <StartSimMonitorInfo+0x46c>)
 8001b8a:	4888      	ldr	r0, [pc, #544]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001b8c:	f007 fbe6 	bl	800935c <sprintf>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a87      	ldr	r2, [pc, #540]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001b94:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001b96:	4b86      	ldr	r3, [pc, #536]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	2364      	movs	r3, #100	; 0x64
 8001b9e:	4983      	ldr	r1, [pc, #524]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001ba0:	4884      	ldr	r0, [pc, #528]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001ba2:	f003 f8ab 	bl	8004cfc <HAL_UART_Transmit>

		// The average time each customer spends waiting in the queue.
		monitor_data_size = sprintf((char*)monitor_buffer, "The average time each customer spends waiting in the queue: %ld seconds\r\n",
				MS_TO_SIM_SEC((total_customer_queue_time / total_customers_served)));
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <StartSimMonitorInfo+0x470>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The average time each customer spends waiting in the queue: %ld seconds\r\n",
 8001bb6:	4a86      	ldr	r2, [pc, #536]	; (8001dd0 <StartSimMonitorInfo+0x474>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4984      	ldr	r1, [pc, #528]	; (8001dd4 <StartSimMonitorInfo+0x478>)
 8001bc2:	487a      	ldr	r0, [pc, #488]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001bc4:	f007 fbca 	bl	800935c <sprintf>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4a79      	ldr	r2, [pc, #484]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001bcc:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001bce:	4b78      	ldr	r3, [pc, #480]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2364      	movs	r3, #100	; 0x64
 8001bd6:	4975      	ldr	r1, [pc, #468]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001bd8:	4876      	ldr	r0, [pc, #472]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001bda:	f003 f88f 	bl	8004cfc <HAL_UART_Transmit>

		// The average time each customer spends with the teller.
		total_service_time = teller01_info.total_service_time +
 8001bde:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <StartSimMonitorInfo+0x45c>)
 8001be0:	8a9b      	ldrh	r3, [r3, #20]
 8001be2:	461a      	mov	r2, r3
							 teller02_info.total_service_time +
 8001be4:	4b75      	ldr	r3, [pc, #468]	; (8001dbc <StartSimMonitorInfo+0x460>)
 8001be6:	8a9b      	ldrh	r3, [r3, #20]
		total_service_time = teller01_info.total_service_time +
 8001be8:	4413      	add	r3, r2
							 teller03_info.total_service_time;
 8001bea:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <StartSimMonitorInfo+0x464>)
 8001bec:	8a92      	ldrh	r2, [r2, #20]
							 teller02_info.total_service_time +
 8001bee:	4413      	add	r3, r2
		total_service_time = teller01_info.total_service_time +
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34

		monitor_data_size = sprintf((char*)monitor_buffer, "The average time each customer spends with the teller: %ld seconds\r\n",
				MS_TO_SIM_SEC(total_service_time / total_customers_served));
 8001bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The average time each customer spends with the teller: %ld seconds\r\n",
 8001c00:	4a73      	ldr	r2, [pc, #460]	; (8001dd0 <StartSimMonitorInfo+0x474>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4973      	ldr	r1, [pc, #460]	; (8001dd8 <StartSimMonitorInfo+0x47c>)
 8001c0c:	4867      	ldr	r0, [pc, #412]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001c0e:	f007 fba5 	bl	800935c <sprintf>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a66      	ldr	r2, [pc, #408]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001c16:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001c18:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	4962      	ldr	r1, [pc, #392]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001c22:	4864      	ldr	r0, [pc, #400]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001c24:	f003 f86a 	bl	8004cfc <HAL_UART_Transmit>

		// The average time tellers wait for customers.
		total_wait_time = teller01_info.total_wait_time +
 8001c28:	4b63      	ldr	r3, [pc, #396]	; (8001db8 <StartSimMonitorInfo+0x45c>)
 8001c2a:	8b9b      	ldrh	r3, [r3, #28]
 8001c2c:	461a      	mov	r2, r3
						  teller02_info.total_wait_time +
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <StartSimMonitorInfo+0x460>)
 8001c30:	8b9b      	ldrh	r3, [r3, #28]
		total_wait_time = teller01_info.total_wait_time +
 8001c32:	4413      	add	r3, r2
						  teller03_info.total_wait_time;
 8001c34:	4a62      	ldr	r2, [pc, #392]	; (8001dc0 <StartSimMonitorInfo+0x464>)
 8001c36:	8b92      	ldrh	r2, [r2, #28]
						  teller02_info.total_wait_time +
 8001c38:	4413      	add	r3, r2
		total_wait_time = teller01_info.total_wait_time +
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30

		total_num_waits = teller01_info.total_waits_taken +
 8001c3c:	4b5e      	ldr	r3, [pc, #376]	; (8001db8 <StartSimMonitorInfo+0x45c>)
 8001c3e:	8bdb      	ldrh	r3, [r3, #30]
 8001c40:	461a      	mov	r2, r3
						  teller02_info.total_waits_taken +
 8001c42:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <StartSimMonitorInfo+0x460>)
 8001c44:	8bdb      	ldrh	r3, [r3, #30]
		total_num_waits = teller01_info.total_waits_taken +
 8001c46:	4413      	add	r3, r2
						  teller03_info.total_waits_taken;
 8001c48:	4a5d      	ldr	r2, [pc, #372]	; (8001dc0 <StartSimMonitorInfo+0x464>)
 8001c4a:	8bd2      	ldrh	r2, [r2, #30]
						  teller02_info.total_waits_taken +
 8001c4c:	4413      	add	r3, r2
		total_num_waits = teller01_info.total_waits_taken +
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		monitor_data_size = sprintf((char*)monitor_buffer, "The average time tellers wait for customers: %ld seconds\r\n",
				MS_TO_SIM_SEC(total_wait_time / total_num_waits));
 8001c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The average time tellers wait for customers: %ld seconds\r\n",
 8001c5e:	4a5c      	ldr	r2, [pc, #368]	; (8001dd0 <StartSimMonitorInfo+0x474>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	461a      	mov	r2, r3
 8001c68:	495c      	ldr	r1, [pc, #368]	; (8001ddc <StartSimMonitorInfo+0x480>)
 8001c6a:	4850      	ldr	r0, [pc, #320]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001c6c:	f007 fb76 	bl	800935c <sprintf>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a4f      	ldr	r2, [pc, #316]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001c74:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001c76:	4b4e      	ldr	r3, [pc, #312]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	2364      	movs	r3, #100	; 0x64
 8001c7e:	494b      	ldr	r1, [pc, #300]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001c80:	484c      	ldr	r0, [pc, #304]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001c82:	f003 f83b 	bl	8004cfc <HAL_UART_Transmit>

		// The maximum customer wait time in the queue.
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum customer wait time in the queue: %ld seconds\r\n",
				MS_TO_SIM_SEC(max_customer_queue_time));
 8001c86:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <StartSimMonitorInfo+0x484>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum customer wait time in the queue: %ld seconds\r\n",
 8001c90:	4a4f      	ldr	r2, [pc, #316]	; (8001dd0 <StartSimMonitorInfo+0x474>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4952      	ldr	r1, [pc, #328]	; (8001de4 <StartSimMonitorInfo+0x488>)
 8001c9c:	4843      	ldr	r0, [pc, #268]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001c9e:	f007 fb5d 	bl	800935c <sprintf>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001ca6:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001ca8:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	2364      	movs	r3, #100	; 0x64
 8001cb0:	493e      	ldr	r1, [pc, #248]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001cb2:	4840      	ldr	r0, [pc, #256]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001cb4:	f003 f822 	bl	8004cfc <HAL_UART_Transmit>

		// The maximum wait time for tellers waiting for customers.
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum wait time for tellers waiting for customers: %ld seconds\r\n",
				MS_TO_SIM_SEC(MAX(MAX(teller01_info.max_wait_time, teller02_info.max_wait_time), teller03_info.max_wait_time)));
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <StartSimMonitorInfo+0x45c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cbe:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <StartSimMonitorInfo+0x460>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	bf38      	it	cc
 8001ccc:	4613      	movcc	r3, r2
 8001cce:	623b      	str	r3, [r7, #32]
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <StartSimMonitorInfo+0x464>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	bf38      	it	cc
 8001cde:	461a      	movcc	r2, r3
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum wait time for tellers waiting for customers: %ld seconds\r\n",
 8001ce6:	4a3a      	ldr	r2, [pc, #232]	; (8001dd0 <StartSimMonitorInfo+0x474>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	493d      	ldr	r1, [pc, #244]	; (8001de8 <StartSimMonitorInfo+0x48c>)
 8001cf2:	482e      	ldr	r0, [pc, #184]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001cf4:	f007 fb32 	bl	800935c <sprintf>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001cfc:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2364      	movs	r3, #100	; 0x64
 8001d06:	4929      	ldr	r1, [pc, #164]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001d08:	482a      	ldr	r0, [pc, #168]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001d0a:	f002 fff7 	bl	8004cfc <HAL_UART_Transmit>

		// The maximum transaction time for the tellers.
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum transaction time for the tellers: %ld seconds\r\n",
				MS_TO_SIM_SEC(MAX(MAX(teller01_info.max_service_time, teller02_info.max_service_time), teller03_info.max_service_time)));
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <StartSimMonitorInfo+0x45c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <StartSimMonitorInfo+0x460>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	bf38      	it	cc
 8001d22:	4613      	movcc	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <StartSimMonitorInfo+0x464>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	bf38      	it	cc
 8001d34:	461a      	movcc	r2, r3
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum transaction time for the tellers: %ld seconds\r\n",
 8001d3c:	4a24      	ldr	r2, [pc, #144]	; (8001dd0 <StartSimMonitorInfo+0x474>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4929      	ldr	r1, [pc, #164]	; (8001dec <StartSimMonitorInfo+0x490>)
 8001d48:	4818      	ldr	r0, [pc, #96]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001d4a:	f007 fb07 	bl	800935c <sprintf>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001d52:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	2364      	movs	r3, #100	; 0x64
 8001d5c:	4913      	ldr	r1, [pc, #76]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001d5e:	4815      	ldr	r0, [pc, #84]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001d60:	f002 ffcc 	bl	8004cfc <HAL_UART_Transmit>

		// The maximum depth of the customer queue.
		monitor_data_size = sprintf((char*)monitor_buffer, "The maximum depth of the customer queue: %ld\r\n",
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <StartSimMonitorInfo+0x494>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4922      	ldr	r1, [pc, #136]	; (8001df4 <StartSimMonitorInfo+0x498>)
 8001d6c:	480f      	ldr	r0, [pc, #60]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001d6e:	f007 faf5 	bl	800935c <sprintf>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001d76:	6013      	str	r3, [r2, #0]
				max_customer_queue_depth);
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	2364      	movs	r3, #100	; 0x64
 8001d80:	490a      	ldr	r1, [pc, #40]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <StartSimMonitorInfo+0x458>)
 8001d84:	f002 ffba 	bl	8004cfc <HAL_UART_Transmit>

		// The idle hook count.
		monitor_data_size = sprintf((char*)monitor_buffer, "The idle hook count: %" PRIu64 "\r\n",
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <StartSimMonitorInfo+0x49c>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	491b      	ldr	r1, [pc, #108]	; (8001dfc <StartSimMonitorInfo+0x4a0>)
 8001d90:	4806      	ldr	r0, [pc, #24]	; (8001dac <StartSimMonitorInfo+0x450>)
 8001d92:	f007 fae3 	bl	800935c <sprintf>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001d9a:	6013      	str	r3, [r2, #0]
				idle_hook_count);
		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <StartSimMonitorInfo+0x454>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	e02e      	b.n	8001e00 <StartSimMonitorInfo+0x4a4>
 8001da2:	bf00      	nop
 8001da4:	20000818 	.word	0x20000818
 8001da8:	0800de5c 	.word	0x0800de5c
 8001dac:	20000888 	.word	0x20000888
 8001db0:	20000a7c 	.word	0x20000a7c
 8001db4:	20000770 	.word	0x20000770
 8001db8:	2000081c 	.word	0x2000081c
 8001dbc:	20000840 	.word	0x20000840
 8001dc0:	20000864 	.word	0x20000864
 8001dc4:	0800de80 	.word	0x0800de80
 8001dc8:	0800deb8 	.word	0x0800deb8
 8001dcc:	20000718 	.word	0x20000718
 8001dd0:	cccccccd 	.word	0xcccccccd
 8001dd4:	0800df0c 	.word	0x0800df0c
 8001dd8:	0800df58 	.word	0x0800df58
 8001ddc:	0800dfa0 	.word	0x0800dfa0
 8001de0:	2000071c 	.word	0x2000071c
 8001de4:	0800dfdc 	.word	0x0800dfdc
 8001de8:	0800e018 	.word	0x0800e018
 8001dec:	0800e060 	.word	0x0800e060
 8001df0:	20000720 	.word	0x20000720
 8001df4:	0800e09c 	.word	0x0800e09c
 8001df8:	20000710 	.word	0x20000710
 8001dfc:	0800e0cc 	.word	0x0800e0cc
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	2364      	movs	r3, #100	; 0x64
 8001e04:	4960      	ldr	r1, [pc, #384]	; (8001f88 <StartSimMonitorInfo+0x62c>)
 8001e06:	4861      	ldr	r0, [pc, #388]	; (8001f8c <StartSimMonitorInfo+0x630>)
 8001e08:	f002 ff78 	bl	8004cfc <HAL_UART_Transmit>

		// Number of breaks for each of the three tellers.
		monitor_data_size = sprintf((char*)monitor_buffer, "Number of breaks for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
				teller01_info.total_breaks_taken,
 8001e0c:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <StartSimMonitorInfo+0x634>)
 8001e0e:	8b5b      	ldrh	r3, [r3, #26]
		monitor_data_size = sprintf((char*)monitor_buffer, "Number of breaks for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001e10:	461a      	mov	r2, r3
				teller02_info.total_breaks_taken,
 8001e12:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <StartSimMonitorInfo+0x638>)
 8001e14:	8b5b      	ldrh	r3, [r3, #26]
		monitor_data_size = sprintf((char*)monitor_buffer, "Number of breaks for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001e16:	4619      	mov	r1, r3
				teller03_info.total_breaks_taken);
 8001e18:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <StartSimMonitorInfo+0x63c>)
 8001e1a:	8b5b      	ldrh	r3, [r3, #26]
		monitor_data_size = sprintf((char*)monitor_buffer, "Number of breaks for each of the three tellers\r\n\tTeller01: %d\r\n\tTeller02: %d\r\n\tTeller03: %d\r\n",
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	495e      	ldr	r1, [pc, #376]	; (8001f9c <StartSimMonitorInfo+0x640>)
 8001e22:	4859      	ldr	r0, [pc, #356]	; (8001f88 <StartSimMonitorInfo+0x62c>)
 8001e24:	f007 fa9a 	bl	800935c <sprintf>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <StartSimMonitorInfo+0x644>)
 8001e2c:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001e2e:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <StartSimMonitorInfo+0x644>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	2364      	movs	r3, #100	; 0x64
 8001e36:	4954      	ldr	r1, [pc, #336]	; (8001f88 <StartSimMonitorInfo+0x62c>)
 8001e38:	4854      	ldr	r0, [pc, #336]	; (8001f8c <StartSimMonitorInfo+0x630>)
 8001e3a:	f002 ff5f 	bl	8004cfc <HAL_UART_Transmit>

		// Average break time for each of the three tellers.
		monitor_data_size = sprintf((char*)monitor_buffer, "Average break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
				MS_TO_SIM_SEC(teller01_info.total_break_time / teller01_info.total_breaks_taken),
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <StartSimMonitorInfo+0x634>)
 8001e40:	8b1a      	ldrh	r2, [r3, #24]
 8001e42:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <StartSimMonitorInfo+0x634>)
 8001e44:	8b5b      	ldrh	r3, [r3, #26]
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	461a      	mov	r2, r3
		monitor_data_size = sprintf((char*)monitor_buffer, "Average break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
 8001e56:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <StartSimMonitorInfo+0x648>)
 8001e58:	fba3 2302 	umull	r2, r3, r3, r2
 8001e5c:	0899      	lsrs	r1, r3, #2
				MS_TO_SIM_SEC(teller02_info.total_break_time / teller02_info.total_breaks_taken),
 8001e5e:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <StartSimMonitorInfo+0x638>)
 8001e60:	8b1a      	ldrh	r2, [r3, #24]
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <StartSimMonitorInfo+0x638>)
 8001e64:	8b5b      	ldrh	r3, [r3, #26]
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	461a      	mov	r2, r3
		monitor_data_size = sprintf((char*)monitor_buffer, "Average break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
 8001e76:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <StartSimMonitorInfo+0x648>)
 8001e78:	fba3 2302 	umull	r2, r3, r3, r2
 8001e7c:	0898      	lsrs	r0, r3, #2
				MS_TO_SIM_SEC(teller03_info.total_break_time / teller03_info.total_breaks_taken));
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <StartSimMonitorInfo+0x63c>)
 8001e80:	8b1a      	ldrh	r2, [r3, #24]
 8001e82:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <StartSimMonitorInfo+0x63c>)
 8001e84:	8b5b      	ldrh	r3, [r3, #26]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	461a      	mov	r2, r3
		monitor_data_size = sprintf((char*)monitor_buffer, "Average break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <StartSimMonitorInfo+0x648>)
 8001e98:	fba3 2302 	umull	r2, r3, r3, r2
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	4940      	ldr	r1, [pc, #256]	; (8001fa8 <StartSimMonitorInfo+0x64c>)
 8001ea6:	4838      	ldr	r0, [pc, #224]	; (8001f88 <StartSimMonitorInfo+0x62c>)
 8001ea8:	f007 fa58 	bl	800935c <sprintf>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4a3c      	ldr	r2, [pc, #240]	; (8001fa0 <StartSimMonitorInfo+0x644>)
 8001eb0:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <StartSimMonitorInfo+0x644>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	2364      	movs	r3, #100	; 0x64
 8001eba:	4933      	ldr	r1, [pc, #204]	; (8001f88 <StartSimMonitorInfo+0x62c>)
 8001ebc:	4833      	ldr	r0, [pc, #204]	; (8001f8c <StartSimMonitorInfo+0x630>)
 8001ebe:	f002 ff1d 	bl	8004cfc <HAL_UART_Transmit>

		// Longest break time for each of the three tellers
		monitor_data_size = sprintf((char*)monitor_buffer, "Longest break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
				MS_TO_SIM_SEC(teller01_info.max_break_time),
 8001ec2:	4b33      	ldr	r3, [pc, #204]	; (8001f90 <StartSimMonitorInfo+0x634>)
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "Longest break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
 8001ecc:	4a35      	ldr	r2, [pc, #212]	; (8001fa4 <StartSimMonitorInfo+0x648>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0899      	lsrs	r1, r3, #2
				MS_TO_SIM_SEC(teller02_info.max_break_time),
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <StartSimMonitorInfo+0x638>)
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "Longest break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
 8001ede:	4a31      	ldr	r2, [pc, #196]	; (8001fa4 <StartSimMonitorInfo+0x648>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	0898      	lsrs	r0, r3, #2
				MS_TO_SIM_SEC(teller03_info.max_break_time));
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <StartSimMonitorInfo+0x63c>)
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "Longest break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
 8001ef0:	4a2c      	ldr	r2, [pc, #176]	; (8001fa4 <StartSimMonitorInfo+0x648>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	4603      	mov	r3, r0
 8001efc:	460a      	mov	r2, r1
 8001efe:	492b      	ldr	r1, [pc, #172]	; (8001fac <StartSimMonitorInfo+0x650>)
 8001f00:	4821      	ldr	r0, [pc, #132]	; (8001f88 <StartSimMonitorInfo+0x62c>)
 8001f02:	f007 fa2b 	bl	800935c <sprintf>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <StartSimMonitorInfo+0x644>)
 8001f0a:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001f0c:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <StartSimMonitorInfo+0x644>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	2364      	movs	r3, #100	; 0x64
 8001f14:	491c      	ldr	r1, [pc, #112]	; (8001f88 <StartSimMonitorInfo+0x62c>)
 8001f16:	481d      	ldr	r0, [pc, #116]	; (8001f8c <StartSimMonitorInfo+0x630>)
 8001f18:	f002 fef0 	bl	8004cfc <HAL_UART_Transmit>

		// Shortest break time for each of the three tellers
		monitor_data_size = sprintf((char*)monitor_buffer, "Shortest break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
				MS_TO_SIM_SEC(teller01_info.min_break_time),
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <StartSimMonitorInfo+0x634>)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "Shortest break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
 8001f26:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <StartSimMonitorInfo+0x648>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	0899      	lsrs	r1, r3, #2
				MS_TO_SIM_SEC(teller02_info.min_break_time),
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <StartSimMonitorInfo+0x638>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "Shortest break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
 8001f38:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <StartSimMonitorInfo+0x648>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0898      	lsrs	r0, r3, #2
				MS_TO_SIM_SEC(teller03_info.min_break_time));
 8001f40:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <StartSimMonitorInfo+0x63c>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
		monitor_data_size = sprintf((char*)monitor_buffer, "Shortest break time for each of the three tellers\r\n\tTeller01: %ld seconds\r\n\tTeller02: %ld seconds\r\n\tTeller03: %ld seconds\r\n",
 8001f4a:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <StartSimMonitorInfo+0x648>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	4603      	mov	r3, r0
 8001f56:	460a      	mov	r2, r1
 8001f58:	4915      	ldr	r1, [pc, #84]	; (8001fb0 <StartSimMonitorInfo+0x654>)
 8001f5a:	480b      	ldr	r0, [pc, #44]	; (8001f88 <StartSimMonitorInfo+0x62c>)
 8001f5c:	f007 f9fe 	bl	800935c <sprintf>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <StartSimMonitorInfo+0x644>)
 8001f64:	6013      	str	r3, [r2, #0]

		HAL_UART_Transmit(&huart2, monitor_buffer, monitor_data_size, 100U);
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <StartSimMonitorInfo+0x644>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	2364      	movs	r3, #100	; 0x64
 8001f6e:	4906      	ldr	r1, [pc, #24]	; (8001f88 <StartSimMonitorInfo+0x62c>)
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <StartSimMonitorInfo+0x630>)
 8001f72:	f002 fec3 	bl	8004cfc <HAL_UART_Transmit>

		osThreadSuspend(simMonitorInfoHandle);
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <StartSimMonitorInfo+0x658>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fd37 	bl	80059ee <osThreadSuspend>
	}

	// Update monitor info every one minute of simulated time.
    osDelay(100);
 8001f80:	2064      	movs	r0, #100	; 0x64
 8001f82:	f003 fd55 	bl	8005a30 <osDelay>
  {
 8001f86:	e4ed      	b.n	8001964 <StartSimMonitorInfo+0x8>
 8001f88:	20000888 	.word	0x20000888
 8001f8c:	20000770 	.word	0x20000770
 8001f90:	2000081c 	.word	0x2000081c
 8001f94:	20000840 	.word	0x20000840
 8001f98:	20000864 	.word	0x20000864
 8001f9c:	0800e0e8 	.word	0x0800e0e8
 8001fa0:	20000a7c 	.word	0x20000a7c
 8001fa4:	cccccccd 	.word	0xcccccccd
 8001fa8:	0800e148 	.word	0x0800e148
 8001fac:	0800e1c4 	.word	0x0800e1c4
 8001fb0:	0800e240 	.word	0x0800e240
 8001fb4:	2000080c 	.word	0x2000080c

08001fb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fca:	f000 fb61 	bl	8002690 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40001000 	.word	0x40001000

08001fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <Error_Handler+0x8>

08001fe6 <rotl>:

#include <stdint.h>
#include "rng.h"

static inline uint64_t rotl(const uint64_t x, int k)
{
 8001fe6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	return (x << k) | (x >> (64 - k));
 8001ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	f1a1 0620 	sub.w	r6, r1, #32
 8001ffe:	f1c1 0020 	rsb	r0, r1, #32
 8002002:	fa03 f901 	lsl.w	r9, r3, r1
 8002006:	fa02 f606 	lsl.w	r6, r2, r6
 800200a:	ea49 0906 	orr.w	r9, r9, r6
 800200e:	fa22 f000 	lsr.w	r0, r2, r0
 8002012:	ea49 0900 	orr.w	r9, r9, r0
 8002016:	fa02 f801 	lsl.w	r8, r2, r1
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4249      	negs	r1, r1
 800201e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002022:	f1c1 0620 	rsb	r6, r1, #32
 8002026:	f1a1 0020 	sub.w	r0, r1, #32
 800202a:	fa22 f401 	lsr.w	r4, r2, r1
 800202e:	fa03 f606 	lsl.w	r6, r3, r6
 8002032:	4334      	orrs	r4, r6
 8002034:	fa23 f000 	lsr.w	r0, r3, r0
 8002038:	4304      	orrs	r4, r0
 800203a:	fa23 f501 	lsr.w	r5, r3, r1
 800203e:	ea48 0a04 	orr.w	sl, r8, r4
 8002042:	ea49 0b05 	orr.w	fp, r9, r5
 8002046:	4654      	mov	r4, sl
 8002048:	465d      	mov	r5, fp
 800204a:	4622      	mov	r2, r4
 800204c:	462b      	mov	r3, r5
}
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800205a:	4770      	bx	lr

0800205c <generate_random_u64>:

// setting the seeds
static uint64_t s[2] = {SEED1, SEED2};

uint64_t generate_random_u64(void)
{
 800205c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002060:	b08b      	sub	sp, #44	; 0x2c
 8002062:	af00      	add	r7, sp, #0
	const uint64_t s0 = s[0];
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <generate_random_u64+0xbc>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t s1 = s[1];
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <generate_random_u64+0xbc>)
 8002070:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002074:	e9c7 2306 	strd	r2, r3, [r7, #24]
	const uint64_t result = rotl(s0 + s1, 17) + s0;
 8002078:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800207c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002080:	1886      	adds	r6, r0, r2
 8002082:	60be      	str	r6, [r7, #8]
 8002084:	eb41 0303 	adc.w	r3, r1, r3
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	2211      	movs	r2, #17
 800208c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002090:	f7ff ffa9 	bl	8001fe6 <rotl>
 8002094:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002098:	1816      	adds	r6, r2, r0
 800209a:	603e      	str	r6, [r7, #0]
 800209c:	414b      	adcs	r3, r1
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020a4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	s1 ^= s0;
 80020a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020b0:	ea80 0a02 	eor.w	sl, r0, r2
 80020b4:	ea81 0b03 	eor.w	fp, r1, r3
 80020b8:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	s[0] = rotl(s0, 49) ^ s1 ^ (s1 << 21); // a, b
 80020bc:	2231      	movs	r2, #49	; 0x31
 80020be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020c2:	f7ff ff90 	bl	8001fe6 <rotl>
 80020c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ca:	ea80 0402 	eor.w	r4, r0, r2
 80020ce:	ea81 0503 	eor.w	r5, r1, r3
 80020d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	054b      	lsls	r3, r1, #21
 80020e0:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 80020e4:	0542      	lsls	r2, r0, #21
 80020e6:	ea84 0802 	eor.w	r8, r4, r2
 80020ea:	ea85 0903 	eor.w	r9, r5, r3
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <generate_random_u64+0xbc>)
 80020f0:	e9c3 8900 	strd	r8, r9, [r3]
	s[1] = rotl(s1, 28); // c
 80020f4:	221c      	movs	r2, #28
 80020f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020fa:	f7ff ff74 	bl	8001fe6 <rotl>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4905      	ldr	r1, [pc, #20]	; (8002118 <generate_random_u64+0xbc>)
 8002104:	e9c1 2302 	strd	r2, r3, [r1, #8]

	return result;
 8002108:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	372c      	adds	r7, #44	; 0x2c
 8002112:	46bd      	mov	sp, r7
 8002114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002118:	20000018 	.word	0x20000018

0800211c <rand_range>:

uint64_t rand_range(uint64_t start_inclusive, uint64_t end_inclusive)
{
 800211c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002120:	b08a      	sub	sp, #40	; 0x28
 8002122:	af00      	add	r7, sp, #0
 8002124:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002128:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint64_t rand_num;
	do
	{
		rand_num = start_inclusive + generate_random_u64() / ((uint64_t)(-1) / (end_inclusive - start_inclusive + 1) + 1);
 800212c:	f7ff ff96 	bl	800205c <generate_random_u64>
 8002130:	e9c7 0100 	strd	r0, r1, [r7]
 8002134:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213c:	1a84      	subs	r4, r0, r2
 800213e:	eb61 0503 	sbc.w	r5, r1, r3
 8002142:	1c63      	adds	r3, r4, #1
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	f145 0300 	adc.w	r3, r5, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002154:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002158:	f7fe fd26 	bl	8000ba8 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	f112 0a01 	adds.w	sl, r2, #1
 8002164:	f143 0b00 	adc.w	fp, r3, #0
 8002168:	4652      	mov	r2, sl
 800216a:	465b      	mov	r3, fp
 800216c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002170:	f7fe fd1a 	bl	8000ba8 <__aeabi_uldivmod>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002180:	eb12 0800 	adds.w	r8, r2, r0
 8002184:	eb43 0901 	adc.w	r9, r3, r1
 8002188:	e9c7 8908 	strd	r8, r9, [r7, #32]
	}
	while(rand_num > end_inclusive);
 800218c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002190:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002194:	4290      	cmp	r0, r2
 8002196:	eb71 0303 	sbcs.w	r3, r1, r3
 800219a:	d3c7      	bcc.n	800212c <rand_range+0x10>

	return rand_num;
 800219c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	3728      	adds	r7, #40	; 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_MspInit+0x4c>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_MspInit+0x4c>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6613      	str	r3, [r2, #96]	; 0x60
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_MspInit+0x4c>)
 80021c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_MspInit+0x4c>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_MspInit+0x4c>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_MspInit+0x4c>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	210f      	movs	r1, #15
 80021e6:	f06f 0001 	mvn.w	r0, #1
 80021ea:	f000 fb29 	bl	8002840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000

080021fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d10b      	bne.n	8002226 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_TIM_Base_MspInit+0x38>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	4a08      	ldr	r2, [pc, #32]	; (8002234 <HAL_TIM_Base_MspInit+0x38>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6593      	str	r3, [r2, #88]	; 0x58
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_TIM_Base_MspInit+0x38>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b0ac      	sub	sp, #176	; 0xb0
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2288      	movs	r2, #136	; 0x88
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f007 f8e2 	bl	8009422 <memset>
  if(huart->Instance==USART2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <HAL_UART_MspInit+0xb0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d13b      	bne.n	80022e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002268:	2302      	movs	r3, #2
 800226a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800226c:	2300      	movs	r3, #0
 800226e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4618      	mov	r0, r3
 8002276:	f001 fba1 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002280:	f7ff feac 	bl	8001fdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_UART_MspInit+0xb4>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_UART_MspInit+0xb4>)
 800228a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_UART_MspInit+0xb4>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_UART_MspInit+0xb4>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_UART_MspInit+0xb4>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_UART_MspInit+0xb4>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022b4:	230c      	movs	r3, #12
 80022b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022cc:	2307      	movs	r3, #7
 80022ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022d6:	4619      	mov	r1, r3
 80022d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022dc:	f000 fada 	bl	8002894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022e0:	bf00      	nop
 80022e2:	37b0      	adds	r7, #176	; 0xb0
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40004400 	.word	0x40004400
 80022ec:	40021000 	.word	0x40021000

080022f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08e      	sub	sp, #56	; 0x38
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022fe:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <HAL_InitTick+0xe0>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	4a33      	ldr	r2, [pc, #204]	; (80023d0 <HAL_InitTick+0xe0>)
 8002304:	f043 0310 	orr.w	r3, r3, #16
 8002308:	6593      	str	r3, [r2, #88]	; 0x58
 800230a:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <HAL_InitTick+0xe0>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002316:	f107 0210 	add.w	r2, r7, #16
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f001 fab9 	bl	8003898 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002330:	f001 fa86 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8002334:	6378      	str	r0, [r7, #52]	; 0x34
 8002336:	e004      	b.n	8002342 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002338:	f001 fa82 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 800233c:	4603      	mov	r3, r0
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002344:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <HAL_InitTick+0xe4>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0c9b      	lsrs	r3, r3, #18
 800234c:	3b01      	subs	r3, #1
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_InitTick+0xe8>)
 8002352:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_InitTick+0xec>)
 8002354:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_InitTick+0xe8>)
 8002358:	f240 32e7 	movw	r2, #999	; 0x3e7
 800235c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800235e:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_InitTick+0xe8>)
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_InitTick+0xe8>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_InitTick+0xe8>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_InitTick+0xe8>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002376:	4818      	ldr	r0, [pc, #96]	; (80023d8 <HAL_InitTick+0xe8>)
 8002378:	f001 ffdc 	bl	8004334 <HAL_TIM_Base_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002386:	2b00      	cmp	r3, #0
 8002388:	d11b      	bne.n	80023c2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800238a:	4813      	ldr	r0, [pc, #76]	; (80023d8 <HAL_InitTick+0xe8>)
 800238c:	f002 f82a 	bl	80043e4 <HAL_TIM_Base_Start_IT>
 8002390:	4603      	mov	r3, r0
 8002392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002396:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800239a:	2b00      	cmp	r3, #0
 800239c:	d111      	bne.n	80023c2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800239e:	2036      	movs	r0, #54	; 0x36
 80023a0:	f000 fa6a 	bl	8002878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	d808      	bhi.n	80023bc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023aa:	2200      	movs	r2, #0
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	2036      	movs	r0, #54	; 0x36
 80023b0:	f000 fa46 	bl	8002840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <HAL_InitTick+0xf0>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e002      	b.n	80023c2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3738      	adds	r7, #56	; 0x38
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	431bde83 	.word	0x431bde83
 80023d8:	20000a80 	.word	0x20000a80
 80023dc:	40001000 	.word	0x40001000
 80023e0:	2000002c 	.word	0x2000002c

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM6_DAC_IRQHandler+0x10>)
 8002416:	f002 f855 	bl	80044c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000a80 	.word	0x20000a80

08002424 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002428:	2002      	movs	r0, #2
 800242a:	f000 fc0d 	bl	8002c48 <HAL_GPIO_EXTI_IRQHandler>
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}

08002432 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002436:	2010      	movs	r0, #16
 8002438:	f000 fc06 	bl	8002c48 <HAL_GPIO_EXTI_IRQHandler>
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002444:	2001      	movs	r0, #1
 8002446:	f000 fbff 	bl	8002c48 <HAL_GPIO_EXTI_IRQHandler>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}

0800244e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  return 1;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <_kill>:

int _kill(int pid, int sig)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002468:	f007 f858 	bl	800951c <__errno>
 800246c:	4603      	mov	r3, r0
 800246e:	2216      	movs	r2, #22
 8002470:	601a      	str	r2, [r3, #0]
  return -1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <_exit>:

void _exit (int status)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002486:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffe7 	bl	800245e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002490:	e7fe      	b.n	8002490 <_exit+0x12>

08002492 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	e00a      	b.n	80024ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024a4:	f3af 8000 	nop.w
 80024a8:	4601      	mov	r1, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	60ba      	str	r2, [r7, #8]
 80024b0:	b2ca      	uxtb	r2, r1
 80024b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3301      	adds	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	dbf0      	blt.n	80024a4 <_read+0x12>
  }

  return len;
 80024c2:	687b      	ldr	r3, [r7, #4]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e009      	b.n	80024f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	60ba      	str	r2, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbf1      	blt.n	80024de <_write+0x12>
  }
  return len;
 80024fa:	687b      	ldr	r3, [r7, #4]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_close>:

int _close(int file)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252c:	605a      	str	r2, [r3, #4]
  return 0;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_isatty>:

int _isatty(int file)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <_sbrk+0x5c>)
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <_sbrk+0x60>)
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <_sbrk+0x64>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <_sbrk+0x68>)
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d207      	bcs.n	80025ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800259c:	f006 ffbe 	bl	800951c <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	220c      	movs	r2, #12
 80025a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025aa:	e009      	b.n	80025c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <_sbrk+0x64>)
 80025bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20018000 	.word	0x20018000
 80025cc:	00000400 	.word	0x00000400
 80025d0:	20000acc 	.word	0x20000acc
 80025d4:	20004488 	.word	0x20004488

080025d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <SystemInit+0x20>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <SystemInit+0x20>)
 80025e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002600:	f7ff ffea 	bl	80025d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <LoopForever+0x6>)
  ldr r1, =_edata
 8002606:	490d      	ldr	r1, [pc, #52]	; (800263c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <LoopForever+0xe>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800261c:	4c0a      	ldr	r4, [pc, #40]	; (8002648 <LoopForever+0x16>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800262a:	f006 ff7d 	bl	8009528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800262e:	f7fe fd3f 	bl	80010b0 <main>

08002632 <LoopForever>:

LoopForever:
    b LoopForever
 8002632:	e7fe      	b.n	8002632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002634:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	200006ec 	.word	0x200006ec
  ldr r2, =_sidata
 8002640:	0800e7c8 	.word	0x0800e7c8
  ldr r2, =_sbss
 8002644:	200006f0 	.word	0x200006f0
  ldr r4, =_ebss
 8002648:	20004488 	.word	0x20004488

0800264c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC1_2_IRQHandler>
	...

08002650 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_Init+0x3c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a0b      	ldr	r2, [pc, #44]	; (800268c <HAL_Init+0x3c>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002666:	2003      	movs	r0, #3
 8002668:	f000 f8df 	bl	800282a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266c:	200f      	movs	r0, #15
 800266e:	f7ff fe3f 	bl	80022f0 <HAL_InitTick>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	e001      	b.n	8002682 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800267e:	f7ff fd95 	bl	80021ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002682:	79fb      	ldrb	r3, [r7, #7]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40022000 	.word	0x40022000

08002690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_IncTick+0x20>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_IncTick+0x24>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <HAL_IncTick+0x24>)
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000030 	.word	0x20000030
 80026b4:	20000ad0 	.word	0x20000ad0

080026b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return uwTick;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_GetTick+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000ad0 	.word	0x20000ad0

080026d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff4c 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002852:	f7ff ff61 	bl	8002718 <__NVIC_GetPriorityGrouping>
 8002856:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	6978      	ldr	r0, [r7, #20]
 800285e:	f7ff ffb1 	bl	80027c4 <NVIC_EncodePriority>
 8002862:	4602      	mov	r2, r0
 8002864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff80 	bl	8002770 <__NVIC_SetPriority>
}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff54 	bl	8002734 <__NVIC_EnableIRQ>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a2:	e17f      	b.n	8002ba4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	fa01 f303 	lsl.w	r3, r1, r3
 80028b0:	4013      	ands	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8171 	beq.w	8002b9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d005      	beq.n	80028d4 <HAL_GPIO_Init+0x40>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d130      	bne.n	8002936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800290a:	2201      	movs	r2, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	f003 0201 	and.w	r2, r3, #1
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b03      	cmp	r3, #3
 8002940:	d118      	bne.n	8002974 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002948:	2201      	movs	r2, #1
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f003 0201 	and.w	r2, r3, #1
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b03      	cmp	r3, #3
 800297e:	d017      	beq.n	80029b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d123      	bne.n	8002a04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	08da      	lsrs	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3208      	adds	r2, #8
 80029c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	08da      	lsrs	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3208      	adds	r2, #8
 80029fe:	6939      	ldr	r1, [r7, #16]
 8002a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80ac 	beq.w	8002b9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <HAL_GPIO_Init+0x330>)
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	4a5e      	ldr	r2, [pc, #376]	; (8002bc4 <HAL_GPIO_Init+0x330>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6613      	str	r3, [r2, #96]	; 0x60
 8002a52:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <HAL_GPIO_Init+0x330>)
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a5e:	4a5a      	ldr	r2, [pc, #360]	; (8002bc8 <HAL_GPIO_Init+0x334>)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	089b      	lsrs	r3, r3, #2
 8002a64:	3302      	adds	r3, #2
 8002a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	220f      	movs	r2, #15
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a88:	d025      	beq.n	8002ad6 <HAL_GPIO_Init+0x242>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_GPIO_Init+0x338>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01f      	beq.n	8002ad2 <HAL_GPIO_Init+0x23e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4e      	ldr	r2, [pc, #312]	; (8002bd0 <HAL_GPIO_Init+0x33c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d019      	beq.n	8002ace <HAL_GPIO_Init+0x23a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_GPIO_Init+0x340>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_GPIO_Init+0x236>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4c      	ldr	r2, [pc, #304]	; (8002bd8 <HAL_GPIO_Init+0x344>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_GPIO_Init+0x232>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <HAL_GPIO_Init+0x348>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <HAL_GPIO_Init+0x22e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a4a      	ldr	r2, [pc, #296]	; (8002be0 <HAL_GPIO_Init+0x34c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_GPIO_Init+0x22a>
 8002aba:	2306      	movs	r3, #6
 8002abc:	e00c      	b.n	8002ad8 <HAL_GPIO_Init+0x244>
 8002abe:	2307      	movs	r3, #7
 8002ac0:	e00a      	b.n	8002ad8 <HAL_GPIO_Init+0x244>
 8002ac2:	2305      	movs	r3, #5
 8002ac4:	e008      	b.n	8002ad8 <HAL_GPIO_Init+0x244>
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x244>
 8002aca:	2303      	movs	r3, #3
 8002acc:	e004      	b.n	8002ad8 <HAL_GPIO_Init+0x244>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_Init+0x244>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_GPIO_Init+0x244>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	f002 0203 	and.w	r2, r2, #3
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	4093      	lsls	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ae8:	4937      	ldr	r1, [pc, #220]	; (8002bc8 <HAL_GPIO_Init+0x334>)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	3302      	adds	r3, #2
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002af6:	4b3b      	ldr	r3, [pc, #236]	; (8002be4 <HAL_GPIO_Init+0x350>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b1a:	4a32      	ldr	r2, [pc, #200]	; (8002be4 <HAL_GPIO_Init+0x350>)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b20:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_GPIO_Init+0x350>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b44:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <HAL_GPIO_Init+0x350>)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b4a:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <HAL_GPIO_Init+0x350>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <HAL_GPIO_Init+0x350>)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <HAL_GPIO_Init+0x350>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b98:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <HAL_GPIO_Init+0x350>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f47f ae78 	bne.w	80028a4 <HAL_GPIO_Init+0x10>
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	48000400 	.word	0x48000400
 8002bd0:	48000800 	.word	0x48000800
 8002bd4:	48000c00 	.word	0x48000c00
 8002bd8:	48001000 	.word	0x48001000
 8002bdc:	48001400 	.word	0x48001400
 8002be0:	48001800 	.word	0x48001800
 8002be4:	40010400 	.word	0x40010400

08002be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e001      	b.n	8002c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c34:	e002      	b.n	8002c3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c5e:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f806 	bl	8002c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40010400 	.word	0x40010400

08002c78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40007000 	.word	0x40007000

08002cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cba:	d130      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cbc:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc8:	d038      	beq.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cda:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2232      	movs	r2, #50	; 0x32
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0c9b      	lsrs	r3, r3, #18
 8002cec:	3301      	adds	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf0:	e002      	b.n	8002cf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d04:	d102      	bne.n	8002d0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f2      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d18:	d110      	bne.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e00f      	b.n	8002d3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2a:	d007      	beq.n	8002d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d34:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	20000028 	.word	0x20000028
 8002d54:	431bde83 	.word	0x431bde83

08002d58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e3ca      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6a:	4b97      	ldr	r3, [pc, #604]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d74:	4b94      	ldr	r3, [pc, #592]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80e4 	beq.w	8002f54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <HAL_RCC_OscConfig+0x4a>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	f040 808b 	bne.w	8002eb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f040 8087 	bne.w	8002eb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002da2:	4b89      	ldr	r3, [pc, #548]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x62>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e3a2      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	4b82      	ldr	r3, [pc, #520]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x7c>
 8002dca:	4b7f      	ldr	r3, [pc, #508]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dd2:	e005      	b.n	8002de0 <HAL_RCC_OscConfig+0x88>
 8002dd4:	4b7c      	ldr	r3, [pc, #496]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d223      	bcs.n	8002e2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fd87 	bl	80038fc <RCC_SetFlashLatencyFromMSIRange>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e383      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df8:	4b73      	ldr	r3, [pc, #460]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a72      	ldr	r2, [pc, #456]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	f043 0308 	orr.w	r3, r3, #8
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b70      	ldr	r3, [pc, #448]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	496d      	ldr	r1, [pc, #436]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e16:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	4968      	ldr	r1, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
 8002e2a:	e025      	b.n	8002e78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2c:	4b66      	ldr	r3, [pc, #408]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a65      	ldr	r2, [pc, #404]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e32:	f043 0308 	orr.w	r3, r3, #8
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b63      	ldr	r3, [pc, #396]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4960      	ldr	r1, [pc, #384]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4a:	4b5f      	ldr	r3, [pc, #380]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	495b      	ldr	r1, [pc, #364]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fd47 	bl	80038fc <RCC_SetFlashLatencyFromMSIRange>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e343      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e78:	f000 fc4a 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b52      	ldr	r3, [pc, #328]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	4950      	ldr	r1, [pc, #320]	; (8002fcc <HAL_RCC_OscConfig+0x274>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	4a4e      	ldr	r2, [pc, #312]	; (8002fd0 <HAL_RCC_OscConfig+0x278>)
 8002e96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e98:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fa27 	bl	80022f0 <HAL_InitTick>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d052      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	e327      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d032      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002eb8:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ec4:	f7ff fbf8 	bl	80026b8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ecc:	f7ff fbf4 	bl	80026b8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e310      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eea:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a36      	ldr	r2, [pc, #216]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	f043 0308 	orr.w	r3, r3, #8
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	4931      	ldr	r1, [pc, #196]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f08:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	492c      	ldr	r1, [pc, #176]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
 8002f1c:	e01a      	b.n	8002f54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f1e:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f2a:	f7ff fbc5 	bl	80026b8 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f32:	f7ff fbc1 	bl	80026b8 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e2dd      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x1da>
 8002f50:	e000      	b.n	8002f54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d074      	beq.n	800304a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x21a>
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d10e      	bne.n	8002f8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d10b      	bne.n	8002f8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d064      	beq.n	8003048 <HAL_RCC_OscConfig+0x2f0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d160      	bne.n	8003048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e2ba      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x24a>
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e026      	b.n	8002ff0 <HAL_RCC_OscConfig+0x298>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002faa:	d115      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x280>
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a02      	ldr	r2, [pc, #8]	; (8002fc8 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e014      	b.n	8002ff0 <HAL_RCC_OscConfig+0x298>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	0800e3e4 	.word	0x0800e3e4
 8002fd0:	20000028 	.word	0x20000028
 8002fd4:	2000002c 	.word	0x2000002c
 8002fd8:	4ba0      	ldr	r3, [pc, #640]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a9f      	ldr	r2, [pc, #636]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b9d      	ldr	r3, [pc, #628]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a9c      	ldr	r2, [pc, #624]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8002fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d013      	beq.n	8003020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7ff fb5e 	bl	80026b8 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7ff fb5a 	bl	80026b8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e276      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003012:	4b92      	ldr	r3, [pc, #584]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x2a8>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7ff fb4a 	bl	80026b8 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7ff fb46 	bl	80026b8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e262      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800303a:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x2d0>
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d060      	beq.n	8003118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d005      	beq.n	8003068 <HAL_RCC_OscConfig+0x310>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d119      	bne.n	8003096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d116      	bne.n	8003096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003068:	4b7c      	ldr	r3, [pc, #496]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_OscConfig+0x328>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e23f      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	4973      	ldr	r1, [pc, #460]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003094:	e040      	b.n	8003118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d023      	beq.n	80030e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309e:	4b6f      	ldr	r3, [pc, #444]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6e      	ldr	r2, [pc, #440]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7ff fb05 	bl	80026b8 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7ff fb01 	bl	80026b8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e21d      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c4:	4b65      	ldr	r3, [pc, #404]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b62      	ldr	r3, [pc, #392]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	061b      	lsls	r3, r3, #24
 80030de:	495f      	ldr	r1, [pc, #380]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
 80030e4:	e018      	b.n	8003118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b5d      	ldr	r3, [pc, #372]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a5c      	ldr	r2, [pc, #368]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7ff fae1 	bl	80026b8 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7ff fadd 	bl	80026b8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e1f9      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d03c      	beq.n	800319e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003132:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313c:	f7ff fabc 	bl	80026b8 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7ff fab8 	bl	80026b8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1d4      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ef      	beq.n	8003144 <HAL_RCC_OscConfig+0x3ec>
 8003164:	e01b      	b.n	800319e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003166:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316c:	4a3b      	ldr	r2, [pc, #236]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7ff fa9f 	bl	80026b8 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800317e:	f7ff fa9b 	bl	80026b8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1b7      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003190:	4b32      	ldr	r3, [pc, #200]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ef      	bne.n	800317e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a6 	beq.w	80032f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ac:	2300      	movs	r3, #0
 80031ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031b0:	4b2a      	ldr	r3, [pc, #168]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6593      	str	r3, [r2, #88]	; 0x58
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_RCC_OscConfig+0x504>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d4:	2301      	movs	r3, #1
 80031d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d118      	bne.n	8003216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 80031ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f0:	f7ff fa62 	bl	80026b8 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f8:	f7ff fa5e 	bl	80026b8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e17a      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_RCC_OscConfig+0x508>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d108      	bne.n	8003230 <HAL_RCC_OscConfig+0x4d8>
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800322e:	e029      	b.n	8003284 <HAL_RCC_OscConfig+0x52c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d115      	bne.n	8003264 <HAL_RCC_OscConfig+0x50c>
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003240:	f043 0304 	orr.w	r3, r3, #4
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <HAL_RCC_OscConfig+0x504>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	4a03      	ldr	r2, [pc, #12]	; (800325c <HAL_RCC_OscConfig+0x504>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003258:	e014      	b.n	8003284 <HAL_RCC_OscConfig+0x52c>
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	40007000 	.word	0x40007000
 8003264:	4b9c      	ldr	r3, [pc, #624]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a9b      	ldr	r2, [pc, #620]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003274:	4b98      	ldr	r3, [pc, #608]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	4a97      	ldr	r2, [pc, #604]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d016      	beq.n	80032ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7ff fa14 	bl	80026b8 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7ff fa10 	bl	80026b8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e12a      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032aa:	4b8b      	ldr	r3, [pc, #556]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ed      	beq.n	8003294 <HAL_RCC_OscConfig+0x53c>
 80032b8:	e015      	b.n	80032e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7ff f9fd 	bl	80026b8 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7ff f9f9 	bl	80026b8 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e113      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d8:	4b7f      	ldr	r3, [pc, #508]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ed      	bne.n	80032c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d105      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ec:	4b7a      	ldr	r3, [pc, #488]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	4a79      	ldr	r2, [pc, #484]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80032f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80fe 	beq.w	80034fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	2b02      	cmp	r3, #2
 8003308:	f040 80d0 	bne.w	80034ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800330c:	4b72      	ldr	r3, [pc, #456]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	429a      	cmp	r2, r3
 800331e:	d130      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	3b01      	subs	r3, #1
 800332c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d127      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d11f      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800334c:	2a07      	cmp	r2, #7
 800334e:	bf14      	ite	ne
 8003350:	2201      	movne	r2, #1
 8003352:	2200      	moveq	r2, #0
 8003354:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003356:	4293      	cmp	r3, r2
 8003358:	d113      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	3b01      	subs	r3, #1
 8003368:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d109      	bne.n	8003382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d06e      	beq.n	8003460 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d069      	beq.n	800345c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003388:	4b53      	ldr	r3, [pc, #332]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003394:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0ad      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033a4:	4b4c      	ldr	r3, [pc, #304]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a4b      	ldr	r2, [pc, #300]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80033aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b0:	f7ff f982 	bl	80026b8 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7ff f97e 	bl	80026b8 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e09a      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d6:	4b40      	ldr	r3, [pc, #256]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	4b40      	ldr	r3, [pc, #256]	; (80034dc <HAL_RCC_OscConfig+0x784>)
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033e6:	3a01      	subs	r2, #1
 80033e8:	0112      	lsls	r2, r2, #4
 80033ea:	4311      	orrs	r1, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033f0:	0212      	lsls	r2, r2, #8
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033f8:	0852      	lsrs	r2, r2, #1
 80033fa:	3a01      	subs	r2, #1
 80033fc:	0552      	lsls	r2, r2, #21
 80033fe:	4311      	orrs	r1, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003404:	0852      	lsrs	r2, r2, #1
 8003406:	3a01      	subs	r2, #1
 8003408:	0652      	lsls	r2, r2, #25
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003410:	0912      	lsrs	r2, r2, #4
 8003412:	0452      	lsls	r2, r2, #17
 8003414:	430a      	orrs	r2, r1
 8003416:	4930      	ldr	r1, [pc, #192]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003418:	4313      	orrs	r3, r2
 800341a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800341c:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2d      	ldr	r2, [pc, #180]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a2a      	ldr	r2, [pc, #168]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003432:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003434:	f7ff f940 	bl	80026b8 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7ff f93c 	bl	80026b8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e058      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800345a:	e050      	b.n	80034fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e04f      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d148      	bne.n	80034fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 8003472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003476:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003484:	f7ff f918 	bl	80026b8 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7ff f914 	bl	80026b8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e030      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x734>
 80034aa:	e028      	b.n	80034fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d023      	beq.n	80034fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <HAL_RCC_OscConfig+0x780>)
 80034b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7ff f8fb 	bl	80026b8 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c4:	e00c      	b.n	80034e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c6:	f7ff f8f7 	bl	80026b8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d905      	bls.n	80034e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e013      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
 80034d8:	40021000 	.word	0x40021000
 80034dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_RCC_OscConfig+0x7b0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ec      	bne.n	80034c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x7b0>)
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	4905      	ldr	r1, [pc, #20]	; (8003508 <HAL_RCC_OscConfig+0x7b0>)
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_RCC_OscConfig+0x7b4>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	60cb      	str	r3, [r1, #12]
 80034f8:	e001      	b.n	80034fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	feeefffc 	.word	0xfeeefffc

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0e7      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b75      	ldr	r3, [pc, #468]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d910      	bls.n	8003554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b72      	ldr	r3, [pc, #456]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4970      	ldr	r1, [pc, #448]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b6e      	ldr	r3, [pc, #440]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cf      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d010      	beq.n	8003582 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356c:	429a      	cmp	r2, r3
 800356e:	d908      	bls.n	8003582 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4960      	ldr	r1, [pc, #384]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d04c      	beq.n	8003628 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b03      	cmp	r3, #3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	4b5a      	ldr	r3, [pc, #360]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d121      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0a6      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ae:	4b54      	ldr	r3, [pc, #336]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d115      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e09a      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035c6:	4b4e      	ldr	r3, [pc, #312]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e08e      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e086      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b46      	ldr	r3, [pc, #280]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4943      	ldr	r1, [pc, #268]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f8:	f7ff f85e 	bl	80026b8 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7ff f85a 	bl	80026b8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e06e      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b3a      	ldr	r3, [pc, #232]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d010      	beq.n	8003656 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003640:	429a      	cmp	r2, r3
 8003642:	d208      	bcs.n	8003656 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	492b      	ldr	r1, [pc, #172]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d210      	bcs.n	8003686 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003664:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 0207 	bic.w	r2, r3, #7
 800366c:	4923      	ldr	r1, [pc, #140]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <HAL_RCC_ClockConfig+0x1ec>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e036      	b.n	80036f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003692:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4918      	ldr	r1, [pc, #96]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4910      	ldr	r1, [pc, #64]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036c4:	f000 f824 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	490b      	ldr	r1, [pc, #44]	; (8003704 <HAL_RCC_ClockConfig+0x1f4>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	4a09      	ldr	r2, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1f8>)
 80036e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036e4:	4b09      	ldr	r3, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x1fc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fe01 	bl	80022f0 <HAL_InitTick>
 80036ee:	4603      	mov	r3, r0
 80036f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80036f2:	7afb      	ldrb	r3, [r7, #11]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40022000 	.word	0x40022000
 8003700:	40021000 	.word	0x40021000
 8003704:	0800e3e4 	.word	0x0800e3e4
 8003708:	20000028 	.word	0x20000028
 800370c:	2000002c 	.word	0x2000002c

08003710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003728:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x34>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b0c      	cmp	r3, #12
 800373c:	d121      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d11e      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003744:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e005      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003760:	4b2d      	ldr	r3, [pc, #180]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800376c:	4a2b      	ldr	r2, [pc, #172]	; (800381c <HAL_RCC_GetSysClockFreq+0x10c>)
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b04      	cmp	r3, #4
 8003786:	d102      	bne.n	800378e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_GetSysClockFreq+0x110>)
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	e004      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d101      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_RCC_GetSysClockFreq+0x114>)
 8003796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d134      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800379e:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d003      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d003      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0xac>
 80037b4:	e005      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_GetSysClockFreq+0x110>)
 80037b8:	617b      	str	r3, [r7, #20]
      break;
 80037ba:	e005      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_RCC_GetSysClockFreq+0x114>)
 80037be:	617b      	str	r3, [r7, #20]
      break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	617b      	str	r3, [r7, #20]
      break;
 80037c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	3301      	adds	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	0a1b      	lsrs	r3, r3, #8
 80037dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	fb03 f202 	mul.w	r2, r3, r2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	0e5b      	lsrs	r3, r3, #25
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	3301      	adds	r3, #1
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003808:	69bb      	ldr	r3, [r7, #24]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3724      	adds	r7, #36	; 0x24
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	0800e3fc 	.word	0x0800e3fc
 8003820:	00f42400 	.word	0x00f42400
 8003824:	007a1200 	.word	0x007a1200

08003828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800382c:	4b03      	ldr	r3, [pc, #12]	; (800383c <HAL_RCC_GetHCLKFreq+0x14>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000028 	.word	0x20000028

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003844:	f7ff fff0 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4904      	ldr	r1, [pc, #16]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	f003 031f 	and.w	r3, r3, #31
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	0800e3f4 	.word	0x0800e3f4

0800386c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003870:	f7ff ffda 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0adb      	lsrs	r3, r3, #11
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4904      	ldr	r1, [pc, #16]	; (8003894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	0800e3f4 	.word	0x0800e3f4

08003898 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	220f      	movs	r2, #15
 80038a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_GetClockConfig+0x5c>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0203 	and.w	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_RCC_GetClockConfig+0x5c>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <HAL_RCC_GetClockConfig+0x5c>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_GetClockConfig+0x5c>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	08db      	lsrs	r3, r3, #3
 80038d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <HAL_RCC_GetClockConfig+0x60>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0207 	and.w	r2, r3, #7
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40022000 	.word	0x40022000

080038fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003914:	f7ff f9bc 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
 8003918:	6178      	str	r0, [r7, #20]
 800391a:	e014      	b.n	8003946 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003926:	6593      	str	r3, [r2, #88]	; 0x58
 8003928:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003934:	f7ff f9ac 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
 8003938:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003944:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394c:	d10b      	bne.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b80      	cmp	r3, #128	; 0x80
 8003952:	d919      	bls.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2ba0      	cmp	r3, #160	; 0xa0
 8003958:	d902      	bls.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800395a:	2302      	movs	r3, #2
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e013      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003960:	2301      	movs	r3, #1
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e010      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d902      	bls.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800396c:	2303      	movs	r3, #3
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	e00a      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b80      	cmp	r3, #128	; 0x80
 8003976:	d102      	bne.n	800397e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003978:	2302      	movs	r3, #2
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e004      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b70      	cmp	r3, #112	; 0x70
 8003982:	d101      	bne.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003984:	2301      	movs	r3, #1
 8003986:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 0207 	bic.w	r2, r3, #7
 8003990:	4909      	ldr	r1, [pc, #36]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40022000 	.word	0x40022000

080039bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039c4:	2300      	movs	r3, #0
 80039c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039c8:	2300      	movs	r3, #0
 80039ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d041      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039e0:	d02a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039e6:	d824      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ec:	d008      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039f2:	d81e      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fc:	d010      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039fe:	e018      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a00:	4b86      	ldr	r3, [pc, #536]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a85      	ldr	r2, [pc, #532]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a0c:	e015      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fabb 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a1e:	e00c      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3320      	adds	r3, #32
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fba6 	bl	8004178 <RCCEx_PLLSAI2_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	74fb      	strb	r3, [r7, #19]
      break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3a:	7cfb      	ldrb	r3, [r7, #19]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a40:	4b76      	ldr	r3, [pc, #472]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a4e:	4973      	ldr	r1, [pc, #460]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a56:	e001      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d041      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a70:	d02a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a76:	d824      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a82:	d81e      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a8c:	d010      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a8e:	e018      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a90:	4b62      	ldr	r3, [pc, #392]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a61      	ldr	r2, [pc, #388]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a9c:	e015      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fa73 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aae:	e00c      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fb5e 	bl	8004178 <RCCEx_PLLSAI2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ad0:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ade:	494f      	ldr	r1, [pc, #316]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ae6:	e001      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a0 	beq.w	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b14:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	4a40      	ldr	r2, [pc, #256]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b20:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b30:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3a      	ldr	r2, [pc, #232]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fdbc 	bl	80026b8 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b42:	e009      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7fe fdb8 	bl	80026b8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d902      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	74fb      	strb	r3, [r7, #19]
        break;
 8003b56:	e005      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b58:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d15c      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b6a:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01f      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d019      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb4:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fd77 	bl	80026b8 <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fe fd73 	bl	80026b8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d902      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	74fb      	strb	r3, [r7, #19]
            break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ec      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0a:	4904      	ldr	r1, [pc, #16]	; (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c12:	e009      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	74bb      	strb	r3, [r7, #18]
 8003c18:	e006      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c28:	7c7b      	ldrb	r3, [r7, #17]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2e:	4b9e      	ldr	r3, [pc, #632]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	4a9d      	ldr	r2, [pc, #628]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c46:	4b98      	ldr	r3, [pc, #608]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	f023 0203 	bic.w	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	4994      	ldr	r1, [pc, #592]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c68:	4b8f      	ldr	r3, [pc, #572]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 020c 	bic.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	498c      	ldr	r1, [pc, #560]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c8a:	4b87      	ldr	r3, [pc, #540]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	4983      	ldr	r1, [pc, #524]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cac:	4b7e      	ldr	r3, [pc, #504]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	497b      	ldr	r1, [pc, #492]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cce:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cdc:	4972      	ldr	r1, [pc, #456]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf0:	4b6d      	ldr	r3, [pc, #436]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	496a      	ldr	r1, [pc, #424]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d20:	4961      	ldr	r1, [pc, #388]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d34:	4b5c      	ldr	r3, [pc, #368]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	4959      	ldr	r1, [pc, #356]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d56:	4b54      	ldr	r3, [pc, #336]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	4950      	ldr	r1, [pc, #320]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d78:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	4948      	ldr	r1, [pc, #288]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d9a:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da8:	493f      	ldr	r1, [pc, #252]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d028      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dbc:	4b3a      	ldr	r3, [pc, #232]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dca:	4937      	ldr	r1, [pc, #220]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dda:	d106      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ddc:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4a31      	ldr	r2, [pc, #196]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de6:	60d3      	str	r3, [r2, #12]
 8003de8:	e011      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df2:	d10c      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f8c8 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d028      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e1a:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e38:	d106      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e44:	60d3      	str	r3, [r2, #12]
 8003e46:	e011      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f899 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e96:	d109      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a02      	ldr	r2, [pc, #8]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ea2:	60d3      	str	r3, [r2, #12]
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f867 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02f      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003edc:	4b2b      	ldr	r3, [pc, #172]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eea:	4928      	ldr	r1, [pc, #160]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	2102      	movs	r1, #2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f844 	bl	8003f90 <RCCEx_PLLSAI1_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d014      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	74bb      	strb	r3, [r7, #18]
 8003f16:	e011      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3320      	adds	r3, #32
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f925 	bl	8004178 <RCCEx_PLLSAI2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f48:	4b10      	ldr	r3, [pc, #64]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f56:	490d      	ldr	r1, [pc, #52]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f7a:	4904      	ldr	r1, [pc, #16]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f82:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000

08003f90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f9e:	4b75      	ldr	r3, [pc, #468]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d018      	beq.n	8003fdc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003faa:	4b72      	ldr	r3, [pc, #456]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 0203 	and.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d10d      	bne.n	8003fd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fc2:	4b6c      	ldr	r3, [pc, #432]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d047      	beq.n	8004066 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	e044      	b.n	8004066 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d018      	beq.n	8004016 <RCCEx_PLLSAI1_Config+0x86>
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d825      	bhi.n	8004034 <RCCEx_PLLSAI1_Config+0xa4>
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d002      	beq.n	8003ff2 <RCCEx_PLLSAI1_Config+0x62>
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d009      	beq.n	8004004 <RCCEx_PLLSAI1_Config+0x74>
 8003ff0:	e020      	b.n	8004034 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ff2:	4b60      	ldr	r3, [pc, #384]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11d      	bne.n	800403a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004002:	e01a      	b.n	800403a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004004:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d116      	bne.n	800403e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004014:	e013      	b.n	800403e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004016:	4b57      	ldr	r3, [pc, #348]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004022:	4b54      	ldr	r3, [pc, #336]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d109      	bne.n	8004042 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004032:	e006      	b.n	8004042 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
      break;
 8004038:	e004      	b.n	8004044 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004042:	bf00      	nop
    }

    if(status == HAL_OK)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10d      	bne.n	8004066 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800404a:	4b4a      	ldr	r3, [pc, #296]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6819      	ldr	r1, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	3b01      	subs	r3, #1
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	430b      	orrs	r3, r1
 8004060:	4944      	ldr	r1, [pc, #272]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d17d      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800406c:	4b41      	ldr	r3, [pc, #260]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a40      	ldr	r2, [pc, #256]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004072:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004078:	f7fe fb1e 	bl	80026b8 <HAL_GetTick>
 800407c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800407e:	e009      	b.n	8004094 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004080:	f7fe fb1a 	bl	80026b8 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d902      	bls.n	8004094 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	73fb      	strb	r3, [r7, #15]
        break;
 8004092:	e005      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004094:	4b37      	ldr	r3, [pc, #220]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ef      	bne.n	8004080 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d160      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d111      	bne.n	80040d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ac:	4b31      	ldr	r3, [pc, #196]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6892      	ldr	r2, [r2, #8]
 80040bc:	0211      	lsls	r1, r2, #8
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68d2      	ldr	r2, [r2, #12]
 80040c2:	0912      	lsrs	r2, r2, #4
 80040c4:	0452      	lsls	r2, r2, #17
 80040c6:	430a      	orrs	r2, r1
 80040c8:	492a      	ldr	r1, [pc, #168]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	610b      	str	r3, [r1, #16]
 80040ce:	e027      	b.n	8004120 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d112      	bne.n	80040fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040d6:	4b27      	ldr	r3, [pc, #156]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6892      	ldr	r2, [r2, #8]
 80040e6:	0211      	lsls	r1, r2, #8
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6912      	ldr	r2, [r2, #16]
 80040ec:	0852      	lsrs	r2, r2, #1
 80040ee:	3a01      	subs	r2, #1
 80040f0:	0552      	lsls	r2, r2, #21
 80040f2:	430a      	orrs	r2, r1
 80040f4:	491f      	ldr	r1, [pc, #124]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	610b      	str	r3, [r1, #16]
 80040fa:	e011      	b.n	8004120 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004104:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6892      	ldr	r2, [r2, #8]
 800410c:	0211      	lsls	r1, r2, #8
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6952      	ldr	r2, [r2, #20]
 8004112:	0852      	lsrs	r2, r2, #1
 8004114:	3a01      	subs	r2, #1
 8004116:	0652      	lsls	r2, r2, #25
 8004118:	430a      	orrs	r2, r1
 800411a:	4916      	ldr	r1, [pc, #88]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411c:	4313      	orrs	r3, r2
 800411e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a13      	ldr	r2, [pc, #76]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800412a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe fac4 	bl	80026b8 <HAL_GetTick>
 8004130:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004132:	e009      	b.n	8004148 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004134:	f7fe fac0 	bl	80026b8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d902      	bls.n	8004148 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	73fb      	strb	r3, [r7, #15]
          break;
 8004146:	e005      	b.n	8004154 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ef      	beq.n	8004134 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	4904      	ldr	r1, [pc, #16]	; (8004174 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004164:	4313      	orrs	r3, r2
 8004166:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000

08004178 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004186:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d018      	beq.n	80041c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004192:	4b67      	ldr	r3, [pc, #412]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0203 	and.w	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d10d      	bne.n	80041be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
       ||
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041aa:	4b61      	ldr	r3, [pc, #388]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
       ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d047      	beq.n	800424e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
 80041c2:	e044      	b.n	800424e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d018      	beq.n	80041fe <RCCEx_PLLSAI2_Config+0x86>
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d825      	bhi.n	800421c <RCCEx_PLLSAI2_Config+0xa4>
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d002      	beq.n	80041da <RCCEx_PLLSAI2_Config+0x62>
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d009      	beq.n	80041ec <RCCEx_PLLSAI2_Config+0x74>
 80041d8:	e020      	b.n	800421c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041da:	4b55      	ldr	r3, [pc, #340]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d11d      	bne.n	8004222 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ea:	e01a      	b.n	8004222 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041ec:	4b50      	ldr	r3, [pc, #320]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d116      	bne.n	8004226 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fc:	e013      	b.n	8004226 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041fe:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800420a:	4b49      	ldr	r3, [pc, #292]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800421a:	e006      	b.n	800422a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      break;
 8004220:	e004      	b.n	800422c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800422a:	bf00      	nop
    }

    if(status == HAL_OK)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004232:	4b3f      	ldr	r3, [pc, #252]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	3b01      	subs	r3, #1
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	430b      	orrs	r3, r1
 8004248:	4939      	ldr	r1, [pc, #228]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424a:	4313      	orrs	r3, r2
 800424c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d167      	bne.n	8004324 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004254:	4b36      	ldr	r3, [pc, #216]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a35      	ldr	r2, [pc, #212]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004260:	f7fe fa2a 	bl	80026b8 <HAL_GetTick>
 8004264:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004266:	e009      	b.n	800427c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004268:	f7fe fa26 	bl	80026b8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d902      	bls.n	800427c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	73fb      	strb	r3, [r7, #15]
        break;
 800427a:	e005      	b.n	8004288 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800427c:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ef      	bne.n	8004268 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d14a      	bne.n	8004324 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d111      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004294:	4b26      	ldr	r3, [pc, #152]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800429c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6892      	ldr	r2, [r2, #8]
 80042a4:	0211      	lsls	r1, r2, #8
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68d2      	ldr	r2, [r2, #12]
 80042aa:	0912      	lsrs	r2, r2, #4
 80042ac:	0452      	lsls	r2, r2, #17
 80042ae:	430a      	orrs	r2, r1
 80042b0:	491f      	ldr	r1, [pc, #124]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	614b      	str	r3, [r1, #20]
 80042b6:	e011      	b.n	80042dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042b8:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6892      	ldr	r2, [r2, #8]
 80042c8:	0211      	lsls	r1, r2, #8
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6912      	ldr	r2, [r2, #16]
 80042ce:	0852      	lsrs	r2, r2, #1
 80042d0:	3a01      	subs	r2, #1
 80042d2:	0652      	lsls	r2, r2, #25
 80042d4:	430a      	orrs	r2, r1
 80042d6:	4916      	ldr	r1, [pc, #88]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a13      	ldr	r2, [pc, #76]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fe f9e6 	bl	80026b8 <HAL_GetTick>
 80042ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042ee:	e009      	b.n	8004304 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042f0:	f7fe f9e2 	bl	80026b8 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d902      	bls.n	8004304 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	73fb      	strb	r3, [r7, #15]
          break;
 8004302:	e005      	b.n	8004310 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ef      	beq.n	80042f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4904      	ldr	r1, [pc, #16]	; (8004330 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004320:	4313      	orrs	r3, r2
 8004322:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000

08004334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e049      	b.n	80043da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fd ff4e 	bl	80021fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f000 fa9a 	bl	80048ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d001      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e04f      	b.n	800449c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01d      	beq.n	800445a <HAL_TIM_Base_Start_IT+0x76>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d018      	beq.n	800445a <HAL_TIM_Base_Start_IT+0x76>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <HAL_TIM_Base_Start_IT+0xc8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_TIM_Base_Start_IT+0x76>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_TIM_Base_Start_IT+0x76>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_TIM_Base_Start_IT+0x76>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1b      	ldr	r2, [pc, #108]	; (80044b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_TIM_Base_Start_IT+0x76>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a19      	ldr	r2, [pc, #100]	; (80044bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d115      	bne.n	8004486 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004462:	4013      	ands	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b06      	cmp	r3, #6
 800446a:	d015      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0xb4>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004472:	d011      	beq.n	8004498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004484:	e008      	b.n	8004498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e000      	b.n	800449a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40013400 	.word	0x40013400
 80044bc:	40014000 	.word	0x40014000
 80044c0:	00010007 	.word	0x00010007

080044c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0202 	mvn.w	r2, #2
 80044f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9ad 	bl	800486e <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f99f 	bl	800485a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9b0 	bl	8004882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d020      	beq.n	8004574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01b      	beq.n	8004574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0204 	mvn.w	r2, #4
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f987 	bl	800486e <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f979 	bl	800485a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f98a 	bl	8004882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d020      	beq.n	80045c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0208 	mvn.w	r2, #8
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2204      	movs	r2, #4
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f961 	bl	800486e <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f953 	bl	800485a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f964 	bl	8004882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d020      	beq.n	800460c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01b      	beq.n	800460c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0210 	mvn.w	r2, #16
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2208      	movs	r2, #8
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f93b 	bl	800486e <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f92d 	bl	800485a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f93e 	bl	8004882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0201 	mvn.w	r2, #1
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd fcc4 	bl	8001fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800464c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 faf2 	bl	8004c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 faea 	bl	8004c4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8fd 	bl	8004896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0220 	mvn.w	r2, #32
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fab2 	bl	8004c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_TIM_ConfigClockSource+0x1c>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e0b6      	b.n	8004852 <HAL_TIM_ConfigClockSource+0x18a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800470e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004720:	d03e      	beq.n	80047a0 <HAL_TIM_ConfigClockSource+0xd8>
 8004722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004726:	f200 8087 	bhi.w	8004838 <HAL_TIM_ConfigClockSource+0x170>
 800472a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472e:	f000 8086 	beq.w	800483e <HAL_TIM_ConfigClockSource+0x176>
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d87f      	bhi.n	8004838 <HAL_TIM_ConfigClockSource+0x170>
 8004738:	2b70      	cmp	r3, #112	; 0x70
 800473a:	d01a      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0xaa>
 800473c:	2b70      	cmp	r3, #112	; 0x70
 800473e:	d87b      	bhi.n	8004838 <HAL_TIM_ConfigClockSource+0x170>
 8004740:	2b60      	cmp	r3, #96	; 0x60
 8004742:	d050      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x11e>
 8004744:	2b60      	cmp	r3, #96	; 0x60
 8004746:	d877      	bhi.n	8004838 <HAL_TIM_ConfigClockSource+0x170>
 8004748:	2b50      	cmp	r3, #80	; 0x50
 800474a:	d03c      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0xfe>
 800474c:	2b50      	cmp	r3, #80	; 0x50
 800474e:	d873      	bhi.n	8004838 <HAL_TIM_ConfigClockSource+0x170>
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d058      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x13e>
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d86f      	bhi.n	8004838 <HAL_TIM_ConfigClockSource+0x170>
 8004758:	2b30      	cmp	r3, #48	; 0x30
 800475a:	d064      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x15e>
 800475c:	2b30      	cmp	r3, #48	; 0x30
 800475e:	d86b      	bhi.n	8004838 <HAL_TIM_ConfigClockSource+0x170>
 8004760:	2b20      	cmp	r3, #32
 8004762:	d060      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x15e>
 8004764:	2b20      	cmp	r3, #32
 8004766:	d867      	bhi.n	8004838 <HAL_TIM_ConfigClockSource+0x170>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05c      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x15e>
 800476c:	2b10      	cmp	r3, #16
 800476e:	d05a      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x15e>
 8004770:	e062      	b.n	8004838 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004782:	f000 f9a7 	bl	8004ad4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	609a      	str	r2, [r3, #8]
      break;
 800479e:	e04f      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047b0:	f000 f990 	bl	8004ad4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c2:	609a      	str	r2, [r3, #8]
      break;
 80047c4:	e03c      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d2:	461a      	mov	r2, r3
 80047d4:	f000 f904 	bl	80049e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2150      	movs	r1, #80	; 0x50
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f95d 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 80047e4:	e02c      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f2:	461a      	mov	r2, r3
 80047f4:	f000 f923 	bl	8004a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2160      	movs	r1, #96	; 0x60
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f94d 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004804:	e01c      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004812:	461a      	mov	r2, r3
 8004814:	f000 f8e4 	bl	80049e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2140      	movs	r1, #64	; 0x40
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f93d 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004824:	e00c      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f000 f934 	bl	8004a9e <TIM_ITRx_SetConfig>
      break;
 8004836:	e003      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
      break;
 800483c:	e000      	b.n	8004840 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800483e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a40      	ldr	r2, [pc, #256]	; (80049c0 <TIM_Base_SetConfig+0x114>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d013      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ca:	d00f      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3d      	ldr	r2, [pc, #244]	; (80049c4 <TIM_Base_SetConfig+0x118>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00b      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a3c      	ldr	r2, [pc, #240]	; (80049c8 <TIM_Base_SetConfig+0x11c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3b      	ldr	r2, [pc, #236]	; (80049cc <TIM_Base_SetConfig+0x120>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3a      	ldr	r2, [pc, #232]	; (80049d0 <TIM_Base_SetConfig+0x124>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d108      	bne.n	80048fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <TIM_Base_SetConfig+0x114>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490c:	d01b      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2c      	ldr	r2, [pc, #176]	; (80049c4 <TIM_Base_SetConfig+0x118>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d017      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <TIM_Base_SetConfig+0x11c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <TIM_Base_SetConfig+0x120>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a29      	ldr	r2, [pc, #164]	; (80049d0 <TIM_Base_SetConfig+0x124>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <TIM_Base_SetConfig+0x128>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <TIM_Base_SetConfig+0x12c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a26      	ldr	r2, [pc, #152]	; (80049dc <TIM_Base_SetConfig+0x130>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00f      	beq.n	80049a4 <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <TIM_Base_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00b      	beq.n	80049a4 <TIM_Base_SetConfig+0xf8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <TIM_Base_SetConfig+0x128>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d007      	beq.n	80049a4 <TIM_Base_SetConfig+0xf8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <TIM_Base_SetConfig+0x12c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d003      	beq.n	80049a4 <TIM_Base_SetConfig+0xf8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a0f      	ldr	r2, [pc, #60]	; (80049dc <TIM_Base_SetConfig+0x130>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d103      	bne.n	80049ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	615a      	str	r2, [r3, #20]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800
 80049cc:	40000c00 	.word	0x40000c00
 80049d0:	40013400 	.word	0x40013400
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800

080049e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f023 0201 	bic.w	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 030a 	bic.w	r3, r3, #10
 8004a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b087      	sub	sp, #28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f023 0210 	bic.w	r2, r3, #16
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	031b      	lsls	r3, r3, #12
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f043 0307 	orr.w	r3, r3, #7
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	609a      	str	r2, [r3, #8]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	609a      	str	r2, [r3, #8]
}
 8004b08:	bf00      	nop
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e068      	b.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2e      	ldr	r2, [pc, #184]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d018      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d10c      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40014000 	.word	0x40014000

08004c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e040      	b.n	8004cf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd fad8 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	; 0x24
 8004c8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fb6a 	bl	8005380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f8af 	bl	8004e10 <UART_SetConfig>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e01b      	b.n	8004cf4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fbe9 	bl	80054c4 <UART_CheckIdleState>
 8004cf2:	4603      	mov	r3, r0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d178      	bne.n	8004e06 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_UART_Transmit+0x24>
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e071      	b.n	8004e08 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2221      	movs	r2, #33	; 0x21
 8004d30:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d32:	f7fd fcc1 	bl	80026b8 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d50:	d108      	bne.n	8004d64 <HAL_UART_Transmit+0x68>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d104      	bne.n	8004d64 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e003      	b.n	8004d6c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d6c:	e030      	b.n	8004dd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	2180      	movs	r1, #128	; 0x80
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fc4b 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e03c      	b.n	8004e08 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	881a      	ldrh	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da0:	b292      	uxth	r2, r2
 8004da2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	3302      	adds	r3, #2
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e008      	b.n	8004dbe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	781a      	ldrb	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	b292      	uxth	r2, r2
 8004db6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1c8      	bne.n	8004d6e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	2140      	movs	r1, #64	; 0x40
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 fc14 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e005      	b.n	8004e08 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e000      	b.n	8004e08 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
  }
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3720      	adds	r7, #32
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e14:	b08a      	sub	sp, #40	; 0x28
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4ba4      	ldr	r3, [pc, #656]	; (80050d0 <UART_SetConfig+0x2c0>)
 8004e40:	4013      	ands	r3, r2
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	6812      	ldr	r2, [r2, #0]
 8004e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a99      	ldr	r2, [pc, #612]	; (80050d4 <UART_SetConfig+0x2c4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a90      	ldr	r2, [pc, #576]	; (80050d8 <UART_SetConfig+0x2c8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d126      	bne.n	8004ee8 <UART_SetConfig+0xd8>
 8004e9a:	4b90      	ldr	r3, [pc, #576]	; (80050dc <UART_SetConfig+0x2cc>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d81b      	bhi.n	8004ee0 <UART_SetConfig+0xd0>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0xa0>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ec1 	.word	0x08004ec1
 8004eb4:	08004ed1 	.word	0x08004ed1
 8004eb8:	08004ec9 	.word	0x08004ec9
 8004ebc:	08004ed9 	.word	0x08004ed9
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ec6:	e116      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ece:	e112      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ed6:	e10e      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ed8:	2308      	movs	r3, #8
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ede:	e10a      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ee6:	e106      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a7c      	ldr	r2, [pc, #496]	; (80050e0 <UART_SetConfig+0x2d0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d138      	bne.n	8004f64 <UART_SetConfig+0x154>
 8004ef2:	4b7a      	ldr	r3, [pc, #488]	; (80050dc <UART_SetConfig+0x2cc>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b0c      	cmp	r3, #12
 8004efe:	d82d      	bhi.n	8004f5c <UART_SetConfig+0x14c>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0xf8>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f3d 	.word	0x08004f3d
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	08004f5d 	.word	0x08004f5d
 8004f14:	08004f5d 	.word	0x08004f5d
 8004f18:	08004f4d 	.word	0x08004f4d
 8004f1c:	08004f5d 	.word	0x08004f5d
 8004f20:	08004f5d 	.word	0x08004f5d
 8004f24:	08004f5d 	.word	0x08004f5d
 8004f28:	08004f45 	.word	0x08004f45
 8004f2c:	08004f5d 	.word	0x08004f5d
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f55 	.word	0x08004f55
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f42:	e0d8      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f4a:	e0d4      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e0d0      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e0cc      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e0c8      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a5e      	ldr	r2, [pc, #376]	; (80050e4 <UART_SetConfig+0x2d4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d125      	bne.n	8004fba <UART_SetConfig+0x1aa>
 8004f6e:	4b5b      	ldr	r3, [pc, #364]	; (80050dc <UART_SetConfig+0x2cc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f78:	2b30      	cmp	r3, #48	; 0x30
 8004f7a:	d016      	beq.n	8004faa <UART_SetConfig+0x19a>
 8004f7c:	2b30      	cmp	r3, #48	; 0x30
 8004f7e:	d818      	bhi.n	8004fb2 <UART_SetConfig+0x1a2>
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d00a      	beq.n	8004f9a <UART_SetConfig+0x18a>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d814      	bhi.n	8004fb2 <UART_SetConfig+0x1a2>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <UART_SetConfig+0x182>
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d008      	beq.n	8004fa2 <UART_SetConfig+0x192>
 8004f90:	e00f      	b.n	8004fb2 <UART_SetConfig+0x1a2>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f98:	e0ad      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa0:	e0a9      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa8:	e0a5      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004faa:	2308      	movs	r3, #8
 8004fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb0:	e0a1      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb8:	e09d      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a4a      	ldr	r2, [pc, #296]	; (80050e8 <UART_SetConfig+0x2d8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d125      	bne.n	8005010 <UART_SetConfig+0x200>
 8004fc4:	4b45      	ldr	r3, [pc, #276]	; (80050dc <UART_SetConfig+0x2cc>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fce:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd0:	d016      	beq.n	8005000 <UART_SetConfig+0x1f0>
 8004fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8004fd4:	d818      	bhi.n	8005008 <UART_SetConfig+0x1f8>
 8004fd6:	2b80      	cmp	r3, #128	; 0x80
 8004fd8:	d00a      	beq.n	8004ff0 <UART_SetConfig+0x1e0>
 8004fda:	2b80      	cmp	r3, #128	; 0x80
 8004fdc:	d814      	bhi.n	8005008 <UART_SetConfig+0x1f8>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <UART_SetConfig+0x1d8>
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d008      	beq.n	8004ff8 <UART_SetConfig+0x1e8>
 8004fe6:	e00f      	b.n	8005008 <UART_SetConfig+0x1f8>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e082      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e07e      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffe:	e07a      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005006:	e076      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500e:	e072      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a35      	ldr	r2, [pc, #212]	; (80050ec <UART_SetConfig+0x2dc>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d12a      	bne.n	8005070 <UART_SetConfig+0x260>
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <UART_SetConfig+0x2cc>)
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005028:	d01a      	beq.n	8005060 <UART_SetConfig+0x250>
 800502a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502e:	d81b      	bhi.n	8005068 <UART_SetConfig+0x258>
 8005030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005034:	d00c      	beq.n	8005050 <UART_SetConfig+0x240>
 8005036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503a:	d815      	bhi.n	8005068 <UART_SetConfig+0x258>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <UART_SetConfig+0x238>
 8005040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005044:	d008      	beq.n	8005058 <UART_SetConfig+0x248>
 8005046:	e00f      	b.n	8005068 <UART_SetConfig+0x258>
 8005048:	2300      	movs	r3, #0
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504e:	e052      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005050:	2302      	movs	r3, #2
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e04e      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005058:	2304      	movs	r3, #4
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505e:	e04a      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005060:	2308      	movs	r3, #8
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005066:	e046      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506e:	e042      	b.n	80050f6 <UART_SetConfig+0x2e6>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <UART_SetConfig+0x2c4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d13a      	bne.n	80050f0 <UART_SetConfig+0x2e0>
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <UART_SetConfig+0x2cc>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005080:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005084:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005088:	d01a      	beq.n	80050c0 <UART_SetConfig+0x2b0>
 800508a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800508e:	d81b      	bhi.n	80050c8 <UART_SetConfig+0x2b8>
 8005090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005094:	d00c      	beq.n	80050b0 <UART_SetConfig+0x2a0>
 8005096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800509a:	d815      	bhi.n	80050c8 <UART_SetConfig+0x2b8>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <UART_SetConfig+0x298>
 80050a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a4:	d008      	beq.n	80050b8 <UART_SetConfig+0x2a8>
 80050a6:	e00f      	b.n	80050c8 <UART_SetConfig+0x2b8>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ae:	e022      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050b0:	2302      	movs	r3, #2
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b6:	e01e      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050be:	e01a      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c6:	e016      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ce:	e012      	b.n	80050f6 <UART_SetConfig+0x2e6>
 80050d0:	efff69f3 	.word	0xefff69f3
 80050d4:	40008000 	.word	0x40008000
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40004400 	.word	0x40004400
 80050e4:	40004800 	.word	0x40004800
 80050e8:	40004c00 	.word	0x40004c00
 80050ec:	40005000 	.word	0x40005000
 80050f0:	2310      	movs	r3, #16
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a9f      	ldr	r2, [pc, #636]	; (8005378 <UART_SetConfig+0x568>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d17a      	bne.n	80051f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005104:	2b08      	cmp	r3, #8
 8005106:	d824      	bhi.n	8005152 <UART_SetConfig+0x342>
 8005108:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x300>)
 800510a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510e:	bf00      	nop
 8005110:	08005135 	.word	0x08005135
 8005114:	08005153 	.word	0x08005153
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005153 	.word	0x08005153
 8005120:	08005143 	.word	0x08005143
 8005124:	08005153 	.word	0x08005153
 8005128:	08005153 	.word	0x08005153
 800512c:	08005153 	.word	0x08005153
 8005130:	0800514b 	.word	0x0800514b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fe fb84 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8005138:	61f8      	str	r0, [r7, #28]
        break;
 800513a:	e010      	b.n	800515e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800513c:	4b8f      	ldr	r3, [pc, #572]	; (800537c <UART_SetConfig+0x56c>)
 800513e:	61fb      	str	r3, [r7, #28]
        break;
 8005140:	e00d      	b.n	800515e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005142:	f7fe fae5 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 8005146:	61f8      	str	r0, [r7, #28]
        break;
 8005148:	e009      	b.n	800515e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514e:	61fb      	str	r3, [r7, #28]
        break;
 8005150:	e005      	b.n	800515e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800515c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80fb 	beq.w	800535c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	4413      	add	r3, r2
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	429a      	cmp	r2, r3
 8005174:	d305      	bcc.n	8005182 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	429a      	cmp	r2, r3
 8005180:	d903      	bls.n	800518a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005188:	e0e8      	b.n	800535c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2200      	movs	r2, #0
 800518e:	461c      	mov	r4, r3
 8005190:	4615      	mov	r5, r2
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	022b      	lsls	r3, r5, #8
 800519c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051a0:	0222      	lsls	r2, r4, #8
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	6849      	ldr	r1, [r1, #4]
 80051a6:	0849      	lsrs	r1, r1, #1
 80051a8:	2000      	movs	r0, #0
 80051aa:	4688      	mov	r8, r1
 80051ac:	4681      	mov	r9, r0
 80051ae:	eb12 0a08 	adds.w	sl, r2, r8
 80051b2:	eb43 0b09 	adc.w	fp, r3, r9
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051c4:	4650      	mov	r0, sl
 80051c6:	4659      	mov	r1, fp
 80051c8:	f7fb fcee 	bl	8000ba8 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4613      	mov	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051da:	d308      	bcc.n	80051ee <UART_SetConfig+0x3de>
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e2:	d204      	bcs.n	80051ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	60da      	str	r2, [r3, #12]
 80051ec:	e0b6      	b.n	800535c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051f4:	e0b2      	b.n	800535c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fe:	d15e      	bne.n	80052be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005204:	2b08      	cmp	r3, #8
 8005206:	d828      	bhi.n	800525a <UART_SetConfig+0x44a>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <UART_SetConfig+0x400>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005235 	.word	0x08005235
 8005214:	0800523d 	.word	0x0800523d
 8005218:	08005245 	.word	0x08005245
 800521c:	0800525b 	.word	0x0800525b
 8005220:	0800524b 	.word	0x0800524b
 8005224:	0800525b 	.word	0x0800525b
 8005228:	0800525b 	.word	0x0800525b
 800522c:	0800525b 	.word	0x0800525b
 8005230:	08005253 	.word	0x08005253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005234:	f7fe fb04 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8005238:	61f8      	str	r0, [r7, #28]
        break;
 800523a:	e014      	b.n	8005266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800523c:	f7fe fb16 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8005240:	61f8      	str	r0, [r7, #28]
        break;
 8005242:	e010      	b.n	8005266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005244:	4b4d      	ldr	r3, [pc, #308]	; (800537c <UART_SetConfig+0x56c>)
 8005246:	61fb      	str	r3, [r7, #28]
        break;
 8005248:	e00d      	b.n	8005266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524a:	f7fe fa61 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 800524e:	61f8      	str	r0, [r7, #28]
        break;
 8005250:	e009      	b.n	8005266 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005256:	61fb      	str	r3, [r7, #28]
        break;
 8005258:	e005      	b.n	8005266 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d077      	beq.n	800535c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	005a      	lsls	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	441a      	add	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d916      	bls.n	80052b6 <UART_SetConfig+0x4a6>
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528e:	d212      	bcs.n	80052b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f023 030f 	bic.w	r3, r3, #15
 8005298:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	8afb      	ldrh	r3, [r7, #22]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	8afa      	ldrh	r2, [r7, #22]
 80052b2:	60da      	str	r2, [r3, #12]
 80052b4:	e052      	b.n	800535c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052bc:	e04e      	b.n	800535c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d827      	bhi.n	8005316 <UART_SetConfig+0x506>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0x4bc>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052f1 	.word	0x080052f1
 80052d0:	080052f9 	.word	0x080052f9
 80052d4:	08005301 	.word	0x08005301
 80052d8:	08005317 	.word	0x08005317
 80052dc:	08005307 	.word	0x08005307
 80052e0:	08005317 	.word	0x08005317
 80052e4:	08005317 	.word	0x08005317
 80052e8:	08005317 	.word	0x08005317
 80052ec:	0800530f 	.word	0x0800530f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7fe faa6 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 80052f4:	61f8      	str	r0, [r7, #28]
        break;
 80052f6:	e014      	b.n	8005322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f8:	f7fe fab8 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 80052fc:	61f8      	str	r0, [r7, #28]
        break;
 80052fe:	e010      	b.n	8005322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005300:	4b1e      	ldr	r3, [pc, #120]	; (800537c <UART_SetConfig+0x56c>)
 8005302:	61fb      	str	r3, [r7, #28]
        break;
 8005304:	e00d      	b.n	8005322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005306:	f7fe fa03 	bl	8003710 <HAL_RCC_GetSysClockFreq>
 800530a:	61f8      	str	r0, [r7, #28]
        break;
 800530c:	e009      	b.n	8005322 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800530e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005312:	61fb      	str	r3, [r7, #28]
        break;
 8005314:	e005      	b.n	8005322 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005320:	bf00      	nop
    }

    if (pclk != 0U)
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d019      	beq.n	800535c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	085a      	lsrs	r2, r3, #1
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	441a      	add	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b0f      	cmp	r3, #15
 8005340:	d909      	bls.n	8005356 <UART_SetConfig+0x546>
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005348:	d205      	bcs.n	8005356 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60da      	str	r2, [r3, #12]
 8005354:	e002      	b.n	800535c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005368:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800536c:	4618      	mov	r0, r3
 800536e:	3728      	adds	r7, #40	; 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005376:	bf00      	nop
 8005378:	40008000 	.word	0x40008000
 800537c:	00f42400 	.word	0x00f42400

08005380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01a      	beq.n	8005496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547e:	d10a      	bne.n	8005496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  }
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b098      	sub	sp, #96	; 0x60
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054d4:	f7fd f8f0 	bl	80026b8 <HAL_GetTick>
 80054d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d12e      	bne.n	8005546 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054f0:	2200      	movs	r2, #0
 80054f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f88c 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d021      	beq.n	8005546 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005516:	653b      	str	r3, [r7, #80]	; 0x50
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005520:	647b      	str	r3, [r7, #68]	; 0x44
 8005522:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800552e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e6      	bne.n	8005502 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e062      	b.n	800560c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b04      	cmp	r3, #4
 8005552:	d149      	bne.n	80055e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800555c:	2200      	movs	r2, #0
 800555e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f856 	bl	8005614 <UART_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d03c      	beq.n	80055e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	623b      	str	r3, [r7, #32]
   return(result);
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558c:	633b      	str	r3, [r7, #48]	; 0x30
 800558e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c0:	61fa      	str	r2, [r7, #28]
 80055c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	69b9      	ldr	r1, [r7, #24]
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	617b      	str	r3, [r7, #20]
   return(result);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e5      	bne.n	80055a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e011      	b.n	800560c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2220      	movs	r2, #32
 80055ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3758      	adds	r7, #88	; 0x58
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005624:	e049      	b.n	80056ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800562c:	d045      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fd f843 	bl	80026b8 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <UART_WaitOnFlagUntilTimeout+0x30>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e048      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d031      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b08      	cmp	r3, #8
 8005662:	d110      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2208      	movs	r2, #8
 800566a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f838 	bl	80056e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2208      	movs	r2, #8
 8005676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e029      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005694:	d111      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f81e 	bl	80056e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e00f      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4013      	ands	r3, r2
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	bf0c      	ite	eq
 80056ca:	2301      	moveq	r3, #1
 80056cc:	2300      	movne	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d0a6      	beq.n	8005626 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b095      	sub	sp, #84	; 0x54
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005708:	643b      	str	r3, [r7, #64]	; 0x40
 800570a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800570e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e6      	bne.n	80056ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3308      	adds	r3, #8
 8005722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	e853 3f00 	ldrex	r3, [r3]
 800572a:	61fb      	str	r3, [r7, #28]
   return(result);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f023 0301 	bic.w	r3, r3, #1
 8005732:	64bb      	str	r3, [r7, #72]	; 0x48
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800573c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e5      	bne.n	800571c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005754:	2b01      	cmp	r3, #1
 8005756:	d118      	bne.n	800578a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	60bb      	str	r3, [r7, #8]
   return(result);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f023 0310 	bic.w	r3, r3, #16
 800576c:	647b      	str	r3, [r7, #68]	; 0x44
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005776:	61bb      	str	r3, [r7, #24]
 8005778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6979      	ldr	r1, [r7, #20]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	613b      	str	r3, [r7, #16]
   return(result);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e6      	bne.n	8005758 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800579e:	bf00      	nop
 80057a0:	3754      	adds	r7, #84	; 0x54
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <__NVIC_SetPriority>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	6039      	str	r1, [r7, #0]
 80057b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	db0a      	blt.n	80057d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	490c      	ldr	r1, [pc, #48]	; (80057f8 <__NVIC_SetPriority+0x4c>)
 80057c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ca:	0112      	lsls	r2, r2, #4
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	440b      	add	r3, r1
 80057d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057d4:	e00a      	b.n	80057ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4908      	ldr	r1, [pc, #32]	; (80057fc <__NVIC_SetPriority+0x50>)
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	3b04      	subs	r3, #4
 80057e4:	0112      	lsls	r2, r2, #4
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	440b      	add	r3, r1
 80057ea:	761a      	strb	r2, [r3, #24]
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	e000e100 	.word	0xe000e100
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <SysTick_Handler+0x1c>)
 8005806:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005808:	f002 fb94 	bl	8007f34 <xTaskGetSchedulerState>
 800580c:	4603      	mov	r3, r0
 800580e:	2b01      	cmp	r3, #1
 8005810:	d001      	beq.n	8005816 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005812:	f003 fa79 	bl	8008d08 <xPortSysTickHandler>
  }
}
 8005816:	bf00      	nop
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	e000e010 	.word	0xe000e010

08005820 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005824:	2100      	movs	r1, #0
 8005826:	f06f 0004 	mvn.w	r0, #4
 800582a:	f7ff ffbf 	bl	80057ac <__NVIC_SetPriority>
#endif
}
 800582e:	bf00      	nop
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583a:	f3ef 8305 	mrs	r3, IPSR
 800583e:	603b      	str	r3, [r7, #0]
  return(result);
 8005840:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005846:	f06f 0305 	mvn.w	r3, #5
 800584a:	607b      	str	r3, [r7, #4]
 800584c:	e00c      	b.n	8005868 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <osKernelInitialize+0x44>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d105      	bne.n	8005862 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005856:	4b08      	ldr	r3, [pc, #32]	; (8005878 <osKernelInitialize+0x44>)
 8005858:	2201      	movs	r2, #1
 800585a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800585c:	2300      	movs	r3, #0
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	e002      	b.n	8005868 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005866:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005868:	687b      	ldr	r3, [r7, #4]
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000ad4 	.word	0x20000ad4

0800587c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005882:	f3ef 8305 	mrs	r3, IPSR
 8005886:	603b      	str	r3, [r7, #0]
  return(result);
 8005888:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <osKernelStart+0x1a>
    stat = osErrorISR;
 800588e:	f06f 0305 	mvn.w	r3, #5
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	e010      	b.n	80058b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005896:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <osKernelStart+0x48>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d109      	bne.n	80058b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800589e:	f7ff ffbf 	bl	8005820 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058a2:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <osKernelStart+0x48>)
 80058a4:	2202      	movs	r2, #2
 80058a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058a8:	f001 fed6 	bl	8007658 <vTaskStartScheduler>
      stat = osOK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	607b      	str	r3, [r7, #4]
 80058b0:	e002      	b.n	80058b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058b8:	687b      	ldr	r3, [r7, #4]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000ad4 	.word	0x20000ad4

080058c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08e      	sub	sp, #56	; 0x38
 80058cc:	af04      	add	r7, sp, #16
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d8:	f3ef 8305 	mrs	r3, IPSR
 80058dc:	617b      	str	r3, [r7, #20]
  return(result);
 80058de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d17f      	bne.n	80059e4 <osThreadNew+0x11c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d07c      	beq.n	80059e4 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058ee:	2318      	movs	r3, #24
 80058f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d046      	beq.n	8005990 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <osThreadNew+0x48>
        name = attr->name;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <osThreadNew+0x6e>
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b38      	cmp	r3, #56	; 0x38
 8005928:	d805      	bhi.n	8005936 <osThreadNew+0x6e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <osThreadNew+0x72>
        return (NULL);
 8005936:	2300      	movs	r3, #0
 8005938:	e055      	b.n	80059e6 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	089b      	lsrs	r3, r3, #2
 8005948:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00f      	beq.n	8005972 <osThreadNew+0xaa>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800595a:	d30a      	bcc.n	8005972 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005960:	2b00      	cmp	r3, #0
 8005962:	d006      	beq.n	8005972 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <osThreadNew+0xaa>
        mem = 1;
 800596c:	2301      	movs	r3, #1
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	e010      	b.n	8005994 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10c      	bne.n	8005994 <osThreadNew+0xcc>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d108      	bne.n	8005994 <osThreadNew+0xcc>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <osThreadNew+0xcc>
          mem = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	e001      	b.n	8005994 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d110      	bne.n	80059bc <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059a2:	9202      	str	r2, [sp, #8]
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6a3a      	ldr	r2, [r7, #32]
 80059ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f001 fb5b 	bl	800706c <xTaskCreateStatic>
 80059b6:	4603      	mov	r3, r0
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	e013      	b.n	80059e4 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d110      	bne.n	80059e4 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	f107 0310 	add.w	r3, r7, #16
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f001 fba8 	bl	800712a <xTaskCreate>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d001      	beq.n	80059e4 <osThreadNew+0x11c>
            hTask = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059e4:	693b      	ldr	r3, [r7, #16]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3728      	adds	r7, #40	; 0x28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b086      	sub	sp, #24
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059fa:	f3ef 8305 	mrs	r3, IPSR
 80059fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a00:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <osThreadSuspend+0x20>
    stat = osErrorISR;
 8005a06:	f06f 0305 	mvn.w	r3, #5
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e00b      	b.n	8005a26 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8005a14:	f06f 0303 	mvn.w	r3, #3
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e004      	b.n	8005a26 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8005a20:	6938      	ldr	r0, [r7, #16]
 8005a22:	f001 fda3 	bl	800756c <vTaskSuspend>
  }

  return (stat);
 8005a26:	697b      	ldr	r3, [r7, #20]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a38:	f3ef 8305 	mrs	r3, IPSR
 8005a3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <osDelay+0x1c>
    stat = osErrorISR;
 8005a44:	f06f 0305 	mvn.w	r3, #5
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e007      	b.n	8005a5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 fcee 	bl	8007438 <vTaskDelay>
    }
  }

  return (stat);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a72:	f3ef 8305 	mrs	r3, IPSR
 8005a76:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a78:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d174      	bne.n	8005b68 <osMutexNew+0x102>
    if (attr != NULL) {
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <osMutexNew+0x26>
      type = attr->attr_bits;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	e001      	b.n	8005a90 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <osMutexNew+0x3a>
      rmtx = 1U;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e001      	b.n	8005aa4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d15c      	bne.n	8005b68 <osMutexNew+0x102>
      mem = -1;
 8005aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ab2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d015      	beq.n	8005ae6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d006      	beq.n	8005ad0 <osMutexNew+0x6a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	2b4f      	cmp	r3, #79	; 0x4f
 8005ac8:	d902      	bls.n	8005ad0 <osMutexNew+0x6a>
          mem = 1;
 8005aca:	2301      	movs	r3, #1
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	e00c      	b.n	8005aea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d108      	bne.n	8005aea <osMutexNew+0x84>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <osMutexNew+0x84>
            mem = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	e001      	b.n	8005aea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d112      	bne.n	8005b16 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4619      	mov	r1, r3
 8005afc:	2004      	movs	r0, #4
 8005afe:	f000 fc68 	bl	80063d2 <xQueueCreateMutexStatic>
 8005b02:	61f8      	str	r0, [r7, #28]
 8005b04:	e016      	b.n	8005b34 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	2001      	movs	r0, #1
 8005b0e:	f000 fc60 	bl	80063d2 <xQueueCreateMutexStatic>
 8005b12:	61f8      	str	r0, [r7, #28]
 8005b14:	e00e      	b.n	8005b34 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10b      	bne.n	8005b34 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005b22:	2004      	movs	r0, #4
 8005b24:	f000 fc3d 	bl	80063a2 <xQueueCreateMutex>
 8005b28:	61f8      	str	r0, [r7, #28]
 8005b2a:	e003      	b.n	8005b34 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	f000 fc38 	bl	80063a2 <xQueueCreateMutex>
 8005b32:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00c      	beq.n	8005b54 <osMutexNew+0xee>
        if (attr != NULL) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <osMutexNew+0xe2>
          name = attr->name;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	e001      	b.n	8005b4c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005b4c:	68f9      	ldr	r1, [r7, #12]
 8005b4e:	69f8      	ldr	r0, [r7, #28]
 8005b50:	f001 fa2e 	bl	8006fb0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d006      	beq.n	8005b68 <osMutexNew+0x102>
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005b68:	69fb      	ldr	r3, [r7, #28]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b90:	f3ef 8305 	mrs	r3, IPSR
 8005b94:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b96:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005b9c:	f06f 0305 	mvn.w	r3, #5
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	e02c      	b.n	8005bfe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005baa:	f06f 0303 	mvn.w	r3, #3
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	e025      	b.n	8005bfe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d011      	beq.n	8005bdc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6938      	ldr	r0, [r7, #16]
 8005bbc:	f000 fc58 	bl	8006470 <xQueueTakeMutexRecursive>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d01b      	beq.n	8005bfe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005bcc:	f06f 0301 	mvn.w	r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	e014      	b.n	8005bfe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005bd4:	f06f 0302 	mvn.w	r3, #2
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	e010      	b.n	8005bfe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6938      	ldr	r0, [r7, #16]
 8005be0:	f000 fef6 	bl	80069d0 <xQueueSemaphoreTake>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d009      	beq.n	8005bfe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005bf0:	f06f 0301 	mvn.w	r3, #1
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e002      	b.n	8005bfe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005bf8:	f06f 0302 	mvn.w	r3, #2
 8005bfc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005bfe:	697b      	ldr	r3, [r7, #20]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c24:	f3ef 8305 	mrs	r3, IPSR
 8005c28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c2a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005c30:	f06f 0305 	mvn.w	r3, #5
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e01f      	b.n	8005c78 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005c3e:	f06f 0303 	mvn.w	r3, #3
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e018      	b.n	8005c78 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d009      	beq.n	8005c60 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005c4c:	6938      	ldr	r0, [r7, #16]
 8005c4e:	f000 fbdb 	bl	8006408 <xQueueGiveMutexRecursive>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d00f      	beq.n	8005c78 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005c58:	f06f 0302 	mvn.w	r3, #2
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e00b      	b.n	8005c78 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005c60:	2300      	movs	r3, #0
 8005c62:	2200      	movs	r2, #0
 8005c64:	2100      	movs	r1, #0
 8005c66:	6938      	ldr	r0, [r7, #16]
 8005c68:	f000 fc38 	bl	80064dc <xQueueGenericSend>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d002      	beq.n	8005c78 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005c72:	f06f 0302 	mvn.w	r3, #2
 8005c76:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005c78:	697b      	ldr	r3, [r7, #20]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b08a      	sub	sp, #40	; 0x28
 8005c86:	af02      	add	r7, sp, #8
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c92:	f3ef 8305 	mrs	r3, IPSR
 8005c96:	613b      	str	r3, [r7, #16]
  return(result);
 8005c98:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d15f      	bne.n	8005d5e <osMessageQueueNew+0xdc>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d05c      	beq.n	8005d5e <osMessageQueueNew+0xdc>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d059      	beq.n	8005d5e <osMessageQueueNew+0xdc>
    mem = -1;
 8005caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d029      	beq.n	8005d0a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d012      	beq.n	8005ce4 <osMessageQueueNew+0x62>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b4f      	cmp	r3, #79	; 0x4f
 8005cc4:	d90e      	bls.n	8005ce4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695a      	ldr	r2, [r3, #20]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	fb01 f303 	mul.w	r3, r1, r3
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d302      	bcc.n	8005ce4 <osMessageQueueNew+0x62>
        mem = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e014      	b.n	8005d0e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d110      	bne.n	8005d0e <osMessageQueueNew+0x8c>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10c      	bne.n	8005d0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d108      	bne.n	8005d0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <osMessageQueueNew+0x8c>
          mem = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	e001      	b.n	8005d0e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d10b      	bne.n	8005d2c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	9100      	str	r1, [sp, #0]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fa4e 	bl	80061c4 <xQueueGenericCreateStatic>
 8005d28:	61f8      	str	r0, [r7, #28]
 8005d2a:	e008      	b.n	8005d3e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d105      	bne.n	8005d3e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005d32:	2200      	movs	r2, #0
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fabc 	bl	80062b4 <xQueueGenericCreate>
 8005d3c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00c      	beq.n	8005d5e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e001      	b.n	8005d56 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	69f8      	ldr	r0, [r7, #28]
 8005d5a:	f001 f929 	bl	8006fb0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005d5e:	69fb      	ldr	r3, [r7, #28]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	4613      	mov	r3, r2
 8005d76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d80:	f3ef 8305 	mrs	r3, IPSR
 8005d84:	617b      	str	r3, [r7, #20]
  return(result);
 8005d86:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d028      	beq.n	8005dde <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <osMessageQueuePut+0x36>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <osMessageQueuePut+0x36>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005d9e:	f06f 0303 	mvn.w	r3, #3
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	e038      	b.n	8005e18 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005daa:	f107 0210 	add.w	r2, r7, #16
 8005dae:	2300      	movs	r3, #0
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	69b8      	ldr	r0, [r7, #24]
 8005db4:	f000 fc90 	bl	80066d8 <xQueueGenericSendFromISR>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d003      	beq.n	8005dc6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005dbe:	f06f 0302 	mvn.w	r3, #2
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e028      	b.n	8005e18 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d025      	beq.n	8005e18 <osMessageQueuePut+0xb0>
 8005dcc:	4b15      	ldr	r3, [pc, #84]	; (8005e24 <osMessageQueuePut+0xbc>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	e01c      	b.n	8005e18 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <osMessageQueuePut+0x82>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d103      	bne.n	8005df2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005dea:	f06f 0303 	mvn.w	r3, #3
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	e012      	b.n	8005e18 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005df2:	2300      	movs	r3, #0
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	69b8      	ldr	r0, [r7, #24]
 8005dfa:	f000 fb6f 	bl	80064dc <xQueueGenericSend>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d009      	beq.n	8005e18 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005e0a:	f06f 0301 	mvn.w	r3, #1
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	e002      	b.n	8005e18 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005e12:	f06f 0302 	mvn.w	r3, #2
 8005e16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e18:	69fb      	ldr	r3, [r7, #28]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	e000ed04 	.word	0xe000ed04

08005e28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e3e:	f3ef 8305 	mrs	r3, IPSR
 8005e42:	617b      	str	r3, [r7, #20]
  return(result);
 8005e44:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d028      	beq.n	8005e9c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <osMessageQueueGet+0x34>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <osMessageQueueGet+0x34>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005e5c:	f06f 0303 	mvn.w	r3, #3
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	e037      	b.n	8005ed4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005e64:	2300      	movs	r3, #0
 8005e66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005e68:	f107 0310 	add.w	r3, r7, #16
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	69b8      	ldr	r0, [r7, #24]
 8005e72:	f000 feb9 	bl	8006be8 <xQueueReceiveFromISR>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d003      	beq.n	8005e84 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005e7c:	f06f 0302 	mvn.w	r3, #2
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	e027      	b.n	8005ed4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d024      	beq.n	8005ed4 <osMessageQueueGet+0xac>
 8005e8a:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <osMessageQueueGet+0xb8>)
 8005e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	e01b      	b.n	8005ed4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <osMessageQueueGet+0x80>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ea8:	f06f 0303 	mvn.w	r3, #3
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	e011      	b.n	8005ed4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	69b8      	ldr	r0, [r7, #24]
 8005eb6:	f000 fcab 	bl	8006810 <xQueueReceive>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d009      	beq.n	8005ed4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005ec6:	f06f 0301 	mvn.w	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e002      	b.n	8005ed4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005ece:	f06f 0302 	mvn.w	r3, #2
 8005ed2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ed4:	69fb      	ldr	r3, [r7, #28]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	e000ed04 	.word	0xe000ed04

08005ee4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <osMessageQueueGetCount+0x18>
    count = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e00e      	b.n	8005f1a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005efc:	f3ef 8305 	mrs	r3, IPSR
 8005f00:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f02:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005f08:	6938      	ldr	r0, [r7, #16]
 8005f0a:	f000 ff0b 	bl	8006d24 <uxQueueMessagesWaitingFromISR>
 8005f0e:	6178      	str	r0, [r7, #20]
 8005f10:	e003      	b.n	8005f1a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005f12:	6938      	ldr	r0, [r7, #16]
 8005f14:	f000 fee8 	bl	8006ce8 <uxQueueMessagesWaiting>
 8005f18:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005f1a:	697b      	ldr	r3, [r7, #20]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4a06      	ldr	r2, [pc, #24]	; (8005f54 <vApplicationGetIdleTaskMemory+0x30>)
 8005f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2280      	movs	r2, #128	; 0x80
 8005f40:	601a      	str	r2, [r3, #0]
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000ad8 	.word	0x20000ad8
 8005f54:	20000c58 	.word	0x20000c58

08005f58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4a07      	ldr	r2, [pc, #28]	; (8005f84 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	4a06      	ldr	r2, [pc, #24]	; (8005f88 <vApplicationGetTimerTaskMemory+0x30>)
 8005f6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f76:	601a      	str	r2, [r3, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	20000e58 	.word	0x20000e58
 8005f88:	20000fd8 	.word	0x20000fd8

08005f8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f103 0208 	add.w	r2, r3, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f103 0208 	add.w	r2, r3, #8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f103 0208 	add.w	r2, r3, #8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]
}
 8006022:	bf00      	nop
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800602e:	b480      	push	{r7}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006044:	d103      	bne.n	800604e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e00c      	b.n	8006068 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3308      	adds	r3, #8
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e002      	b.n	800605c <vListInsert+0x2e>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	429a      	cmp	r2, r3
 8006066:	d2f6      	bcs.n	8006056 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	601a      	str	r2, [r3, #0]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6892      	ldr	r2, [r2, #8]
 80060b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6852      	ldr	r2, [r2, #4]
 80060c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d103      	bne.n	80060d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	1e5a      	subs	r2, r3, #1
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800611e:	f002 fd61 	bl	8008be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	441a      	add	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	3b01      	subs	r3, #1
 8006150:	68f9      	ldr	r1, [r7, #12]
 8006152:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006154:	fb01 f303 	mul.w	r3, r1, r3
 8006158:	441a      	add	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	22ff      	movs	r2, #255	; 0xff
 800616a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d114      	bne.n	800619e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01a      	beq.n	80061b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	3310      	adds	r3, #16
 8006180:	4618      	mov	r0, r3
 8006182:	f001 fd03 	bl	8007b8c <xTaskRemoveFromEventList>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d012      	beq.n	80061b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <xQueueGenericReset+0xcc>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	e009      	b.n	80061b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3310      	adds	r3, #16
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fef2 	bl	8005f8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3324      	adds	r3, #36	; 0x24
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7ff feed 	bl	8005f8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061b2:	f002 fd47 	bl	8008c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061b6:	2301      	movs	r3, #1
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	e000ed04 	.word	0xe000ed04

080061c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b08e      	sub	sp, #56	; 0x38
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <xQueueGenericCreateStatic+0x52>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <xQueueGenericCreateStatic+0x56>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <xQueueGenericCreateStatic+0x58>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	623b      	str	r3, [r7, #32]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <xQueueGenericCreateStatic+0x7e>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <xQueueGenericCreateStatic+0x82>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <xQueueGenericCreateStatic+0x84>
 8006246:	2300      	movs	r3, #0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	61fb      	str	r3, [r7, #28]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006262:	2350      	movs	r3, #80	; 0x50
 8006264:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b50      	cmp	r3, #80	; 0x50
 800626a:	d00a      	beq.n	8006282 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	61bb      	str	r3, [r7, #24]
}
 800627e:	bf00      	nop
 8006280:	e7fe      	b.n	8006280 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006282:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00d      	beq.n	80062aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006296:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800629a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f83f 	bl	8006328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3730      	adds	r7, #48	; 0x30
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <xQueueGenericCreate+0x2a>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	613b      	str	r3, [r7, #16]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	3350      	adds	r3, #80	; 0x50
 80062ec:	4618      	mov	r0, r3
 80062ee:	f002 fd9b 	bl	8008e28 <pvPortMalloc>
 80062f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d011      	beq.n	800631e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	3350      	adds	r3, #80	; 0x50
 8006302:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800630c:	79fa      	ldrb	r2, [r7, #7]
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4613      	mov	r3, r2
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f805 	bl	8006328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800631e:	69bb      	ldr	r3, [r7, #24]
	}
 8006320:	4618      	mov	r0, r3
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d103      	bne.n	8006344 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e002      	b.n	800634a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006356:	2101      	movs	r1, #1
 8006358:	69b8      	ldr	r0, [r7, #24]
 800635a:	f7ff fecb 	bl	80060f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800636e:	b580      	push	{r7, lr}
 8006370:	b082      	sub	sp, #8
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00e      	beq.n	800639a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800638e:	2300      	movs	r3, #0
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f8a1 	bl	80064dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	4603      	mov	r3, r0
 80063aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80063ac:	2301      	movs	r3, #1
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6939      	ldr	r1, [r7, #16]
 80063ba:	6978      	ldr	r0, [r7, #20]
 80063bc:	f7ff ff7a 	bl	80062b4 <xQueueGenericCreate>
 80063c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff ffd3 	bl	800636e <prvInitialiseMutex>

		return xNewQueue;
 80063c8:	68fb      	ldr	r3, [r7, #12]
	}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b088      	sub	sp, #32
 80063d6:	af02      	add	r7, sp, #8
 80063d8:	4603      	mov	r3, r0
 80063da:	6039      	str	r1, [r7, #0]
 80063dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80063de:	2301      	movs	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	2300      	movs	r3, #0
 80063e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2200      	movs	r2, #0
 80063ee:	6939      	ldr	r1, [r7, #16]
 80063f0:	6978      	ldr	r0, [r7, #20]
 80063f2:	f7ff fee7 	bl	80061c4 <xQueueGenericCreateStatic>
 80063f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff ffb8 	bl	800636e <prvInitialiseMutex>

		return xNewQueue;
 80063fe:	68fb      	ldr	r3, [r7, #12]
	}
 8006400:	4618      	mov	r0, r3
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006408:	b590      	push	{r4, r7, lr}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	60fb      	str	r3, [r7, #12]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	689c      	ldr	r4, [r3, #8]
 8006434:	f001 fd6e 	bl	8007f14 <xTaskGetCurrentTaskHandle>
 8006438:	4603      	mov	r3, r0
 800643a:	429c      	cmp	r4, r3
 800643c:	d111      	bne.n	8006462 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	1e5a      	subs	r2, r3, #1
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d105      	bne.n	800645c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006450:	2300      	movs	r3, #0
 8006452:	2200      	movs	r2, #0
 8006454:	2100      	movs	r1, #0
 8006456:	6938      	ldr	r0, [r7, #16]
 8006458:	f000 f840 	bl	80064dc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800645c:	2301      	movs	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	e001      	b.n	8006466 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006466:	697b      	ldr	r3, [r7, #20]
	}
 8006468:	4618      	mov	r0, r3
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	bd90      	pop	{r4, r7, pc}

08006470 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	60fb      	str	r3, [r7, #12]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	689c      	ldr	r4, [r3, #8]
 800649e:	f001 fd39 	bl	8007f14 <xTaskGetCurrentTaskHandle>
 80064a2:	4603      	mov	r3, r0
 80064a4:	429c      	cmp	r4, r3
 80064a6:	d107      	bne.n	80064b8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80064b2:	2301      	movs	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e00c      	b.n	80064d2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6938      	ldr	r0, [r7, #16]
 80064bc:	f000 fa88 	bl	80069d0 <xQueueSemaphoreTake>
 80064c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80064d2:	697b      	ldr	r3, [r7, #20]
	}
 80064d4:	4618      	mov	r0, r3
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd90      	pop	{r4, r7, pc}

080064dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08e      	sub	sp, #56	; 0x38
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064ea:	2300      	movs	r3, #0
 80064ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xQueueGenericSend+0x32>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <xQueueGenericSend+0x40>
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <xQueueGenericSend+0x44>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <xQueueGenericSend+0x46>
 8006520:	2300      	movs	r3, #0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <xQueueGenericSend+0x60>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d103      	bne.n	800654a <xQueueGenericSend+0x6e>
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <xQueueGenericSend+0x72>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <xQueueGenericSend+0x74>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xQueueGenericSend+0x8e>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	623b      	str	r3, [r7, #32]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800656a:	f001 fce3 	bl	8007f34 <xTaskGetSchedulerState>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <xQueueGenericSend+0x9e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <xQueueGenericSend+0xa2>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueGenericSend+0xa4>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <xQueueGenericSend+0xbe>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	61fb      	str	r3, [r7, #28]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800659a:	f002 fb23 	bl	8008be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <xQueueGenericSend+0xd4>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d129      	bne.n	8006604 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b6:	f000 fbeb 	bl	8006d90 <prvCopyDataToQueue>
 80065ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d010      	beq.n	80065e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	3324      	adds	r3, #36	; 0x24
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 fadf 	bl	8007b8c <xTaskRemoveFromEventList>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d013      	beq.n	80065fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065d4:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <xQueueGenericSend+0x1f8>)
 80065d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	e00a      	b.n	80065fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d007      	beq.n	80065fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065ec:	4b39      	ldr	r3, [pc, #228]	; (80066d4 <xQueueGenericSend+0x1f8>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065fc:	f002 fb22 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8006600:	2301      	movs	r3, #1
 8006602:	e063      	b.n	80066cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800660a:	f002 fb1b 	bl	8008c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800660e:	2300      	movs	r3, #0
 8006610:	e05c      	b.n	80066cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	4618      	mov	r0, r3
 800661e:	f001 fb19 	bl	8007c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006622:	2301      	movs	r3, #1
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006626:	f002 fb0d 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800662a:	f001 f885 	bl	8007738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800662e:	f002 fad9 	bl	8008be4 <vPortEnterCritical>
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006638:	b25b      	sxtb	r3, r3
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800663e:	d103      	bne.n	8006648 <xQueueGenericSend+0x16c>
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800664e:	b25b      	sxtb	r3, r3
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006654:	d103      	bne.n	800665e <xQueueGenericSend+0x182>
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800665e:	f002 faf1 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006662:	1d3a      	adds	r2, r7, #4
 8006664:	f107 0314 	add.w	r3, r7, #20
 8006668:	4611      	mov	r1, r2
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fb08 	bl	8007c80 <xTaskCheckForTimeOut>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d124      	bne.n	80066c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006678:	f000 fc82 	bl	8006f80 <prvIsQueueFull>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d018      	beq.n	80066b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	3310      	adds	r3, #16
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f001 fa2e 	bl	8007aec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006692:	f000 fc0d 	bl	8006eb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006696:	f001 f85d 	bl	8007754 <xTaskResumeAll>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	f47f af7c 	bne.w	800659a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066a2:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <xQueueGenericSend+0x1f8>)
 80066a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	e772      	b.n	800659a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066b6:	f000 fbfb 	bl	8006eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ba:	f001 f84b 	bl	8007754 <xTaskResumeAll>
 80066be:	e76c      	b.n	800659a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c2:	f000 fbf5 	bl	8006eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066c6:	f001 f845 	bl	8007754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3738      	adds	r7, #56	; 0x38
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b090      	sub	sp, #64	; 0x40
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <xQueueGenericSendFromISR+0x3c>
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <xQueueGenericSendFromISR+0x40>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <xQueueGenericSendFromISR+0x42>
 8006718:	2300      	movs	r3, #0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d103      	bne.n	8006742 <xQueueGenericSendFromISR+0x6a>
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <xQueueGenericSendFromISR+0x6e>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <xQueueGenericSendFromISR+0x70>
 8006746:	2300      	movs	r3, #0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	623b      	str	r3, [r7, #32]
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006762:	f002 fb21 	bl	8008da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006766:	f3ef 8211 	mrs	r2, BASEPRI
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	61fa      	str	r2, [r7, #28]
 800677c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800677e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006780:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678a:	429a      	cmp	r2, r3
 800678c:	d302      	bcc.n	8006794 <xQueueGenericSendFromISR+0xbc>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d12f      	bne.n	80067f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800679a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067aa:	f000 faf1 	bl	8006d90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b6:	d112      	bne.n	80067de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d016      	beq.n	80067ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	3324      	adds	r3, #36	; 0x24
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 f9e1 	bl	8007b8c <xTaskRemoveFromEventList>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00e      	beq.n	80067ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e007      	b.n	80067ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067e2:	3301      	adds	r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	b25a      	sxtb	r2, r3
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067ee:	2301      	movs	r3, #1
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80067f2:	e001      	b.n	80067f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006802:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006806:	4618      	mov	r0, r3
 8006808:	3740      	adds	r7, #64	; 0x40
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08c      	sub	sp, #48	; 0x30
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800681c:	2300      	movs	r3, #0
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <xQueueReceive+0x30>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	623b      	str	r3, [r7, #32]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d103      	bne.n	800684e <xQueueReceive+0x3e>
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <xQueueReceive+0x42>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <xQueueReceive+0x44>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <xQueueReceive+0x5e>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	61fb      	str	r3, [r7, #28]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800686e:	f001 fb61 	bl	8007f34 <xTaskGetSchedulerState>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <xQueueReceive+0x6e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <xQueueReceive+0x72>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <xQueueReceive+0x74>
 8006882:	2300      	movs	r3, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <xQueueReceive+0x8e>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	61bb      	str	r3, [r7, #24]
}
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800689e:	f002 f9a1 	bl	8008be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01f      	beq.n	80068ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068b2:	f000 fad7 	bl	8006e64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	1e5a      	subs	r2, r3, #1
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00f      	beq.n	80068e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	3310      	adds	r3, #16
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 f95e 	bl	8007b8c <xTaskRemoveFromEventList>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068d6:	4b3d      	ldr	r3, [pc, #244]	; (80069cc <xQueueReceive+0x1bc>)
 80068d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068e6:	f002 f9ad 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e069      	b.n	80069c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d103      	bne.n	80068fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068f4:	f002 f9a6 	bl	8008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068f8:	2300      	movs	r3, #0
 80068fa:	e062      	b.n	80069c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006902:	f107 0310 	add.w	r3, r7, #16
 8006906:	4618      	mov	r0, r3
 8006908:	f001 f9a4 	bl	8007c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800690c:	2301      	movs	r3, #1
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006910:	f002 f998 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006914:	f000 ff10 	bl	8007738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006918:	f002 f964 	bl	8008be4 <vPortEnterCritical>
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006922:	b25b      	sxtb	r3, r3
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006928:	d103      	bne.n	8006932 <xQueueReceive+0x122>
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006938:	b25b      	sxtb	r3, r3
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800693e:	d103      	bne.n	8006948 <xQueueReceive+0x138>
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006948:	f002 f97c 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800694c:	1d3a      	adds	r2, r7, #4
 800694e:	f107 0310 	add.w	r3, r7, #16
 8006952:	4611      	mov	r1, r2
 8006954:	4618      	mov	r0, r3
 8006956:	f001 f993 	bl	8007c80 <xTaskCheckForTimeOut>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d123      	bne.n	80069a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006962:	f000 faf7 	bl	8006f54 <prvIsQueueEmpty>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d017      	beq.n	800699c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	3324      	adds	r3, #36	; 0x24
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	4611      	mov	r1, r2
 8006974:	4618      	mov	r0, r3
 8006976:	f001 f8b9 	bl	8007aec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800697a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800697c:	f000 fa98 	bl	8006eb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006980:	f000 fee8 	bl	8007754 <xTaskResumeAll>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d189      	bne.n	800689e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800698a:	4b10      	ldr	r3, [pc, #64]	; (80069cc <xQueueReceive+0x1bc>)
 800698c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	e780      	b.n	800689e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800699c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800699e:	f000 fa87 	bl	8006eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069a2:	f000 fed7 	bl	8007754 <xTaskResumeAll>
 80069a6:	e77a      	b.n	800689e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069aa:	f000 fa81 	bl	8006eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ae:	f000 fed1 	bl	8007754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b4:	f000 face 	bl	8006f54 <prvIsQueueEmpty>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f43f af6f 	beq.w	800689e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3730      	adds	r7, #48	; 0x30
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08e      	sub	sp, #56	; 0x38
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80069da:	2300      	movs	r3, #0
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069e2:	2300      	movs	r3, #0
 80069e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	623b      	str	r3, [r7, #32]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	61fb      	str	r3, [r7, #28]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a20:	f001 fa88 	bl	8007f34 <xTaskGetSchedulerState>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <xQueueSemaphoreTake+0x60>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <xQueueSemaphoreTake+0x64>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <xQueueSemaphoreTake+0x66>
 8006a34:	2300      	movs	r3, #0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	61bb      	str	r3, [r7, #24]
}
 8006a4c:	bf00      	nop
 8006a4e:	e7fe      	b.n	8006a4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a50:	f002 f8c8 	bl	8008be4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d024      	beq.n	8006aaa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a62:	1e5a      	subs	r2, r3, #1
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a70:	f001 fbd6 	bl	8008220 <pvTaskIncrementMutexHeldCount>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00f      	beq.n	8006aa2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	3310      	adds	r3, #16
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f880 	bl	8007b8c <xTaskRemoveFromEventList>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a92:	4b54      	ldr	r3, [pc, #336]	; (8006be4 <xQueueSemaphoreTake+0x214>)
 8006a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006aa2:	f002 f8cf 	bl	8008c44 <vPortExitCritical>
				return pdPASS;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e097      	b.n	8006bda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d111      	bne.n	8006ad4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	617b      	str	r3, [r7, #20]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006acc:	f002 f8ba 	bl	8008c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e082      	b.n	8006bda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ada:	f107 030c 	add.w	r3, r7, #12
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f8b8 	bl	8007c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ae8:	f002 f8ac 	bl	8008c44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aec:	f000 fe24 	bl	8007738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006af0:	f002 f878 	bl	8008be4 <vPortEnterCritical>
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b00:	d103      	bne.n	8006b0a <xQueueSemaphoreTake+0x13a>
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b16:	d103      	bne.n	8006b20 <xQueueSemaphoreTake+0x150>
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b20:	f002 f890 	bl	8008c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b24:	463a      	mov	r2, r7
 8006b26:	f107 030c 	add.w	r3, r7, #12
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 f8a7 	bl	8007c80 <xTaskCheckForTimeOut>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d132      	bne.n	8006b9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b3a:	f000 fa0b 	bl	8006f54 <prvIsQueueEmpty>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d026      	beq.n	8006b92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006b4c:	f002 f84a 	bl	8008be4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f001 fa0b 	bl	8007f70 <xTaskPriorityInherit>
 8006b5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006b5c:	f002 f872 	bl	8008c44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	3324      	adds	r3, #36	; 0x24
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 ffbf 	bl	8007aec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b70:	f000 f99e 	bl	8006eb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b74:	f000 fdee 	bl	8007754 <xTaskResumeAll>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f47f af68 	bne.w	8006a50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006b80:	4b18      	ldr	r3, [pc, #96]	; (8006be4 <xQueueSemaphoreTake+0x214>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	e75e      	b.n	8006a50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b94:	f000 f98c 	bl	8006eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b98:	f000 fddc 	bl	8007754 <xTaskResumeAll>
 8006b9c:	e758      	b.n	8006a50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ba0:	f000 f986 	bl	8006eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ba4:	f000 fdd6 	bl	8007754 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006baa:	f000 f9d3 	bl	8006f54 <prvIsQueueEmpty>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f43f af4d 	beq.w	8006a50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00d      	beq.n	8006bd8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006bbc:	f002 f812 	bl	8008be4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006bc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bc2:	f000 f8cd 	bl	8006d60 <prvGetDisinheritPriorityAfterTimeout>
 8006bc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 faa4 	bl	800811c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006bd4:	f002 f836 	bl	8008c44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3738      	adds	r7, #56	; 0x38
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	; 0x38
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	623b      	str	r3, [r7, #32]
}
 8006c10:	bf00      	nop
 8006c12:	e7fe      	b.n	8006c12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d103      	bne.n	8006c22 <xQueueReceiveFromISR+0x3a>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <xQueueReceiveFromISR+0x3e>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <xQueueReceiveFromISR+0x40>
 8006c26:	2300      	movs	r3, #0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	61fb      	str	r3, [r7, #28]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c42:	f002 f8b1 	bl	8008da8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c46:	f3ef 8211 	mrs	r2, BASEPRI
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	61ba      	str	r2, [r7, #24]
 8006c5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02f      	beq.n	8006cce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c7c:	f000 f8f2 	bl	8006e64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	1e5a      	subs	r2, r3, #1
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c90:	d112      	bne.n	8006cb8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d016      	beq.n	8006cc8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	3310      	adds	r3, #16
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 ff74 	bl	8007b8c <xTaskRemoveFromEventList>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00e      	beq.n	8006cc8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00b      	beq.n	8006cc8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e007      	b.n	8006cc8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	b25a      	sxtb	r2, r3
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	637b      	str	r3, [r7, #52]	; 0x34
 8006ccc:	e001      	b.n	8006cd2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f383 8811 	msr	BASEPRI, r3
}
 8006cdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3738      	adds	r7, #56	; 0x38
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60bb      	str	r3, [r7, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006d0c:	f001 ff6a 	bl	8008be4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006d16:	f001 ff95 	bl	8008c44 <vPortExitCritical>

	return uxReturn;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	60fb      	str	r3, [r7, #12]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006d52:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006d54:	4618      	mov	r0, r3
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e001      	b.n	8006d82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d82:	68fb      	ldr	r3, [r7, #12]
	}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10d      	bne.n	8006dca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d14d      	bne.n	8006e52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 f940 	bl	8008040 <xTaskPriorityDisinherit>
 8006dc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	609a      	str	r2, [r3, #8]
 8006dc8:	e043      	b.n	8006e52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d119      	bne.n	8006e04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6858      	ldr	r0, [r3, #4]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	461a      	mov	r2, r3
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	f002 fbcc 	bl	8009578 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	441a      	add	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d32b      	bcc.n	8006e52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	e026      	b.n	8006e52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68d8      	ldr	r0, [r3, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	f002 fbb2 	bl	8009578 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	425b      	negs	r3, r3
 8006e1e:	441a      	add	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d207      	bcs.n	8006e40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	425b      	negs	r3, r3
 8006e3a:	441a      	add	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d105      	bne.n	8006e52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e5a:	697b      	ldr	r3, [r7, #20]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d018      	beq.n	8006ea8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	441a      	add	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d303      	bcc.n	8006e98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68d9      	ldr	r1, [r3, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	6838      	ldr	r0, [r7, #0]
 8006ea4:	f002 fb68 	bl	8009578 <memcpy>
	}
}
 8006ea8:	bf00      	nop
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006eb8:	f001 fe94 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ec2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ec4:	e011      	b.n	8006eea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d012      	beq.n	8006ef4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3324      	adds	r3, #36	; 0x24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fe5a 	bl	8007b8c <xTaskRemoveFromEventList>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ede:	f000 ff31 	bl	8007d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dce9      	bgt.n	8006ec6 <prvUnlockQueue+0x16>
 8006ef2:	e000      	b.n	8006ef6 <prvUnlockQueue+0x46>
					break;
 8006ef4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	22ff      	movs	r2, #255	; 0xff
 8006efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006efe:	f001 fea1 	bl	8008c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f02:	f001 fe6f 	bl	8008be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f0e:	e011      	b.n	8006f34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d012      	beq.n	8006f3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3310      	adds	r3, #16
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fe35 	bl	8007b8c <xTaskRemoveFromEventList>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f28:	f000 ff0c 	bl	8007d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	dce9      	bgt.n	8006f10 <prvUnlockQueue+0x60>
 8006f3c:	e000      	b.n	8006f40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	22ff      	movs	r2, #255	; 0xff
 8006f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f48:	f001 fe7c 	bl	8008c44 <vPortExitCritical>
}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f5c:	f001 fe42 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	e001      	b.n	8006f72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f72:	f001 fe67 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8006f76:	68fb      	ldr	r3, [r7, #12]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f88:	f001 fe2c 	bl	8008be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d102      	bne.n	8006f9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	e001      	b.n	8006fa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fa2:	f001 fe4f 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e014      	b.n	8006fea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006fc0:	4a0f      	ldr	r2, [pc, #60]	; (8007000 <vQueueAddToRegistry+0x50>)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fcc:	490c      	ldr	r1, [pc, #48]	; (8007000 <vQueueAddToRegistry+0x50>)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fd6:	4a0a      	ldr	r2, [pc, #40]	; (8007000 <vQueueAddToRegistry+0x50>)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	4413      	add	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fe2:	e006      	b.n	8006ff2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b07      	cmp	r3, #7
 8006fee:	d9e7      	bls.n	8006fc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ff0:	bf00      	nop
 8006ff2:	bf00      	nop
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	200013d8 	.word	0x200013d8

08007004 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007014:	f001 fde6 	bl	8008be4 <vPortEnterCritical>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800701e:	b25b      	sxtb	r3, r3
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007024:	d103      	bne.n	800702e <vQueueWaitForMessageRestricted+0x2a>
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007034:	b25b      	sxtb	r3, r3
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800703a:	d103      	bne.n	8007044 <vQueueWaitForMessageRestricted+0x40>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007044:	f001 fdfe 	bl	8008c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	3324      	adds	r3, #36	; 0x24
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fd6b 	bl	8007b34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800705e:	6978      	ldr	r0, [r7, #20]
 8007060:	f7ff ff26 	bl	8006eb0 <prvUnlockQueue>
	}
 8007064:	bf00      	nop
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08e      	sub	sp, #56	; 0x38
 8007070:	af04      	add	r7, sp, #16
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	623b      	str	r3, [r7, #32]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	61fb      	str	r3, [r7, #28]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80070b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80070be:	d00a      	beq.n	80070d6 <xTaskCreateStatic+0x6a>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	61bb      	str	r3, [r7, #24]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d01e      	beq.n	800711c <xTaskCreateStatic+0xb0>
 80070de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01b      	beq.n	800711c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	2202      	movs	r2, #2
 80070f2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070f6:	2300      	movs	r3, #0
 80070f8:	9303      	str	r3, [sp, #12]
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	9302      	str	r3, [sp, #8]
 80070fe:	f107 0314 	add.w	r3, r7, #20
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	68b9      	ldr	r1, [r7, #8]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f852 	bl	80071b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007116:	f000 f91f 	bl	8007358 <prvAddNewTaskToReadyList>
 800711a:	e001      	b.n	8007120 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007120:	697b      	ldr	r3, [r7, #20]
	}
 8007122:	4618      	mov	r0, r3
 8007124:	3728      	adds	r7, #40	; 0x28
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800712a:	b580      	push	{r7, lr}
 800712c:	b08c      	sub	sp, #48	; 0x30
 800712e:	af04      	add	r7, sp, #16
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	603b      	str	r3, [r7, #0]
 8007136:	4613      	mov	r3, r2
 8007138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800713a:	88fb      	ldrh	r3, [r7, #6]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4618      	mov	r0, r3
 8007140:	f001 fe72 	bl	8008e28 <pvPortMalloc>
 8007144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00f      	beq.n	800716c <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800714c:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007150:	f001 fe6a 	bl	8008e28 <pvPortMalloc>
 8007154:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	631a      	str	r2, [r3, #48]	; 0x30
 8007162:	e005      	b.n	8007170 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007164:	6978      	ldr	r0, [r7, #20]
 8007166:	f001 ff2b 	bl	8008fc0 <vPortFree>
 800716a:	e001      	b.n	8007170 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800716c:	2300      	movs	r3, #0
 800716e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d017      	beq.n	80071a6 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800717e:	88fa      	ldrh	r2, [r7, #6]
 8007180:	2300      	movs	r3, #0
 8007182:	9303      	str	r3, [sp, #12]
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	9302      	str	r3, [sp, #8]
 8007188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f80f 	bl	80071b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800719a:	69f8      	ldr	r0, [r7, #28]
 800719c:	f000 f8dc 	bl	8007358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071a0:	2301      	movs	r3, #1
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e002      	b.n	80071ac <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071ac:	69bb      	ldr	r3, [r7, #24]
	}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	461a      	mov	r2, r3
 80071d0:	21a5      	movs	r1, #165	; 0xa5
 80071d2:	f002 f926 	bl	8009422 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071e0:	3b01      	subs	r3, #1
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f023 0307 	bic.w	r3, r3, #7
 80071ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <prvInitialiseNewTask+0x58>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	617b      	str	r3, [r7, #20]
}
 800720c:	bf00      	nop
 800720e:	e7fe      	b.n	800720e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01f      	beq.n	8007256 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007216:	2300      	movs	r3, #0
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	e012      	b.n	8007242 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	4413      	add	r3, r2
 8007222:	7819      	ldrb	r1, [r3, #0]
 8007224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	3334      	adds	r3, #52	; 0x34
 800722c:	460a      	mov	r2, r1
 800722e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d006      	beq.n	800724a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	3301      	adds	r3, #1
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	2b0f      	cmp	r3, #15
 8007246:	d9e9      	bls.n	800721c <prvInitialiseNewTask+0x64>
 8007248:	e000      	b.n	800724c <prvInitialiseNewTask+0x94>
			{
				break;
 800724a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007254:	e003      	b.n	800725e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	2b37      	cmp	r3, #55	; 0x37
 8007262:	d901      	bls.n	8007268 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007264:	2337      	movs	r3, #55	; 0x37
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800726c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007272:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	2200      	movs	r2, #0
 8007278:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	3304      	adds	r3, #4
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fea4 	bl	8005fcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	3318      	adds	r3, #24
 8007288:	4618      	mov	r0, r3
 800728a:	f7fe fe9f 	bl	8005fcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	3358      	adds	r3, #88	; 0x58
 80072b8:	f44f 7290 	mov.w	r2, #288	; 0x120
 80072bc:	2100      	movs	r1, #0
 80072be:	4618      	mov	r0, r3
 80072c0:	f002 f8af 	bl	8009422 <memset>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	4a21      	ldr	r2, [pc, #132]	; (800734c <prvInitialiseNewTask+0x194>)
 80072c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	4a20      	ldr	r2, [pc, #128]	; (8007350 <prvInitialiseNewTask+0x198>)
 80072ce:	661a      	str	r2, [r3, #96]	; 0x60
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	4a20      	ldr	r2, [pc, #128]	; (8007354 <prvInitialiseNewTask+0x19c>)
 80072d4:	665a      	str	r2, [r3, #100]	; 0x64
 80072d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072d8:	f04f 0201 	mov.w	r2, #1
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	f243 320e 	movw	r2, #13070	; 0x330e
 80072ea:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80072f4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	f241 2234 	movw	r2, #4660	; 0x1234
 80072fe:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	f24e 626d 	movw	r2, #58989	; 0xe66d
 8007308:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 8007312:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	2205      	movs	r2, #5
 800731a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	220b      	movs	r2, #11
 8007322:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	68f9      	ldr	r1, [r7, #12]
 800732a:	69b8      	ldr	r0, [r7, #24]
 800732c:	f001 fb2e 	bl	800898c <pxPortInitialiseStack>
 8007330:	4602      	mov	r2, r0
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <prvInitialiseNewTask+0x18a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007342:	bf00      	nop
 8007344:	3720      	adds	r7, #32
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	2000417c 	.word	0x2000417c
 8007350:	200041e4 	.word	0x200041e4
 8007354:	2000424c 	.word	0x2000424c

08007358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007360:	f001 fc40 	bl	8008be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007364:	4b2d      	ldr	r3, [pc, #180]	; (800741c <prvAddNewTaskToReadyList+0xc4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3301      	adds	r3, #1
 800736a:	4a2c      	ldr	r2, [pc, #176]	; (800741c <prvAddNewTaskToReadyList+0xc4>)
 800736c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800736e:	4b2c      	ldr	r3, [pc, #176]	; (8007420 <prvAddNewTaskToReadyList+0xc8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007376:	4a2a      	ldr	r2, [pc, #168]	; (8007420 <prvAddNewTaskToReadyList+0xc8>)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800737c:	4b27      	ldr	r3, [pc, #156]	; (800741c <prvAddNewTaskToReadyList+0xc4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d110      	bne.n	80073a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007384:	f000 fd04 	bl	8007d90 <prvInitialiseTaskLists>
 8007388:	e00d      	b.n	80073a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800738a:	4b26      	ldr	r3, [pc, #152]	; (8007424 <prvAddNewTaskToReadyList+0xcc>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007392:	4b23      	ldr	r3, [pc, #140]	; (8007420 <prvAddNewTaskToReadyList+0xc8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	429a      	cmp	r2, r3
 800739e:	d802      	bhi.n	80073a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073a0:	4a1f      	ldr	r2, [pc, #124]	; (8007420 <prvAddNewTaskToReadyList+0xc8>)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073a6:	4b20      	ldr	r3, [pc, #128]	; (8007428 <prvAddNewTaskToReadyList+0xd0>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3301      	adds	r3, #1
 80073ac:	4a1e      	ldr	r2, [pc, #120]	; (8007428 <prvAddNewTaskToReadyList+0xd0>)
 80073ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073b0:	4b1d      	ldr	r3, [pc, #116]	; (8007428 <prvAddNewTaskToReadyList+0xd0>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073bc:	4b1b      	ldr	r3, [pc, #108]	; (800742c <prvAddNewTaskToReadyList+0xd4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d903      	bls.n	80073cc <prvAddNewTaskToReadyList+0x74>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	4a18      	ldr	r2, [pc, #96]	; (800742c <prvAddNewTaskToReadyList+0xd4>)
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d0:	4613      	mov	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4a15      	ldr	r2, [pc, #84]	; (8007430 <prvAddNewTaskToReadyList+0xd8>)
 80073da:	441a      	add	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3304      	adds	r3, #4
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f7fe fdff 	bl	8005fe6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073e8:	f001 fc2c 	bl	8008c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073ec:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <prvAddNewTaskToReadyList+0xcc>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00e      	beq.n	8007412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073f4:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <prvAddNewTaskToReadyList+0xc8>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fe:	429a      	cmp	r2, r3
 8007400:	d207      	bcs.n	8007412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007402:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <prvAddNewTaskToReadyList+0xdc>)
 8007404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	200018ec 	.word	0x200018ec
 8007420:	20001418 	.word	0x20001418
 8007424:	200018f8 	.word	0x200018f8
 8007428:	20001908 	.word	0x20001908
 800742c:	200018f4 	.word	0x200018f4
 8007430:	2000141c 	.word	0x2000141c
 8007434:	e000ed04 	.word	0xe000ed04

08007438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d017      	beq.n	800747a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800744a:	4b13      	ldr	r3, [pc, #76]	; (8007498 <vTaskDelay+0x60>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <vTaskDelay+0x30>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	60bb      	str	r3, [r7, #8]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007468:	f000 f966 	bl	8007738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800746c:	2100      	movs	r1, #0
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 feea 	bl	8008248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007474:	f000 f96e 	bl	8007754 <xTaskResumeAll>
 8007478:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d107      	bne.n	8007490 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007480:	4b06      	ldr	r3, [pc, #24]	; (800749c <vTaskDelay+0x64>)
 8007482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20001914 	.word	0x20001914
 800749c:	e000ed04 	.word	0xe000ed04

080074a0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b088      	sub	sp, #32
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <eTaskGetState+0x28>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60bb      	str	r3, [r7, #8]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80074c8:	4b23      	ldr	r3, [pc, #140]	; (8007558 <eTaskGetState+0xb8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d102      	bne.n	80074d8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80074d2:	2300      	movs	r3, #0
 80074d4:	77fb      	strb	r3, [r7, #31]
 80074d6:	e03a      	b.n	800754e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80074d8:	f001 fb84 	bl	8008be4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80074e2:	4b1e      	ldr	r3, [pc, #120]	; (800755c <eTaskGetState+0xbc>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80074e8:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <eTaskGetState+0xc0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80074ee:	f001 fba9 	bl	8008c44 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d003      	beq.n	8007502 <eTaskGetState+0x62>
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d102      	bne.n	8007508 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8007502:	2302      	movs	r3, #2
 8007504:	77fb      	strb	r3, [r7, #31]
 8007506:	e022      	b.n	800754e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	4a16      	ldr	r2, [pc, #88]	; (8007564 <eTaskGetState+0xc4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d112      	bne.n	8007536 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10b      	bne.n	8007530 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d102      	bne.n	800752a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8007524:	2302      	movs	r3, #2
 8007526:	77fb      	strb	r3, [r7, #31]
 8007528:	e011      	b.n	800754e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800752a:	2303      	movs	r3, #3
 800752c:	77fb      	strb	r3, [r7, #31]
 800752e:	e00e      	b.n	800754e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8007530:	2302      	movs	r3, #2
 8007532:	77fb      	strb	r3, [r7, #31]
 8007534:	e00b      	b.n	800754e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	4a0b      	ldr	r2, [pc, #44]	; (8007568 <eTaskGetState+0xc8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d002      	beq.n	8007544 <eTaskGetState+0xa4>
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007544:	2304      	movs	r3, #4
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e001      	b.n	800754e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800754a:	2301      	movs	r3, #1
 800754c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800754e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007550:	4618      	mov	r0, r3
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20001418 	.word	0x20001418
 800755c:	200018a4 	.word	0x200018a4
 8007560:	200018a8 	.word	0x200018a8
 8007564:	200018d8 	.word	0x200018d8
 8007568:	200018c0 	.word	0x200018c0

0800756c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007574:	f001 fb36 	bl	8008be4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d102      	bne.n	8007584 <vTaskSuspend+0x18>
 800757e:	4b30      	ldr	r3, [pc, #192]	; (8007640 <vTaskSuspend+0xd4>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	e000      	b.n	8007586 <vTaskSuspend+0x1a>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3304      	adds	r3, #4
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe fd87 	bl	80060a0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	2b00      	cmp	r3, #0
 8007598:	d004      	beq.n	80075a4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3318      	adds	r3, #24
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fd7e 	bl	80060a0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4619      	mov	r1, r3
 80075aa:	4826      	ldr	r0, [pc, #152]	; (8007644 <vTaskSuspend+0xd8>)
 80075ac:	f7fe fd1b 	bl	8005fe6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d103      	bne.n	80075c4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80075c4:	f001 fb3e 	bl	8008c44 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80075c8:	4b1f      	ldr	r3, [pc, #124]	; (8007648 <vTaskSuspend+0xdc>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d005      	beq.n	80075dc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80075d0:	f001 fb08 	bl	8008be4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80075d4:	f000 fc7e 	bl	8007ed4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80075d8:	f001 fb34 	bl	8008c44 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80075dc:	4b18      	ldr	r3, [pc, #96]	; (8007640 <vTaskSuspend+0xd4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d127      	bne.n	8007636 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80075e6:	4b18      	ldr	r3, [pc, #96]	; (8007648 <vTaskSuspend+0xdc>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d017      	beq.n	800761e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80075ee:	4b17      	ldr	r3, [pc, #92]	; (800764c <vTaskSuspend+0xe0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00a      	beq.n	800760c <vTaskSuspend+0xa0>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60bb      	str	r3, [r7, #8]
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800760c:	4b10      	ldr	r3, [pc, #64]	; (8007650 <vTaskSuspend+0xe4>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800761c:	e00b      	b.n	8007636 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800761e:	4b09      	ldr	r3, [pc, #36]	; (8007644 <vTaskSuspend+0xd8>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <vTaskSuspend+0xe8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d103      	bne.n	8007632 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800762a:	4b05      	ldr	r3, [pc, #20]	; (8007640 <vTaskSuspend+0xd4>)
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
	}
 8007630:	e001      	b.n	8007636 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8007632:	f000 f9f7 	bl	8007a24 <vTaskSwitchContext>
	}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20001418 	.word	0x20001418
 8007644:	200018d8 	.word	0x200018d8
 8007648:	200018f8 	.word	0x200018f8
 800764c:	20001914 	.word	0x20001914
 8007650:	e000ed04 	.word	0xe000ed04
 8007654:	200018ec 	.word	0x200018ec

08007658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007666:	463a      	mov	r2, r7
 8007668:	1d39      	adds	r1, r7, #4
 800766a:	f107 0308 	add.w	r3, r7, #8
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe fc58 	bl	8005f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	9202      	str	r2, [sp, #8]
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	2300      	movs	r3, #0
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	2300      	movs	r3, #0
 8007684:	460a      	mov	r2, r1
 8007686:	4924      	ldr	r1, [pc, #144]	; (8007718 <vTaskStartScheduler+0xc0>)
 8007688:	4824      	ldr	r0, [pc, #144]	; (800771c <vTaskStartScheduler+0xc4>)
 800768a:	f7ff fcef 	bl	800706c <xTaskCreateStatic>
 800768e:	4603      	mov	r3, r0
 8007690:	4a23      	ldr	r2, [pc, #140]	; (8007720 <vTaskStartScheduler+0xc8>)
 8007692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007694:	4b22      	ldr	r3, [pc, #136]	; (8007720 <vTaskStartScheduler+0xc8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800769c:	2301      	movs	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e001      	b.n	80076a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d102      	bne.n	80076b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076ac:	f000 fe20 	bl	80082f0 <xTimerCreateTimerTask>
 80076b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d11b      	bne.n	80076f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	613b      	str	r3, [r7, #16]
}
 80076ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076cc:	4b15      	ldr	r3, [pc, #84]	; (8007724 <vTaskStartScheduler+0xcc>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3358      	adds	r3, #88	; 0x58
 80076d2:	4a15      	ldr	r2, [pc, #84]	; (8007728 <vTaskStartScheduler+0xd0>)
 80076d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <vTaskStartScheduler+0xd4>)
 80076d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076de:	4b14      	ldr	r3, [pc, #80]	; (8007730 <vTaskStartScheduler+0xd8>)
 80076e0:	2201      	movs	r2, #1
 80076e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076e4:	4b13      	ldr	r3, [pc, #76]	; (8007734 <vTaskStartScheduler+0xdc>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076ea:	f001 f9d9 	bl	8008aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076ee:	e00e      	b.n	800770e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f6:	d10a      	bne.n	800770e <vTaskStartScheduler+0xb6>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	60fb      	str	r3, [r7, #12]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <vTaskStartScheduler+0xb4>
}
 800770e:	bf00      	nop
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	0800e2bc 	.word	0x0800e2bc
 800771c:	08007d5d 	.word	0x08007d5d
 8007720:	20001910 	.word	0x20001910
 8007724:	20001418 	.word	0x20001418
 8007728:	20000168 	.word	0x20000168
 800772c:	2000190c 	.word	0x2000190c
 8007730:	200018f8 	.word	0x200018f8
 8007734:	200018f0 	.word	0x200018f0

08007738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007738:	b480      	push	{r7}
 800773a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800773c:	4b04      	ldr	r3, [pc, #16]	; (8007750 <vTaskSuspendAll+0x18>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	4a03      	ldr	r2, [pc, #12]	; (8007750 <vTaskSuspendAll+0x18>)
 8007744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007746:	bf00      	nop
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	20001914 	.word	0x20001914

08007754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007762:	4b42      	ldr	r3, [pc, #264]	; (800786c <xTaskResumeAll+0x118>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <xTaskResumeAll+0x2c>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	603b      	str	r3, [r7, #0]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007780:	f001 fa30 	bl	8008be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007784:	4b39      	ldr	r3, [pc, #228]	; (800786c <xTaskResumeAll+0x118>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3b01      	subs	r3, #1
 800778a:	4a38      	ldr	r2, [pc, #224]	; (800786c <xTaskResumeAll+0x118>)
 800778c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800778e:	4b37      	ldr	r3, [pc, #220]	; (800786c <xTaskResumeAll+0x118>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d162      	bne.n	800785c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007796:	4b36      	ldr	r3, [pc, #216]	; (8007870 <xTaskResumeAll+0x11c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d05e      	beq.n	800785c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800779e:	e02f      	b.n	8007800 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a0:	4b34      	ldr	r3, [pc, #208]	; (8007874 <xTaskResumeAll+0x120>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3318      	adds	r3, #24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe fc77 	bl	80060a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3304      	adds	r3, #4
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fc72 	bl	80060a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c0:	4b2d      	ldr	r3, [pc, #180]	; (8007878 <xTaskResumeAll+0x124>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d903      	bls.n	80077d0 <xTaskResumeAll+0x7c>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	4a2a      	ldr	r2, [pc, #168]	; (8007878 <xTaskResumeAll+0x124>)
 80077ce:	6013      	str	r3, [r2, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4a27      	ldr	r2, [pc, #156]	; (800787c <xTaskResumeAll+0x128>)
 80077de:	441a      	add	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f7fe fbfd 	bl	8005fe6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f0:	4b23      	ldr	r3, [pc, #140]	; (8007880 <xTaskResumeAll+0x12c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d302      	bcc.n	8007800 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80077fa:	4b22      	ldr	r3, [pc, #136]	; (8007884 <xTaskResumeAll+0x130>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007800:	4b1c      	ldr	r3, [pc, #112]	; (8007874 <xTaskResumeAll+0x120>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1cb      	bne.n	80077a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800780e:	f000 fb61 	bl	8007ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007812:	4b1d      	ldr	r3, [pc, #116]	; (8007888 <xTaskResumeAll+0x134>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d010      	beq.n	8007840 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800781e:	f000 f847 	bl	80078b0 <xTaskIncrementTick>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007828:	4b16      	ldr	r3, [pc, #88]	; (8007884 <xTaskResumeAll+0x130>)
 800782a:	2201      	movs	r2, #1
 800782c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3b01      	subs	r3, #1
 8007832:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f1      	bne.n	800781e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800783a:	4b13      	ldr	r3, [pc, #76]	; (8007888 <xTaskResumeAll+0x134>)
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007840:	4b10      	ldr	r3, [pc, #64]	; (8007884 <xTaskResumeAll+0x130>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800784c:	4b0f      	ldr	r3, [pc, #60]	; (800788c <xTaskResumeAll+0x138>)
 800784e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800785c:	f001 f9f2 	bl	8008c44 <vPortExitCritical>

	return xAlreadyYielded;
 8007860:	68bb      	ldr	r3, [r7, #8]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20001914 	.word	0x20001914
 8007870:	200018ec 	.word	0x200018ec
 8007874:	200018ac 	.word	0x200018ac
 8007878:	200018f4 	.word	0x200018f4
 800787c:	2000141c 	.word	0x2000141c
 8007880:	20001418 	.word	0x20001418
 8007884:	20001900 	.word	0x20001900
 8007888:	200018fc 	.word	0x200018fc
 800788c:	e000ed04 	.word	0xe000ed04

08007890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007896:	4b05      	ldr	r3, [pc, #20]	; (80078ac <xTaskGetTickCount+0x1c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800789c:	687b      	ldr	r3, [r7, #4]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	200018f0 	.word	0x200018f0

080078b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ba:	4b4f      	ldr	r3, [pc, #316]	; (80079f8 <xTaskIncrementTick+0x148>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 808f 	bne.w	80079e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078c4:	4b4d      	ldr	r3, [pc, #308]	; (80079fc <xTaskIncrementTick+0x14c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3301      	adds	r3, #1
 80078ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078cc:	4a4b      	ldr	r2, [pc, #300]	; (80079fc <xTaskIncrementTick+0x14c>)
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d120      	bne.n	800791a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078d8:	4b49      	ldr	r3, [pc, #292]	; (8007a00 <xTaskIncrementTick+0x150>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	603b      	str	r3, [r7, #0]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <xTaskIncrementTick+0x46>
 80078f8:	4b41      	ldr	r3, [pc, #260]	; (8007a00 <xTaskIncrementTick+0x150>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60fb      	str	r3, [r7, #12]
 80078fe:	4b41      	ldr	r3, [pc, #260]	; (8007a04 <xTaskIncrementTick+0x154>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a3f      	ldr	r2, [pc, #252]	; (8007a00 <xTaskIncrementTick+0x150>)
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	4a3f      	ldr	r2, [pc, #252]	; (8007a04 <xTaskIncrementTick+0x154>)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	4b3e      	ldr	r3, [pc, #248]	; (8007a08 <xTaskIncrementTick+0x158>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3301      	adds	r3, #1
 8007912:	4a3d      	ldr	r2, [pc, #244]	; (8007a08 <xTaskIncrementTick+0x158>)
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	f000 fadd 	bl	8007ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800791a:	4b3c      	ldr	r3, [pc, #240]	; (8007a0c <xTaskIncrementTick+0x15c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	429a      	cmp	r2, r3
 8007922:	d349      	bcc.n	80079b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007924:	4b36      	ldr	r3, [pc, #216]	; (8007a00 <xTaskIncrementTick+0x150>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d104      	bne.n	8007938 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800792e:	4b37      	ldr	r3, [pc, #220]	; (8007a0c <xTaskIncrementTick+0x15c>)
 8007930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007934:	601a      	str	r2, [r3, #0]
					break;
 8007936:	e03f      	b.n	80079b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007938:	4b31      	ldr	r3, [pc, #196]	; (8007a00 <xTaskIncrementTick+0x150>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	429a      	cmp	r2, r3
 800794e:	d203      	bcs.n	8007958 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007950:	4a2e      	ldr	r2, [pc, #184]	; (8007a0c <xTaskIncrementTick+0x15c>)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007956:	e02f      	b.n	80079b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3304      	adds	r3, #4
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe fb9f 	bl	80060a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	2b00      	cmp	r3, #0
 8007968:	d004      	beq.n	8007974 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	3318      	adds	r3, #24
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe fb96 	bl	80060a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007978:	4b25      	ldr	r3, [pc, #148]	; (8007a10 <xTaskIncrementTick+0x160>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d903      	bls.n	8007988 <xTaskIncrementTick+0xd8>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <xTaskIncrementTick+0x160>)
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4a1f      	ldr	r2, [pc, #124]	; (8007a14 <xTaskIncrementTick+0x164>)
 8007996:	441a      	add	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f7fe fb21 	bl	8005fe6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	4b1b      	ldr	r3, [pc, #108]	; (8007a18 <xTaskIncrementTick+0x168>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d3b8      	bcc.n	8007924 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079b2:	2301      	movs	r3, #1
 80079b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079b6:	e7b5      	b.n	8007924 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079b8:	4b17      	ldr	r3, [pc, #92]	; (8007a18 <xTaskIncrementTick+0x168>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079be:	4915      	ldr	r1, [pc, #84]	; (8007a14 <xTaskIncrementTick+0x164>)
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	440b      	add	r3, r1
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d901      	bls.n	80079d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079d0:	2301      	movs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079d4:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <xTaskIncrementTick+0x16c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	e004      	b.n	80079ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079e2:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <xTaskIncrementTick+0x170>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	4a0d      	ldr	r2, [pc, #52]	; (8007a20 <xTaskIncrementTick+0x170>)
 80079ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079ec:	697b      	ldr	r3, [r7, #20]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20001914 	.word	0x20001914
 80079fc:	200018f0 	.word	0x200018f0
 8007a00:	200018a4 	.word	0x200018a4
 8007a04:	200018a8 	.word	0x200018a8
 8007a08:	20001904 	.word	0x20001904
 8007a0c:	2000190c 	.word	0x2000190c
 8007a10:	200018f4 	.word	0x200018f4
 8007a14:	2000141c 	.word	0x2000141c
 8007a18:	20001418 	.word	0x20001418
 8007a1c:	20001900 	.word	0x20001900
 8007a20:	200018fc 	.word	0x200018fc

08007a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a2a:	4b2a      	ldr	r3, [pc, #168]	; (8007ad4 <vTaskSwitchContext+0xb0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a32:	4b29      	ldr	r3, [pc, #164]	; (8007ad8 <vTaskSwitchContext+0xb4>)
 8007a34:	2201      	movs	r2, #1
 8007a36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a38:	e046      	b.n	8007ac8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007a3a:	4b27      	ldr	r3, [pc, #156]	; (8007ad8 <vTaskSwitchContext+0xb4>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a40:	4b26      	ldr	r3, [pc, #152]	; (8007adc <vTaskSwitchContext+0xb8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	e010      	b.n	8007a6a <vTaskSwitchContext+0x46>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	607b      	str	r3, [r7, #4]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <vTaskSwitchContext+0x3e>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	491d      	ldr	r1, [pc, #116]	; (8007ae0 <vTaskSwitchContext+0xbc>)
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	440b      	add	r3, r1
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0e4      	beq.n	8007a48 <vTaskSwitchContext+0x24>
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4a15      	ldr	r2, [pc, #84]	; (8007ae0 <vTaskSwitchContext+0xbc>)
 8007a8a:	4413      	add	r3, r2
 8007a8c:	60bb      	str	r3, [r7, #8]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	605a      	str	r2, [r3, #4]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d104      	bne.n	8007aae <vTaskSwitchContext+0x8a>
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	605a      	str	r2, [r3, #4]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	4a0b      	ldr	r2, [pc, #44]	; (8007ae4 <vTaskSwitchContext+0xc0>)
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	4a08      	ldr	r2, [pc, #32]	; (8007adc <vTaskSwitchContext+0xb8>)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <vTaskSwitchContext+0xc0>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3358      	adds	r3, #88	; 0x58
 8007ac4:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <vTaskSwitchContext+0xc4>)
 8007ac6:	6013      	str	r3, [r2, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	20001914 	.word	0x20001914
 8007ad8:	20001900 	.word	0x20001900
 8007adc:	200018f4 	.word	0x200018f4
 8007ae0:	2000141c 	.word	0x2000141c
 8007ae4:	20001418 	.word	0x20001418
 8007ae8:	20000168 	.word	0x20000168

08007aec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	60fb      	str	r3, [r7, #12]
}
 8007b0e:	bf00      	nop
 8007b10:	e7fe      	b.n	8007b10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <vTaskPlaceOnEventList+0x44>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3318      	adds	r3, #24
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fe fa87 	bl	800602e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b20:	2101      	movs	r1, #1
 8007b22:	6838      	ldr	r0, [r7, #0]
 8007b24:	f000 fb90 	bl	8008248 <prvAddCurrentTaskToDelayedList>
}
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20001418 	.word	0x20001418

08007b34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	617b      	str	r3, [r7, #20]
}
 8007b58:	bf00      	nop
 8007b5a:	e7fe      	b.n	8007b5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3318      	adds	r3, #24
 8007b62:	4619      	mov	r1, r3
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7fe fa3e 	bl	8005fe6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	68b8      	ldr	r0, [r7, #8]
 8007b7a:	f000 fb65 	bl	8008248 <prvAddCurrentTaskToDelayedList>
	}
 8007b7e:	bf00      	nop
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20001418 	.word	0x20001418

08007b8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60fb      	str	r3, [r7, #12]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	3318      	adds	r3, #24
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fe fa6f 	bl	80060a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bc2:	4b1e      	ldr	r3, [pc, #120]	; (8007c3c <xTaskRemoveFromEventList+0xb0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d11d      	bne.n	8007c06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fa66 	bl	80060a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd8:	4b19      	ldr	r3, [pc, #100]	; (8007c40 <xTaskRemoveFromEventList+0xb4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d903      	bls.n	8007be8 <xTaskRemoveFromEventList+0x5c>
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	4a16      	ldr	r2, [pc, #88]	; (8007c40 <xTaskRemoveFromEventList+0xb4>)
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4a13      	ldr	r2, [pc, #76]	; (8007c44 <xTaskRemoveFromEventList+0xb8>)
 8007bf6:	441a      	add	r2, r3
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f7fe f9f1 	bl	8005fe6 <vListInsertEnd>
 8007c04:	e005      	b.n	8007c12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	3318      	adds	r3, #24
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	480e      	ldr	r0, [pc, #56]	; (8007c48 <xTaskRemoveFromEventList+0xbc>)
 8007c0e:	f7fe f9ea 	bl	8005fe6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <xTaskRemoveFromEventList+0xc0>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d905      	bls.n	8007c2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c20:	2301      	movs	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c24:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <xTaskRemoveFromEventList+0xc4>)
 8007c26:	2201      	movs	r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	e001      	b.n	8007c30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c30:	697b      	ldr	r3, [r7, #20]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20001914 	.word	0x20001914
 8007c40:	200018f4 	.word	0x200018f4
 8007c44:	2000141c 	.word	0x2000141c
 8007c48:	200018ac 	.word	0x200018ac
 8007c4c:	20001418 	.word	0x20001418
 8007c50:	20001900 	.word	0x20001900

08007c54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c5c:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <vTaskInternalSetTimeOutState+0x24>)
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c64:	4b05      	ldr	r3, [pc, #20]	; (8007c7c <vTaskInternalSetTimeOutState+0x28>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	605a      	str	r2, [r3, #4]
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20001904 	.word	0x20001904
 8007c7c:	200018f0 	.word	0x200018f0

08007c80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	613b      	str	r3, [r7, #16]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	60fb      	str	r3, [r7, #12]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007cc2:	f000 ff8f 	bl	8008be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cc6:	4b1d      	ldr	r3, [pc, #116]	; (8007d3c <xTaskCheckForTimeOut+0xbc>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cde:	d102      	bne.n	8007ce6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	e023      	b.n	8007d2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <xTaskCheckForTimeOut+0xc0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d007      	beq.n	8007d02 <xTaskCheckForTimeOut+0x82>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d302      	bcc.n	8007d02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	e015      	b.n	8007d2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d20b      	bcs.n	8007d24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	1ad2      	subs	r2, r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff ff9b 	bl	8007c54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61fb      	str	r3, [r7, #28]
 8007d22:	e004      	b.n	8007d2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d2e:	f000 ff89 	bl	8008c44 <vPortExitCritical>

	return xReturn;
 8007d32:	69fb      	ldr	r3, [r7, #28]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	200018f0 	.word	0x200018f0
 8007d40:	20001904 	.word	0x20001904

08007d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d48:	4b03      	ldr	r3, [pc, #12]	; (8007d58 <vTaskMissedYield+0x14>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
}
 8007d4e:	bf00      	nop
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	20001900 	.word	0x20001900

08007d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d64:	f000 f854 	bl	8007e10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d68:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <prvIdleTask+0x2c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d907      	bls.n	8007d80 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007d70:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <prvIdleTask+0x30>)
 8007d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007d80:	f7f9 f890 	bl	8000ea4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007d84:	e7ee      	b.n	8007d64 <prvIdleTask+0x8>
 8007d86:	bf00      	nop
 8007d88:	2000141c 	.word	0x2000141c
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d96:	2300      	movs	r3, #0
 8007d98:	607b      	str	r3, [r7, #4]
 8007d9a:	e00c      	b.n	8007db6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a12      	ldr	r2, [pc, #72]	; (8007df0 <prvInitialiseTaskLists+0x60>)
 8007da8:	4413      	add	r3, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe f8ee 	bl	8005f8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3301      	adds	r3, #1
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b37      	cmp	r3, #55	; 0x37
 8007dba:	d9ef      	bls.n	8007d9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dbc:	480d      	ldr	r0, [pc, #52]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dbe:	f7fe f8e5 	bl	8005f8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dc2:	480d      	ldr	r0, [pc, #52]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007dc4:	f7fe f8e2 	bl	8005f8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dc8:	480c      	ldr	r0, [pc, #48]	; (8007dfc <prvInitialiseTaskLists+0x6c>)
 8007dca:	f7fe f8df 	bl	8005f8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dce:	480c      	ldr	r0, [pc, #48]	; (8007e00 <prvInitialiseTaskLists+0x70>)
 8007dd0:	f7fe f8dc 	bl	8005f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dd4:	480b      	ldr	r0, [pc, #44]	; (8007e04 <prvInitialiseTaskLists+0x74>)
 8007dd6:	f7fe f8d9 	bl	8005f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <prvInitialiseTaskLists+0x78>)
 8007ddc:	4a05      	ldr	r2, [pc, #20]	; (8007df4 <prvInitialiseTaskLists+0x64>)
 8007dde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <prvInitialiseTaskLists+0x7c>)
 8007de2:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <prvInitialiseTaskLists+0x68>)
 8007de4:	601a      	str	r2, [r3, #0]
}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	2000141c 	.word	0x2000141c
 8007df4:	2000187c 	.word	0x2000187c
 8007df8:	20001890 	.word	0x20001890
 8007dfc:	200018ac 	.word	0x200018ac
 8007e00:	200018c0 	.word	0x200018c0
 8007e04:	200018d8 	.word	0x200018d8
 8007e08:	200018a4 	.word	0x200018a4
 8007e0c:	200018a8 	.word	0x200018a8

08007e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e16:	e019      	b.n	8007e4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e18:	f000 fee4 	bl	8008be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <prvCheckTasksWaitingTermination+0x50>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fe f939 	bl	80060a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e2e:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	4a0b      	ldr	r2, [pc, #44]	; (8007e64 <prvCheckTasksWaitingTermination+0x54>)
 8007e36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e38:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e42:	f000 feff 	bl	8008c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f810 	bl	8007e6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <prvCheckTasksWaitingTermination+0x58>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e1      	bne.n	8007e18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200018c0 	.word	0x200018c0
 8007e64:	200018ec 	.word	0x200018ec
 8007e68:	200018d4 	.word	0x200018d4

08007e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3358      	adds	r3, #88	; 0x58
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 faeb 	bl	8009454 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d108      	bne.n	8007e9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f897 	bl	8008fc0 <vPortFree>
				vPortFree( pxTCB );
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 f894 	bl	8008fc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e98:	e018      	b.n	8007ecc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d103      	bne.n	8007eac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f88b 	bl	8008fc0 <vPortFree>
	}
 8007eaa:	e00f      	b.n	8007ecc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d00a      	beq.n	8007ecc <prvDeleteTCB+0x60>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60fb      	str	r3, [r7, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <prvDeleteTCB+0x5e>
	}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <prvResetNextTaskUnblockTime+0x38>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <prvResetNextTaskUnblockTime+0x3c>)
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eec:	e008      	b.n	8007f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eee:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <prvResetNextTaskUnblockTime+0x38>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <prvResetNextTaskUnblockTime+0x3c>)
 8007efe:	6013      	str	r3, [r2, #0]
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	200018a4 	.word	0x200018a4
 8007f10:	2000190c 	.word	0x2000190c

08007f14 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <xTaskGetCurrentTaskHandle+0x1c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007f20:	687b      	ldr	r3, [r7, #4]
	}
 8007f22:	4618      	mov	r0, r3
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	20001418 	.word	0x20001418

08007f34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f3a:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <xTaskGetSchedulerState+0x34>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d102      	bne.n	8007f48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f42:	2301      	movs	r3, #1
 8007f44:	607b      	str	r3, [r7, #4]
 8007f46:	e008      	b.n	8007f5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f48:	4b08      	ldr	r3, [pc, #32]	; (8007f6c <xTaskGetSchedulerState+0x38>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f50:	2302      	movs	r3, #2
 8007f52:	607b      	str	r3, [r7, #4]
 8007f54:	e001      	b.n	8007f5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f5a:	687b      	ldr	r3, [r7, #4]
	}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	200018f8 	.word	0x200018f8
 8007f6c:	20001914 	.word	0x20001914

08007f70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d051      	beq.n	800802a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8a:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <xTaskPriorityInherit+0xc4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d241      	bcs.n	8008018 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db06      	blt.n	8007faa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f9c:	4b25      	ldr	r3, [pc, #148]	; (8008034 <xTaskPriorityInherit+0xc4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6959      	ldr	r1, [r3, #20]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <xTaskPriorityInherit+0xc8>)
 8007fbc:	4413      	add	r3, r2
 8007fbe:	4299      	cmp	r1, r3
 8007fc0:	d122      	bne.n	8008008 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe f86a 	bl	80060a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fcc:	4b19      	ldr	r3, [pc, #100]	; (8008034 <xTaskPriorityInherit+0xc4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	4b18      	ldr	r3, [pc, #96]	; (800803c <xTaskPriorityInherit+0xcc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d903      	bls.n	8007fea <xTaskPriorityInherit+0x7a>
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	4a15      	ldr	r2, [pc, #84]	; (800803c <xTaskPriorityInherit+0xcc>)
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4a10      	ldr	r2, [pc, #64]	; (8008038 <xTaskPriorityInherit+0xc8>)
 8007ff8:	441a      	add	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f7fd fff0 	bl	8005fe6 <vListInsertEnd>
 8008006:	e004      	b.n	8008012 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <xTaskPriorityInherit+0xc4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008012:	2301      	movs	r3, #1
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	e008      	b.n	800802a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <xTaskPriorityInherit+0xc4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	429a      	cmp	r2, r3
 8008024:	d201      	bcs.n	800802a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008026:	2301      	movs	r3, #1
 8008028:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800802a:	68fb      	ldr	r3, [r7, #12]
	}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	20001418 	.word	0x20001418
 8008038:	2000141c 	.word	0x2000141c
 800803c:	200018f4 	.word	0x200018f4

08008040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d056      	beq.n	8008104 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008056:	4b2e      	ldr	r3, [pc, #184]	; (8008110 <xTaskPriorityDisinherit+0xd0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	429a      	cmp	r2, r3
 800805e:	d00a      	beq.n	8008076 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	60fb      	str	r3, [r7, #12]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	60bb      	str	r3, [r7, #8]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008098:	1e5a      	subs	r2, r3, #1
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d02c      	beq.n	8008104 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d128      	bne.n	8008104 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fd fff2 	bl	80060a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <xTaskPriorityDisinherit+0xd4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d903      	bls.n	80080e4 <xTaskPriorityDisinherit+0xa4>
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4a0c      	ldr	r2, [pc, #48]	; (8008114 <xTaskPriorityDisinherit+0xd4>)
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4a09      	ldr	r2, [pc, #36]	; (8008118 <xTaskPriorityDisinherit+0xd8>)
 80080f2:	441a      	add	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7fd ff73 	bl	8005fe6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008104:	697b      	ldr	r3, [r7, #20]
	}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20001418 	.word	0x20001418
 8008114:	200018f4 	.word	0x200018f4
 8008118:	2000141c 	.word	0x2000141c

0800811c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800812a:	2301      	movs	r3, #1
 800812c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d06a      	beq.n	800820a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10a      	bne.n	8008152 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60fb      	str	r3, [r7, #12]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d902      	bls.n	8008162 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	e002      	b.n	8008168 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	429a      	cmp	r2, r3
 8008170:	d04b      	beq.n	800820a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	429a      	cmp	r2, r3
 800817a:	d146      	bne.n	800820a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800817c:	4b25      	ldr	r3, [pc, #148]	; (8008214 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	429a      	cmp	r2, r3
 8008184:	d10a      	bne.n	800819c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	60bb      	str	r3, [r7, #8]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	69fa      	ldr	r2, [r7, #28]
 80081a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	db04      	blt.n	80081ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	6959      	ldr	r1, [r3, #20]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	4613      	mov	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4a13      	ldr	r2, [pc, #76]	; (8008218 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80081ca:	4413      	add	r3, r2
 80081cc:	4299      	cmp	r1, r3
 80081ce:	d11c      	bne.n	800820a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	3304      	adds	r3, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fd ff63 	bl	80060a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d903      	bls.n	80081ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	4a0c      	ldr	r2, [pc, #48]	; (800821c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4a07      	ldr	r2, [pc, #28]	; (8008218 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80081fc:	441a      	add	r2, r3
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	3304      	adds	r3, #4
 8008202:	4619      	mov	r1, r3
 8008204:	4610      	mov	r0, r2
 8008206:	f7fd feee 	bl	8005fe6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800820a:	bf00      	nop
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20001418 	.word	0x20001418
 8008218:	2000141c 	.word	0x2000141c
 800821c:	200018f4 	.word	0x200018f4

08008220 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008224:	4b07      	ldr	r3, [pc, #28]	; (8008244 <pvTaskIncrementMutexHeldCount+0x24>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800822c:	4b05      	ldr	r3, [pc, #20]	; (8008244 <pvTaskIncrementMutexHeldCount+0x24>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008232:	3201      	adds	r2, #1
 8008234:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008236:	4b03      	ldr	r3, [pc, #12]	; (8008244 <pvTaskIncrementMutexHeldCount+0x24>)
 8008238:	681b      	ldr	r3, [r3, #0]
	}
 800823a:	4618      	mov	r0, r3
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	20001418 	.word	0x20001418

08008248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008252:	4b21      	ldr	r3, [pc, #132]	; (80082d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008258:	4b20      	ldr	r3, [pc, #128]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3304      	adds	r3, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f7fd ff1e 	bl	80060a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800826a:	d10a      	bne.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008272:	4b1a      	ldr	r3, [pc, #104]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3304      	adds	r3, #4
 8008278:	4619      	mov	r1, r3
 800827a:	4819      	ldr	r0, [pc, #100]	; (80082e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800827c:	f7fd feb3 	bl	8005fe6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008280:	e026      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4413      	add	r3, r2
 8008288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800828a:	4b14      	ldr	r3, [pc, #80]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	429a      	cmp	r2, r3
 8008298:	d209      	bcs.n	80082ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fd fec1 	bl	800602e <vListInsert>
}
 80082ac:	e010      	b.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ae:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <prvAddCurrentTaskToDelayedList+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fd feb7 	bl	800602e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d202      	bcs.n	80082d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082ca:	4a08      	ldr	r2, [pc, #32]	; (80082ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6013      	str	r3, [r2, #0]
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	200018f0 	.word	0x200018f0
 80082dc:	20001418 	.word	0x20001418
 80082e0:	200018d8 	.word	0x200018d8
 80082e4:	200018a8 	.word	0x200018a8
 80082e8:	200018a4 	.word	0x200018a4
 80082ec:	2000190c 	.word	0x2000190c

080082f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082fa:	f000 fb07 	bl	800890c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082fe:	4b1c      	ldr	r3, [pc, #112]	; (8008370 <xTimerCreateTimerTask+0x80>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d021      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800830e:	1d3a      	adds	r2, r7, #4
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	f107 030c 	add.w	r3, r7, #12
 8008318:	4618      	mov	r0, r3
 800831a:	f7fd fe1d 	bl	8005f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	9202      	str	r2, [sp, #8]
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	2302      	movs	r3, #2
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	460a      	mov	r2, r1
 8008330:	4910      	ldr	r1, [pc, #64]	; (8008374 <xTimerCreateTimerTask+0x84>)
 8008332:	4811      	ldr	r0, [pc, #68]	; (8008378 <xTimerCreateTimerTask+0x88>)
 8008334:	f7fe fe9a 	bl	800706c <xTaskCreateStatic>
 8008338:	4603      	mov	r3, r0
 800833a:	4a10      	ldr	r2, [pc, #64]	; (800837c <xTimerCreateTimerTask+0x8c>)
 800833c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800833e:	4b0f      	ldr	r3, [pc, #60]	; (800837c <xTimerCreateTimerTask+0x8c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008346:	2301      	movs	r3, #1
 8008348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008366:	697b      	ldr	r3, [r7, #20]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20001948 	.word	0x20001948
 8008374:	0800e2c4 	.word	0x0800e2c4
 8008378:	080084b5 	.word	0x080084b5
 800837c:	2000194c 	.word	0x2000194c

08008380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800838e:	2300      	movs	r3, #0
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083ae:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <xTimerGenericCommand+0x98>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d02a      	beq.n	800840c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	dc18      	bgt.n	80083fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083c8:	f7ff fdb4 	bl	8007f34 <xTaskGetSchedulerState>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d109      	bne.n	80083e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083d2:	4b11      	ldr	r3, [pc, #68]	; (8008418 <xTimerGenericCommand+0x98>)
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f107 0110 	add.w	r1, r7, #16
 80083da:	2300      	movs	r3, #0
 80083dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083de:	f7fe f87d 	bl	80064dc <xQueueGenericSend>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24
 80083e4:	e012      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <xTimerGenericCommand+0x98>)
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	f107 0110 	add.w	r1, r7, #16
 80083ee:	2300      	movs	r3, #0
 80083f0:	2200      	movs	r2, #0
 80083f2:	f7fe f873 	bl	80064dc <xQueueGenericSend>
 80083f6:	6278      	str	r0, [r7, #36]	; 0x24
 80083f8:	e008      	b.n	800840c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <xTimerGenericCommand+0x98>)
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	f107 0110 	add.w	r1, r7, #16
 8008402:	2300      	movs	r3, #0
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	f7fe f967 	bl	80066d8 <xQueueGenericSendFromISR>
 800840a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800840e:	4618      	mov	r0, r3
 8008410:	3728      	adds	r7, #40	; 0x28
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20001948 	.word	0x20001948

0800841c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008426:	4b22      	ldr	r3, [pc, #136]	; (80084b0 <prvProcessExpiredTimer+0x94>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7fd fe33 	bl	80060a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	699a      	ldr	r2, [r3, #24]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	18d1      	adds	r1, r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f000 f8d1 	bl	80085fc <prvInsertTimerInActiveList>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01f      	beq.n	80084a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008460:	2300      	movs	r3, #0
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	2100      	movs	r1, #0
 800846a:	6978      	ldr	r0, [r7, #20]
 800846c:	f7ff ff88 	bl	8008380 <xTimerGenericCommand>
 8008470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d113      	bne.n	80084a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	60fb      	str	r3, [r7, #12]
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	b2da      	uxtb	r2, r3
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	6978      	ldr	r0, [r7, #20]
 80084a6:	4798      	blx	r3
}
 80084a8:	bf00      	nop
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20001940 	.word	0x20001940

080084b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084bc:	f107 0308 	add.w	r3, r7, #8
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f857 	bl	8008574 <prvGetNextExpireTime>
 80084c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4619      	mov	r1, r3
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f803 	bl	80084d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084d2:	f000 f8d5 	bl	8008680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d6:	e7f1      	b.n	80084bc <prvTimerTask+0x8>

080084d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084e2:	f7ff f929 	bl	8007738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f866 	bl	80085bc <prvSampleTimeNow>
 80084f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d130      	bne.n	800855a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	429a      	cmp	r2, r3
 8008504:	d806      	bhi.n	8008514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008506:	f7ff f925 	bl	8007754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800850a:	68f9      	ldr	r1, [r7, #12]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff ff85 	bl	800841c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008512:	e024      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800851a:	4b13      	ldr	r3, [pc, #76]	; (8008568 <prvProcessTimerOrBlockTask+0x90>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <prvProcessTimerOrBlockTask+0x50>
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <prvProcessTimerOrBlockTask+0x52>
 8008528:	2300      	movs	r3, #0
 800852a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800852c:	4b0f      	ldr	r3, [pc, #60]	; (800856c <prvProcessTimerOrBlockTask+0x94>)
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	4619      	mov	r1, r3
 800853a:	f7fe fd63 	bl	8007004 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800853e:	f7ff f909 	bl	8007754 <xTaskResumeAll>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008548:	4b09      	ldr	r3, [pc, #36]	; (8008570 <prvProcessTimerOrBlockTask+0x98>)
 800854a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	f3bf 8f6f 	isb	sy
}
 8008558:	e001      	b.n	800855e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800855a:	f7ff f8fb 	bl	8007754 <xTaskResumeAll>
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20001944 	.word	0x20001944
 800856c:	20001948 	.word	0x20001948
 8008570:	e000ed04 	.word	0xe000ed04

08008574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800857c:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <prvGetNextExpireTime+0x16>
 8008586:	2201      	movs	r2, #1
 8008588:	e000      	b.n	800858c <prvGetNextExpireTime+0x18>
 800858a:	2200      	movs	r2, #0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008598:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <prvGetNextExpireTime+0x44>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	e001      	b.n	80085a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	20001940 	.word	0x20001940

080085bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085c4:	f7ff f964 	bl	8007890 <xTaskGetTickCount>
 80085c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d205      	bcs.n	80085e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085d4:	f000 f936 	bl	8008844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	e002      	b.n	80085e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085e6:	4a04      	ldr	r2, [pc, #16]	; (80085f8 <prvSampleTimeNow+0x3c>)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085ec:	68fb      	ldr	r3, [r7, #12]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20001950 	.word	0x20001950

080085fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d812      	bhi.n	8008648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	1ad2      	subs	r2, r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	429a      	cmp	r2, r3
 800862e:	d302      	bcc.n	8008636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e01b      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008636:	4b10      	ldr	r3, [pc, #64]	; (8008678 <prvInsertTimerInActiveList+0x7c>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fd fcf4 	bl	800602e <vListInsert>
 8008646:	e012      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d206      	bcs.n	800865e <prvInsertTimerInActiveList+0x62>
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d302      	bcc.n	800865e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e007      	b.n	800866e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <prvInsertTimerInActiveList+0x80>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f7fd fce0 	bl	800602e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800866e:	697b      	ldr	r3, [r7, #20]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	20001944 	.word	0x20001944
 800867c:	20001940 	.word	0x20001940

08008680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08e      	sub	sp, #56	; 0x38
 8008684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008686:	e0ca      	b.n	800881e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	da18      	bge.n	80086c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800868e:	1d3b      	adds	r3, r7, #4
 8008690:	3304      	adds	r3, #4
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	61fb      	str	r3, [r7, #28]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b6:	6850      	ldr	r0, [r2, #4]
 80086b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ba:	6892      	ldr	r2, [r2, #8]
 80086bc:	4611      	mov	r1, r2
 80086be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f2c0 80ab 	blt.w	800881e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fd fce1 	bl	80060a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086de:	463b      	mov	r3, r7
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff ff6b 	bl	80085bc <prvSampleTimeNow>
 80086e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b09      	cmp	r3, #9
 80086ec:	f200 8096 	bhi.w	800881c <prvProcessReceivedCommands+0x19c>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <prvProcessReceivedCommands+0x78>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008721 	.word	0x08008721
 80086fc:	08008721 	.word	0x08008721
 8008700:	08008721 	.word	0x08008721
 8008704:	08008795 	.word	0x08008795
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087f3 	.word	0x080087f3
 8008710:	08008721 	.word	0x08008721
 8008714:	08008721 	.word	0x08008721
 8008718:	08008795 	.word	0x08008795
 800871c:	080087a9 	.word	0x080087a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	18d1      	adds	r1, r2, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008740:	f7ff ff5c 	bl	80085fc <prvInsertTimerInActiveList>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d069      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d05e      	beq.n	800881e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	441a      	add	r2, r3
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	2100      	movs	r1, #0
 8008770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008772:	f7ff fe05 	bl	8008380 <xTimerGenericCommand>
 8008776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d14f      	bne.n	800881e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	61bb      	str	r3, [r7, #24]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800879a:	f023 0301 	bic.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087a6:	e03a      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ae:	f043 0301 	orr.w	r3, r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10a      	bne.n	80087de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	617b      	str	r3, [r7, #20]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	18d1      	adds	r1, r2, r3
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ec:	f7ff ff06 	bl	80085fc <prvInsertTimerInActiveList>
					break;
 80087f0:	e015      	b.n	800881e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008802:	f000 fbdd 	bl	8008fc0 <vPortFree>
 8008806:	e00a      	b.n	800881e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800880e:	f023 0301 	bic.w	r3, r3, #1
 8008812:	b2da      	uxtb	r2, r3
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800881a:	e000      	b.n	800881e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800881c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881e:	4b08      	ldr	r3, [pc, #32]	; (8008840 <prvProcessReceivedCommands+0x1c0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	1d39      	adds	r1, r7, #4
 8008824:	2200      	movs	r2, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f7fd fff2 	bl	8006810 <xQueueReceive>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	f47f af2a 	bne.w	8008688 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop
 8008838:	3730      	adds	r7, #48	; 0x30
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20001948 	.word	0x20001948

08008844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800884a:	e048      	b.n	80088de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884c:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <prvSwitchTimerLists+0xc0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008856:	4b2b      	ldr	r3, [pc, #172]	; (8008904 <prvSwitchTimerLists+0xc0>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fd fc1b 	bl	80060a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d02e      	beq.n	80088de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	429a      	cmp	r2, r3
 8008890:	d90e      	bls.n	80088b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3304      	adds	r3, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7fd fbc0 	bl	800602e <vListInsert>
 80088ae:	e016      	b.n	80088de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088b0:	2300      	movs	r3, #0
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2300      	movs	r3, #0
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	2100      	movs	r1, #0
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fd60 	bl	8008380 <xTimerGenericCommand>
 80088c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	603b      	str	r3, [r7, #0]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088de:	4b09      	ldr	r3, [pc, #36]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1b1      	bne.n	800884c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088e8:	4b06      	ldr	r3, [pc, #24]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ee:	4b06      	ldr	r3, [pc, #24]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a04      	ldr	r2, [pc, #16]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088f6:	4a04      	ldr	r2, [pc, #16]	; (8008908 <prvSwitchTimerLists+0xc4>)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6013      	str	r3, [r2, #0]
}
 80088fc:	bf00      	nop
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20001940 	.word	0x20001940
 8008908:	20001944 	.word	0x20001944

0800890c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008912:	f000 f967 	bl	8008be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008916:	4b15      	ldr	r3, [pc, #84]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d120      	bne.n	8008960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800891e:	4814      	ldr	r0, [pc, #80]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 8008920:	f7fd fb34 	bl	8005f8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008924:	4813      	ldr	r0, [pc, #76]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008926:	f7fd fb31 	bl	8005f8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <prvCheckForValidListAndQueue+0x6c>)
 800892c:	4a10      	ldr	r2, [pc, #64]	; (8008970 <prvCheckForValidListAndQueue+0x64>)
 800892e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008930:	4b12      	ldr	r3, [pc, #72]	; (800897c <prvCheckForValidListAndQueue+0x70>)
 8008932:	4a10      	ldr	r2, [pc, #64]	; (8008974 <prvCheckForValidListAndQueue+0x68>)
 8008934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008936:	2300      	movs	r3, #0
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	4b11      	ldr	r3, [pc, #68]	; (8008980 <prvCheckForValidListAndQueue+0x74>)
 800893c:	4a11      	ldr	r2, [pc, #68]	; (8008984 <prvCheckForValidListAndQueue+0x78>)
 800893e:	2110      	movs	r1, #16
 8008940:	200a      	movs	r0, #10
 8008942:	f7fd fc3f 	bl	80061c4 <xQueueGenericCreateStatic>
 8008946:	4603      	mov	r3, r0
 8008948:	4a08      	ldr	r2, [pc, #32]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <prvCheckForValidListAndQueue+0x60>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	490b      	ldr	r1, [pc, #44]	; (8008988 <prvCheckForValidListAndQueue+0x7c>)
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe fb28 	bl	8006fb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008960:	f000 f970 	bl	8008c44 <vPortExitCritical>
}
 8008964:	bf00      	nop
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20001948 	.word	0x20001948
 8008970:	20001918 	.word	0x20001918
 8008974:	2000192c 	.word	0x2000192c
 8008978:	20001940 	.word	0x20001940
 800897c:	20001944 	.word	0x20001944
 8008980:	200019f4 	.word	0x200019f4
 8008984:	20001954 	.word	0x20001954
 8008988:	0800e2cc 	.word	0x0800e2cc

0800898c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b04      	subs	r3, #4
 800899c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3b04      	subs	r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3b04      	subs	r3, #4
 80089ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089bc:	4a0c      	ldr	r2, [pc, #48]	; (80089f0 <pxPortInitialiseStack+0x64>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3b14      	subs	r3, #20
 80089c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f06f 0202 	mvn.w	r2, #2
 80089da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3b20      	subs	r3, #32
 80089e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089e2:	68fb      	ldr	r3, [r7, #12]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	080089f5 	.word	0x080089f5

080089f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <prvTaskExitError+0x54>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a06:	d00a      	beq.n	8008a1e <prvTaskExitError+0x2a>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	60fb      	str	r3, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <prvTaskExitError+0x28>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a32:	bf00      	nop
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0fc      	beq.n	8008a34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	20000034 	.word	0x20000034
 8008a4c:	00000000 	.word	0x00000000

08008a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a50:	4b07      	ldr	r3, [pc, #28]	; (8008a70 <pxCurrentTCBConst2>)
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	6808      	ldr	r0, [r1, #0]
 8008a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	f380 8809 	msr	PSP, r0
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8811 	msr	BASEPRI, r0
 8008a6a:	4770      	bx	lr
 8008a6c:	f3af 8000 	nop.w

08008a70 <pxCurrentTCBConst2>:
 8008a70:	20001418 	.word	0x20001418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a78:	4808      	ldr	r0, [pc, #32]	; (8008a9c <prvPortStartFirstTask+0x24>)
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	6800      	ldr	r0, [r0, #0]
 8008a7e:	f380 8808 	msr	MSP, r0
 8008a82:	f04f 0000 	mov.w	r0, #0
 8008a86:	f380 8814 	msr	CONTROL, r0
 8008a8a:	b662      	cpsie	i
 8008a8c:	b661      	cpsie	f
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	df00      	svc	0
 8008a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a9a:	bf00      	nop
 8008a9c:	e000ed08 	.word	0xe000ed08

08008aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008aa6:	4b46      	ldr	r3, [pc, #280]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a46      	ldr	r2, [pc, #280]	; (8008bc4 <xPortStartScheduler+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	613b      	str	r3, [r7, #16]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ac6:	4b3e      	ldr	r3, [pc, #248]	; (8008bc0 <xPortStartScheduler+0x120>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a3f      	ldr	r2, [pc, #252]	; (8008bc8 <xPortStartScheduler+0x128>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10a      	bne.n	8008ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	60fb      	str	r3, [r7, #12]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ae6:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <xPortStartScheduler+0x12c>)
 8008ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4b31      	ldr	r3, [pc, #196]	; (8008bd0 <xPortStartScheduler+0x130>)
 8008b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b0e:	4b31      	ldr	r3, [pc, #196]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b10:	2207      	movs	r2, #7
 8008b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b14:	e009      	b.n	8008b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b16:	4b2f      	ldr	r3, [pc, #188]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	4a2d      	ldr	r2, [pc, #180]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d0ef      	beq.n	8008b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b36:	4b27      	ldr	r3, [pc, #156]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1c3 0307 	rsb	r3, r3, #7
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d00a      	beq.n	8008b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60bb      	str	r3, [r7, #8]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b58:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b62:	4b1c      	ldr	r3, [pc, #112]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b6a:	4a1a      	ldr	r2, [pc, #104]	; (8008bd4 <xPortStartScheduler+0x134>)
 8008b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b76:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a14      	ldr	r2, [pc, #80]	; (8008bd8 <xPortStartScheduler+0x138>)
 8008b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b8e:	f000 f8dd 	bl	8008d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b92:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <xPortStartScheduler+0x13c>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b98:	f000 f8fc 	bl	8008d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b9c:	4b10      	ldr	r3, [pc, #64]	; (8008be0 <xPortStartScheduler+0x140>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a0f      	ldr	r2, [pc, #60]	; (8008be0 <xPortStartScheduler+0x140>)
 8008ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ba8:	f7ff ff66 	bl	8008a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bac:	f7fe ff3a 	bl	8007a24 <vTaskSwitchContext>
	prvTaskExitError();
 8008bb0:	f7ff ff20 	bl	80089f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	e000ed00 	.word	0xe000ed00
 8008bc4:	410fc271 	.word	0x410fc271
 8008bc8:	410fc270 	.word	0x410fc270
 8008bcc:	e000e400 	.word	0xe000e400
 8008bd0:	20001a44 	.word	0x20001a44
 8008bd4:	20001a48 	.word	0x20001a48
 8008bd8:	e000ed20 	.word	0xe000ed20
 8008bdc:	20000034 	.word	0x20000034
 8008be0:	e000ef34 	.word	0xe000ef34

08008be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	607b      	str	r3, [r7, #4]
}
 8008bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	4a0d      	ldr	r2, [pc, #52]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c08:	4b0c      	ldr	r3, [pc, #48]	; (8008c3c <vPortEnterCritical+0x58>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d10f      	bne.n	8008c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c10:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <vPortEnterCritical+0x5c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	603b      	str	r3, [r7, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <vPortEnterCritical+0x4a>
	}
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	20000034 	.word	0x20000034
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <vPortExitCritical+0x50>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <vPortExitCritical+0x24>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <vPortExitCritical+0x50>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	4a09      	ldr	r2, [pc, #36]	; (8008c94 <vPortExitCritical+0x50>)
 8008c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c72:	4b08      	ldr	r3, [pc, #32]	; (8008c94 <vPortExitCritical+0x50>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <vPortExitCritical+0x42>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f383 8811 	msr	BASEPRI, r3
}
 8008c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20000034 	.word	0x20000034
	...

08008ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ca0:	f3ef 8009 	mrs	r0, PSP
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <pxCurrentTCBConst>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f01e 0f10 	tst.w	lr, #16
 8008cb0:	bf08      	it	eq
 8008cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	6010      	str	r0, [r2, #0]
 8008cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cc4:	f380 8811 	msr	BASEPRI, r0
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f7fe fea8 	bl	8007a24 <vTaskSwitchContext>
 8008cd4:	f04f 0000 	mov.w	r0, #0
 8008cd8:	f380 8811 	msr	BASEPRI, r0
 8008cdc:	bc09      	pop	{r0, r3}
 8008cde:	6819      	ldr	r1, [r3, #0]
 8008ce0:	6808      	ldr	r0, [r1, #0]
 8008ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce6:	f01e 0f10 	tst.w	lr, #16
 8008cea:	bf08      	it	eq
 8008cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cf0:	f380 8809 	msr	PSP, r0
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	f3af 8000 	nop.w

08008d00 <pxCurrentTCBConst>:
 8008d00:	20001418 	.word	0x20001418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop

08008d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	607b      	str	r3, [r7, #4]
}
 8008d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d22:	f7fe fdc5 	bl	80078b0 <xTaskIncrementTick>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <xPortSysTickHandler+0x40>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	2300      	movs	r3, #0
 8008d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f383 8811 	msr	BASEPRI, r3
}
 8008d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	e000ed04 	.word	0xe000ed04

08008d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <vPortSetupTimerInterrupt+0x38>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <vPortSetupTimerInterrupt+0x3c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <vPortSetupTimerInterrupt+0x40>)
 8008d62:	fba2 2303 	umull	r2, r3, r2, r3
 8008d66:	099b      	lsrs	r3, r3, #6
 8008d68:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <vPortSetupTimerInterrupt+0x44>)
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d6e:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <vPortSetupTimerInterrupt+0x34>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	e000e010 	.word	0xe000e010
 8008d84:	e000e018 	.word	0xe000e018
 8008d88:	20000028 	.word	0x20000028
 8008d8c:	10624dd3 	.word	0x10624dd3
 8008d90:	e000e014 	.word	0xe000e014

08008d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008da4 <vPortEnableVFP+0x10>
 8008d98:	6801      	ldr	r1, [r0, #0]
 8008d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d9e:	6001      	str	r1, [r0, #0]
 8008da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008da2:	bf00      	nop
 8008da4:	e000ed88 	.word	0xe000ed88

08008da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dae:	f3ef 8305 	mrs	r3, IPSR
 8008db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b0f      	cmp	r3, #15
 8008db8:	d914      	bls.n	8008de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dba:	4a17      	ldr	r2, [pc, #92]	; (8008e18 <vPortValidateInterruptPriority+0x70>)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dc4:	4b15      	ldr	r3, [pc, #84]	; (8008e1c <vPortValidateInterruptPriority+0x74>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	7afa      	ldrb	r2, [r7, #11]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d20a      	bcs.n	8008de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	607b      	str	r3, [r7, #4]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <vPortValidateInterruptPriority+0x78>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dec:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <vPortValidateInterruptPriority+0x7c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d90a      	bls.n	8008e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	603b      	str	r3, [r7, #0]
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <vPortValidateInterruptPriority+0x60>
	}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	e000e3f0 	.word	0xe000e3f0
 8008e1c:	20001a44 	.word	0x20001a44
 8008e20:	e000ed0c 	.word	0xe000ed0c
 8008e24:	20001a48 	.word	0x20001a48

08008e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e34:	f7fe fc80 	bl	8007738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e38:	4b5b      	ldr	r3, [pc, #364]	; (8008fa8 <pvPortMalloc+0x180>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e40:	f000 f920 	bl	8009084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e44:	4b59      	ldr	r3, [pc, #356]	; (8008fac <pvPortMalloc+0x184>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f040 8093 	bne.w	8008f78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01d      	beq.n	8008e94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e58:	2208      	movs	r2, #8
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d014      	beq.n	8008e94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f023 0307 	bic.w	r3, r3, #7
 8008e70:	3308      	adds	r3, #8
 8008e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <pvPortMalloc+0x6c>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	617b      	str	r3, [r7, #20]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d06e      	beq.n	8008f78 <pvPortMalloc+0x150>
 8008e9a:	4b45      	ldr	r3, [pc, #276]	; (8008fb0 <pvPortMalloc+0x188>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d869      	bhi.n	8008f78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ea4:	4b43      	ldr	r3, [pc, #268]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008ea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ea8:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <pvPortMalloc+0x18c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eae:	e004      	b.n	8008eba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d903      	bls.n	8008ecc <pvPortMalloc+0xa4>
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1f1      	bne.n	8008eb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ecc:	4b36      	ldr	r3, [pc, #216]	; (8008fa8 <pvPortMalloc+0x180>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d050      	beq.n	8008f78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2208      	movs	r2, #8
 8008edc:	4413      	add	r3, r2
 8008ede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d91f      	bls.n	8008f38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4413      	add	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00a      	beq.n	8008f20 <pvPortMalloc+0xf8>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	613b      	str	r3, [r7, #16]
}
 8008f1c:	bf00      	nop
 8008f1e:	e7fe      	b.n	8008f1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f32:	69b8      	ldr	r0, [r7, #24]
 8008f34:	f000 f908 	bl	8009148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f38:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f46:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d203      	bcs.n	8008f5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f52:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <pvPortMalloc+0x188>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a18      	ldr	r2, [pc, #96]	; (8008fb8 <pvPortMalloc+0x190>)
 8008f58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <pvPortMalloc+0x184>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <pvPortMalloc+0x194>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3301      	adds	r3, #1
 8008f74:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <pvPortMalloc+0x194>)
 8008f76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f78:	f7fe fbec 	bl	8007754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <pvPortMalloc+0x174>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	60fb      	str	r3, [r7, #12]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <pvPortMalloc+0x172>
	return pvReturn;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	; 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20004164 	.word	0x20004164
 8008fac:	20004178 	.word	0x20004178
 8008fb0:	20004168 	.word	0x20004168
 8008fb4:	2000415c 	.word	0x2000415c
 8008fb8:	2000416c 	.word	0x2000416c
 8008fbc:	20004170 	.word	0x20004170

08008fc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d04d      	beq.n	800906e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	425b      	negs	r3, r3
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4413      	add	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	4b24      	ldr	r3, [pc, #144]	; (8009078 <vPortFree+0xb8>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <vPortFree+0x44>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60fb      	str	r3, [r7, #12]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <vPortFree+0x62>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	60bb      	str	r3, [r7, #8]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <vPortFree+0xb8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01e      	beq.n	800906e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11a      	bne.n	800906e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <vPortFree+0xb8>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	43db      	mvns	r3, r3
 8009042:	401a      	ands	r2, r3
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009048:	f7fe fb76 	bl	8007738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <vPortFree+0xbc>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4413      	add	r3, r2
 8009056:	4a09      	ldr	r2, [pc, #36]	; (800907c <vPortFree+0xbc>)
 8009058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f000 f874 	bl	8009148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <vPortFree+0xc0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	4a06      	ldr	r2, [pc, #24]	; (8009080 <vPortFree+0xc0>)
 8009068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800906a:	f7fe fb73 	bl	8007754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800906e:	bf00      	nop
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20004178 	.word	0x20004178
 800907c:	20004168 	.word	0x20004168
 8009080:	20004174 	.word	0x20004174

08009084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800908a:	f242 7310 	movw	r3, #10000	; 0x2710
 800908e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009090:	4b27      	ldr	r3, [pc, #156]	; (8009130 <prvHeapInit+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00c      	beq.n	80090b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3307      	adds	r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	4a1f      	ldr	r2, [pc, #124]	; (8009130 <prvHeapInit+0xac>)
 80090b4:	4413      	add	r3, r2
 80090b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090bc:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <prvHeapInit+0xb0>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090c2:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <prvHeapInit+0xb0>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	4413      	add	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090d0:	2208      	movs	r2, #8
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0307 	bic.w	r3, r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4a15      	ldr	r2, [pc, #84]	; (8009138 <prvHeapInit+0xb4>)
 80090e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <prvHeapInit+0xb4>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <prvHeapInit+0xb4>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009104:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvHeapInit+0xb4>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a0a      	ldr	r2, [pc, #40]	; (800913c <prvHeapInit+0xb8>)
 8009112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a09      	ldr	r2, [pc, #36]	; (8009140 <prvHeapInit+0xbc>)
 800911a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800911c:	4b09      	ldr	r3, [pc, #36]	; (8009144 <prvHeapInit+0xc0>)
 800911e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009122:	601a      	str	r2, [r3, #0]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	20001a4c 	.word	0x20001a4c
 8009134:	2000415c 	.word	0x2000415c
 8009138:	20004164 	.word	0x20004164
 800913c:	2000416c 	.word	0x2000416c
 8009140:	20004168 	.word	0x20004168
 8009144:	20004178 	.word	0x20004178

08009148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009150:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <prvInsertBlockIntoFreeList+0xac>)
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e002      	b.n	800915c <prvInsertBlockIntoFreeList+0x14>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	429a      	cmp	r2, r3
 8009164:	d8f7      	bhi.n	8009156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d108      	bne.n	800918a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	441a      	add	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d118      	bne.n	80091d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d00d      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	441a      	add	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e008      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <prvInsertBlockIntoFreeList+0xb0>)
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e003      	b.n	80091d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d002      	beq.n	80091e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	2000415c 	.word	0x2000415c
 80091f8:	20004164 	.word	0x20004164

080091fc <std>:
 80091fc:	2300      	movs	r3, #0
 80091fe:	b510      	push	{r4, lr}
 8009200:	4604      	mov	r4, r0
 8009202:	e9c0 3300 	strd	r3, r3, [r0]
 8009206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800920a:	6083      	str	r3, [r0, #8]
 800920c:	8181      	strh	r1, [r0, #12]
 800920e:	6643      	str	r3, [r0, #100]	; 0x64
 8009210:	81c2      	strh	r2, [r0, #14]
 8009212:	6183      	str	r3, [r0, #24]
 8009214:	4619      	mov	r1, r3
 8009216:	2208      	movs	r2, #8
 8009218:	305c      	adds	r0, #92	; 0x5c
 800921a:	f000 f902 	bl	8009422 <memset>
 800921e:	4b05      	ldr	r3, [pc, #20]	; (8009234 <std+0x38>)
 8009220:	6223      	str	r3, [r4, #32]
 8009222:	4b05      	ldr	r3, [pc, #20]	; (8009238 <std+0x3c>)
 8009224:	6263      	str	r3, [r4, #36]	; 0x24
 8009226:	4b05      	ldr	r3, [pc, #20]	; (800923c <std+0x40>)
 8009228:	62a3      	str	r3, [r4, #40]	; 0x28
 800922a:	4b05      	ldr	r3, [pc, #20]	; (8009240 <std+0x44>)
 800922c:	61e4      	str	r4, [r4, #28]
 800922e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009230:	bd10      	pop	{r4, pc}
 8009232:	bf00      	nop
 8009234:	0800939d 	.word	0x0800939d
 8009238:	080093bf 	.word	0x080093bf
 800923c:	080093f7 	.word	0x080093f7
 8009240:	0800941b 	.word	0x0800941b

08009244 <stdio_exit_handler>:
 8009244:	4a02      	ldr	r2, [pc, #8]	; (8009250 <stdio_exit_handler+0xc>)
 8009246:	4903      	ldr	r1, [pc, #12]	; (8009254 <stdio_exit_handler+0x10>)
 8009248:	4803      	ldr	r0, [pc, #12]	; (8009258 <stdio_exit_handler+0x14>)
 800924a:	f000 b869 	b.w	8009320 <_fwalk_sglue>
 800924e:	bf00      	nop
 8009250:	20000038 	.word	0x20000038
 8009254:	0800b045 	.word	0x0800b045
 8009258:	20000048 	.word	0x20000048

0800925c <cleanup_stdio>:
 800925c:	6841      	ldr	r1, [r0, #4]
 800925e:	4b0c      	ldr	r3, [pc, #48]	; (8009290 <cleanup_stdio+0x34>)
 8009260:	4299      	cmp	r1, r3
 8009262:	b510      	push	{r4, lr}
 8009264:	4604      	mov	r4, r0
 8009266:	d001      	beq.n	800926c <cleanup_stdio+0x10>
 8009268:	f001 feec 	bl	800b044 <_fclose_r>
 800926c:	68a1      	ldr	r1, [r4, #8]
 800926e:	4b09      	ldr	r3, [pc, #36]	; (8009294 <cleanup_stdio+0x38>)
 8009270:	4299      	cmp	r1, r3
 8009272:	d002      	beq.n	800927a <cleanup_stdio+0x1e>
 8009274:	4620      	mov	r0, r4
 8009276:	f001 fee5 	bl	800b044 <_fclose_r>
 800927a:	68e1      	ldr	r1, [r4, #12]
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <cleanup_stdio+0x3c>)
 800927e:	4299      	cmp	r1, r3
 8009280:	d004      	beq.n	800928c <cleanup_stdio+0x30>
 8009282:	4620      	mov	r0, r4
 8009284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009288:	f001 bedc 	b.w	800b044 <_fclose_r>
 800928c:	bd10      	pop	{r4, pc}
 800928e:	bf00      	nop
 8009290:	2000417c 	.word	0x2000417c
 8009294:	200041e4 	.word	0x200041e4
 8009298:	2000424c 	.word	0x2000424c

0800929c <global_stdio_init.part.0>:
 800929c:	b510      	push	{r4, lr}
 800929e:	4b0b      	ldr	r3, [pc, #44]	; (80092cc <global_stdio_init.part.0+0x30>)
 80092a0:	4c0b      	ldr	r4, [pc, #44]	; (80092d0 <global_stdio_init.part.0+0x34>)
 80092a2:	4a0c      	ldr	r2, [pc, #48]	; (80092d4 <global_stdio_init.part.0+0x38>)
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	4620      	mov	r0, r4
 80092a8:	2200      	movs	r2, #0
 80092aa:	2104      	movs	r1, #4
 80092ac:	f7ff ffa6 	bl	80091fc <std>
 80092b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80092b4:	2201      	movs	r2, #1
 80092b6:	2109      	movs	r1, #9
 80092b8:	f7ff ffa0 	bl	80091fc <std>
 80092bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80092c0:	2202      	movs	r2, #2
 80092c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c6:	2112      	movs	r1, #18
 80092c8:	f7ff bf98 	b.w	80091fc <std>
 80092cc:	200042b4 	.word	0x200042b4
 80092d0:	2000417c 	.word	0x2000417c
 80092d4:	08009245 	.word	0x08009245

080092d8 <__sfp_lock_acquire>:
 80092d8:	4801      	ldr	r0, [pc, #4]	; (80092e0 <__sfp_lock_acquire+0x8>)
 80092da:	f000 b94b 	b.w	8009574 <__retarget_lock_acquire_recursive>
 80092de:	bf00      	nop
 80092e0:	200042be 	.word	0x200042be

080092e4 <__sfp_lock_release>:
 80092e4:	4801      	ldr	r0, [pc, #4]	; (80092ec <__sfp_lock_release+0x8>)
 80092e6:	f000 b946 	b.w	8009576 <__retarget_lock_release_recursive>
 80092ea:	bf00      	nop
 80092ec:	200042be 	.word	0x200042be

080092f0 <__sinit>:
 80092f0:	b510      	push	{r4, lr}
 80092f2:	4604      	mov	r4, r0
 80092f4:	f7ff fff0 	bl	80092d8 <__sfp_lock_acquire>
 80092f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092fa:	b11b      	cbz	r3, 8009304 <__sinit+0x14>
 80092fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009300:	f7ff bff0 	b.w	80092e4 <__sfp_lock_release>
 8009304:	4b04      	ldr	r3, [pc, #16]	; (8009318 <__sinit+0x28>)
 8009306:	6363      	str	r3, [r4, #52]	; 0x34
 8009308:	4b04      	ldr	r3, [pc, #16]	; (800931c <__sinit+0x2c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1f5      	bne.n	80092fc <__sinit+0xc>
 8009310:	f7ff ffc4 	bl	800929c <global_stdio_init.part.0>
 8009314:	e7f2      	b.n	80092fc <__sinit+0xc>
 8009316:	bf00      	nop
 8009318:	0800925d 	.word	0x0800925d
 800931c:	200042b4 	.word	0x200042b4

08009320 <_fwalk_sglue>:
 8009320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009324:	4607      	mov	r7, r0
 8009326:	4688      	mov	r8, r1
 8009328:	4614      	mov	r4, r2
 800932a:	2600      	movs	r6, #0
 800932c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009330:	f1b9 0901 	subs.w	r9, r9, #1
 8009334:	d505      	bpl.n	8009342 <_fwalk_sglue+0x22>
 8009336:	6824      	ldr	r4, [r4, #0]
 8009338:	2c00      	cmp	r4, #0
 800933a:	d1f7      	bne.n	800932c <_fwalk_sglue+0xc>
 800933c:	4630      	mov	r0, r6
 800933e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009342:	89ab      	ldrh	r3, [r5, #12]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d907      	bls.n	8009358 <_fwalk_sglue+0x38>
 8009348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800934c:	3301      	adds	r3, #1
 800934e:	d003      	beq.n	8009358 <_fwalk_sglue+0x38>
 8009350:	4629      	mov	r1, r5
 8009352:	4638      	mov	r0, r7
 8009354:	47c0      	blx	r8
 8009356:	4306      	orrs	r6, r0
 8009358:	3568      	adds	r5, #104	; 0x68
 800935a:	e7e9      	b.n	8009330 <_fwalk_sglue+0x10>

0800935c <sprintf>:
 800935c:	b40e      	push	{r1, r2, r3}
 800935e:	b500      	push	{lr}
 8009360:	b09c      	sub	sp, #112	; 0x70
 8009362:	ab1d      	add	r3, sp, #116	; 0x74
 8009364:	9002      	str	r0, [sp, #8]
 8009366:	9006      	str	r0, [sp, #24]
 8009368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800936c:	4809      	ldr	r0, [pc, #36]	; (8009394 <sprintf+0x38>)
 800936e:	9107      	str	r1, [sp, #28]
 8009370:	9104      	str	r1, [sp, #16]
 8009372:	4909      	ldr	r1, [pc, #36]	; (8009398 <sprintf+0x3c>)
 8009374:	f853 2b04 	ldr.w	r2, [r3], #4
 8009378:	9105      	str	r1, [sp, #20]
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	a902      	add	r1, sp, #8
 8009380:	f000 fc72 	bl	8009c68 <_svfprintf_r>
 8009384:	9b02      	ldr	r3, [sp, #8]
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
 800938a:	b01c      	add	sp, #112	; 0x70
 800938c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009390:	b003      	add	sp, #12
 8009392:	4770      	bx	lr
 8009394:	20000168 	.word	0x20000168
 8009398:	ffff0208 	.word	0xffff0208

0800939c <__sread>:
 800939c:	b510      	push	{r4, lr}
 800939e:	460c      	mov	r4, r1
 80093a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a4:	f000 f896 	bl	80094d4 <_read_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	bfab      	itete	ge
 80093ac:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80093ae:	89a3      	ldrhlt	r3, [r4, #12]
 80093b0:	181b      	addge	r3, r3, r0
 80093b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093b6:	bfac      	ite	ge
 80093b8:	6523      	strge	r3, [r4, #80]	; 0x50
 80093ba:	81a3      	strhlt	r3, [r4, #12]
 80093bc:	bd10      	pop	{r4, pc}

080093be <__swrite>:
 80093be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c2:	461f      	mov	r7, r3
 80093c4:	898b      	ldrh	r3, [r1, #12]
 80093c6:	05db      	lsls	r3, r3, #23
 80093c8:	4605      	mov	r5, r0
 80093ca:	460c      	mov	r4, r1
 80093cc:	4616      	mov	r6, r2
 80093ce:	d505      	bpl.n	80093dc <__swrite+0x1e>
 80093d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d4:	2302      	movs	r3, #2
 80093d6:	2200      	movs	r2, #0
 80093d8:	f000 f86a 	bl	80094b0 <_lseek_r>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	4632      	mov	r2, r6
 80093ea:	463b      	mov	r3, r7
 80093ec:	4628      	mov	r0, r5
 80093ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093f2:	f000 b881 	b.w	80094f8 <_write_r>

080093f6 <__sseek>:
 80093f6:	b510      	push	{r4, lr}
 80093f8:	460c      	mov	r4, r1
 80093fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093fe:	f000 f857 	bl	80094b0 <_lseek_r>
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	bf15      	itete	ne
 8009408:	6520      	strne	r0, [r4, #80]	; 0x50
 800940a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800940e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009412:	81a3      	strheq	r3, [r4, #12]
 8009414:	bf18      	it	ne
 8009416:	81a3      	strhne	r3, [r4, #12]
 8009418:	bd10      	pop	{r4, pc}

0800941a <__sclose>:
 800941a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941e:	f000 b809 	b.w	8009434 <_close_r>

08009422 <memset>:
 8009422:	4402      	add	r2, r0
 8009424:	4603      	mov	r3, r0
 8009426:	4293      	cmp	r3, r2
 8009428:	d100      	bne.n	800942c <memset+0xa>
 800942a:	4770      	bx	lr
 800942c:	f803 1b01 	strb.w	r1, [r3], #1
 8009430:	e7f9      	b.n	8009426 <memset+0x4>
	...

08009434 <_close_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4d06      	ldr	r5, [pc, #24]	; (8009450 <_close_r+0x1c>)
 8009438:	2300      	movs	r3, #0
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	602b      	str	r3, [r5, #0]
 8009440:	f7f9 f860 	bl	8002504 <_close>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_close_r+0x1a>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_close_r+0x1a>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	200042b8 	.word	0x200042b8

08009454 <_reclaim_reent>:
 8009454:	4b15      	ldr	r3, [pc, #84]	; (80094ac <_reclaim_reent+0x58>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4283      	cmp	r3, r0
 800945a:	b570      	push	{r4, r5, r6, lr}
 800945c:	4604      	mov	r4, r0
 800945e:	d023      	beq.n	80094a8 <_reclaim_reent+0x54>
 8009460:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009462:	b9fb      	cbnz	r3, 80094a4 <_reclaim_reent+0x50>
 8009464:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009466:	b111      	cbz	r1, 800946e <_reclaim_reent+0x1a>
 8009468:	4620      	mov	r0, r4
 800946a:	f000 f8f7 	bl	800965c <_free_r>
 800946e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009470:	b111      	cbz	r1, 8009478 <_reclaim_reent+0x24>
 8009472:	4620      	mov	r0, r4
 8009474:	f000 f8f2 	bl	800965c <_free_r>
 8009478:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800947a:	b1ab      	cbz	r3, 80094a8 <_reclaim_reent+0x54>
 800947c:	4620      	mov	r0, r4
 800947e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009482:	4718      	bx	r3
 8009484:	5949      	ldr	r1, [r1, r5]
 8009486:	b939      	cbnz	r1, 8009498 <_reclaim_reent+0x44>
 8009488:	3504      	adds	r5, #4
 800948a:	2d80      	cmp	r5, #128	; 0x80
 800948c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800948e:	d1f9      	bne.n	8009484 <_reclaim_reent+0x30>
 8009490:	4620      	mov	r0, r4
 8009492:	f000 f8e3 	bl	800965c <_free_r>
 8009496:	e7e5      	b.n	8009464 <_reclaim_reent+0x10>
 8009498:	680e      	ldr	r6, [r1, #0]
 800949a:	4620      	mov	r0, r4
 800949c:	f000 f8de 	bl	800965c <_free_r>
 80094a0:	4631      	mov	r1, r6
 80094a2:	e7f0      	b.n	8009486 <_reclaim_reent+0x32>
 80094a4:	2500      	movs	r5, #0
 80094a6:	e7f0      	b.n	800948a <_reclaim_reent+0x36>
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
 80094aa:	bf00      	nop
 80094ac:	20000168 	.word	0x20000168

080094b0 <_lseek_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d07      	ldr	r5, [pc, #28]	; (80094d0 <_lseek_r+0x20>)
 80094b4:	4604      	mov	r4, r0
 80094b6:	4608      	mov	r0, r1
 80094b8:	4611      	mov	r1, r2
 80094ba:	2200      	movs	r2, #0
 80094bc:	602a      	str	r2, [r5, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	f7f9 f847 	bl	8002552 <_lseek>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d102      	bne.n	80094ce <_lseek_r+0x1e>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	b103      	cbz	r3, 80094ce <_lseek_r+0x1e>
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	200042b8 	.word	0x200042b8

080094d4 <_read_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d07      	ldr	r5, [pc, #28]	; (80094f4 <_read_r+0x20>)
 80094d8:	4604      	mov	r4, r0
 80094da:	4608      	mov	r0, r1
 80094dc:	4611      	mov	r1, r2
 80094de:	2200      	movs	r2, #0
 80094e0:	602a      	str	r2, [r5, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	f7f8 ffd5 	bl	8002492 <_read>
 80094e8:	1c43      	adds	r3, r0, #1
 80094ea:	d102      	bne.n	80094f2 <_read_r+0x1e>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	b103      	cbz	r3, 80094f2 <_read_r+0x1e>
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	200042b8 	.word	0x200042b8

080094f8 <_write_r>:
 80094f8:	b538      	push	{r3, r4, r5, lr}
 80094fa:	4d07      	ldr	r5, [pc, #28]	; (8009518 <_write_r+0x20>)
 80094fc:	4604      	mov	r4, r0
 80094fe:	4608      	mov	r0, r1
 8009500:	4611      	mov	r1, r2
 8009502:	2200      	movs	r2, #0
 8009504:	602a      	str	r2, [r5, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	f7f8 ffe0 	bl	80024cc <_write>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_write_r+0x1e>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	b103      	cbz	r3, 8009516 <_write_r+0x1e>
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	200042b8 	.word	0x200042b8

0800951c <__errno>:
 800951c:	4b01      	ldr	r3, [pc, #4]	; (8009524 <__errno+0x8>)
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20000168 	.word	0x20000168

08009528 <__libc_init_array>:
 8009528:	b570      	push	{r4, r5, r6, lr}
 800952a:	4d0d      	ldr	r5, [pc, #52]	; (8009560 <__libc_init_array+0x38>)
 800952c:	4c0d      	ldr	r4, [pc, #52]	; (8009564 <__libc_init_array+0x3c>)
 800952e:	1b64      	subs	r4, r4, r5
 8009530:	10a4      	asrs	r4, r4, #2
 8009532:	2600      	movs	r6, #0
 8009534:	42a6      	cmp	r6, r4
 8009536:	d109      	bne.n	800954c <__libc_init_array+0x24>
 8009538:	4d0b      	ldr	r5, [pc, #44]	; (8009568 <__libc_init_array+0x40>)
 800953a:	4c0c      	ldr	r4, [pc, #48]	; (800956c <__libc_init_array+0x44>)
 800953c:	f004 fbe6 	bl	800dd0c <_init>
 8009540:	1b64      	subs	r4, r4, r5
 8009542:	10a4      	asrs	r4, r4, #2
 8009544:	2600      	movs	r6, #0
 8009546:	42a6      	cmp	r6, r4
 8009548:	d105      	bne.n	8009556 <__libc_init_array+0x2e>
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009550:	4798      	blx	r3
 8009552:	3601      	adds	r6, #1
 8009554:	e7ee      	b.n	8009534 <__libc_init_array+0xc>
 8009556:	f855 3b04 	ldr.w	r3, [r5], #4
 800955a:	4798      	blx	r3
 800955c:	3601      	adds	r6, #1
 800955e:	e7f2      	b.n	8009546 <__libc_init_array+0x1e>
 8009560:	0800e7bc 	.word	0x0800e7bc
 8009564:	0800e7bc 	.word	0x0800e7bc
 8009568:	0800e7bc 	.word	0x0800e7bc
 800956c:	0800e7c4 	.word	0x0800e7c4

08009570 <__retarget_lock_init_recursive>:
 8009570:	4770      	bx	lr

08009572 <__retarget_lock_close_recursive>:
 8009572:	4770      	bx	lr

08009574 <__retarget_lock_acquire_recursive>:
 8009574:	4770      	bx	lr

08009576 <__retarget_lock_release_recursive>:
 8009576:	4770      	bx	lr

08009578 <memcpy>:
 8009578:	440a      	add	r2, r1
 800957a:	4291      	cmp	r1, r2
 800957c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009580:	d100      	bne.n	8009584 <memcpy+0xc>
 8009582:	4770      	bx	lr
 8009584:	b510      	push	{r4, lr}
 8009586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800958a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800958e:	4291      	cmp	r1, r2
 8009590:	d1f9      	bne.n	8009586 <memcpy+0xe>
 8009592:	bd10      	pop	{r4, pc}

08009594 <register_fini>:
 8009594:	4b02      	ldr	r3, [pc, #8]	; (80095a0 <register_fini+0xc>)
 8009596:	b113      	cbz	r3, 800959e <register_fini+0xa>
 8009598:	4802      	ldr	r0, [pc, #8]	; (80095a4 <register_fini+0x10>)
 800959a:	f000 b805 	b.w	80095a8 <atexit>
 800959e:	4770      	bx	lr
 80095a0:	00000000 	.word	0x00000000
 80095a4:	0800b2a9 	.word	0x0800b2a9

080095a8 <atexit>:
 80095a8:	2300      	movs	r3, #0
 80095aa:	4601      	mov	r1, r0
 80095ac:	461a      	mov	r2, r3
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 bed2 	b.w	800b358 <__register_exitproc>

080095b4 <_malloc_trim_r>:
 80095b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b8:	4606      	mov	r6, r0
 80095ba:	2008      	movs	r0, #8
 80095bc:	460c      	mov	r4, r1
 80095be:	f001 fe87 	bl	800b2d0 <sysconf>
 80095c2:	4f23      	ldr	r7, [pc, #140]	; (8009650 <_malloc_trim_r+0x9c>)
 80095c4:	4680      	mov	r8, r0
 80095c6:	4630      	mov	r0, r6
 80095c8:	f000 fb42 	bl	8009c50 <__malloc_lock>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	685d      	ldr	r5, [r3, #4]
 80095d0:	f025 0503 	bic.w	r5, r5, #3
 80095d4:	1b2c      	subs	r4, r5, r4
 80095d6:	3c11      	subs	r4, #17
 80095d8:	4444      	add	r4, r8
 80095da:	fbb4 f4f8 	udiv	r4, r4, r8
 80095de:	3c01      	subs	r4, #1
 80095e0:	fb08 f404 	mul.w	r4, r8, r4
 80095e4:	45a0      	cmp	r8, r4
 80095e6:	dd05      	ble.n	80095f4 <_malloc_trim_r+0x40>
 80095e8:	4630      	mov	r0, r6
 80095ea:	f000 fb37 	bl	8009c5c <__malloc_unlock>
 80095ee:	2000      	movs	r0, #0
 80095f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f4:	2100      	movs	r1, #0
 80095f6:	4630      	mov	r0, r6
 80095f8:	f001 fe46 	bl	800b288 <_sbrk_r>
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	442b      	add	r3, r5
 8009600:	4298      	cmp	r0, r3
 8009602:	d1f1      	bne.n	80095e8 <_malloc_trim_r+0x34>
 8009604:	4261      	negs	r1, r4
 8009606:	4630      	mov	r0, r6
 8009608:	f001 fe3e 	bl	800b288 <_sbrk_r>
 800960c:	3001      	adds	r0, #1
 800960e:	d110      	bne.n	8009632 <_malloc_trim_r+0x7e>
 8009610:	2100      	movs	r1, #0
 8009612:	4630      	mov	r0, r6
 8009614:	f001 fe38 	bl	800b288 <_sbrk_r>
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	1a83      	subs	r3, r0, r2
 800961c:	2b0f      	cmp	r3, #15
 800961e:	dde3      	ble.n	80095e8 <_malloc_trim_r+0x34>
 8009620:	490c      	ldr	r1, [pc, #48]	; (8009654 <_malloc_trim_r+0xa0>)
 8009622:	6809      	ldr	r1, [r1, #0]
 8009624:	1a40      	subs	r0, r0, r1
 8009626:	490c      	ldr	r1, [pc, #48]	; (8009658 <_malloc_trim_r+0xa4>)
 8009628:	f043 0301 	orr.w	r3, r3, #1
 800962c:	6008      	str	r0, [r1, #0]
 800962e:	6053      	str	r3, [r2, #4]
 8009630:	e7da      	b.n	80095e8 <_malloc_trim_r+0x34>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	4a08      	ldr	r2, [pc, #32]	; (8009658 <_malloc_trim_r+0xa4>)
 8009636:	1b2d      	subs	r5, r5, r4
 8009638:	f045 0501 	orr.w	r5, r5, #1
 800963c:	605d      	str	r5, [r3, #4]
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	4630      	mov	r0, r6
 8009642:	1b1b      	subs	r3, r3, r4
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	f000 fb09 	bl	8009c5c <__malloc_unlock>
 800964a:	2001      	movs	r0, #1
 800964c:	e7d0      	b.n	80095f0 <_malloc_trim_r+0x3c>
 800964e:	bf00      	nop
 8009650:	20000170 	.word	0x20000170
 8009654:	20000578 	.word	0x20000578
 8009658:	200042c4 	.word	0x200042c4

0800965c <_free_r>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	4605      	mov	r5, r0
 8009660:	460f      	mov	r7, r1
 8009662:	2900      	cmp	r1, #0
 8009664:	f000 80b1 	beq.w	80097ca <_free_r+0x16e>
 8009668:	f000 faf2 	bl	8009c50 <__malloc_lock>
 800966c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009670:	4856      	ldr	r0, [pc, #344]	; (80097cc <_free_r+0x170>)
 8009672:	f022 0401 	bic.w	r4, r2, #1
 8009676:	f1a7 0308 	sub.w	r3, r7, #8
 800967a:	eb03 0c04 	add.w	ip, r3, r4
 800967e:	6881      	ldr	r1, [r0, #8]
 8009680:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009684:	4561      	cmp	r1, ip
 8009686:	f026 0603 	bic.w	r6, r6, #3
 800968a:	f002 0201 	and.w	r2, r2, #1
 800968e:	d11b      	bne.n	80096c8 <_free_r+0x6c>
 8009690:	4426      	add	r6, r4
 8009692:	b93a      	cbnz	r2, 80096a4 <_free_r+0x48>
 8009694:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8009698:	1a9b      	subs	r3, r3, r2
 800969a:	4416      	add	r6, r2
 800969c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80096a0:	60ca      	str	r2, [r1, #12]
 80096a2:	6091      	str	r1, [r2, #8]
 80096a4:	f046 0201 	orr.w	r2, r6, #1
 80096a8:	605a      	str	r2, [r3, #4]
 80096aa:	6083      	str	r3, [r0, #8]
 80096ac:	4b48      	ldr	r3, [pc, #288]	; (80097d0 <_free_r+0x174>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	42b3      	cmp	r3, r6
 80096b2:	d804      	bhi.n	80096be <_free_r+0x62>
 80096b4:	4b47      	ldr	r3, [pc, #284]	; (80097d4 <_free_r+0x178>)
 80096b6:	4628      	mov	r0, r5
 80096b8:	6819      	ldr	r1, [r3, #0]
 80096ba:	f7ff ff7b 	bl	80095b4 <_malloc_trim_r>
 80096be:	4628      	mov	r0, r5
 80096c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096c4:	f000 baca 	b.w	8009c5c <__malloc_unlock>
 80096c8:	f8cc 6004 	str.w	r6, [ip, #4]
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	d138      	bne.n	8009742 <_free_r+0xe6>
 80096d0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80096d4:	1a5b      	subs	r3, r3, r1
 80096d6:	440c      	add	r4, r1
 80096d8:	6899      	ldr	r1, [r3, #8]
 80096da:	f100 0708 	add.w	r7, r0, #8
 80096de:	42b9      	cmp	r1, r7
 80096e0:	d031      	beq.n	8009746 <_free_r+0xea>
 80096e2:	68df      	ldr	r7, [r3, #12]
 80096e4:	60cf      	str	r7, [r1, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	eb0c 0106 	add.w	r1, ip, r6
 80096ec:	6849      	ldr	r1, [r1, #4]
 80096ee:	07c9      	lsls	r1, r1, #31
 80096f0:	d40b      	bmi.n	800970a <_free_r+0xae>
 80096f2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80096f6:	4434      	add	r4, r6
 80096f8:	bb3a      	cbnz	r2, 800974a <_free_r+0xee>
 80096fa:	4e37      	ldr	r6, [pc, #220]	; (80097d8 <_free_r+0x17c>)
 80096fc:	42b1      	cmp	r1, r6
 80096fe:	d124      	bne.n	800974a <_free_r+0xee>
 8009700:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009704:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009708:	2201      	movs	r2, #1
 800970a:	f044 0101 	orr.w	r1, r4, #1
 800970e:	6059      	str	r1, [r3, #4]
 8009710:	511c      	str	r4, [r3, r4]
 8009712:	2a00      	cmp	r2, #0
 8009714:	d1d3      	bne.n	80096be <_free_r+0x62>
 8009716:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800971a:	d21b      	bcs.n	8009754 <_free_r+0xf8>
 800971c:	08e2      	lsrs	r2, r4, #3
 800971e:	2101      	movs	r1, #1
 8009720:	0964      	lsrs	r4, r4, #5
 8009722:	40a1      	lsls	r1, r4
 8009724:	6844      	ldr	r4, [r0, #4]
 8009726:	3201      	adds	r2, #1
 8009728:	4321      	orrs	r1, r4
 800972a:	6041      	str	r1, [r0, #4]
 800972c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8009730:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8009734:	3908      	subs	r1, #8
 8009736:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800973a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800973e:	60e3      	str	r3, [r4, #12]
 8009740:	e7bd      	b.n	80096be <_free_r+0x62>
 8009742:	2200      	movs	r2, #0
 8009744:	e7d0      	b.n	80096e8 <_free_r+0x8c>
 8009746:	2201      	movs	r2, #1
 8009748:	e7ce      	b.n	80096e8 <_free_r+0x8c>
 800974a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800974e:	60ce      	str	r6, [r1, #12]
 8009750:	60b1      	str	r1, [r6, #8]
 8009752:	e7da      	b.n	800970a <_free_r+0xae>
 8009754:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8009758:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800975c:	d214      	bcs.n	8009788 <_free_r+0x12c>
 800975e:	09a2      	lsrs	r2, r4, #6
 8009760:	3238      	adds	r2, #56	; 0x38
 8009762:	1c51      	adds	r1, r2, #1
 8009764:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8009768:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800976c:	428e      	cmp	r6, r1
 800976e:	d125      	bne.n	80097bc <_free_r+0x160>
 8009770:	2401      	movs	r4, #1
 8009772:	1092      	asrs	r2, r2, #2
 8009774:	fa04 f202 	lsl.w	r2, r4, r2
 8009778:	6844      	ldr	r4, [r0, #4]
 800977a:	4322      	orrs	r2, r4
 800977c:	6042      	str	r2, [r0, #4]
 800977e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8009782:	60b3      	str	r3, [r6, #8]
 8009784:	60cb      	str	r3, [r1, #12]
 8009786:	e79a      	b.n	80096be <_free_r+0x62>
 8009788:	2a14      	cmp	r2, #20
 800978a:	d801      	bhi.n	8009790 <_free_r+0x134>
 800978c:	325b      	adds	r2, #91	; 0x5b
 800978e:	e7e8      	b.n	8009762 <_free_r+0x106>
 8009790:	2a54      	cmp	r2, #84	; 0x54
 8009792:	d802      	bhi.n	800979a <_free_r+0x13e>
 8009794:	0b22      	lsrs	r2, r4, #12
 8009796:	326e      	adds	r2, #110	; 0x6e
 8009798:	e7e3      	b.n	8009762 <_free_r+0x106>
 800979a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800979e:	d802      	bhi.n	80097a6 <_free_r+0x14a>
 80097a0:	0be2      	lsrs	r2, r4, #15
 80097a2:	3277      	adds	r2, #119	; 0x77
 80097a4:	e7dd      	b.n	8009762 <_free_r+0x106>
 80097a6:	f240 5154 	movw	r1, #1364	; 0x554
 80097aa:	428a      	cmp	r2, r1
 80097ac:	bf9a      	itte	ls
 80097ae:	0ca2      	lsrls	r2, r4, #18
 80097b0:	327c      	addls	r2, #124	; 0x7c
 80097b2:	227e      	movhi	r2, #126	; 0x7e
 80097b4:	e7d5      	b.n	8009762 <_free_r+0x106>
 80097b6:	6889      	ldr	r1, [r1, #8]
 80097b8:	428e      	cmp	r6, r1
 80097ba:	d004      	beq.n	80097c6 <_free_r+0x16a>
 80097bc:	684a      	ldr	r2, [r1, #4]
 80097be:	f022 0203 	bic.w	r2, r2, #3
 80097c2:	42a2      	cmp	r2, r4
 80097c4:	d8f7      	bhi.n	80097b6 <_free_r+0x15a>
 80097c6:	68ce      	ldr	r6, [r1, #12]
 80097c8:	e7d9      	b.n	800977e <_free_r+0x122>
 80097ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097cc:	20000170 	.word	0x20000170
 80097d0:	2000057c 	.word	0x2000057c
 80097d4:	200042f4 	.word	0x200042f4
 80097d8:	20000178 	.word	0x20000178

080097dc <_malloc_r>:
 80097dc:	f101 030b 	add.w	r3, r1, #11
 80097e0:	2b16      	cmp	r3, #22
 80097e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e6:	4605      	mov	r5, r0
 80097e8:	d906      	bls.n	80097f8 <_malloc_r+0x1c>
 80097ea:	f033 0707 	bics.w	r7, r3, #7
 80097ee:	d504      	bpl.n	80097fa <_malloc_r+0x1e>
 80097f0:	230c      	movs	r3, #12
 80097f2:	602b      	str	r3, [r5, #0]
 80097f4:	2400      	movs	r4, #0
 80097f6:	e1a3      	b.n	8009b40 <_malloc_r+0x364>
 80097f8:	2710      	movs	r7, #16
 80097fa:	42b9      	cmp	r1, r7
 80097fc:	d8f8      	bhi.n	80097f0 <_malloc_r+0x14>
 80097fe:	4628      	mov	r0, r5
 8009800:	f000 fa26 	bl	8009c50 <__malloc_lock>
 8009804:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8009808:	4eaf      	ldr	r6, [pc, #700]	; (8009ac8 <_malloc_r+0x2ec>)
 800980a:	d237      	bcs.n	800987c <_malloc_r+0xa0>
 800980c:	f107 0208 	add.w	r2, r7, #8
 8009810:	4432      	add	r2, r6
 8009812:	f1a2 0108 	sub.w	r1, r2, #8
 8009816:	6854      	ldr	r4, [r2, #4]
 8009818:	428c      	cmp	r4, r1
 800981a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800981e:	d102      	bne.n	8009826 <_malloc_r+0x4a>
 8009820:	68d4      	ldr	r4, [r2, #12]
 8009822:	42a2      	cmp	r2, r4
 8009824:	d010      	beq.n	8009848 <_malloc_r+0x6c>
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800982c:	f023 0303 	bic.w	r3, r3, #3
 8009830:	60ca      	str	r2, [r1, #12]
 8009832:	4423      	add	r3, r4
 8009834:	6091      	str	r1, [r2, #8]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	f042 0201 	orr.w	r2, r2, #1
 800983c:	605a      	str	r2, [r3, #4]
 800983e:	4628      	mov	r0, r5
 8009840:	f000 fa0c 	bl	8009c5c <__malloc_unlock>
 8009844:	3408      	adds	r4, #8
 8009846:	e17b      	b.n	8009b40 <_malloc_r+0x364>
 8009848:	3302      	adds	r3, #2
 800984a:	6934      	ldr	r4, [r6, #16]
 800984c:	499f      	ldr	r1, [pc, #636]	; (8009acc <_malloc_r+0x2f0>)
 800984e:	428c      	cmp	r4, r1
 8009850:	d077      	beq.n	8009942 <_malloc_r+0x166>
 8009852:	6862      	ldr	r2, [r4, #4]
 8009854:	f022 0c03 	bic.w	ip, r2, #3
 8009858:	ebac 0007 	sub.w	r0, ip, r7
 800985c:	280f      	cmp	r0, #15
 800985e:	dd48      	ble.n	80098f2 <_malloc_r+0x116>
 8009860:	19e2      	adds	r2, r4, r7
 8009862:	f040 0301 	orr.w	r3, r0, #1
 8009866:	f047 0701 	orr.w	r7, r7, #1
 800986a:	6067      	str	r7, [r4, #4]
 800986c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009870:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009874:	6053      	str	r3, [r2, #4]
 8009876:	f844 000c 	str.w	r0, [r4, ip]
 800987a:	e7e0      	b.n	800983e <_malloc_r+0x62>
 800987c:	0a7b      	lsrs	r3, r7, #9
 800987e:	d02a      	beq.n	80098d6 <_malloc_r+0xfa>
 8009880:	2b04      	cmp	r3, #4
 8009882:	d812      	bhi.n	80098aa <_malloc_r+0xce>
 8009884:	09bb      	lsrs	r3, r7, #6
 8009886:	3338      	adds	r3, #56	; 0x38
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800988e:	f1a2 0c08 	sub.w	ip, r2, #8
 8009892:	6854      	ldr	r4, [r2, #4]
 8009894:	4564      	cmp	r4, ip
 8009896:	d006      	beq.n	80098a6 <_malloc_r+0xca>
 8009898:	6862      	ldr	r2, [r4, #4]
 800989a:	f022 0203 	bic.w	r2, r2, #3
 800989e:	1bd0      	subs	r0, r2, r7
 80098a0:	280f      	cmp	r0, #15
 80098a2:	dd1c      	ble.n	80098de <_malloc_r+0x102>
 80098a4:	3b01      	subs	r3, #1
 80098a6:	3301      	adds	r3, #1
 80098a8:	e7cf      	b.n	800984a <_malloc_r+0x6e>
 80098aa:	2b14      	cmp	r3, #20
 80098ac:	d801      	bhi.n	80098b2 <_malloc_r+0xd6>
 80098ae:	335b      	adds	r3, #91	; 0x5b
 80098b0:	e7ea      	b.n	8009888 <_malloc_r+0xac>
 80098b2:	2b54      	cmp	r3, #84	; 0x54
 80098b4:	d802      	bhi.n	80098bc <_malloc_r+0xe0>
 80098b6:	0b3b      	lsrs	r3, r7, #12
 80098b8:	336e      	adds	r3, #110	; 0x6e
 80098ba:	e7e5      	b.n	8009888 <_malloc_r+0xac>
 80098bc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80098c0:	d802      	bhi.n	80098c8 <_malloc_r+0xec>
 80098c2:	0bfb      	lsrs	r3, r7, #15
 80098c4:	3377      	adds	r3, #119	; 0x77
 80098c6:	e7df      	b.n	8009888 <_malloc_r+0xac>
 80098c8:	f240 5254 	movw	r2, #1364	; 0x554
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d804      	bhi.n	80098da <_malloc_r+0xfe>
 80098d0:	0cbb      	lsrs	r3, r7, #18
 80098d2:	337c      	adds	r3, #124	; 0x7c
 80098d4:	e7d8      	b.n	8009888 <_malloc_r+0xac>
 80098d6:	233f      	movs	r3, #63	; 0x3f
 80098d8:	e7d6      	b.n	8009888 <_malloc_r+0xac>
 80098da:	237e      	movs	r3, #126	; 0x7e
 80098dc:	e7d4      	b.n	8009888 <_malloc_r+0xac>
 80098de:	2800      	cmp	r0, #0
 80098e0:	68e1      	ldr	r1, [r4, #12]
 80098e2:	db04      	blt.n	80098ee <_malloc_r+0x112>
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	60d9      	str	r1, [r3, #12]
 80098e8:	608b      	str	r3, [r1, #8]
 80098ea:	18a3      	adds	r3, r4, r2
 80098ec:	e7a3      	b.n	8009836 <_malloc_r+0x5a>
 80098ee:	460c      	mov	r4, r1
 80098f0:	e7d0      	b.n	8009894 <_malloc_r+0xb8>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80098f8:	db07      	blt.n	800990a <_malloc_r+0x12e>
 80098fa:	44a4      	add	ip, r4
 80098fc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009900:	f043 0301 	orr.w	r3, r3, #1
 8009904:	f8cc 3004 	str.w	r3, [ip, #4]
 8009908:	e799      	b.n	800983e <_malloc_r+0x62>
 800990a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800990e:	6870      	ldr	r0, [r6, #4]
 8009910:	f080 8095 	bcs.w	8009a3e <_malloc_r+0x262>
 8009914:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009918:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800991c:	f04f 0c01 	mov.w	ip, #1
 8009920:	3201      	adds	r2, #1
 8009922:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009926:	ea4c 0000 	orr.w	r0, ip, r0
 800992a:	6070      	str	r0, [r6, #4]
 800992c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8009930:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009934:	3808      	subs	r0, #8
 8009936:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800993a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800993e:	f8cc 400c 	str.w	r4, [ip, #12]
 8009942:	1098      	asrs	r0, r3, #2
 8009944:	2201      	movs	r2, #1
 8009946:	4082      	lsls	r2, r0
 8009948:	6870      	ldr	r0, [r6, #4]
 800994a:	4290      	cmp	r0, r2
 800994c:	d326      	bcc.n	800999c <_malloc_r+0x1c0>
 800994e:	4210      	tst	r0, r2
 8009950:	d106      	bne.n	8009960 <_malloc_r+0x184>
 8009952:	f023 0303 	bic.w	r3, r3, #3
 8009956:	0052      	lsls	r2, r2, #1
 8009958:	4210      	tst	r0, r2
 800995a:	f103 0304 	add.w	r3, r3, #4
 800995e:	d0fa      	beq.n	8009956 <_malloc_r+0x17a>
 8009960:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8009964:	46c1      	mov	r9, r8
 8009966:	469e      	mov	lr, r3
 8009968:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800996c:	454c      	cmp	r4, r9
 800996e:	f040 80b9 	bne.w	8009ae4 <_malloc_r+0x308>
 8009972:	f10e 0e01 	add.w	lr, lr, #1
 8009976:	f01e 0f03 	tst.w	lr, #3
 800997a:	f109 0908 	add.w	r9, r9, #8
 800997e:	d1f3      	bne.n	8009968 <_malloc_r+0x18c>
 8009980:	0798      	lsls	r0, r3, #30
 8009982:	f040 80e3 	bne.w	8009b4c <_malloc_r+0x370>
 8009986:	6873      	ldr	r3, [r6, #4]
 8009988:	ea23 0302 	bic.w	r3, r3, r2
 800998c:	6073      	str	r3, [r6, #4]
 800998e:	6870      	ldr	r0, [r6, #4]
 8009990:	0052      	lsls	r2, r2, #1
 8009992:	4290      	cmp	r0, r2
 8009994:	d302      	bcc.n	800999c <_malloc_r+0x1c0>
 8009996:	2a00      	cmp	r2, #0
 8009998:	f040 80e5 	bne.w	8009b66 <_malloc_r+0x38a>
 800999c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80099a0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80099a4:	f023 0903 	bic.w	r9, r3, #3
 80099a8:	45b9      	cmp	r9, r7
 80099aa:	d304      	bcc.n	80099b6 <_malloc_r+0x1da>
 80099ac:	eba9 0207 	sub.w	r2, r9, r7
 80099b0:	2a0f      	cmp	r2, #15
 80099b2:	f300 8141 	bgt.w	8009c38 <_malloc_r+0x45c>
 80099b6:	4b46      	ldr	r3, [pc, #280]	; (8009ad0 <_malloc_r+0x2f4>)
 80099b8:	6819      	ldr	r1, [r3, #0]
 80099ba:	3110      	adds	r1, #16
 80099bc:	4439      	add	r1, r7
 80099be:	2008      	movs	r0, #8
 80099c0:	9101      	str	r1, [sp, #4]
 80099c2:	f001 fc85 	bl	800b2d0 <sysconf>
 80099c6:	4a43      	ldr	r2, [pc, #268]	; (8009ad4 <_malloc_r+0x2f8>)
 80099c8:	9901      	ldr	r1, [sp, #4]
 80099ca:	6813      	ldr	r3, [r2, #0]
 80099cc:	3301      	adds	r3, #1
 80099ce:	bf1f      	itttt	ne
 80099d0:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80099d4:	1809      	addne	r1, r1, r0
 80099d6:	4243      	negne	r3, r0
 80099d8:	4019      	andne	r1, r3
 80099da:	4680      	mov	r8, r0
 80099dc:	4628      	mov	r0, r5
 80099de:	9101      	str	r1, [sp, #4]
 80099e0:	f001 fc52 	bl	800b288 <_sbrk_r>
 80099e4:	1c42      	adds	r2, r0, #1
 80099e6:	eb0a 0b09 	add.w	fp, sl, r9
 80099ea:	4604      	mov	r4, r0
 80099ec:	f000 80f7 	beq.w	8009bde <_malloc_r+0x402>
 80099f0:	4583      	cmp	fp, r0
 80099f2:	9901      	ldr	r1, [sp, #4]
 80099f4:	4a37      	ldr	r2, [pc, #220]	; (8009ad4 <_malloc_r+0x2f8>)
 80099f6:	d902      	bls.n	80099fe <_malloc_r+0x222>
 80099f8:	45b2      	cmp	sl, r6
 80099fa:	f040 80f0 	bne.w	8009bde <_malloc_r+0x402>
 80099fe:	4b36      	ldr	r3, [pc, #216]	; (8009ad8 <_malloc_r+0x2fc>)
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	45a3      	cmp	fp, r4
 8009a04:	eb00 0e01 	add.w	lr, r0, r1
 8009a08:	f8c3 e000 	str.w	lr, [r3]
 8009a0c:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8009a10:	f040 80ab 	bne.w	8009b6a <_malloc_r+0x38e>
 8009a14:	ea1b 0f0c 	tst.w	fp, ip
 8009a18:	f040 80a7 	bne.w	8009b6a <_malloc_r+0x38e>
 8009a1c:	68b2      	ldr	r2, [r6, #8]
 8009a1e:	4449      	add	r1, r9
 8009a20:	f041 0101 	orr.w	r1, r1, #1
 8009a24:	6051      	str	r1, [r2, #4]
 8009a26:	4a2d      	ldr	r2, [pc, #180]	; (8009adc <_malloc_r+0x300>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6811      	ldr	r1, [r2, #0]
 8009a2c:	428b      	cmp	r3, r1
 8009a2e:	bf88      	it	hi
 8009a30:	6013      	strhi	r3, [r2, #0]
 8009a32:	4a2b      	ldr	r2, [pc, #172]	; (8009ae0 <_malloc_r+0x304>)
 8009a34:	6811      	ldr	r1, [r2, #0]
 8009a36:	428b      	cmp	r3, r1
 8009a38:	bf88      	it	hi
 8009a3a:	6013      	strhi	r3, [r2, #0]
 8009a3c:	e0cf      	b.n	8009bde <_malloc_r+0x402>
 8009a3e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8009a42:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009a46:	d218      	bcs.n	8009a7a <_malloc_r+0x29e>
 8009a48:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009a4c:	3238      	adds	r2, #56	; 0x38
 8009a4e:	f102 0e01 	add.w	lr, r2, #1
 8009a52:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009a56:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009a5a:	45f0      	cmp	r8, lr
 8009a5c:	d12b      	bne.n	8009ab6 <_malloc_r+0x2da>
 8009a5e:	1092      	asrs	r2, r2, #2
 8009a60:	f04f 0c01 	mov.w	ip, #1
 8009a64:	fa0c f202 	lsl.w	r2, ip, r2
 8009a68:	4302      	orrs	r2, r0
 8009a6a:	6072      	str	r2, [r6, #4]
 8009a6c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009a70:	f8c8 4008 	str.w	r4, [r8, #8]
 8009a74:	f8ce 400c 	str.w	r4, [lr, #12]
 8009a78:	e763      	b.n	8009942 <_malloc_r+0x166>
 8009a7a:	2a14      	cmp	r2, #20
 8009a7c:	d801      	bhi.n	8009a82 <_malloc_r+0x2a6>
 8009a7e:	325b      	adds	r2, #91	; 0x5b
 8009a80:	e7e5      	b.n	8009a4e <_malloc_r+0x272>
 8009a82:	2a54      	cmp	r2, #84	; 0x54
 8009a84:	d803      	bhi.n	8009a8e <_malloc_r+0x2b2>
 8009a86:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009a8a:	326e      	adds	r2, #110	; 0x6e
 8009a8c:	e7df      	b.n	8009a4e <_malloc_r+0x272>
 8009a8e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009a92:	d803      	bhi.n	8009a9c <_malloc_r+0x2c0>
 8009a94:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009a98:	3277      	adds	r2, #119	; 0x77
 8009a9a:	e7d8      	b.n	8009a4e <_malloc_r+0x272>
 8009a9c:	f240 5e54 	movw	lr, #1364	; 0x554
 8009aa0:	4572      	cmp	r2, lr
 8009aa2:	bf9a      	itte	ls
 8009aa4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009aa8:	327c      	addls	r2, #124	; 0x7c
 8009aaa:	227e      	movhi	r2, #126	; 0x7e
 8009aac:	e7cf      	b.n	8009a4e <_malloc_r+0x272>
 8009aae:	f8de e008 	ldr.w	lr, [lr, #8]
 8009ab2:	45f0      	cmp	r8, lr
 8009ab4:	d005      	beq.n	8009ac2 <_malloc_r+0x2e6>
 8009ab6:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009aba:	f022 0203 	bic.w	r2, r2, #3
 8009abe:	4562      	cmp	r2, ip
 8009ac0:	d8f5      	bhi.n	8009aae <_malloc_r+0x2d2>
 8009ac2:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009ac6:	e7d1      	b.n	8009a6c <_malloc_r+0x290>
 8009ac8:	20000170 	.word	0x20000170
 8009acc:	20000178 	.word	0x20000178
 8009ad0:	200042f4 	.word	0x200042f4
 8009ad4:	20000578 	.word	0x20000578
 8009ad8:	200042c4 	.word	0x200042c4
 8009adc:	200042ec 	.word	0x200042ec
 8009ae0:	200042f0 	.word	0x200042f0
 8009ae4:	6860      	ldr	r0, [r4, #4]
 8009ae6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009aea:	f020 0003 	bic.w	r0, r0, #3
 8009aee:	eba0 0a07 	sub.w	sl, r0, r7
 8009af2:	f1ba 0f0f 	cmp.w	sl, #15
 8009af6:	dd12      	ble.n	8009b1e <_malloc_r+0x342>
 8009af8:	68a3      	ldr	r3, [r4, #8]
 8009afa:	19e2      	adds	r2, r4, r7
 8009afc:	f047 0701 	orr.w	r7, r7, #1
 8009b00:	6067      	str	r7, [r4, #4]
 8009b02:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009b06:	f8cc 3008 	str.w	r3, [ip, #8]
 8009b0a:	f04a 0301 	orr.w	r3, sl, #1
 8009b0e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009b12:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009b16:	6053      	str	r3, [r2, #4]
 8009b18:	f844 a000 	str.w	sl, [r4, r0]
 8009b1c:	e68f      	b.n	800983e <_malloc_r+0x62>
 8009b1e:	f1ba 0f00 	cmp.w	sl, #0
 8009b22:	db11      	blt.n	8009b48 <_malloc_r+0x36c>
 8009b24:	4420      	add	r0, r4
 8009b26:	6843      	ldr	r3, [r0, #4]
 8009b28:	f043 0301 	orr.w	r3, r3, #1
 8009b2c:	6043      	str	r3, [r0, #4]
 8009b2e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009b32:	4628      	mov	r0, r5
 8009b34:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009b38:	f8cc 3008 	str.w	r3, [ip, #8]
 8009b3c:	f000 f88e 	bl	8009c5c <__malloc_unlock>
 8009b40:	4620      	mov	r0, r4
 8009b42:	b003      	add	sp, #12
 8009b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b48:	4664      	mov	r4, ip
 8009b4a:	e70f      	b.n	800996c <_malloc_r+0x190>
 8009b4c:	f858 0908 	ldr.w	r0, [r8], #-8
 8009b50:	4540      	cmp	r0, r8
 8009b52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009b56:	f43f af13 	beq.w	8009980 <_malloc_r+0x1a4>
 8009b5a:	e718      	b.n	800998e <_malloc_r+0x1b2>
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	0052      	lsls	r2, r2, #1
 8009b60:	4210      	tst	r0, r2
 8009b62:	d0fb      	beq.n	8009b5c <_malloc_r+0x380>
 8009b64:	e6fc      	b.n	8009960 <_malloc_r+0x184>
 8009b66:	4673      	mov	r3, lr
 8009b68:	e7fa      	b.n	8009b60 <_malloc_r+0x384>
 8009b6a:	6810      	ldr	r0, [r2, #0]
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	bf1b      	ittet	ne
 8009b70:	eba4 0b0b 	subne.w	fp, r4, fp
 8009b74:	eb0b 020e 	addne.w	r2, fp, lr
 8009b78:	6014      	streq	r4, [r2, #0]
 8009b7a:	601a      	strne	r2, [r3, #0]
 8009b7c:	f014 0b07 	ands.w	fp, r4, #7
 8009b80:	bf1a      	itte	ne
 8009b82:	f1cb 0008 	rsbne	r0, fp, #8
 8009b86:	1824      	addne	r4, r4, r0
 8009b88:	4658      	moveq	r0, fp
 8009b8a:	1862      	adds	r2, r4, r1
 8009b8c:	ea02 010c 	and.w	r1, r2, ip
 8009b90:	4480      	add	r8, r0
 8009b92:	eba8 0801 	sub.w	r8, r8, r1
 8009b96:	ea08 080c 	and.w	r8, r8, ip
 8009b9a:	4641      	mov	r1, r8
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	9201      	str	r2, [sp, #4]
 8009ba0:	f001 fb72 	bl	800b288 <_sbrk_r>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	9a01      	ldr	r2, [sp, #4]
 8009ba8:	4b28      	ldr	r3, [pc, #160]	; (8009c4c <_malloc_r+0x470>)
 8009baa:	d107      	bne.n	8009bbc <_malloc_r+0x3e0>
 8009bac:	f1bb 0f00 	cmp.w	fp, #0
 8009bb0:	d023      	beq.n	8009bfa <_malloc_r+0x41e>
 8009bb2:	f1ab 0008 	sub.w	r0, fp, #8
 8009bb6:	4410      	add	r0, r2
 8009bb8:	f04f 0800 	mov.w	r8, #0
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	60b4      	str	r4, [r6, #8]
 8009bc0:	1b00      	subs	r0, r0, r4
 8009bc2:	4440      	add	r0, r8
 8009bc4:	4442      	add	r2, r8
 8009bc6:	f040 0001 	orr.w	r0, r0, #1
 8009bca:	45b2      	cmp	sl, r6
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	6060      	str	r0, [r4, #4]
 8009bd0:	f43f af29 	beq.w	8009a26 <_malloc_r+0x24a>
 8009bd4:	f1b9 0f0f 	cmp.w	r9, #15
 8009bd8:	d812      	bhi.n	8009c00 <_malloc_r+0x424>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	6063      	str	r3, [r4, #4]
 8009bde:	68b3      	ldr	r3, [r6, #8]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f023 0303 	bic.w	r3, r3, #3
 8009be6:	42bb      	cmp	r3, r7
 8009be8:	eba3 0207 	sub.w	r2, r3, r7
 8009bec:	d301      	bcc.n	8009bf2 <_malloc_r+0x416>
 8009bee:	2a0f      	cmp	r2, #15
 8009bf0:	dc22      	bgt.n	8009c38 <_malloc_r+0x45c>
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f000 f832 	bl	8009c5c <__malloc_unlock>
 8009bf8:	e5fc      	b.n	80097f4 <_malloc_r+0x18>
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	46d8      	mov	r8, fp
 8009bfe:	e7dd      	b.n	8009bbc <_malloc_r+0x3e0>
 8009c00:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009c04:	f1a9 090c 	sub.w	r9, r9, #12
 8009c08:	f029 0907 	bic.w	r9, r9, #7
 8009c0c:	f002 0201 	and.w	r2, r2, #1
 8009c10:	ea42 0209 	orr.w	r2, r2, r9
 8009c14:	f8ca 2004 	str.w	r2, [sl, #4]
 8009c18:	2105      	movs	r1, #5
 8009c1a:	eb0a 0209 	add.w	r2, sl, r9
 8009c1e:	f1b9 0f0f 	cmp.w	r9, #15
 8009c22:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8009c26:	f67f aefe 	bls.w	8009a26 <_malloc_r+0x24a>
 8009c2a:	f10a 0108 	add.w	r1, sl, #8
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f7ff fd14 	bl	800965c <_free_r>
 8009c34:	4b05      	ldr	r3, [pc, #20]	; (8009c4c <_malloc_r+0x470>)
 8009c36:	e6f6      	b.n	8009a26 <_malloc_r+0x24a>
 8009c38:	68b4      	ldr	r4, [r6, #8]
 8009c3a:	f047 0301 	orr.w	r3, r7, #1
 8009c3e:	4427      	add	r7, r4
 8009c40:	f042 0201 	orr.w	r2, r2, #1
 8009c44:	6063      	str	r3, [r4, #4]
 8009c46:	60b7      	str	r7, [r6, #8]
 8009c48:	607a      	str	r2, [r7, #4]
 8009c4a:	e5f8      	b.n	800983e <_malloc_r+0x62>
 8009c4c:	200042c4 	.word	0x200042c4

08009c50 <__malloc_lock>:
 8009c50:	4801      	ldr	r0, [pc, #4]	; (8009c58 <__malloc_lock+0x8>)
 8009c52:	f7ff bc8f 	b.w	8009574 <__retarget_lock_acquire_recursive>
 8009c56:	bf00      	nop
 8009c58:	200042bd 	.word	0x200042bd

08009c5c <__malloc_unlock>:
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <__malloc_unlock+0x8>)
 8009c5e:	f7ff bc8a 	b.w	8009576 <__retarget_lock_release_recursive>
 8009c62:	bf00      	nop
 8009c64:	200042bd 	.word	0x200042bd

08009c68 <_svfprintf_r>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	ed2d 8b04 	vpush	{d8-d9}
 8009c70:	b0cf      	sub	sp, #316	; 0x13c
 8009c72:	4689      	mov	r9, r1
 8009c74:	9203      	str	r2, [sp, #12]
 8009c76:	461d      	mov	r5, r3
 8009c78:	4682      	mov	sl, r0
 8009c7a:	f001 fb01 	bl	800b280 <_localeconv_r>
 8009c7e:	6803      	ldr	r3, [r0, #0]
 8009c80:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7f6 faf4 	bl	8000270 <strlen>
 8009c88:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009c8c:	900e      	str	r0, [sp, #56]	; 0x38
 8009c8e:	0619      	lsls	r1, r3, #24
 8009c90:	d51a      	bpl.n	8009cc8 <_svfprintf_r+0x60>
 8009c92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c96:	b9bb      	cbnz	r3, 8009cc8 <_svfprintf_r+0x60>
 8009c98:	2140      	movs	r1, #64	; 0x40
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	f7ff fd9e 	bl	80097dc <_malloc_r>
 8009ca0:	f8c9 0000 	str.w	r0, [r9]
 8009ca4:	f8c9 0010 	str.w	r0, [r9, #16]
 8009ca8:	b958      	cbnz	r0, 8009cc2 <_svfprintf_r+0x5a>
 8009caa:	230c      	movs	r3, #12
 8009cac:	f8ca 3000 	str.w	r3, [sl]
 8009cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009cb8:	b04f      	add	sp, #316	; 0x13c
 8009cba:	ecbd 8b04 	vpop	{d8-d9}
 8009cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	f8c9 3014 	str.w	r3, [r9, #20]
 8009cc8:	ed9f 7b91 	vldr	d7, [pc, #580]	; 8009f10 <_svfprintf_r+0x2a8>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 8009cd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009cd6:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8009cda:	ac25      	add	r4, sp, #148	; 0x94
 8009cdc:	9422      	str	r4, [sp, #136]	; 0x88
 8009cde:	9305      	str	r3, [sp, #20]
 8009ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8009ce4:	9314      	str	r3, [sp, #80]	; 0x50
 8009ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	461e      	mov	r6, r3
 8009cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf0:	b10a      	cbz	r2, 8009cf6 <_svfprintf_r+0x8e>
 8009cf2:	2a25      	cmp	r2, #37	; 0x25
 8009cf4:	d1f9      	bne.n	8009cea <_svfprintf_r+0x82>
 8009cf6:	9b03      	ldr	r3, [sp, #12]
 8009cf8:	1af7      	subs	r7, r6, r3
 8009cfa:	d00d      	beq.n	8009d18 <_svfprintf_r+0xb0>
 8009cfc:	e9c4 3700 	strd	r3, r7, [r4]
 8009d00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009d02:	443b      	add	r3, r7
 8009d04:	9324      	str	r3, [sp, #144]	; 0x90
 8009d06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d08:	3301      	adds	r3, #1
 8009d0a:	2b07      	cmp	r3, #7
 8009d0c:	9323      	str	r3, [sp, #140]	; 0x8c
 8009d0e:	dc78      	bgt.n	8009e02 <_svfprintf_r+0x19a>
 8009d10:	3408      	adds	r4, #8
 8009d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d14:	443b      	add	r3, r7
 8009d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d18:	7833      	ldrb	r3, [r6, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f001 815a 	beq.w	800afd4 <_svfprintf_r+0x136c>
 8009d20:	2300      	movs	r3, #0
 8009d22:	3601      	adds	r6, #1
 8009d24:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009d28:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d2e:	469b      	mov	fp, r3
 8009d30:	270a      	movs	r7, #10
 8009d32:	212b      	movs	r1, #43	; 0x2b
 8009d34:	4633      	mov	r3, r6
 8009d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3a:	9207      	str	r2, [sp, #28]
 8009d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8009d3e:	9b07      	ldr	r3, [sp, #28]
 8009d40:	3b20      	subs	r3, #32
 8009d42:	2b5a      	cmp	r3, #90	; 0x5a
 8009d44:	f200 85c6 	bhi.w	800a8d4 <_svfprintf_r+0xc6c>
 8009d48:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009d4c:	05c4007e 	.word	0x05c4007e
 8009d50:	008605c4 	.word	0x008605c4
 8009d54:	05c405c4 	.word	0x05c405c4
 8009d58:	006505c4 	.word	0x006505c4
 8009d5c:	05c405c4 	.word	0x05c405c4
 8009d60:	00930089 	.word	0x00930089
 8009d64:	009005c4 	.word	0x009005c4
 8009d68:	05c40096 	.word	0x05c40096
 8009d6c:	00b200af 	.word	0x00b200af
 8009d70:	00b200b2 	.word	0x00b200b2
 8009d74:	00b200b2 	.word	0x00b200b2
 8009d78:	00b200b2 	.word	0x00b200b2
 8009d7c:	00b200b2 	.word	0x00b200b2
 8009d80:	05c405c4 	.word	0x05c405c4
 8009d84:	05c405c4 	.word	0x05c405c4
 8009d88:	05c405c4 	.word	0x05c405c4
 8009d8c:	012905c4 	.word	0x012905c4
 8009d90:	00e605c4 	.word	0x00e605c4
 8009d94:	012900f9 	.word	0x012900f9
 8009d98:	01290129 	.word	0x01290129
 8009d9c:	05c405c4 	.word	0x05c405c4
 8009da0:	05c405c4 	.word	0x05c405c4
 8009da4:	05c400c2 	.word	0x05c400c2
 8009da8:	049105c4 	.word	0x049105c4
 8009dac:	05c405c4 	.word	0x05c405c4
 8009db0:	04db05c4 	.word	0x04db05c4
 8009db4:	050105c4 	.word	0x050105c4
 8009db8:	05c405c4 	.word	0x05c405c4
 8009dbc:	05c40523 	.word	0x05c40523
 8009dc0:	05c405c4 	.word	0x05c405c4
 8009dc4:	05c405c4 	.word	0x05c405c4
 8009dc8:	05c405c4 	.word	0x05c405c4
 8009dcc:	012905c4 	.word	0x012905c4
 8009dd0:	00e605c4 	.word	0x00e605c4
 8009dd4:	012900fb 	.word	0x012900fb
 8009dd8:	01290129 	.word	0x01290129
 8009ddc:	00fb00c5 	.word	0x00fb00c5
 8009de0:	05c400d9 	.word	0x05c400d9
 8009de4:	05c400d2 	.word	0x05c400d2
 8009de8:	0493046c 	.word	0x0493046c
 8009dec:	00d904ca 	.word	0x00d904ca
 8009df0:	04db05c4 	.word	0x04db05c4
 8009df4:	0503007c 	.word	0x0503007c
 8009df8:	05c405c4 	.word	0x05c405c4
 8009dfc:	05c40542 	.word	0x05c40542
 8009e00:	007c      	.short	0x007c
 8009e02:	aa22      	add	r2, sp, #136	; 0x88
 8009e04:	4649      	mov	r1, r9
 8009e06:	4650      	mov	r0, sl
 8009e08:	f002 fc72 	bl	800c6f0 <__ssprint_r>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	f040 8137 	bne.w	800a080 <_svfprintf_r+0x418>
 8009e12:	ac25      	add	r4, sp, #148	; 0x94
 8009e14:	e77d      	b.n	8009d12 <_svfprintf_r+0xaa>
 8009e16:	4650      	mov	r0, sl
 8009e18:	f001 fa32 	bl	800b280 <_localeconv_r>
 8009e1c:	6843      	ldr	r3, [r0, #4]
 8009e1e:	9314      	str	r3, [sp, #80]	; 0x50
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7f6 fa25 	bl	8000270 <strlen>
 8009e26:	9011      	str	r0, [sp, #68]	; 0x44
 8009e28:	4650      	mov	r0, sl
 8009e2a:	f001 fa29 	bl	800b280 <_localeconv_r>
 8009e2e:	6883      	ldr	r3, [r0, #8]
 8009e30:	9309      	str	r3, [sp, #36]	; 0x24
 8009e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e34:	212b      	movs	r1, #43	; 0x2b
 8009e36:	b12b      	cbz	r3, 8009e44 <_svfprintf_r+0x1dc>
 8009e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3a:	b11b      	cbz	r3, 8009e44 <_svfprintf_r+0x1dc>
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b10b      	cbz	r3, 8009e44 <_svfprintf_r+0x1dc>
 8009e40:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8009e44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009e46:	e775      	b.n	8009d34 <_svfprintf_r+0xcc>
 8009e48:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1f9      	bne.n	8009e44 <_svfprintf_r+0x1dc>
 8009e50:	2320      	movs	r3, #32
 8009e52:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009e56:	e7f5      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009e58:	f04b 0b01 	orr.w	fp, fp, #1
 8009e5c:	e7f2      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e62:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	daed      	bge.n	8009e44 <_svfprintf_r+0x1dc>
 8009e68:	425b      	negs	r3, r3
 8009e6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e6c:	f04b 0b04 	orr.w	fp, fp, #4
 8009e70:	e7e8      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009e72:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8009e76:	e7e5      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e7e:	9207      	str	r2, [sp, #28]
 8009e80:	2a2a      	cmp	r2, #42	; 0x2a
 8009e82:	d10f      	bne.n	8009ea4 <_svfprintf_r+0x23c>
 8009e84:	f855 2b04 	ldr.w	r2, [r5], #4
 8009e88:	930a      	str	r3, [sp, #40]	; 0x28
 8009e8a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8009e8e:	e7d9      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009e90:	fb07 2808 	mla	r8, r7, r8, r2
 8009e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e98:	9207      	str	r2, [sp, #28]
 8009e9a:	9a07      	ldr	r2, [sp, #28]
 8009e9c:	3a30      	subs	r2, #48	; 0x30
 8009e9e:	2a09      	cmp	r2, #9
 8009ea0:	d9f6      	bls.n	8009e90 <_svfprintf_r+0x228>
 8009ea2:	e74b      	b.n	8009d3c <_svfprintf_r+0xd4>
 8009ea4:	f04f 0800 	mov.w	r8, #0
 8009ea8:	e7f7      	b.n	8009e9a <_svfprintf_r+0x232>
 8009eaa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8009eae:	e7c9      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb4:	920f      	str	r2, [sp, #60]	; 0x3c
 8009eb6:	9a07      	ldr	r2, [sp, #28]
 8009eb8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009eba:	3a30      	subs	r2, #48	; 0x30
 8009ebc:	fb07 2200 	mla	r2, r7, r0, r2
 8009ec0:	920f      	str	r2, [sp, #60]	; 0x3c
 8009ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ec6:	9207      	str	r2, [sp, #28]
 8009ec8:	3a30      	subs	r2, #48	; 0x30
 8009eca:	2a09      	cmp	r2, #9
 8009ecc:	d9f3      	bls.n	8009eb6 <_svfprintf_r+0x24e>
 8009ece:	e735      	b.n	8009d3c <_svfprintf_r+0xd4>
 8009ed0:	f04b 0b08 	orr.w	fp, fp, #8
 8009ed4:	e7b6      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	2b68      	cmp	r3, #104	; 0x68
 8009edc:	bf01      	itttt	eq
 8009ede:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8009ee0:	3301      	addeq	r3, #1
 8009ee2:	930a      	streq	r3, [sp, #40]	; 0x28
 8009ee4:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8009ee8:	bf18      	it	ne
 8009eea:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8009eee:	e7a9      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	2b6c      	cmp	r3, #108	; 0x6c
 8009ef6:	d105      	bne.n	8009f04 <_svfprintf_r+0x29c>
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efa:	3301      	adds	r3, #1
 8009efc:	930a      	str	r3, [sp, #40]	; 0x28
 8009efe:	f04b 0b20 	orr.w	fp, fp, #32
 8009f02:	e79f      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009f04:	f04b 0b10 	orr.w	fp, fp, #16
 8009f08:	e79c      	b.n	8009e44 <_svfprintf_r+0x1dc>
 8009f0a:	bf00      	nop
 8009f0c:	f3af 8000 	nop.w
	...
 8009f18:	462a      	mov	r2, r5
 8009f1a:	f852 3b04 	ldr.w	r3, [r2], #4
 8009f1e:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009f22:	2300      	movs	r3, #0
 8009f24:	9206      	str	r2, [sp, #24]
 8009f26:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	461f      	mov	r7, r3
 8009f2e:	461e      	mov	r6, r3
 8009f30:	9308      	str	r3, [sp, #32]
 8009f32:	461d      	mov	r5, r3
 8009f34:	ab35      	add	r3, sp, #212	; 0xd4
 8009f36:	f04f 0801 	mov.w	r8, #1
 8009f3a:	9303      	str	r3, [sp, #12]
 8009f3c:	e1b9      	b.n	800a2b2 <_svfprintf_r+0x64a>
 8009f3e:	f04b 0b10 	orr.w	fp, fp, #16
 8009f42:	f01b 0f20 	tst.w	fp, #32
 8009f46:	d012      	beq.n	8009f6e <_svfprintf_r+0x306>
 8009f48:	3507      	adds	r5, #7
 8009f4a:	f025 0307 	bic.w	r3, r5, #7
 8009f4e:	461a      	mov	r2, r3
 8009f50:	685e      	ldr	r6, [r3, #4]
 8009f52:	f852 5b08 	ldr.w	r5, [r2], #8
 8009f56:	9206      	str	r2, [sp, #24]
 8009f58:	2e00      	cmp	r6, #0
 8009f5a:	da06      	bge.n	8009f6a <_svfprintf_r+0x302>
 8009f5c:	426d      	negs	r5, r5
 8009f5e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009f62:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8009f66:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e392      	b.n	800a694 <_svfprintf_r+0xa2c>
 8009f6e:	462b      	mov	r3, r5
 8009f70:	f01b 0f10 	tst.w	fp, #16
 8009f74:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f78:	9306      	str	r3, [sp, #24]
 8009f7a:	d002      	beq.n	8009f82 <_svfprintf_r+0x31a>
 8009f7c:	4635      	mov	r5, r6
 8009f7e:	17f6      	asrs	r6, r6, #31
 8009f80:	e7ea      	b.n	8009f58 <_svfprintf_r+0x2f0>
 8009f82:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8009f86:	d003      	beq.n	8009f90 <_svfprintf_r+0x328>
 8009f88:	b235      	sxth	r5, r6
 8009f8a:	f346 36c0 	sbfx	r6, r6, #15, #1
 8009f8e:	e7e3      	b.n	8009f58 <_svfprintf_r+0x2f0>
 8009f90:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8009f94:	d0f2      	beq.n	8009f7c <_svfprintf_r+0x314>
 8009f96:	b275      	sxtb	r5, r6
 8009f98:	f346 16c0 	sbfx	r6, r6, #7, #1
 8009f9c:	e7dc      	b.n	8009f58 <_svfprintf_r+0x2f0>
 8009f9e:	3507      	adds	r5, #7
 8009fa0:	f025 0307 	bic.w	r3, r5, #7
 8009fa4:	ecb3 7b02 	vldmia	r3!, {d7}
 8009fa8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009fac:	9306      	str	r3, [sp, #24]
 8009fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fb0:	ee09 3a10 	vmov	s18, r3
 8009fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fba:	ee09 3a90 	vmov	s19, r3
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fc2:	4b34      	ldr	r3, [pc, #208]	; (800a094 <_svfprintf_r+0x42c>)
 8009fc4:	ec51 0b19 	vmov	r0, r1, d9
 8009fc8:	f7f6 fdb0 	bl	8000b2c <__aeabi_dcmpun>
 8009fcc:	bb18      	cbnz	r0, 800a016 <_svfprintf_r+0x3ae>
 8009fce:	4b31      	ldr	r3, [pc, #196]	; (800a094 <_svfprintf_r+0x42c>)
 8009fd0:	ec51 0b19 	vmov	r0, r1, d9
 8009fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fd8:	f7f6 fd8a 	bl	8000af0 <__aeabi_dcmple>
 8009fdc:	b9d8      	cbnz	r0, 800a016 <_svfprintf_r+0x3ae>
 8009fde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f7f6 fd79 	bl	8000adc <__aeabi_dcmplt>
 8009fea:	b110      	cbz	r0, 8009ff2 <_svfprintf_r+0x38a>
 8009fec:	232d      	movs	r3, #45	; 0x2d
 8009fee:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009ff2:	4a29      	ldr	r2, [pc, #164]	; (800a098 <_svfprintf_r+0x430>)
 8009ff4:	4b29      	ldr	r3, [pc, #164]	; (800a09c <_svfprintf_r+0x434>)
 8009ff6:	9907      	ldr	r1, [sp, #28]
 8009ff8:	2947      	cmp	r1, #71	; 0x47
 8009ffa:	bfc8      	it	gt
 8009ffc:	461a      	movgt	r2, r3
 8009ffe:	2300      	movs	r3, #0
 800a000:	9203      	str	r2, [sp, #12]
 800a002:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	f04f 0803 	mov.w	r8, #3
 800a00c:	461f      	mov	r7, r3
 800a00e:	461e      	mov	r6, r3
 800a010:	9308      	str	r3, [sp, #32]
 800a012:	461d      	mov	r5, r3
 800a014:	e14d      	b.n	800a2b2 <_svfprintf_r+0x64a>
 800a016:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a01a:	4610      	mov	r0, r2
 800a01c:	4619      	mov	r1, r3
 800a01e:	f7f6 fd85 	bl	8000b2c <__aeabi_dcmpun>
 800a022:	b140      	cbz	r0, 800a036 <_svfprintf_r+0x3ce>
 800a024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a026:	4a1e      	ldr	r2, [pc, #120]	; (800a0a0 <_svfprintf_r+0x438>)
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfbc      	itt	lt
 800a02c:	232d      	movlt	r3, #45	; 0x2d
 800a02e:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800a032:	4b1c      	ldr	r3, [pc, #112]	; (800a0a4 <_svfprintf_r+0x43c>)
 800a034:	e7df      	b.n	8009ff6 <_svfprintf_r+0x38e>
 800a036:	9b07      	ldr	r3, [sp, #28]
 800a038:	f023 0320 	bic.w	r3, r3, #32
 800a03c:	2b41      	cmp	r3, #65	; 0x41
 800a03e:	9308      	str	r3, [sp, #32]
 800a040:	d132      	bne.n	800a0a8 <_svfprintf_r+0x440>
 800a042:	2330      	movs	r3, #48	; 0x30
 800a044:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800a048:	9b07      	ldr	r3, [sp, #28]
 800a04a:	2b61      	cmp	r3, #97	; 0x61
 800a04c:	bf0c      	ite	eq
 800a04e:	2378      	moveq	r3, #120	; 0x78
 800a050:	2358      	movne	r3, #88	; 0x58
 800a052:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800a056:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800a05a:	f04b 0b02 	orr.w	fp, fp, #2
 800a05e:	f340 8204 	ble.w	800a46a <_svfprintf_r+0x802>
 800a062:	f108 0101 	add.w	r1, r8, #1
 800a066:	4650      	mov	r0, sl
 800a068:	f7ff fbb8 	bl	80097dc <_malloc_r>
 800a06c:	9003      	str	r0, [sp, #12]
 800a06e:	2800      	cmp	r0, #0
 800a070:	f040 81ff 	bne.w	800a472 <_svfprintf_r+0x80a>
 800a074:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a07c:	f8a9 300c 	strh.w	r3, [r9, #12]
 800a080:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a084:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a08a:	bf18      	it	ne
 800a08c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800a090:	e610      	b.n	8009cb4 <_svfprintf_r+0x4c>
 800a092:	bf00      	nop
 800a094:	7fefffff 	.word	0x7fefffff
 800a098:	0800e42c 	.word	0x0800e42c
 800a09c:	0800e430 	.word	0x0800e430
 800a0a0:	0800e434 	.word	0x0800e434
 800a0a4:	0800e438 	.word	0x0800e438
 800a0a8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a0ac:	f000 81e4 	beq.w	800a478 <_svfprintf_r+0x810>
 800a0b0:	9b08      	ldr	r3, [sp, #32]
 800a0b2:	2b47      	cmp	r3, #71	; 0x47
 800a0b4:	f040 81e4 	bne.w	800a480 <_svfprintf_r+0x818>
 800a0b8:	f1b8 0f00 	cmp.w	r8, #0
 800a0bc:	f040 81e0 	bne.w	800a480 <_svfprintf_r+0x818>
 800a0c0:	f8cd 8010 	str.w	r8, [sp, #16]
 800a0c4:	f04f 0801 	mov.w	r8, #1
 800a0c8:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800a0cc:	9310      	str	r3, [sp, #64]	; 0x40
 800a0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f280 81d7 	bge.w	800a484 <_svfprintf_r+0x81c>
 800a0d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0d8:	ee08 3a10 	vmov	s16, r3
 800a0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a0e2:	ee08 3a90 	vmov	s17, r3
 800a0e6:	232d      	movs	r3, #45	; 0x2d
 800a0e8:	9318      	str	r3, [sp, #96]	; 0x60
 800a0ea:	9b08      	ldr	r3, [sp, #32]
 800a0ec:	2b41      	cmp	r3, #65	; 0x41
 800a0ee:	f040 81e7 	bne.w	800a4c0 <_svfprintf_r+0x858>
 800a0f2:	eeb0 0a48 	vmov.f32	s0, s16
 800a0f6:	eef0 0a68 	vmov.f32	s1, s17
 800a0fa:	a81c      	add	r0, sp, #112	; 0x70
 800a0fc:	f001 f8f4 	bl	800b2e8 <frexp>
 800a100:	2200      	movs	r2, #0
 800a102:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a106:	ec51 0b10 	vmov	r0, r1, d0
 800a10a:	f7f6 fa75 	bl	80005f8 <__aeabi_dmul>
 800a10e:	2200      	movs	r2, #0
 800a110:	2300      	movs	r3, #0
 800a112:	4606      	mov	r6, r0
 800a114:	460f      	mov	r7, r1
 800a116:	f7f6 fcd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a11a:	b108      	cbz	r0, 800a120 <_svfprintf_r+0x4b8>
 800a11c:	2301      	movs	r3, #1
 800a11e:	931c      	str	r3, [sp, #112]	; 0x70
 800a120:	4bac      	ldr	r3, [pc, #688]	; (800a3d4 <_svfprintf_r+0x76c>)
 800a122:	4aad      	ldr	r2, [pc, #692]	; (800a3d8 <_svfprintf_r+0x770>)
 800a124:	9907      	ldr	r1, [sp, #28]
 800a126:	9d03      	ldr	r5, [sp, #12]
 800a128:	2961      	cmp	r1, #97	; 0x61
 800a12a:	bf18      	it	ne
 800a12c:	461a      	movne	r2, r3
 800a12e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800a132:	9217      	str	r2, [sp, #92]	; 0x5c
 800a134:	9305      	str	r3, [sp, #20]
 800a136:	4ba9      	ldr	r3, [pc, #676]	; (800a3dc <_svfprintf_r+0x774>)
 800a138:	2200      	movs	r2, #0
 800a13a:	4630      	mov	r0, r6
 800a13c:	4639      	mov	r1, r7
 800a13e:	f7f6 fa5b 	bl	80005f8 <__aeabi_dmul>
 800a142:	460f      	mov	r7, r1
 800a144:	4606      	mov	r6, r0
 800a146:	f7f6 fd07 	bl	8000b58 <__aeabi_d2iz>
 800a14a:	9019      	str	r0, [sp, #100]	; 0x64
 800a14c:	f7f6 f9ea 	bl	8000524 <__aeabi_i2d>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4630      	mov	r0, r6
 800a156:	4639      	mov	r1, r7
 800a158:	f7f6 f896 	bl	8000288 <__aeabi_dsub>
 800a15c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a15e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a160:	5c9b      	ldrb	r3, [r3, r2]
 800a162:	f805 3b01 	strb.w	r3, [r5], #1
 800a166:	9b05      	ldr	r3, [sp, #20]
 800a168:	9312      	str	r3, [sp, #72]	; 0x48
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	4606      	mov	r6, r0
 800a16e:	460f      	mov	r7, r1
 800a170:	d007      	beq.n	800a182 <_svfprintf_r+0x51a>
 800a172:	3b01      	subs	r3, #1
 800a174:	9305      	str	r3, [sp, #20]
 800a176:	2200      	movs	r2, #0
 800a178:	2300      	movs	r3, #0
 800a17a:	f7f6 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d0d9      	beq.n	800a136 <_svfprintf_r+0x4ce>
 800a182:	4b97      	ldr	r3, [pc, #604]	; (800a3e0 <_svfprintf_r+0x778>)
 800a184:	2200      	movs	r2, #0
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	f7f6 fcc5 	bl	8000b18 <__aeabi_dcmpgt>
 800a18e:	b960      	cbnz	r0, 800a1aa <_svfprintf_r+0x542>
 800a190:	4b93      	ldr	r3, [pc, #588]	; (800a3e0 <_svfprintf_r+0x778>)
 800a192:	2200      	movs	r2, #0
 800a194:	4630      	mov	r0, r6
 800a196:	4639      	mov	r1, r7
 800a198:	f7f6 fc96 	bl	8000ac8 <__aeabi_dcmpeq>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	f000 818a 	beq.w	800a4b6 <_svfprintf_r+0x84e>
 800a1a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1a4:	07de      	lsls	r6, r3, #31
 800a1a6:	f140 8186 	bpl.w	800a4b6 <_svfprintf_r+0x84e>
 800a1aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1ac:	9520      	str	r5, [sp, #128]	; 0x80
 800a1ae:	7bd9      	ldrb	r1, [r3, #15]
 800a1b0:	2030      	movs	r0, #48	; 0x30
 800a1b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a1b4:	1e53      	subs	r3, r2, #1
 800a1b6:	9320      	str	r3, [sp, #128]	; 0x80
 800a1b8:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800a1bc:	428b      	cmp	r3, r1
 800a1be:	f000 8169 	beq.w	800a494 <_svfprintf_r+0x82c>
 800a1c2:	2b39      	cmp	r3, #57	; 0x39
 800a1c4:	bf0b      	itete	eq
 800a1c6:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800a1c8:	3301      	addne	r3, #1
 800a1ca:	7a9b      	ldrbeq	r3, [r3, #10]
 800a1cc:	b2db      	uxtbne	r3, r3
 800a1ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a1d2:	9b03      	ldr	r3, [sp, #12]
 800a1d4:	1aeb      	subs	r3, r5, r3
 800a1d6:	9305      	str	r3, [sp, #20]
 800a1d8:	9b08      	ldr	r3, [sp, #32]
 800a1da:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800a1dc:	2b47      	cmp	r3, #71	; 0x47
 800a1de:	f040 81b9 	bne.w	800a554 <_svfprintf_r+0x8ec>
 800a1e2:	1ce8      	adds	r0, r5, #3
 800a1e4:	db02      	blt.n	800a1ec <_svfprintf_r+0x584>
 800a1e6:	45a8      	cmp	r8, r5
 800a1e8:	f280 81d7 	bge.w	800a59a <_svfprintf_r+0x932>
 800a1ec:	9b07      	ldr	r3, [sp, #28]
 800a1ee:	3b02      	subs	r3, #2
 800a1f0:	9307      	str	r3, [sp, #28]
 800a1f2:	9907      	ldr	r1, [sp, #28]
 800a1f4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800a1f8:	f021 0120 	bic.w	r1, r1, #32
 800a1fc:	2941      	cmp	r1, #65	; 0x41
 800a1fe:	bf08      	it	eq
 800a200:	320f      	addeq	r2, #15
 800a202:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800a206:	bf06      	itte	eq
 800a208:	b2d2      	uxtbeq	r2, r2
 800a20a:	2101      	moveq	r1, #1
 800a20c:	2100      	movne	r1, #0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	931c      	str	r3, [sp, #112]	; 0x70
 800a212:	bfb8      	it	lt
 800a214:	f1c5 0301 	rsblt	r3, r5, #1
 800a218:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800a21c:	bfb4      	ite	lt
 800a21e:	222d      	movlt	r2, #45	; 0x2d
 800a220:	222b      	movge	r2, #43	; 0x2b
 800a222:	2b09      	cmp	r3, #9
 800a224:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800a228:	f340 81aa 	ble.w	800a580 <_svfprintf_r+0x918>
 800a22c:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800a230:	260a      	movs	r6, #10
 800a232:	4602      	mov	r2, r0
 800a234:	fb93 f5f6 	sdiv	r5, r3, r6
 800a238:	fb06 3115 	mls	r1, r6, r5, r3
 800a23c:	3130      	adds	r1, #48	; 0x30
 800a23e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a242:	4619      	mov	r1, r3
 800a244:	2963      	cmp	r1, #99	; 0x63
 800a246:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800a24a:	462b      	mov	r3, r5
 800a24c:	dcf1      	bgt.n	800a232 <_svfprintf_r+0x5ca>
 800a24e:	3330      	adds	r3, #48	; 0x30
 800a250:	1e91      	subs	r1, r2, #2
 800a252:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a256:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 800a25a:	460b      	mov	r3, r1
 800a25c:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800a260:	4283      	cmp	r3, r0
 800a262:	f0c0 8188 	bcc.w	800a576 <_svfprintf_r+0x90e>
 800a266:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 800a26a:	1a9b      	subs	r3, r3, r2
 800a26c:	4281      	cmp	r1, r0
 800a26e:	bf88      	it	hi
 800a270:	2300      	movhi	r3, #0
 800a272:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800a276:	441a      	add	r2, r3
 800a278:	ab1e      	add	r3, sp, #120	; 0x78
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	9a05      	ldr	r2, [sp, #20]
 800a27e:	9315      	str	r3, [sp, #84]	; 0x54
 800a280:	2a01      	cmp	r2, #1
 800a282:	eb03 0802 	add.w	r8, r3, r2
 800a286:	dc02      	bgt.n	800a28e <_svfprintf_r+0x626>
 800a288:	f01b 0f01 	tst.w	fp, #1
 800a28c:	d001      	beq.n	800a292 <_svfprintf_r+0x62a>
 800a28e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a290:	4498      	add	r8, r3
 800a292:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800a296:	2600      	movs	r6, #0
 800a298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a29c:	9310      	str	r3, [sp, #64]	; 0x40
 800a29e:	9608      	str	r6, [sp, #32]
 800a2a0:	4635      	mov	r5, r6
 800a2a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a2a4:	b113      	cbz	r3, 800a2ac <_svfprintf_r+0x644>
 800a2a6:	232d      	movs	r3, #45	; 0x2d
 800a2a8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a2ac:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800a2b0:	2700      	movs	r7, #0
 800a2b2:	4547      	cmp	r7, r8
 800a2b4:	463b      	mov	r3, r7
 800a2b6:	bfb8      	it	lt
 800a2b8:	4643      	movlt	r3, r8
 800a2ba:	9310      	str	r3, [sp, #64]	; 0x40
 800a2bc:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800a2c0:	b113      	cbz	r3, 800a2c8 <_svfprintf_r+0x660>
 800a2c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	9310      	str	r3, [sp, #64]	; 0x40
 800a2c8:	f01b 0302 	ands.w	r3, fp, #2
 800a2cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800a2ce:	bf1e      	ittt	ne
 800a2d0:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800a2d2:	3302      	addne	r3, #2
 800a2d4:	9310      	strne	r3, [sp, #64]	; 0x40
 800a2d6:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800a2da:	9318      	str	r3, [sp, #96]	; 0x60
 800a2dc:	d122      	bne.n	800a324 <_svfprintf_r+0x6bc>
 800a2de:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800a2e2:	1a9b      	subs	r3, r3, r2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	9312      	str	r3, [sp, #72]	; 0x48
 800a2e8:	dd1c      	ble.n	800a324 <_svfprintf_r+0x6bc>
 800a2ea:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a2ec:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800a2f0:	2810      	cmp	r0, #16
 800a2f2:	483c      	ldr	r0, [pc, #240]	; (800a3e4 <_svfprintf_r+0x77c>)
 800a2f4:	6020      	str	r0, [r4, #0]
 800a2f6:	f102 0201 	add.w	r2, r2, #1
 800a2fa:	f104 0108 	add.w	r1, r4, #8
 800a2fe:	f300 82f7 	bgt.w	800a8f0 <_svfprintf_r+0xc88>
 800a302:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a304:	6060      	str	r0, [r4, #4]
 800a306:	4403      	add	r3, r0
 800a308:	2a07      	cmp	r2, #7
 800a30a:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a30e:	f340 8304 	ble.w	800a91a <_svfprintf_r+0xcb2>
 800a312:	aa22      	add	r2, sp, #136	; 0x88
 800a314:	4649      	mov	r1, r9
 800a316:	4650      	mov	r0, sl
 800a318:	f002 f9ea 	bl	800c6f0 <__ssprint_r>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	f040 8637 	bne.w	800af90 <_svfprintf_r+0x1328>
 800a322:	ac25      	add	r4, sp, #148	; 0x94
 800a324:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800a328:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a32a:	b16a      	cbz	r2, 800a348 <_svfprintf_r+0x6e0>
 800a32c:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800a330:	6022      	str	r2, [r4, #0]
 800a332:	2201      	movs	r2, #1
 800a334:	4413      	add	r3, r2
 800a336:	9324      	str	r3, [sp, #144]	; 0x90
 800a338:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a33a:	6062      	str	r2, [r4, #4]
 800a33c:	4413      	add	r3, r2
 800a33e:	2b07      	cmp	r3, #7
 800a340:	9323      	str	r3, [sp, #140]	; 0x8c
 800a342:	f300 82ec 	bgt.w	800a91e <_svfprintf_r+0xcb6>
 800a346:	3408      	adds	r4, #8
 800a348:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a34a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a34c:	b162      	cbz	r2, 800a368 <_svfprintf_r+0x700>
 800a34e:	aa1b      	add	r2, sp, #108	; 0x6c
 800a350:	6022      	str	r2, [r4, #0]
 800a352:	2202      	movs	r2, #2
 800a354:	4413      	add	r3, r2
 800a356:	9324      	str	r3, [sp, #144]	; 0x90
 800a358:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a35a:	6062      	str	r2, [r4, #4]
 800a35c:	3301      	adds	r3, #1
 800a35e:	2b07      	cmp	r3, #7
 800a360:	9323      	str	r3, [sp, #140]	; 0x8c
 800a362:	f300 82e6 	bgt.w	800a932 <_svfprintf_r+0xcca>
 800a366:	3408      	adds	r4, #8
 800a368:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a36a:	2b80      	cmp	r3, #128	; 0x80
 800a36c:	d122      	bne.n	800a3b4 <_svfprintf_r+0x74c>
 800a36e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800a372:	1a9b      	subs	r3, r3, r2
 800a374:	2b00      	cmp	r3, #0
 800a376:	9312      	str	r3, [sp, #72]	; 0x48
 800a378:	dd1c      	ble.n	800a3b4 <_svfprintf_r+0x74c>
 800a37a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a37c:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800a380:	2810      	cmp	r0, #16
 800a382:	4819      	ldr	r0, [pc, #100]	; (800a3e8 <_svfprintf_r+0x780>)
 800a384:	6020      	str	r0, [r4, #0]
 800a386:	f102 0201 	add.w	r2, r2, #1
 800a38a:	f104 0108 	add.w	r1, r4, #8
 800a38e:	f300 82da 	bgt.w	800a946 <_svfprintf_r+0xcde>
 800a392:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a394:	6060      	str	r0, [r4, #4]
 800a396:	4403      	add	r3, r0
 800a398:	2a07      	cmp	r2, #7
 800a39a:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a39e:	f340 82e7 	ble.w	800a970 <_svfprintf_r+0xd08>
 800a3a2:	aa22      	add	r2, sp, #136	; 0x88
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	f002 f9a2 	bl	800c6f0 <__ssprint_r>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f040 85ef 	bne.w	800af90 <_svfprintf_r+0x1328>
 800a3b2:	ac25      	add	r4, sp, #148	; 0x94
 800a3b4:	eba7 0708 	sub.w	r7, r7, r8
 800a3b8:	2f00      	cmp	r7, #0
 800a3ba:	dd27      	ble.n	800a40c <_svfprintf_r+0x7a4>
 800a3bc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a3c0:	4809      	ldr	r0, [pc, #36]	; (800a3e8 <_svfprintf_r+0x780>)
 800a3c2:	6020      	str	r0, [r4, #0]
 800a3c4:	2f10      	cmp	r7, #16
 800a3c6:	f103 0301 	add.w	r3, r3, #1
 800a3ca:	f104 0108 	add.w	r1, r4, #8
 800a3ce:	f300 82d1 	bgt.w	800a974 <_svfprintf_r+0xd0c>
 800a3d2:	e00b      	b.n	800a3ec <_svfprintf_r+0x784>
 800a3d4:	0800e44d 	.word	0x0800e44d
 800a3d8:	0800e43c 	.word	0x0800e43c
 800a3dc:	40300000 	.word	0x40300000
 800a3e0:	3fe00000 	.word	0x3fe00000
 800a3e4:	0800e460 	.word	0x0800e460
 800a3e8:	0800e470 	.word	0x0800e470
 800a3ec:	6067      	str	r7, [r4, #4]
 800a3ee:	2b07      	cmp	r3, #7
 800a3f0:	4417      	add	r7, r2
 800a3f2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800a3f6:	f340 82d0 	ble.w	800a99a <_svfprintf_r+0xd32>
 800a3fa:	aa22      	add	r2, sp, #136	; 0x88
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	4650      	mov	r0, sl
 800a400:	f002 f976 	bl	800c6f0 <__ssprint_r>
 800a404:	2800      	cmp	r0, #0
 800a406:	f040 85c3 	bne.w	800af90 <_svfprintf_r+0x1328>
 800a40a:	ac25      	add	r4, sp, #148	; 0x94
 800a40c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a410:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800a412:	f040 82c9 	bne.w	800a9a8 <_svfprintf_r+0xd40>
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	e9c4 3800 	strd	r3, r8, [r4]
 800a41c:	4447      	add	r7, r8
 800a41e:	9724      	str	r7, [sp, #144]	; 0x90
 800a420:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a422:	3301      	adds	r3, #1
 800a424:	2b07      	cmp	r3, #7
 800a426:	9323      	str	r3, [sp, #140]	; 0x8c
 800a428:	f300 8303 	bgt.w	800aa32 <_svfprintf_r+0xdca>
 800a42c:	3408      	adds	r4, #8
 800a42e:	f01b 0f04 	tst.w	fp, #4
 800a432:	f040 858f 	bne.w	800af54 <_svfprintf_r+0x12ec>
 800a436:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800a43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a43c:	428a      	cmp	r2, r1
 800a43e:	bfac      	ite	ge
 800a440:	189b      	addge	r3, r3, r2
 800a442:	185b      	addlt	r3, r3, r1
 800a444:	930b      	str	r3, [sp, #44]	; 0x2c
 800a446:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a448:	b13b      	cbz	r3, 800a45a <_svfprintf_r+0x7f2>
 800a44a:	aa22      	add	r2, sp, #136	; 0x88
 800a44c:	4649      	mov	r1, r9
 800a44e:	4650      	mov	r0, sl
 800a450:	f002 f94e 	bl	800c6f0 <__ssprint_r>
 800a454:	2800      	cmp	r0, #0
 800a456:	f040 859b 	bne.w	800af90 <_svfprintf_r+0x1328>
 800a45a:	2300      	movs	r3, #0
 800a45c:	9323      	str	r3, [sp, #140]	; 0x8c
 800a45e:	9b04      	ldr	r3, [sp, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	f040 85b1 	bne.w	800afc8 <_svfprintf_r+0x1360>
 800a466:	ac25      	add	r4, sp, #148	; 0x94
 800a468:	e0e7      	b.n	800a63a <_svfprintf_r+0x9d2>
 800a46a:	ab35      	add	r3, sp, #212	; 0xd4
 800a46c:	9004      	str	r0, [sp, #16]
 800a46e:	9303      	str	r3, [sp, #12]
 800a470:	e62a      	b.n	800a0c8 <_svfprintf_r+0x460>
 800a472:	9b03      	ldr	r3, [sp, #12]
 800a474:	9304      	str	r3, [sp, #16]
 800a476:	e627      	b.n	800a0c8 <_svfprintf_r+0x460>
 800a478:	9004      	str	r0, [sp, #16]
 800a47a:	f04f 0806 	mov.w	r8, #6
 800a47e:	e623      	b.n	800a0c8 <_svfprintf_r+0x460>
 800a480:	9004      	str	r0, [sp, #16]
 800a482:	e621      	b.n	800a0c8 <_svfprintf_r+0x460>
 800a484:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800a488:	2300      	movs	r3, #0
 800a48a:	eeb0 8a47 	vmov.f32	s16, s14
 800a48e:	eef0 8a67 	vmov.f32	s17, s15
 800a492:	e629      	b.n	800a0e8 <_svfprintf_r+0x480>
 800a494:	f802 0c01 	strb.w	r0, [r2, #-1]
 800a498:	e68b      	b.n	800a1b2 <_svfprintf_r+0x54a>
 800a49a:	f803 0b01 	strb.w	r0, [r3], #1
 800a49e:	1aca      	subs	r2, r1, r3
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	dafa      	bge.n	800a49a <_svfprintf_r+0x832>
 800a4a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4a8:	3201      	adds	r2, #1
 800a4aa:	f103 0301 	add.w	r3, r3, #1
 800a4ae:	bfb8      	it	lt
 800a4b0:	2300      	movlt	r3, #0
 800a4b2:	441d      	add	r5, r3
 800a4b4:	e68d      	b.n	800a1d2 <_svfprintf_r+0x56a>
 800a4b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4b8:	462b      	mov	r3, r5
 800a4ba:	18a9      	adds	r1, r5, r2
 800a4bc:	2030      	movs	r0, #48	; 0x30
 800a4be:	e7ee      	b.n	800a49e <_svfprintf_r+0x836>
 800a4c0:	9b08      	ldr	r3, [sp, #32]
 800a4c2:	2b46      	cmp	r3, #70	; 0x46
 800a4c4:	d005      	beq.n	800a4d2 <_svfprintf_r+0x86a>
 800a4c6:	2b45      	cmp	r3, #69	; 0x45
 800a4c8:	d11d      	bne.n	800a506 <_svfprintf_r+0x89e>
 800a4ca:	f108 0501 	add.w	r5, r8, #1
 800a4ce:	2102      	movs	r1, #2
 800a4d0:	e001      	b.n	800a4d6 <_svfprintf_r+0x86e>
 800a4d2:	4645      	mov	r5, r8
 800a4d4:	2103      	movs	r1, #3
 800a4d6:	ab20      	add	r3, sp, #128	; 0x80
 800a4d8:	9301      	str	r3, [sp, #4]
 800a4da:	ab1d      	add	r3, sp, #116	; 0x74
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	462a      	mov	r2, r5
 800a4e0:	ab1c      	add	r3, sp, #112	; 0x70
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a4e8:	eef0 0a68 	vmov.f32	s1, s17
 800a4ec:	f000 fffc 	bl	800b4e8 <_dtoa_r>
 800a4f0:	9b08      	ldr	r3, [sp, #32]
 800a4f2:	9003      	str	r0, [sp, #12]
 800a4f4:	2b47      	cmp	r3, #71	; 0x47
 800a4f6:	d108      	bne.n	800a50a <_svfprintf_r+0x8a2>
 800a4f8:	f01b 0f01 	tst.w	fp, #1
 800a4fc:	d105      	bne.n	800a50a <_svfprintf_r+0x8a2>
 800a4fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a500:	9a03      	ldr	r2, [sp, #12]
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	e667      	b.n	800a1d6 <_svfprintf_r+0x56e>
 800a506:	4645      	mov	r5, r8
 800a508:	e7e1      	b.n	800a4ce <_svfprintf_r+0x866>
 800a50a:	9b03      	ldr	r3, [sp, #12]
 800a50c:	195e      	adds	r6, r3, r5
 800a50e:	9b08      	ldr	r3, [sp, #32]
 800a510:	2b46      	cmp	r3, #70	; 0x46
 800a512:	d10f      	bne.n	800a534 <_svfprintf_r+0x8cc>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b30      	cmp	r3, #48	; 0x30
 800a51a:	d109      	bne.n	800a530 <_svfprintf_r+0x8c8>
 800a51c:	ec51 0b18 	vmov	r0, r1, d8
 800a520:	2200      	movs	r2, #0
 800a522:	2300      	movs	r3, #0
 800a524:	f7f6 fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a528:	b910      	cbnz	r0, 800a530 <_svfprintf_r+0x8c8>
 800a52a:	f1c5 0501 	rsb	r5, r5, #1
 800a52e:	951c      	str	r5, [sp, #112]	; 0x70
 800a530:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a532:	441e      	add	r6, r3
 800a534:	ec51 0b18 	vmov	r0, r1, d8
 800a538:	2200      	movs	r2, #0
 800a53a:	2300      	movs	r3, #0
 800a53c:	f7f6 fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a540:	b100      	cbz	r0, 800a544 <_svfprintf_r+0x8dc>
 800a542:	9620      	str	r6, [sp, #128]	; 0x80
 800a544:	2230      	movs	r2, #48	; 0x30
 800a546:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a548:	429e      	cmp	r6, r3
 800a54a:	d9d8      	bls.n	800a4fe <_svfprintf_r+0x896>
 800a54c:	1c59      	adds	r1, r3, #1
 800a54e:	9120      	str	r1, [sp, #128]	; 0x80
 800a550:	701a      	strb	r2, [r3, #0]
 800a552:	e7f8      	b.n	800a546 <_svfprintf_r+0x8de>
 800a554:	9b08      	ldr	r3, [sp, #32]
 800a556:	2b46      	cmp	r3, #70	; 0x46
 800a558:	f47f ae4b 	bne.w	800a1f2 <_svfprintf_r+0x58a>
 800a55c:	f00b 0301 	and.w	r3, fp, #1
 800a560:	2d00      	cmp	r5, #0
 800a562:	ea43 0308 	orr.w	r3, r3, r8
 800a566:	dd25      	ble.n	800a5b4 <_svfprintf_r+0x94c>
 800a568:	b383      	cbz	r3, 800a5cc <_svfprintf_r+0x964>
 800a56a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a56c:	18eb      	adds	r3, r5, r3
 800a56e:	4498      	add	r8, r3
 800a570:	2366      	movs	r3, #102	; 0x66
 800a572:	9307      	str	r3, [sp, #28]
 800a574:	e030      	b.n	800a5d8 <_svfprintf_r+0x970>
 800a576:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a57a:	f805 6f01 	strb.w	r6, [r5, #1]!
 800a57e:	e66f      	b.n	800a260 <_svfprintf_r+0x5f8>
 800a580:	b941      	cbnz	r1, 800a594 <_svfprintf_r+0x92c>
 800a582:	2230      	movs	r2, #48	; 0x30
 800a584:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800a588:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800a58c:	3330      	adds	r3, #48	; 0x30
 800a58e:	f802 3b01 	strb.w	r3, [r2], #1
 800a592:	e671      	b.n	800a278 <_svfprintf_r+0x610>
 800a594:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800a598:	e7f8      	b.n	800a58c <_svfprintf_r+0x924>
 800a59a:	9b05      	ldr	r3, [sp, #20]
 800a59c:	42ab      	cmp	r3, r5
 800a59e:	dd0d      	ble.n	800a5bc <_svfprintf_r+0x954>
 800a5a0:	9b05      	ldr	r3, [sp, #20]
 800a5a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	eb03 0802 	add.w	r8, r3, r2
 800a5aa:	dc0d      	bgt.n	800a5c8 <_svfprintf_r+0x960>
 800a5ac:	f1c5 0301 	rsb	r3, r5, #1
 800a5b0:	4498      	add	r8, r3
 800a5b2:	e009      	b.n	800a5c8 <_svfprintf_r+0x960>
 800a5b4:	b163      	cbz	r3, 800a5d0 <_svfprintf_r+0x968>
 800a5b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	e7d8      	b.n	800a56e <_svfprintf_r+0x906>
 800a5bc:	f01b 0f01 	tst.w	fp, #1
 800a5c0:	d01d      	beq.n	800a5fe <_svfprintf_r+0x996>
 800a5c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5c4:	eb05 0803 	add.w	r8, r5, r3
 800a5c8:	2367      	movs	r3, #103	; 0x67
 800a5ca:	e7d2      	b.n	800a572 <_svfprintf_r+0x90a>
 800a5cc:	46a8      	mov	r8, r5
 800a5ce:	e7cf      	b.n	800a570 <_svfprintf_r+0x908>
 800a5d0:	2366      	movs	r3, #102	; 0x66
 800a5d2:	9307      	str	r3, [sp, #28]
 800a5d4:	f04f 0801 	mov.w	r8, #1
 800a5d8:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800a5dc:	9308      	str	r3, [sp, #32]
 800a5de:	d01f      	beq.n	800a620 <_svfprintf_r+0x9b8>
 800a5e0:	2600      	movs	r6, #0
 800a5e2:	2d00      	cmp	r5, #0
 800a5e4:	9608      	str	r6, [sp, #32]
 800a5e6:	f77f ae5c 	ble.w	800a2a2 <_svfprintf_r+0x63a>
 800a5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	2bff      	cmp	r3, #255	; 0xff
 800a5f0:	d107      	bne.n	800a602 <_svfprintf_r+0x99a>
 800a5f2:	9b08      	ldr	r3, [sp, #32]
 800a5f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5f6:	4433      	add	r3, r6
 800a5f8:	fb02 8803 	mla	r8, r2, r3, r8
 800a5fc:	e651      	b.n	800a2a2 <_svfprintf_r+0x63a>
 800a5fe:	46a8      	mov	r8, r5
 800a600:	e7e2      	b.n	800a5c8 <_svfprintf_r+0x960>
 800a602:	42ab      	cmp	r3, r5
 800a604:	daf5      	bge.n	800a5f2 <_svfprintf_r+0x98a>
 800a606:	1aed      	subs	r5, r5, r3
 800a608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a60a:	785b      	ldrb	r3, [r3, #1]
 800a60c:	b133      	cbz	r3, 800a61c <_svfprintf_r+0x9b4>
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	3301      	adds	r3, #1
 800a612:	9308      	str	r3, [sp, #32]
 800a614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a616:	3301      	adds	r3, #1
 800a618:	9309      	str	r3, [sp, #36]	; 0x24
 800a61a:	e7e6      	b.n	800a5ea <_svfprintf_r+0x982>
 800a61c:	3601      	adds	r6, #1
 800a61e:	e7e4      	b.n	800a5ea <_svfprintf_r+0x982>
 800a620:	9e08      	ldr	r6, [sp, #32]
 800a622:	e63e      	b.n	800a2a2 <_svfprintf_r+0x63a>
 800a624:	1d2b      	adds	r3, r5, #4
 800a626:	f01b 0f20 	tst.w	fp, #32
 800a62a:	9306      	str	r3, [sp, #24]
 800a62c:	d00a      	beq.n	800a644 <_svfprintf_r+0x9dc>
 800a62e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a634:	17d2      	asrs	r2, r2, #31
 800a636:	e9c3 1200 	strd	r1, r2, [r3]
 800a63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a63c:	9d06      	ldr	r5, [sp, #24]
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	f7ff bb52 	b.w	8009ce8 <_svfprintf_r+0x80>
 800a644:	f01b 0f10 	tst.w	fp, #16
 800a648:	d003      	beq.n	800a652 <_svfprintf_r+0x9ea>
 800a64a:	682b      	ldr	r3, [r5, #0]
 800a64c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a64e:	601a      	str	r2, [r3, #0]
 800a650:	e7f3      	b.n	800a63a <_svfprintf_r+0x9d2>
 800a652:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a656:	d003      	beq.n	800a660 <_svfprintf_r+0x9f8>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a65c:	801a      	strh	r2, [r3, #0]
 800a65e:	e7ec      	b.n	800a63a <_svfprintf_r+0x9d2>
 800a660:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800a664:	d0f1      	beq.n	800a64a <_svfprintf_r+0x9e2>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a66a:	701a      	strb	r2, [r3, #0]
 800a66c:	e7e5      	b.n	800a63a <_svfprintf_r+0x9d2>
 800a66e:	f04b 0b10 	orr.w	fp, fp, #16
 800a672:	f01b 0320 	ands.w	r3, fp, #32
 800a676:	d020      	beq.n	800a6ba <_svfprintf_r+0xa52>
 800a678:	3507      	adds	r5, #7
 800a67a:	f025 0307 	bic.w	r3, r5, #7
 800a67e:	461a      	mov	r2, r3
 800a680:	685e      	ldr	r6, [r3, #4]
 800a682:	f852 5b08 	ldr.w	r5, [r2], #8
 800a686:	9206      	str	r2, [sp, #24]
 800a688:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800a68c:	2300      	movs	r3, #0
 800a68e:	2200      	movs	r2, #0
 800a690:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800a694:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a698:	f000 84a7 	beq.w	800afea <_svfprintf_r+0x1382>
 800a69c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800a6a0:	9204      	str	r2, [sp, #16]
 800a6a2:	ea55 0206 	orrs.w	r2, r5, r6
 800a6a6:	f040 84a6 	bne.w	800aff6 <_svfprintf_r+0x138e>
 800a6aa:	f1b8 0f00 	cmp.w	r8, #0
 800a6ae:	f000 8107 	beq.w	800a8c0 <_svfprintf_r+0xc58>
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	f040 84a2 	bne.w	800affc <_svfprintf_r+0x1394>
 800a6b8:	e0a3      	b.n	800a802 <_svfprintf_r+0xb9a>
 800a6ba:	462a      	mov	r2, r5
 800a6bc:	f01b 0610 	ands.w	r6, fp, #16
 800a6c0:	f852 5b04 	ldr.w	r5, [r2], #4
 800a6c4:	9206      	str	r2, [sp, #24]
 800a6c6:	d001      	beq.n	800a6cc <_svfprintf_r+0xa64>
 800a6c8:	461e      	mov	r6, r3
 800a6ca:	e7dd      	b.n	800a688 <_svfprintf_r+0xa20>
 800a6cc:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800a6d0:	d001      	beq.n	800a6d6 <_svfprintf_r+0xa6e>
 800a6d2:	b2ad      	uxth	r5, r5
 800a6d4:	e7d8      	b.n	800a688 <_svfprintf_r+0xa20>
 800a6d6:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800a6da:	d0d5      	beq.n	800a688 <_svfprintf_r+0xa20>
 800a6dc:	b2ed      	uxtb	r5, r5
 800a6de:	e7f3      	b.n	800a6c8 <_svfprintf_r+0xa60>
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	2278      	movs	r2, #120	; 0x78
 800a6e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6e8:	9306      	str	r3, [sp, #24]
 800a6ea:	f647 0330 	movw	r3, #30768	; 0x7830
 800a6ee:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800a6f2:	4bab      	ldr	r3, [pc, #684]	; (800a9a0 <_svfprintf_r+0xd38>)
 800a6f4:	9316      	str	r3, [sp, #88]	; 0x58
 800a6f6:	2600      	movs	r6, #0
 800a6f8:	f04b 0b02 	orr.w	fp, fp, #2
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	9207      	str	r2, [sp, #28]
 800a700:	e7c5      	b.n	800a68e <_svfprintf_r+0xa26>
 800a702:	462b      	mov	r3, r5
 800a704:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a708:	f853 2b04 	ldr.w	r2, [r3], #4
 800a70c:	9203      	str	r2, [sp, #12]
 800a70e:	f04f 0500 	mov.w	r5, #0
 800a712:	9306      	str	r3, [sp, #24]
 800a714:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800a718:	d010      	beq.n	800a73c <_svfprintf_r+0xad4>
 800a71a:	9803      	ldr	r0, [sp, #12]
 800a71c:	4642      	mov	r2, r8
 800a71e:	4629      	mov	r1, r5
 800a720:	f7f5 fd56 	bl	80001d0 <memchr>
 800a724:	9004      	str	r0, [sp, #16]
 800a726:	2800      	cmp	r0, #0
 800a728:	f000 80e0 	beq.w	800a8ec <_svfprintf_r+0xc84>
 800a72c:	9a03      	ldr	r2, [sp, #12]
 800a72e:	9504      	str	r5, [sp, #16]
 800a730:	eba0 0802 	sub.w	r8, r0, r2
 800a734:	462f      	mov	r7, r5
 800a736:	462e      	mov	r6, r5
 800a738:	9508      	str	r5, [sp, #32]
 800a73a:	e5ba      	b.n	800a2b2 <_svfprintf_r+0x64a>
 800a73c:	9803      	ldr	r0, [sp, #12]
 800a73e:	f7f5 fd97 	bl	8000270 <strlen>
 800a742:	462f      	mov	r7, r5
 800a744:	4680      	mov	r8, r0
 800a746:	9504      	str	r5, [sp, #16]
 800a748:	463e      	mov	r6, r7
 800a74a:	463b      	mov	r3, r7
 800a74c:	e460      	b.n	800a010 <_svfprintf_r+0x3a8>
 800a74e:	f04b 0b10 	orr.w	fp, fp, #16
 800a752:	f01b 0320 	ands.w	r3, fp, #32
 800a756:	d009      	beq.n	800a76c <_svfprintf_r+0xb04>
 800a758:	3507      	adds	r5, #7
 800a75a:	f025 0307 	bic.w	r3, r5, #7
 800a75e:	461a      	mov	r2, r3
 800a760:	685e      	ldr	r6, [r3, #4]
 800a762:	f852 5b08 	ldr.w	r5, [r2], #8
 800a766:	9206      	str	r2, [sp, #24]
 800a768:	2301      	movs	r3, #1
 800a76a:	e790      	b.n	800a68e <_svfprintf_r+0xa26>
 800a76c:	462a      	mov	r2, r5
 800a76e:	f01b 0610 	ands.w	r6, fp, #16
 800a772:	f852 5b04 	ldr.w	r5, [r2], #4
 800a776:	9206      	str	r2, [sp, #24]
 800a778:	d001      	beq.n	800a77e <_svfprintf_r+0xb16>
 800a77a:	461e      	mov	r6, r3
 800a77c:	e7f4      	b.n	800a768 <_svfprintf_r+0xb00>
 800a77e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800a782:	d001      	beq.n	800a788 <_svfprintf_r+0xb20>
 800a784:	b2ad      	uxth	r5, r5
 800a786:	e7ef      	b.n	800a768 <_svfprintf_r+0xb00>
 800a788:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800a78c:	d0ec      	beq.n	800a768 <_svfprintf_r+0xb00>
 800a78e:	b2ed      	uxtb	r5, r5
 800a790:	e7f3      	b.n	800a77a <_svfprintf_r+0xb12>
 800a792:	4b84      	ldr	r3, [pc, #528]	; (800a9a4 <_svfprintf_r+0xd3c>)
 800a794:	9316      	str	r3, [sp, #88]	; 0x58
 800a796:	f01b 0320 	ands.w	r3, fp, #32
 800a79a:	d01b      	beq.n	800a7d4 <_svfprintf_r+0xb6c>
 800a79c:	3507      	adds	r5, #7
 800a79e:	f025 0307 	bic.w	r3, r5, #7
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	685e      	ldr	r6, [r3, #4]
 800a7a6:	f852 5b08 	ldr.w	r5, [r2], #8
 800a7aa:	9206      	str	r2, [sp, #24]
 800a7ac:	f01b 0f01 	tst.w	fp, #1
 800a7b0:	d00a      	beq.n	800a7c8 <_svfprintf_r+0xb60>
 800a7b2:	ea55 0306 	orrs.w	r3, r5, r6
 800a7b6:	d007      	beq.n	800a7c8 <_svfprintf_r+0xb60>
 800a7b8:	2330      	movs	r3, #48	; 0x30
 800a7ba:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800a7be:	9b07      	ldr	r3, [sp, #28]
 800a7c0:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800a7c4:	f04b 0b02 	orr.w	fp, fp, #2
 800a7c8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e75e      	b.n	800a68e <_svfprintf_r+0xa26>
 800a7d0:	4b73      	ldr	r3, [pc, #460]	; (800a9a0 <_svfprintf_r+0xd38>)
 800a7d2:	e7df      	b.n	800a794 <_svfprintf_r+0xb2c>
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	f01b 0610 	ands.w	r6, fp, #16
 800a7da:	f852 5b04 	ldr.w	r5, [r2], #4
 800a7de:	9206      	str	r2, [sp, #24]
 800a7e0:	d001      	beq.n	800a7e6 <_svfprintf_r+0xb7e>
 800a7e2:	461e      	mov	r6, r3
 800a7e4:	e7e2      	b.n	800a7ac <_svfprintf_r+0xb44>
 800a7e6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800a7ea:	d001      	beq.n	800a7f0 <_svfprintf_r+0xb88>
 800a7ec:	b2ad      	uxth	r5, r5
 800a7ee:	e7dd      	b.n	800a7ac <_svfprintf_r+0xb44>
 800a7f0:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800a7f4:	d0da      	beq.n	800a7ac <_svfprintf_r+0xb44>
 800a7f6:	b2ed      	uxtb	r5, r5
 800a7f8:	e7f3      	b.n	800a7e2 <_svfprintf_r+0xb7a>
 800a7fa:	2d0a      	cmp	r5, #10
 800a7fc:	f176 0300 	sbcs.w	r3, r6, #0
 800a800:	d206      	bcs.n	800a810 <_svfprintf_r+0xba8>
 800a802:	3530      	adds	r5, #48	; 0x30
 800a804:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 800a808:	f20d 1337 	addw	r3, sp, #311	; 0x137
 800a80c:	f000 bc16 	b.w	800b03c <_svfprintf_r+0x13d4>
 800a810:	2300      	movs	r3, #0
 800a812:	9305      	str	r3, [sp, #20]
 800a814:	9b04      	ldr	r3, [sp, #16]
 800a816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a81a:	af4e      	add	r7, sp, #312	; 0x138
 800a81c:	9308      	str	r3, [sp, #32]
 800a81e:	220a      	movs	r2, #10
 800a820:	2300      	movs	r3, #0
 800a822:	4628      	mov	r0, r5
 800a824:	4631      	mov	r1, r6
 800a826:	f7f6 f9bf 	bl	8000ba8 <__aeabi_uldivmod>
 800a82a:	1e7b      	subs	r3, r7, #1
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	9b05      	ldr	r3, [sp, #20]
 800a830:	9010      	str	r0, [sp, #64]	; 0x40
 800a832:	3301      	adds	r3, #1
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	9b08      	ldr	r3, [sp, #32]
 800a838:	3230      	adds	r2, #48	; 0x30
 800a83a:	468b      	mov	fp, r1
 800a83c:	f807 2c01 	strb.w	r2, [r7, #-1]
 800a840:	b1d3      	cbz	r3, 800a878 <_svfprintf_r+0xc10>
 800a842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a844:	9a05      	ldr	r2, [sp, #20]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d115      	bne.n	800a878 <_svfprintf_r+0xc10>
 800a84c:	2aff      	cmp	r2, #255	; 0xff
 800a84e:	d013      	beq.n	800a878 <_svfprintf_r+0xc10>
 800a850:	2d0a      	cmp	r5, #10
 800a852:	f176 0300 	sbcs.w	r3, r6, #0
 800a856:	d30f      	bcc.n	800a878 <_svfprintf_r+0xc10>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a85c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	4618      	mov	r0, r3
 800a862:	9303      	str	r3, [sp, #12]
 800a864:	f000 fcf9 	bl	800b25a <strncpy>
 800a868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a86a:	785b      	ldrb	r3, [r3, #1]
 800a86c:	b11b      	cbz	r3, 800a876 <_svfprintf_r+0xc0e>
 800a86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a870:	3301      	adds	r3, #1
 800a872:	9309      	str	r3, [sp, #36]	; 0x24
 800a874:	2300      	movs	r3, #0
 800a876:	9305      	str	r3, [sp, #20]
 800a878:	2d0a      	cmp	r5, #10
 800a87a:	f176 0600 	sbcs.w	r6, r6, #0
 800a87e:	d20b      	bcs.n	800a898 <_svfprintf_r+0xc30>
 800a880:	9b03      	ldr	r3, [sp, #12]
 800a882:	f8dd b010 	ldr.w	fp, [sp, #16]
 800a886:	aa4e      	add	r2, sp, #312	; 0x138
 800a888:	4647      	mov	r7, r8
 800a88a:	eba2 0803 	sub.w	r8, r2, r3
 800a88e:	2300      	movs	r3, #0
 800a890:	9304      	str	r3, [sp, #16]
 800a892:	461e      	mov	r6, r3
 800a894:	f7ff bbbc 	b.w	800a010 <_svfprintf_r+0x3a8>
 800a898:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a89a:	9f03      	ldr	r7, [sp, #12]
 800a89c:	465e      	mov	r6, fp
 800a89e:	e7be      	b.n	800a81e <_svfprintf_r+0xbb6>
 800a8a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a8a2:	f005 030f 	and.w	r3, r5, #15
 800a8a6:	092d      	lsrs	r5, r5, #4
 800a8a8:	5cd3      	ldrb	r3, [r2, r3]
 800a8aa:	9a03      	ldr	r2, [sp, #12]
 800a8ac:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 800a8b0:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800a8b4:	0936      	lsrs	r6, r6, #4
 800a8b6:	ea55 0306 	orrs.w	r3, r5, r6
 800a8ba:	9203      	str	r2, [sp, #12]
 800a8bc:	d1f0      	bne.n	800a8a0 <_svfprintf_r+0xc38>
 800a8be:	e7df      	b.n	800a880 <_svfprintf_r+0xc18>
 800a8c0:	b933      	cbnz	r3, 800a8d0 <_svfprintf_r+0xc68>
 800a8c2:	f01b 0f01 	tst.w	fp, #1
 800a8c6:	d003      	beq.n	800a8d0 <_svfprintf_r+0xc68>
 800a8c8:	2330      	movs	r3, #48	; 0x30
 800a8ca:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800a8ce:	e79b      	b.n	800a808 <_svfprintf_r+0xba0>
 800a8d0:	ab4e      	add	r3, sp, #312	; 0x138
 800a8d2:	e3b3      	b.n	800b03c <_svfprintf_r+0x13d4>
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 837c 	beq.w	800afd4 <_svfprintf_r+0x136c>
 800a8dc:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a8e6:	9506      	str	r5, [sp, #24]
 800a8e8:	f7ff bb1f 	b.w	8009f2a <_svfprintf_r+0x2c2>
 800a8ec:	9f04      	ldr	r7, [sp, #16]
 800a8ee:	e72b      	b.n	800a748 <_svfprintf_r+0xae0>
 800a8f0:	2010      	movs	r0, #16
 800a8f2:	4403      	add	r3, r0
 800a8f4:	2a07      	cmp	r2, #7
 800a8f6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a8fa:	6060      	str	r0, [r4, #4]
 800a8fc:	dd08      	ble.n	800a910 <_svfprintf_r+0xca8>
 800a8fe:	aa22      	add	r2, sp, #136	; 0x88
 800a900:	4649      	mov	r1, r9
 800a902:	4650      	mov	r0, sl
 800a904:	f001 fef4 	bl	800c6f0 <__ssprint_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	f040 8341 	bne.w	800af90 <_svfprintf_r+0x1328>
 800a90e:	a925      	add	r1, sp, #148	; 0x94
 800a910:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a912:	3b10      	subs	r3, #16
 800a914:	9312      	str	r3, [sp, #72]	; 0x48
 800a916:	460c      	mov	r4, r1
 800a918:	e4e7      	b.n	800a2ea <_svfprintf_r+0x682>
 800a91a:	460c      	mov	r4, r1
 800a91c:	e502      	b.n	800a324 <_svfprintf_r+0x6bc>
 800a91e:	aa22      	add	r2, sp, #136	; 0x88
 800a920:	4649      	mov	r1, r9
 800a922:	4650      	mov	r0, sl
 800a924:	f001 fee4 	bl	800c6f0 <__ssprint_r>
 800a928:	2800      	cmp	r0, #0
 800a92a:	f040 8331 	bne.w	800af90 <_svfprintf_r+0x1328>
 800a92e:	ac25      	add	r4, sp, #148	; 0x94
 800a930:	e50a      	b.n	800a348 <_svfprintf_r+0x6e0>
 800a932:	aa22      	add	r2, sp, #136	; 0x88
 800a934:	4649      	mov	r1, r9
 800a936:	4650      	mov	r0, sl
 800a938:	f001 feda 	bl	800c6f0 <__ssprint_r>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	f040 8327 	bne.w	800af90 <_svfprintf_r+0x1328>
 800a942:	ac25      	add	r4, sp, #148	; 0x94
 800a944:	e510      	b.n	800a368 <_svfprintf_r+0x700>
 800a946:	2010      	movs	r0, #16
 800a948:	4403      	add	r3, r0
 800a94a:	2a07      	cmp	r2, #7
 800a94c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a950:	6060      	str	r0, [r4, #4]
 800a952:	dd08      	ble.n	800a966 <_svfprintf_r+0xcfe>
 800a954:	aa22      	add	r2, sp, #136	; 0x88
 800a956:	4649      	mov	r1, r9
 800a958:	4650      	mov	r0, sl
 800a95a:	f001 fec9 	bl	800c6f0 <__ssprint_r>
 800a95e:	2800      	cmp	r0, #0
 800a960:	f040 8316 	bne.w	800af90 <_svfprintf_r+0x1328>
 800a964:	a925      	add	r1, sp, #148	; 0x94
 800a966:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a968:	3b10      	subs	r3, #16
 800a96a:	9312      	str	r3, [sp, #72]	; 0x48
 800a96c:	460c      	mov	r4, r1
 800a96e:	e504      	b.n	800a37a <_svfprintf_r+0x712>
 800a970:	460c      	mov	r4, r1
 800a972:	e51f      	b.n	800a3b4 <_svfprintf_r+0x74c>
 800a974:	2010      	movs	r0, #16
 800a976:	4402      	add	r2, r0
 800a978:	2b07      	cmp	r3, #7
 800a97a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a97e:	6060      	str	r0, [r4, #4]
 800a980:	dd08      	ble.n	800a994 <_svfprintf_r+0xd2c>
 800a982:	aa22      	add	r2, sp, #136	; 0x88
 800a984:	4649      	mov	r1, r9
 800a986:	4650      	mov	r0, sl
 800a988:	f001 feb2 	bl	800c6f0 <__ssprint_r>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	f040 82ff 	bne.w	800af90 <_svfprintf_r+0x1328>
 800a992:	a925      	add	r1, sp, #148	; 0x94
 800a994:	3f10      	subs	r7, #16
 800a996:	460c      	mov	r4, r1
 800a998:	e510      	b.n	800a3bc <_svfprintf_r+0x754>
 800a99a:	460c      	mov	r4, r1
 800a99c:	e536      	b.n	800a40c <_svfprintf_r+0x7a4>
 800a99e:	bf00      	nop
 800a9a0:	0800e43c 	.word	0x0800e43c
 800a9a4:	0800e44d 	.word	0x0800e44d
 800a9a8:	9b07      	ldr	r3, [sp, #28]
 800a9aa:	2b65      	cmp	r3, #101	; 0x65
 800a9ac:	f340 823a 	ble.w	800ae24 <_svfprintf_r+0x11bc>
 800a9b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	f7f6 f886 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d068      	beq.n	800aa92 <_svfprintf_r+0xe2a>
 800a9c0:	4b6d      	ldr	r3, [pc, #436]	; (800ab78 <_svfprintf_r+0xf10>)
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	441f      	add	r7, r3
 800a9c8:	6063      	str	r3, [r4, #4]
 800a9ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9cc:	9724      	str	r7, [sp, #144]	; 0x90
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	2b07      	cmp	r3, #7
 800a9d2:	9323      	str	r3, [sp, #140]	; 0x8c
 800a9d4:	dc37      	bgt.n	800aa46 <_svfprintf_r+0xdde>
 800a9d6:	3408      	adds	r4, #8
 800a9d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a9da:	9a05      	ldr	r2, [sp, #20]
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	db03      	blt.n	800a9e8 <_svfprintf_r+0xd80>
 800a9e0:	f01b 0f01 	tst.w	fp, #1
 800a9e4:	f43f ad23 	beq.w	800a42e <_svfprintf_r+0x7c6>
 800a9e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9ea:	6023      	str	r3, [r4, #0]
 800a9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9f0:	6063      	str	r3, [r4, #4]
 800a9f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a9f4:	4413      	add	r3, r2
 800a9f6:	9324      	str	r3, [sp, #144]	; 0x90
 800a9f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	2b07      	cmp	r3, #7
 800a9fe:	9323      	str	r3, [sp, #140]	; 0x8c
 800aa00:	dc2b      	bgt.n	800aa5a <_svfprintf_r+0xdf2>
 800aa02:	3408      	adds	r4, #8
 800aa04:	9b05      	ldr	r3, [sp, #20]
 800aa06:	1e5d      	subs	r5, r3, #1
 800aa08:	2d00      	cmp	r5, #0
 800aa0a:	f77f ad10 	ble.w	800a42e <_svfprintf_r+0x7c6>
 800aa0e:	4e5b      	ldr	r6, [pc, #364]	; (800ab7c <_svfprintf_r+0xf14>)
 800aa10:	2710      	movs	r7, #16
 800aa12:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800aa16:	2d10      	cmp	r5, #16
 800aa18:	f103 0301 	add.w	r3, r3, #1
 800aa1c:	f104 0108 	add.w	r1, r4, #8
 800aa20:	6026      	str	r6, [r4, #0]
 800aa22:	dc24      	bgt.n	800aa6e <_svfprintf_r+0xe06>
 800aa24:	6065      	str	r5, [r4, #4]
 800aa26:	4415      	add	r5, r2
 800aa28:	9524      	str	r5, [sp, #144]	; 0x90
 800aa2a:	2b07      	cmp	r3, #7
 800aa2c:	9323      	str	r3, [sp, #140]	; 0x8c
 800aa2e:	f340 828e 	ble.w	800af4e <_svfprintf_r+0x12e6>
 800aa32:	aa22      	add	r2, sp, #136	; 0x88
 800aa34:	4649      	mov	r1, r9
 800aa36:	4650      	mov	r0, sl
 800aa38:	f001 fe5a 	bl	800c6f0 <__ssprint_r>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f040 82a7 	bne.w	800af90 <_svfprintf_r+0x1328>
 800aa42:	ac25      	add	r4, sp, #148	; 0x94
 800aa44:	e4f3      	b.n	800a42e <_svfprintf_r+0x7c6>
 800aa46:	aa22      	add	r2, sp, #136	; 0x88
 800aa48:	4649      	mov	r1, r9
 800aa4a:	4650      	mov	r0, sl
 800aa4c:	f001 fe50 	bl	800c6f0 <__ssprint_r>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f040 829d 	bne.w	800af90 <_svfprintf_r+0x1328>
 800aa56:	ac25      	add	r4, sp, #148	; 0x94
 800aa58:	e7be      	b.n	800a9d8 <_svfprintf_r+0xd70>
 800aa5a:	aa22      	add	r2, sp, #136	; 0x88
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	4650      	mov	r0, sl
 800aa60:	f001 fe46 	bl	800c6f0 <__ssprint_r>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	f040 8293 	bne.w	800af90 <_svfprintf_r+0x1328>
 800aa6a:	ac25      	add	r4, sp, #148	; 0x94
 800aa6c:	e7ca      	b.n	800aa04 <_svfprintf_r+0xd9c>
 800aa6e:	3210      	adds	r2, #16
 800aa70:	2b07      	cmp	r3, #7
 800aa72:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800aa76:	6067      	str	r7, [r4, #4]
 800aa78:	dd08      	ble.n	800aa8c <_svfprintf_r+0xe24>
 800aa7a:	aa22      	add	r2, sp, #136	; 0x88
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4650      	mov	r0, sl
 800aa80:	f001 fe36 	bl	800c6f0 <__ssprint_r>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	f040 8283 	bne.w	800af90 <_svfprintf_r+0x1328>
 800aa8a:	a925      	add	r1, sp, #148	; 0x94
 800aa8c:	3d10      	subs	r5, #16
 800aa8e:	460c      	mov	r4, r1
 800aa90:	e7bf      	b.n	800aa12 <_svfprintf_r+0xdaa>
 800aa92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	dc73      	bgt.n	800ab80 <_svfprintf_r+0xf18>
 800aa98:	4b37      	ldr	r3, [pc, #220]	; (800ab78 <_svfprintf_r+0xf10>)
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	441f      	add	r7, r3
 800aaa0:	6063      	str	r3, [r4, #4]
 800aaa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aaa4:	9724      	str	r7, [sp, #144]	; 0x90
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	2b07      	cmp	r3, #7
 800aaaa:	9323      	str	r3, [sp, #140]	; 0x8c
 800aaac:	dc3d      	bgt.n	800ab2a <_svfprintf_r+0xec2>
 800aaae:	3408      	adds	r4, #8
 800aab0:	9905      	ldr	r1, [sp, #20]
 800aab2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800aab4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aab6:	430b      	orrs	r3, r1
 800aab8:	f00b 0101 	and.w	r1, fp, #1
 800aabc:	430b      	orrs	r3, r1
 800aabe:	f43f acb6 	beq.w	800a42e <_svfprintf_r+0x7c6>
 800aac2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aac8:	6063      	str	r3, [r4, #4]
 800aaca:	441a      	add	r2, r3
 800aacc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aace:	9224      	str	r2, [sp, #144]	; 0x90
 800aad0:	3301      	adds	r3, #1
 800aad2:	2b07      	cmp	r3, #7
 800aad4:	9323      	str	r3, [sp, #140]	; 0x8c
 800aad6:	dc32      	bgt.n	800ab3e <_svfprintf_r+0xed6>
 800aad8:	3408      	adds	r4, #8
 800aada:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800aadc:	2d00      	cmp	r5, #0
 800aade:	da1b      	bge.n	800ab18 <_svfprintf_r+0xeb0>
 800aae0:	4e26      	ldr	r6, [pc, #152]	; (800ab7c <_svfprintf_r+0xf14>)
 800aae2:	426d      	negs	r5, r5
 800aae4:	4623      	mov	r3, r4
 800aae6:	2710      	movs	r7, #16
 800aae8:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800aaec:	2d10      	cmp	r5, #16
 800aaee:	f102 0201 	add.w	r2, r2, #1
 800aaf2:	f104 0408 	add.w	r4, r4, #8
 800aaf6:	601e      	str	r6, [r3, #0]
 800aaf8:	dc2b      	bgt.n	800ab52 <_svfprintf_r+0xeea>
 800aafa:	605d      	str	r5, [r3, #4]
 800aafc:	2a07      	cmp	r2, #7
 800aafe:	440d      	add	r5, r1
 800ab00:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800ab04:	dd08      	ble.n	800ab18 <_svfprintf_r+0xeb0>
 800ab06:	aa22      	add	r2, sp, #136	; 0x88
 800ab08:	4649      	mov	r1, r9
 800ab0a:	4650      	mov	r0, sl
 800ab0c:	f001 fdf0 	bl	800c6f0 <__ssprint_r>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	f040 823d 	bne.w	800af90 <_svfprintf_r+0x1328>
 800ab16:	ac25      	add	r4, sp, #148	; 0x94
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	9b05      	ldr	r3, [sp, #20]
 800ab1e:	9a05      	ldr	r2, [sp, #20]
 800ab20:	6063      	str	r3, [r4, #4]
 800ab22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ab24:	4413      	add	r3, r2
 800ab26:	9324      	str	r3, [sp, #144]	; 0x90
 800ab28:	e47a      	b.n	800a420 <_svfprintf_r+0x7b8>
 800ab2a:	aa22      	add	r2, sp, #136	; 0x88
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	4650      	mov	r0, sl
 800ab30:	f001 fdde 	bl	800c6f0 <__ssprint_r>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	f040 822b 	bne.w	800af90 <_svfprintf_r+0x1328>
 800ab3a:	ac25      	add	r4, sp, #148	; 0x94
 800ab3c:	e7b8      	b.n	800aab0 <_svfprintf_r+0xe48>
 800ab3e:	aa22      	add	r2, sp, #136	; 0x88
 800ab40:	4649      	mov	r1, r9
 800ab42:	4650      	mov	r0, sl
 800ab44:	f001 fdd4 	bl	800c6f0 <__ssprint_r>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	f040 8221 	bne.w	800af90 <_svfprintf_r+0x1328>
 800ab4e:	ac25      	add	r4, sp, #148	; 0x94
 800ab50:	e7c3      	b.n	800aada <_svfprintf_r+0xe72>
 800ab52:	3110      	adds	r1, #16
 800ab54:	2a07      	cmp	r2, #7
 800ab56:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800ab5a:	605f      	str	r7, [r3, #4]
 800ab5c:	dd08      	ble.n	800ab70 <_svfprintf_r+0xf08>
 800ab5e:	aa22      	add	r2, sp, #136	; 0x88
 800ab60:	4649      	mov	r1, r9
 800ab62:	4650      	mov	r0, sl
 800ab64:	f001 fdc4 	bl	800c6f0 <__ssprint_r>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	f040 8211 	bne.w	800af90 <_svfprintf_r+0x1328>
 800ab6e:	ac25      	add	r4, sp, #148	; 0x94
 800ab70:	3d10      	subs	r5, #16
 800ab72:	4623      	mov	r3, r4
 800ab74:	e7b8      	b.n	800aae8 <_svfprintf_r+0xe80>
 800ab76:	bf00      	nop
 800ab78:	0800e45e 	.word	0x0800e45e
 800ab7c:	0800e470 	.word	0x0800e470
 800ab80:	9b05      	ldr	r3, [sp, #20]
 800ab82:	42ab      	cmp	r3, r5
 800ab84:	bfa8      	it	ge
 800ab86:	462b      	movge	r3, r5
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	4698      	mov	r8, r3
 800ab8c:	dd0a      	ble.n	800aba4 <_svfprintf_r+0xf3c>
 800ab8e:	9b03      	ldr	r3, [sp, #12]
 800ab90:	e9c4 3800 	strd	r3, r8, [r4]
 800ab94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab96:	3301      	adds	r3, #1
 800ab98:	4447      	add	r7, r8
 800ab9a:	2b07      	cmp	r3, #7
 800ab9c:	9724      	str	r7, [sp, #144]	; 0x90
 800ab9e:	9323      	str	r3, [sp, #140]	; 0x8c
 800aba0:	dc7b      	bgt.n	800ac9a <_svfprintf_r+0x1032>
 800aba2:	3408      	adds	r4, #8
 800aba4:	f1b8 0f00 	cmp.w	r8, #0
 800aba8:	bfac      	ite	ge
 800abaa:	eba5 0708 	subge.w	r7, r5, r8
 800abae:	462f      	movlt	r7, r5
 800abb0:	2f00      	cmp	r7, #0
 800abb2:	dd1a      	ble.n	800abea <_svfprintf_r+0xf82>
 800abb4:	f8df 8368 	ldr.w	r8, [pc, #872]	; 800af20 <_svfprintf_r+0x12b8>
 800abb8:	f8c4 8000 	str.w	r8, [r4]
 800abbc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800abc0:	2f10      	cmp	r7, #16
 800abc2:	f103 0301 	add.w	r3, r3, #1
 800abc6:	f104 0108 	add.w	r1, r4, #8
 800abca:	dc70      	bgt.n	800acae <_svfprintf_r+0x1046>
 800abcc:	6067      	str	r7, [r4, #4]
 800abce:	2b07      	cmp	r3, #7
 800abd0:	4417      	add	r7, r2
 800abd2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800abd6:	dd7d      	ble.n	800acd4 <_svfprintf_r+0x106c>
 800abd8:	aa22      	add	r2, sp, #136	; 0x88
 800abda:	4649      	mov	r1, r9
 800abdc:	4650      	mov	r0, sl
 800abde:	f001 fd87 	bl	800c6f0 <__ssprint_r>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	f040 81d4 	bne.w	800af90 <_svfprintf_r+0x1328>
 800abe8:	ac25      	add	r4, sp, #148	; 0x94
 800abea:	9b03      	ldr	r3, [sp, #12]
 800abec:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800abf0:	441d      	add	r5, r3
 800abf2:	d00a      	beq.n	800ac0a <_svfprintf_r+0xfa2>
 800abf4:	9b08      	ldr	r3, [sp, #32]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d16e      	bne.n	800acd8 <_svfprintf_r+0x1070>
 800abfa:	2e00      	cmp	r6, #0
 800abfc:	d16e      	bne.n	800acdc <_svfprintf_r+0x1074>
 800abfe:	9b03      	ldr	r3, [sp, #12]
 800ac00:	9a05      	ldr	r2, [sp, #20]
 800ac02:	4413      	add	r3, r2
 800ac04:	429d      	cmp	r5, r3
 800ac06:	bf28      	it	cs
 800ac08:	461d      	movcs	r5, r3
 800ac0a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ac0c:	9a05      	ldr	r2, [sp, #20]
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	db02      	blt.n	800ac18 <_svfprintf_r+0xfb0>
 800ac12:	f01b 0f01 	tst.w	fp, #1
 800ac16:	d00e      	beq.n	800ac36 <_svfprintf_r+0xfce>
 800ac18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac20:	6063      	str	r3, [r4, #4]
 800ac22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac24:	4413      	add	r3, r2
 800ac26:	9324      	str	r3, [sp, #144]	; 0x90
 800ac28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	2b07      	cmp	r3, #7
 800ac2e:	9323      	str	r3, [sp, #140]	; 0x8c
 800ac30:	f300 80d2 	bgt.w	800add8 <_svfprintf_r+0x1170>
 800ac34:	3408      	adds	r4, #8
 800ac36:	9b05      	ldr	r3, [sp, #20]
 800ac38:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ac3a:	9a05      	ldr	r2, [sp, #20]
 800ac3c:	1b9e      	subs	r6, r3, r6
 800ac3e:	9b03      	ldr	r3, [sp, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	1b5b      	subs	r3, r3, r5
 800ac44:	429e      	cmp	r6, r3
 800ac46:	bfa8      	it	ge
 800ac48:	461e      	movge	r6, r3
 800ac4a:	2e00      	cmp	r6, #0
 800ac4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac4e:	dd0a      	ble.n	800ac66 <_svfprintf_r+0xffe>
 800ac50:	4433      	add	r3, r6
 800ac52:	9324      	str	r3, [sp, #144]	; 0x90
 800ac54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac56:	3301      	adds	r3, #1
 800ac58:	2b07      	cmp	r3, #7
 800ac5a:	e9c4 5600 	strd	r5, r6, [r4]
 800ac5e:	9323      	str	r3, [sp, #140]	; 0x8c
 800ac60:	f300 80c4 	bgt.w	800adec <_svfprintf_r+0x1184>
 800ac64:	3408      	adds	r4, #8
 800ac66:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800ac68:	9b05      	ldr	r3, [sp, #20]
 800ac6a:	2e00      	cmp	r6, #0
 800ac6c:	eba3 0505 	sub.w	r5, r3, r5
 800ac70:	bfa8      	it	ge
 800ac72:	1bad      	subge	r5, r5, r6
 800ac74:	2d00      	cmp	r5, #0
 800ac76:	f77f abda 	ble.w	800a42e <_svfprintf_r+0x7c6>
 800ac7a:	4ea9      	ldr	r6, [pc, #676]	; (800af20 <_svfprintf_r+0x12b8>)
 800ac7c:	2710      	movs	r7, #16
 800ac7e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ac82:	2d10      	cmp	r5, #16
 800ac84:	f103 0301 	add.w	r3, r3, #1
 800ac88:	f104 0108 	add.w	r1, r4, #8
 800ac8c:	6026      	str	r6, [r4, #0]
 800ac8e:	f300 80b7 	bgt.w	800ae00 <_svfprintf_r+0x1198>
 800ac92:	442a      	add	r2, r5
 800ac94:	6065      	str	r5, [r4, #4]
 800ac96:	9224      	str	r2, [sp, #144]	; 0x90
 800ac98:	e6c7      	b.n	800aa2a <_svfprintf_r+0xdc2>
 800ac9a:	aa22      	add	r2, sp, #136	; 0x88
 800ac9c:	4649      	mov	r1, r9
 800ac9e:	4650      	mov	r0, sl
 800aca0:	f001 fd26 	bl	800c6f0 <__ssprint_r>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f040 8173 	bne.w	800af90 <_svfprintf_r+0x1328>
 800acaa:	ac25      	add	r4, sp, #148	; 0x94
 800acac:	e77a      	b.n	800aba4 <_svfprintf_r+0xf3c>
 800acae:	2010      	movs	r0, #16
 800acb0:	4402      	add	r2, r0
 800acb2:	2b07      	cmp	r3, #7
 800acb4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800acb8:	6060      	str	r0, [r4, #4]
 800acba:	dd08      	ble.n	800acce <_svfprintf_r+0x1066>
 800acbc:	aa22      	add	r2, sp, #136	; 0x88
 800acbe:	4649      	mov	r1, r9
 800acc0:	4650      	mov	r0, sl
 800acc2:	f001 fd15 	bl	800c6f0 <__ssprint_r>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	f040 8162 	bne.w	800af90 <_svfprintf_r+0x1328>
 800accc:	a925      	add	r1, sp, #148	; 0x94
 800acce:	3f10      	subs	r7, #16
 800acd0:	460c      	mov	r4, r1
 800acd2:	e771      	b.n	800abb8 <_svfprintf_r+0xf50>
 800acd4:	460c      	mov	r4, r1
 800acd6:	e788      	b.n	800abea <_svfprintf_r+0xf82>
 800acd8:	2e00      	cmp	r6, #0
 800acda:	d04d      	beq.n	800ad78 <_svfprintf_r+0x1110>
 800acdc:	3e01      	subs	r6, #1
 800acde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ace4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ace6:	6063      	str	r3, [r4, #4]
 800ace8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800acea:	4413      	add	r3, r2
 800acec:	9324      	str	r3, [sp, #144]	; 0x90
 800acee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800acf0:	3301      	adds	r3, #1
 800acf2:	2b07      	cmp	r3, #7
 800acf4:	9323      	str	r3, [sp, #140]	; 0x8c
 800acf6:	dc46      	bgt.n	800ad86 <_svfprintf_r+0x111e>
 800acf8:	3408      	adds	r4, #8
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	9a05      	ldr	r2, [sp, #20]
 800acfe:	eb03 0802 	add.w	r8, r3, r2
 800ad02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	eba8 0805 	sub.w	r8, r8, r5
 800ad0a:	4598      	cmp	r8, r3
 800ad0c:	bfa8      	it	ge
 800ad0e:	4698      	movge	r8, r3
 800ad10:	f1b8 0f00 	cmp.w	r8, #0
 800ad14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad16:	dd09      	ble.n	800ad2c <_svfprintf_r+0x10c4>
 800ad18:	4443      	add	r3, r8
 800ad1a:	9324      	str	r3, [sp, #144]	; 0x90
 800ad1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad1e:	3301      	adds	r3, #1
 800ad20:	2b07      	cmp	r3, #7
 800ad22:	e9c4 5800 	strd	r5, r8, [r4]
 800ad26:	9323      	str	r3, [sp, #140]	; 0x8c
 800ad28:	dc37      	bgt.n	800ad9a <_svfprintf_r+0x1132>
 800ad2a:	3408      	adds	r4, #8
 800ad2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2e:	781f      	ldrb	r7, [r3, #0]
 800ad30:	f1b8 0f00 	cmp.w	r8, #0
 800ad34:	bfa8      	it	ge
 800ad36:	eba7 0708 	subge.w	r7, r7, r8
 800ad3a:	2f00      	cmp	r7, #0
 800ad3c:	dd18      	ble.n	800ad70 <_svfprintf_r+0x1108>
 800ad3e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ad42:	4877      	ldr	r0, [pc, #476]	; (800af20 <_svfprintf_r+0x12b8>)
 800ad44:	6020      	str	r0, [r4, #0]
 800ad46:	2f10      	cmp	r7, #16
 800ad48:	f103 0301 	add.w	r3, r3, #1
 800ad4c:	f104 0108 	add.w	r1, r4, #8
 800ad50:	dc2d      	bgt.n	800adae <_svfprintf_r+0x1146>
 800ad52:	443a      	add	r2, r7
 800ad54:	2b07      	cmp	r3, #7
 800ad56:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ad5a:	6067      	str	r7, [r4, #4]
 800ad5c:	dd3a      	ble.n	800add4 <_svfprintf_r+0x116c>
 800ad5e:	aa22      	add	r2, sp, #136	; 0x88
 800ad60:	4649      	mov	r1, r9
 800ad62:	4650      	mov	r0, sl
 800ad64:	f001 fcc4 	bl	800c6f0 <__ssprint_r>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	f040 8111 	bne.w	800af90 <_svfprintf_r+0x1328>
 800ad6e:	ac25      	add	r4, sp, #148	; 0x94
 800ad70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	441d      	add	r5, r3
 800ad76:	e73d      	b.n	800abf4 <_svfprintf_r+0xf8c>
 800ad78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7e:	9b08      	ldr	r3, [sp, #32]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	9308      	str	r3, [sp, #32]
 800ad84:	e7ab      	b.n	800acde <_svfprintf_r+0x1076>
 800ad86:	aa22      	add	r2, sp, #136	; 0x88
 800ad88:	4649      	mov	r1, r9
 800ad8a:	4650      	mov	r0, sl
 800ad8c:	f001 fcb0 	bl	800c6f0 <__ssprint_r>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	f040 80fd 	bne.w	800af90 <_svfprintf_r+0x1328>
 800ad96:	ac25      	add	r4, sp, #148	; 0x94
 800ad98:	e7af      	b.n	800acfa <_svfprintf_r+0x1092>
 800ad9a:	aa22      	add	r2, sp, #136	; 0x88
 800ad9c:	4649      	mov	r1, r9
 800ad9e:	4650      	mov	r0, sl
 800ada0:	f001 fca6 	bl	800c6f0 <__ssprint_r>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f040 80f3 	bne.w	800af90 <_svfprintf_r+0x1328>
 800adaa:	ac25      	add	r4, sp, #148	; 0x94
 800adac:	e7be      	b.n	800ad2c <_svfprintf_r+0x10c4>
 800adae:	2010      	movs	r0, #16
 800adb0:	4402      	add	r2, r0
 800adb2:	2b07      	cmp	r3, #7
 800adb4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800adb8:	6060      	str	r0, [r4, #4]
 800adba:	dd08      	ble.n	800adce <_svfprintf_r+0x1166>
 800adbc:	aa22      	add	r2, sp, #136	; 0x88
 800adbe:	4649      	mov	r1, r9
 800adc0:	4650      	mov	r0, sl
 800adc2:	f001 fc95 	bl	800c6f0 <__ssprint_r>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f040 80e2 	bne.w	800af90 <_svfprintf_r+0x1328>
 800adcc:	a925      	add	r1, sp, #148	; 0x94
 800adce:	3f10      	subs	r7, #16
 800add0:	460c      	mov	r4, r1
 800add2:	e7b4      	b.n	800ad3e <_svfprintf_r+0x10d6>
 800add4:	460c      	mov	r4, r1
 800add6:	e7cb      	b.n	800ad70 <_svfprintf_r+0x1108>
 800add8:	aa22      	add	r2, sp, #136	; 0x88
 800adda:	4649      	mov	r1, r9
 800addc:	4650      	mov	r0, sl
 800adde:	f001 fc87 	bl	800c6f0 <__ssprint_r>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	f040 80d4 	bne.w	800af90 <_svfprintf_r+0x1328>
 800ade8:	ac25      	add	r4, sp, #148	; 0x94
 800adea:	e724      	b.n	800ac36 <_svfprintf_r+0xfce>
 800adec:	aa22      	add	r2, sp, #136	; 0x88
 800adee:	4649      	mov	r1, r9
 800adf0:	4650      	mov	r0, sl
 800adf2:	f001 fc7d 	bl	800c6f0 <__ssprint_r>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f040 80ca 	bne.w	800af90 <_svfprintf_r+0x1328>
 800adfc:	ac25      	add	r4, sp, #148	; 0x94
 800adfe:	e732      	b.n	800ac66 <_svfprintf_r+0xffe>
 800ae00:	3210      	adds	r2, #16
 800ae02:	2b07      	cmp	r3, #7
 800ae04:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ae08:	6067      	str	r7, [r4, #4]
 800ae0a:	dd08      	ble.n	800ae1e <_svfprintf_r+0x11b6>
 800ae0c:	aa22      	add	r2, sp, #136	; 0x88
 800ae0e:	4649      	mov	r1, r9
 800ae10:	4650      	mov	r0, sl
 800ae12:	f001 fc6d 	bl	800c6f0 <__ssprint_r>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	f040 80ba 	bne.w	800af90 <_svfprintf_r+0x1328>
 800ae1c:	a925      	add	r1, sp, #148	; 0x94
 800ae1e:	3d10      	subs	r5, #16
 800ae20:	460c      	mov	r4, r1
 800ae22:	e72c      	b.n	800ac7e <_svfprintf_r+0x1016>
 800ae24:	9a05      	ldr	r2, [sp, #20]
 800ae26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae28:	2a01      	cmp	r2, #1
 800ae2a:	9a03      	ldr	r2, [sp, #12]
 800ae2c:	6022      	str	r2, [r4, #0]
 800ae2e:	f107 0701 	add.w	r7, r7, #1
 800ae32:	f103 0301 	add.w	r3, r3, #1
 800ae36:	f04f 0201 	mov.w	r2, #1
 800ae3a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800ae3e:	f104 0508 	add.w	r5, r4, #8
 800ae42:	6062      	str	r2, [r4, #4]
 800ae44:	dc02      	bgt.n	800ae4c <_svfprintf_r+0x11e4>
 800ae46:	f01b 0f01 	tst.w	fp, #1
 800ae4a:	d07b      	beq.n	800af44 <_svfprintf_r+0x12dc>
 800ae4c:	2b07      	cmp	r3, #7
 800ae4e:	dd08      	ble.n	800ae62 <_svfprintf_r+0x11fa>
 800ae50:	aa22      	add	r2, sp, #136	; 0x88
 800ae52:	4649      	mov	r1, r9
 800ae54:	4650      	mov	r0, sl
 800ae56:	f001 fc4b 	bl	800c6f0 <__ssprint_r>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	f040 8098 	bne.w	800af90 <_svfprintf_r+0x1328>
 800ae60:	ad25      	add	r5, sp, #148	; 0x94
 800ae62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae6a:	606b      	str	r3, [r5, #4]
 800ae6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ae6e:	4413      	add	r3, r2
 800ae70:	9324      	str	r3, [sp, #144]	; 0x90
 800ae72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae74:	3301      	adds	r3, #1
 800ae76:	2b07      	cmp	r3, #7
 800ae78:	9323      	str	r3, [sp, #140]	; 0x8c
 800ae7a:	dc32      	bgt.n	800aee2 <_svfprintf_r+0x127a>
 800ae7c:	3508      	adds	r5, #8
 800ae7e:	9b05      	ldr	r3, [sp, #20]
 800ae80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae84:	1e5c      	subs	r4, r3, #1
 800ae86:	2200      	movs	r2, #0
 800ae88:	2300      	movs	r3, #0
 800ae8a:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 800ae8e:	f7f5 fe1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d12e      	bne.n	800aef4 <_svfprintf_r+0x128c>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	e9c5 3400 	strd	r3, r4, [r5]
 800ae9e:	9b05      	ldr	r3, [sp, #20]
 800aea0:	3701      	adds	r7, #1
 800aea2:	3e01      	subs	r6, #1
 800aea4:	441e      	add	r6, r3
 800aea6:	2f07      	cmp	r7, #7
 800aea8:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 800aeac:	dd4d      	ble.n	800af4a <_svfprintf_r+0x12e2>
 800aeae:	aa22      	add	r2, sp, #136	; 0x88
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	4650      	mov	r0, sl
 800aeb4:	f001 fc1c 	bl	800c6f0 <__ssprint_r>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d169      	bne.n	800af90 <_svfprintf_r+0x1328>
 800aebc:	ad25      	add	r5, sp, #148	; 0x94
 800aebe:	ab1e      	add	r3, sp, #120	; 0x78
 800aec0:	602b      	str	r3, [r5, #0]
 800aec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aec4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aec6:	606b      	str	r3, [r5, #4]
 800aec8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aeca:	4413      	add	r3, r2
 800aecc:	9324      	str	r3, [sp, #144]	; 0x90
 800aece:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aed0:	3301      	adds	r3, #1
 800aed2:	2b07      	cmp	r3, #7
 800aed4:	9323      	str	r3, [sp, #140]	; 0x8c
 800aed6:	f73f adac 	bgt.w	800aa32 <_svfprintf_r+0xdca>
 800aeda:	f105 0408 	add.w	r4, r5, #8
 800aede:	f7ff baa6 	b.w	800a42e <_svfprintf_r+0x7c6>
 800aee2:	aa22      	add	r2, sp, #136	; 0x88
 800aee4:	4649      	mov	r1, r9
 800aee6:	4650      	mov	r0, sl
 800aee8:	f001 fc02 	bl	800c6f0 <__ssprint_r>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d14f      	bne.n	800af90 <_svfprintf_r+0x1328>
 800aef0:	ad25      	add	r5, sp, #148	; 0x94
 800aef2:	e7c4      	b.n	800ae7e <_svfprintf_r+0x1216>
 800aef4:	2c00      	cmp	r4, #0
 800aef6:	dde2      	ble.n	800aebe <_svfprintf_r+0x1256>
 800aef8:	4e09      	ldr	r6, [pc, #36]	; (800af20 <_svfprintf_r+0x12b8>)
 800aefa:	2710      	movs	r7, #16
 800aefc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800af00:	2c10      	cmp	r4, #16
 800af02:	f103 0301 	add.w	r3, r3, #1
 800af06:	f105 0108 	add.w	r1, r5, #8
 800af0a:	602e      	str	r6, [r5, #0]
 800af0c:	dc0a      	bgt.n	800af24 <_svfprintf_r+0x12bc>
 800af0e:	606c      	str	r4, [r5, #4]
 800af10:	2b07      	cmp	r3, #7
 800af12:	4414      	add	r4, r2
 800af14:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800af18:	dcc9      	bgt.n	800aeae <_svfprintf_r+0x1246>
 800af1a:	460d      	mov	r5, r1
 800af1c:	e7cf      	b.n	800aebe <_svfprintf_r+0x1256>
 800af1e:	bf00      	nop
 800af20:	0800e470 	.word	0x0800e470
 800af24:	3210      	adds	r2, #16
 800af26:	2b07      	cmp	r3, #7
 800af28:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800af2c:	606f      	str	r7, [r5, #4]
 800af2e:	dd06      	ble.n	800af3e <_svfprintf_r+0x12d6>
 800af30:	aa22      	add	r2, sp, #136	; 0x88
 800af32:	4649      	mov	r1, r9
 800af34:	4650      	mov	r0, sl
 800af36:	f001 fbdb 	bl	800c6f0 <__ssprint_r>
 800af3a:	bb48      	cbnz	r0, 800af90 <_svfprintf_r+0x1328>
 800af3c:	a925      	add	r1, sp, #148	; 0x94
 800af3e:	3c10      	subs	r4, #16
 800af40:	460d      	mov	r5, r1
 800af42:	e7db      	b.n	800aefc <_svfprintf_r+0x1294>
 800af44:	2b07      	cmp	r3, #7
 800af46:	ddba      	ble.n	800aebe <_svfprintf_r+0x1256>
 800af48:	e7b1      	b.n	800aeae <_svfprintf_r+0x1246>
 800af4a:	3508      	adds	r5, #8
 800af4c:	e7b7      	b.n	800aebe <_svfprintf_r+0x1256>
 800af4e:	460c      	mov	r4, r1
 800af50:	f7ff ba6d 	b.w	800a42e <_svfprintf_r+0x7c6>
 800af54:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800af58:	1a9d      	subs	r5, r3, r2
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	f77f aa6b 	ble.w	800a436 <_svfprintf_r+0x7ce>
 800af60:	4e37      	ldr	r6, [pc, #220]	; (800b040 <_svfprintf_r+0x13d8>)
 800af62:	2710      	movs	r7, #16
 800af64:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800af68:	2d10      	cmp	r5, #16
 800af6a:	f103 0301 	add.w	r3, r3, #1
 800af6e:	6026      	str	r6, [r4, #0]
 800af70:	dc18      	bgt.n	800afa4 <_svfprintf_r+0x133c>
 800af72:	6065      	str	r5, [r4, #4]
 800af74:	2b07      	cmp	r3, #7
 800af76:	4415      	add	r5, r2
 800af78:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800af7c:	f77f aa5b 	ble.w	800a436 <_svfprintf_r+0x7ce>
 800af80:	aa22      	add	r2, sp, #136	; 0x88
 800af82:	4649      	mov	r1, r9
 800af84:	4650      	mov	r0, sl
 800af86:	f001 fbb3 	bl	800c6f0 <__ssprint_r>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	f43f aa53 	beq.w	800a436 <_svfprintf_r+0x7ce>
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	f43f a874 	beq.w	800a080 <_svfprintf_r+0x418>
 800af98:	4619      	mov	r1, r3
 800af9a:	4650      	mov	r0, sl
 800af9c:	f7fe fb5e 	bl	800965c <_free_r>
 800afa0:	f7ff b86e 	b.w	800a080 <_svfprintf_r+0x418>
 800afa4:	3210      	adds	r2, #16
 800afa6:	2b07      	cmp	r3, #7
 800afa8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800afac:	6067      	str	r7, [r4, #4]
 800afae:	dc02      	bgt.n	800afb6 <_svfprintf_r+0x134e>
 800afb0:	3408      	adds	r4, #8
 800afb2:	3d10      	subs	r5, #16
 800afb4:	e7d6      	b.n	800af64 <_svfprintf_r+0x12fc>
 800afb6:	aa22      	add	r2, sp, #136	; 0x88
 800afb8:	4649      	mov	r1, r9
 800afba:	4650      	mov	r0, sl
 800afbc:	f001 fb98 	bl	800c6f0 <__ssprint_r>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d1e5      	bne.n	800af90 <_svfprintf_r+0x1328>
 800afc4:	ac25      	add	r4, sp, #148	; 0x94
 800afc6:	e7f4      	b.n	800afb2 <_svfprintf_r+0x134a>
 800afc8:	9904      	ldr	r1, [sp, #16]
 800afca:	4650      	mov	r0, sl
 800afcc:	f7fe fb46 	bl	800965c <_free_r>
 800afd0:	f7ff ba49 	b.w	800a466 <_svfprintf_r+0x7fe>
 800afd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f43f a852 	beq.w	800a080 <_svfprintf_r+0x418>
 800afdc:	aa22      	add	r2, sp, #136	; 0x88
 800afde:	4649      	mov	r1, r9
 800afe0:	4650      	mov	r0, sl
 800afe2:	f001 fb85 	bl	800c6f0 <__ssprint_r>
 800afe6:	f7ff b84b 	b.w	800a080 <_svfprintf_r+0x418>
 800afea:	ea55 0206 	orrs.w	r2, r5, r6
 800afee:	f8cd b010 	str.w	fp, [sp, #16]
 800aff2:	f43f ab5e 	beq.w	800a6b2 <_svfprintf_r+0xa4a>
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	f43f abff 	beq.w	800a7fa <_svfprintf_r+0xb92>
 800affc:	2b02      	cmp	r3, #2
 800affe:	ab4e      	add	r3, sp, #312	; 0x138
 800b000:	9303      	str	r3, [sp, #12]
 800b002:	f43f ac4d 	beq.w	800a8a0 <_svfprintf_r+0xc38>
 800b006:	9a03      	ldr	r2, [sp, #12]
 800b008:	f005 0307 	and.w	r3, r5, #7
 800b00c:	4611      	mov	r1, r2
 800b00e:	3330      	adds	r3, #48	; 0x30
 800b010:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800b014:	08ed      	lsrs	r5, r5, #3
 800b016:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 800b01a:	08f6      	lsrs	r6, r6, #3
 800b01c:	9103      	str	r1, [sp, #12]
 800b01e:	ea55 0106 	orrs.w	r1, r5, r6
 800b022:	d1f0      	bne.n	800b006 <_svfprintf_r+0x139e>
 800b024:	9904      	ldr	r1, [sp, #16]
 800b026:	07c9      	lsls	r1, r1, #31
 800b028:	f57f ac2a 	bpl.w	800a880 <_svfprintf_r+0xc18>
 800b02c:	2b30      	cmp	r3, #48	; 0x30
 800b02e:	f43f ac27 	beq.w	800a880 <_svfprintf_r+0xc18>
 800b032:	9903      	ldr	r1, [sp, #12]
 800b034:	2330      	movs	r3, #48	; 0x30
 800b036:	f801 3c01 	strb.w	r3, [r1, #-1]
 800b03a:	1e93      	subs	r3, r2, #2
 800b03c:	9303      	str	r3, [sp, #12]
 800b03e:	e41f      	b.n	800a880 <_svfprintf_r+0xc18>
 800b040:	0800e460 	.word	0x0800e460

0800b044 <_fclose_r>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	4606      	mov	r6, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	b911      	cbnz	r1, 800b052 <_fclose_r+0xe>
 800b04c:	2500      	movs	r5, #0
 800b04e:	4628      	mov	r0, r5
 800b050:	bd70      	pop	{r4, r5, r6, pc}
 800b052:	b118      	cbz	r0, 800b05c <_fclose_r+0x18>
 800b054:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b056:	b90b      	cbnz	r3, 800b05c <_fclose_r+0x18>
 800b058:	f7fe f94a 	bl	80092f0 <__sinit>
 800b05c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b05e:	07d8      	lsls	r0, r3, #31
 800b060:	d405      	bmi.n	800b06e <_fclose_r+0x2a>
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	0599      	lsls	r1, r3, #22
 800b066:	d402      	bmi.n	800b06e <_fclose_r+0x2a>
 800b068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b06a:	f7fe fa83 	bl	8009574 <__retarget_lock_acquire_recursive>
 800b06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b072:	b93b      	cbnz	r3, 800b084 <_fclose_r+0x40>
 800b074:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b076:	f015 0501 	ands.w	r5, r5, #1
 800b07a:	d1e7      	bne.n	800b04c <_fclose_r+0x8>
 800b07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b07e:	f7fe fa7a 	bl	8009576 <__retarget_lock_release_recursive>
 800b082:	e7e4      	b.n	800b04e <_fclose_r+0xa>
 800b084:	4621      	mov	r1, r4
 800b086:	4630      	mov	r0, r6
 800b088:	f000 f834 	bl	800b0f4 <__sflush_r>
 800b08c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b08e:	4605      	mov	r5, r0
 800b090:	b133      	cbz	r3, 800b0a0 <_fclose_r+0x5c>
 800b092:	69e1      	ldr	r1, [r4, #28]
 800b094:	4630      	mov	r0, r6
 800b096:	4798      	blx	r3
 800b098:	2800      	cmp	r0, #0
 800b09a:	bfb8      	it	lt
 800b09c:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	061a      	lsls	r2, r3, #24
 800b0a4:	d503      	bpl.n	800b0ae <_fclose_r+0x6a>
 800b0a6:	6921      	ldr	r1, [r4, #16]
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7fe fad7 	bl	800965c <_free_r>
 800b0ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b0b0:	b141      	cbz	r1, 800b0c4 <_fclose_r+0x80>
 800b0b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b0b6:	4299      	cmp	r1, r3
 800b0b8:	d002      	beq.n	800b0c0 <_fclose_r+0x7c>
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7fe face 	bl	800965c <_free_r>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	6323      	str	r3, [r4, #48]	; 0x30
 800b0c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b0c6:	b121      	cbz	r1, 800b0d2 <_fclose_r+0x8e>
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f7fe fac7 	bl	800965c <_free_r>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	6463      	str	r3, [r4, #68]	; 0x44
 800b0d2:	f7fe f901 	bl	80092d8 <__sfp_lock_acquire>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	81a3      	strh	r3, [r4, #12]
 800b0da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0dc:	07db      	lsls	r3, r3, #31
 800b0de:	d402      	bmi.n	800b0e6 <_fclose_r+0xa2>
 800b0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0e2:	f7fe fa48 	bl	8009576 <__retarget_lock_release_recursive>
 800b0e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0e8:	f7fe fa43 	bl	8009572 <__retarget_lock_close_recursive>
 800b0ec:	f7fe f8fa 	bl	80092e4 <__sfp_lock_release>
 800b0f0:	e7ad      	b.n	800b04e <_fclose_r+0xa>
	...

0800b0f4 <__sflush_r>:
 800b0f4:	898b      	ldrh	r3, [r1, #12]
 800b0f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fe:	4605      	mov	r5, r0
 800b100:	0718      	lsls	r0, r3, #28
 800b102:	460c      	mov	r4, r1
 800b104:	d45f      	bmi.n	800b1c6 <__sflush_r+0xd2>
 800b106:	684b      	ldr	r3, [r1, #4]
 800b108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	818a      	strh	r2, [r1, #12]
 800b110:	dc05      	bgt.n	800b11e <__sflush_r+0x2a>
 800b112:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800b114:	2b00      	cmp	r3, #0
 800b116:	dc02      	bgt.n	800b11e <__sflush_r+0x2a>
 800b118:	2000      	movs	r0, #0
 800b11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b120:	2e00      	cmp	r6, #0
 800b122:	d0f9      	beq.n	800b118 <__sflush_r+0x24>
 800b124:	2300      	movs	r3, #0
 800b126:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b12a:	682f      	ldr	r7, [r5, #0]
 800b12c:	69e1      	ldr	r1, [r4, #28]
 800b12e:	602b      	str	r3, [r5, #0]
 800b130:	d036      	beq.n	800b1a0 <__sflush_r+0xac>
 800b132:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	075a      	lsls	r2, r3, #29
 800b138:	d505      	bpl.n	800b146 <__sflush_r+0x52>
 800b13a:	6863      	ldr	r3, [r4, #4]
 800b13c:	1ac0      	subs	r0, r0, r3
 800b13e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b140:	b10b      	cbz	r3, 800b146 <__sflush_r+0x52>
 800b142:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b144:	1ac0      	subs	r0, r0, r3
 800b146:	2300      	movs	r3, #0
 800b148:	4602      	mov	r2, r0
 800b14a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b14c:	69e1      	ldr	r1, [r4, #28]
 800b14e:	4628      	mov	r0, r5
 800b150:	47b0      	blx	r6
 800b152:	1c43      	adds	r3, r0, #1
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	d106      	bne.n	800b166 <__sflush_r+0x72>
 800b158:	6829      	ldr	r1, [r5, #0]
 800b15a:	291d      	cmp	r1, #29
 800b15c:	d82f      	bhi.n	800b1be <__sflush_r+0xca>
 800b15e:	4a2b      	ldr	r2, [pc, #172]	; (800b20c <__sflush_r+0x118>)
 800b160:	410a      	asrs	r2, r1
 800b162:	07d6      	lsls	r6, r2, #31
 800b164:	d42b      	bmi.n	800b1be <__sflush_r+0xca>
 800b166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b16a:	b21b      	sxth	r3, r3
 800b16c:	2200      	movs	r2, #0
 800b16e:	6062      	str	r2, [r4, #4]
 800b170:	04d9      	lsls	r1, r3, #19
 800b172:	6922      	ldr	r2, [r4, #16]
 800b174:	81a3      	strh	r3, [r4, #12]
 800b176:	6022      	str	r2, [r4, #0]
 800b178:	d504      	bpl.n	800b184 <__sflush_r+0x90>
 800b17a:	1c42      	adds	r2, r0, #1
 800b17c:	d101      	bne.n	800b182 <__sflush_r+0x8e>
 800b17e:	682b      	ldr	r3, [r5, #0]
 800b180:	b903      	cbnz	r3, 800b184 <__sflush_r+0x90>
 800b182:	6520      	str	r0, [r4, #80]	; 0x50
 800b184:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b186:	602f      	str	r7, [r5, #0]
 800b188:	2900      	cmp	r1, #0
 800b18a:	d0c5      	beq.n	800b118 <__sflush_r+0x24>
 800b18c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b190:	4299      	cmp	r1, r3
 800b192:	d002      	beq.n	800b19a <__sflush_r+0xa6>
 800b194:	4628      	mov	r0, r5
 800b196:	f7fe fa61 	bl	800965c <_free_r>
 800b19a:	2000      	movs	r0, #0
 800b19c:	6320      	str	r0, [r4, #48]	; 0x30
 800b19e:	e7bc      	b.n	800b11a <__sflush_r+0x26>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b0      	blx	r6
 800b1a6:	1c41      	adds	r1, r0, #1
 800b1a8:	d1c4      	bne.n	800b134 <__sflush_r+0x40>
 800b1aa:	682b      	ldr	r3, [r5, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d0c1      	beq.n	800b134 <__sflush_r+0x40>
 800b1b0:	2b1d      	cmp	r3, #29
 800b1b2:	d001      	beq.n	800b1b8 <__sflush_r+0xc4>
 800b1b4:	2b16      	cmp	r3, #22
 800b1b6:	d101      	bne.n	800b1bc <__sflush_r+0xc8>
 800b1b8:	602f      	str	r7, [r5, #0]
 800b1ba:	e7ad      	b.n	800b118 <__sflush_r+0x24>
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	e7a9      	b.n	800b11a <__sflush_r+0x26>
 800b1c6:	690f      	ldr	r7, [r1, #16]
 800b1c8:	2f00      	cmp	r7, #0
 800b1ca:	d0a5      	beq.n	800b118 <__sflush_r+0x24>
 800b1cc:	079b      	lsls	r3, r3, #30
 800b1ce:	680e      	ldr	r6, [r1, #0]
 800b1d0:	bf08      	it	eq
 800b1d2:	694b      	ldreq	r3, [r1, #20]
 800b1d4:	600f      	str	r7, [r1, #0]
 800b1d6:	bf18      	it	ne
 800b1d8:	2300      	movne	r3, #0
 800b1da:	eba6 0807 	sub.w	r8, r6, r7
 800b1de:	608b      	str	r3, [r1, #8]
 800b1e0:	f1b8 0f00 	cmp.w	r8, #0
 800b1e4:	dd98      	ble.n	800b118 <__sflush_r+0x24>
 800b1e6:	69e1      	ldr	r1, [r4, #28]
 800b1e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1ea:	4643      	mov	r3, r8
 800b1ec:	463a      	mov	r2, r7
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b0      	blx	r6
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	dc06      	bgt.n	800b204 <__sflush_r+0x110>
 800b1f6:	89a3      	ldrh	r3, [r4, #12]
 800b1f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1fc:	81a3      	strh	r3, [r4, #12]
 800b1fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b202:	e78a      	b.n	800b11a <__sflush_r+0x26>
 800b204:	4407      	add	r7, r0
 800b206:	eba8 0800 	sub.w	r8, r8, r0
 800b20a:	e7e9      	b.n	800b1e0 <__sflush_r+0xec>
 800b20c:	dfbffffe 	.word	0xdfbffffe

0800b210 <_fflush_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	460c      	mov	r4, r1
 800b214:	4605      	mov	r5, r0
 800b216:	b118      	cbz	r0, 800b220 <_fflush_r+0x10>
 800b218:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b21a:	b90b      	cbnz	r3, 800b220 <_fflush_r+0x10>
 800b21c:	f7fe f868 	bl	80092f0 <__sinit>
 800b220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b224:	b1bb      	cbz	r3, 800b256 <_fflush_r+0x46>
 800b226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b228:	07d0      	lsls	r0, r2, #31
 800b22a:	d404      	bmi.n	800b236 <_fflush_r+0x26>
 800b22c:	0599      	lsls	r1, r3, #22
 800b22e:	d402      	bmi.n	800b236 <_fflush_r+0x26>
 800b230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b232:	f7fe f99f 	bl	8009574 <__retarget_lock_acquire_recursive>
 800b236:	4628      	mov	r0, r5
 800b238:	4621      	mov	r1, r4
 800b23a:	f7ff ff5b 	bl	800b0f4 <__sflush_r>
 800b23e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b240:	07da      	lsls	r2, r3, #31
 800b242:	4605      	mov	r5, r0
 800b244:	d405      	bmi.n	800b252 <_fflush_r+0x42>
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	059b      	lsls	r3, r3, #22
 800b24a:	d402      	bmi.n	800b252 <_fflush_r+0x42>
 800b24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b24e:	f7fe f992 	bl	8009576 <__retarget_lock_release_recursive>
 800b252:	4628      	mov	r0, r5
 800b254:	bd38      	pop	{r3, r4, r5, pc}
 800b256:	461d      	mov	r5, r3
 800b258:	e7fb      	b.n	800b252 <_fflush_r+0x42>

0800b25a <strncpy>:
 800b25a:	b510      	push	{r4, lr}
 800b25c:	3901      	subs	r1, #1
 800b25e:	4603      	mov	r3, r0
 800b260:	b132      	cbz	r2, 800b270 <strncpy+0x16>
 800b262:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b266:	f803 4b01 	strb.w	r4, [r3], #1
 800b26a:	3a01      	subs	r2, #1
 800b26c:	2c00      	cmp	r4, #0
 800b26e:	d1f7      	bne.n	800b260 <strncpy+0x6>
 800b270:	441a      	add	r2, r3
 800b272:	2100      	movs	r1, #0
 800b274:	4293      	cmp	r3, r2
 800b276:	d100      	bne.n	800b27a <strncpy+0x20>
 800b278:	bd10      	pop	{r4, pc}
 800b27a:	f803 1b01 	strb.w	r1, [r3], #1
 800b27e:	e7f9      	b.n	800b274 <strncpy+0x1a>

0800b280 <_localeconv_r>:
 800b280:	4800      	ldr	r0, [pc, #0]	; (800b284 <_localeconv_r+0x4>)
 800b282:	4770      	bx	lr
 800b284:	20000670 	.word	0x20000670

0800b288 <_sbrk_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4d06      	ldr	r5, [pc, #24]	; (800b2a4 <_sbrk_r+0x1c>)
 800b28c:	2300      	movs	r3, #0
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	602b      	str	r3, [r5, #0]
 800b294:	f7f7 f96a 	bl	800256c <_sbrk>
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	d102      	bne.n	800b2a2 <_sbrk_r+0x1a>
 800b29c:	682b      	ldr	r3, [r5, #0]
 800b29e:	b103      	cbz	r3, 800b2a2 <_sbrk_r+0x1a>
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	bd38      	pop	{r3, r4, r5, pc}
 800b2a4:	200042b8 	.word	0x200042b8

0800b2a8 <__libc_fini_array>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	4d07      	ldr	r5, [pc, #28]	; (800b2c8 <__libc_fini_array+0x20>)
 800b2ac:	4c07      	ldr	r4, [pc, #28]	; (800b2cc <__libc_fini_array+0x24>)
 800b2ae:	1b64      	subs	r4, r4, r5
 800b2b0:	10a4      	asrs	r4, r4, #2
 800b2b2:	b91c      	cbnz	r4, 800b2bc <__libc_fini_array+0x14>
 800b2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2b8:	f002 bd2e 	b.w	800dd18 <_fini>
 800b2bc:	3c01      	subs	r4, #1
 800b2be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b2c2:	4798      	blx	r3
 800b2c4:	e7f5      	b.n	800b2b2 <__libc_fini_array+0xa>
 800b2c6:	bf00      	nop
 800b2c8:	0800e7c4 	.word	0x0800e7c4
 800b2cc:	0800e7c8 	.word	0x0800e7c8

0800b2d0 <sysconf>:
 800b2d0:	2808      	cmp	r0, #8
 800b2d2:	b508      	push	{r3, lr}
 800b2d4:	d006      	beq.n	800b2e4 <sysconf+0x14>
 800b2d6:	f7fe f921 	bl	800951c <__errno>
 800b2da:	2316      	movs	r3, #22
 800b2dc:	6003      	str	r3, [r0, #0]
 800b2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2e2:	bd08      	pop	{r3, pc}
 800b2e4:	2080      	movs	r0, #128	; 0x80
 800b2e6:	e7fc      	b.n	800b2e2 <sysconf+0x12>

0800b2e8 <frexp>:
 800b2e8:	b570      	push	{r4, r5, r6, lr}
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	ec55 4b10 	vmov	r4, r5, d0
 800b2f0:	6001      	str	r1, [r0, #0]
 800b2f2:	4916      	ldr	r1, [pc, #88]	; (800b34c <frexp+0x64>)
 800b2f4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b2f8:	428a      	cmp	r2, r1
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	462b      	mov	r3, r5
 800b2fe:	dc22      	bgt.n	800b346 <frexp+0x5e>
 800b300:	ee10 1a10 	vmov	r1, s0
 800b304:	4311      	orrs	r1, r2
 800b306:	d01e      	beq.n	800b346 <frexp+0x5e>
 800b308:	4911      	ldr	r1, [pc, #68]	; (800b350 <frexp+0x68>)
 800b30a:	4029      	ands	r1, r5
 800b30c:	b969      	cbnz	r1, 800b32a <frexp+0x42>
 800b30e:	4b11      	ldr	r3, [pc, #68]	; (800b354 <frexp+0x6c>)
 800b310:	2200      	movs	r2, #0
 800b312:	ee10 0a10 	vmov	r0, s0
 800b316:	4629      	mov	r1, r5
 800b318:	f7f5 f96e 	bl	80005f8 <__aeabi_dmul>
 800b31c:	460b      	mov	r3, r1
 800b31e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b322:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b326:	4604      	mov	r4, r0
 800b328:	6031      	str	r1, [r6, #0]
 800b32a:	6831      	ldr	r1, [r6, #0]
 800b32c:	1512      	asrs	r2, r2, #20
 800b32e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b332:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800b336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b33a:	4411      	add	r1, r2
 800b33c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800b340:	6031      	str	r1, [r6, #0]
 800b342:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b346:	ec45 4b10 	vmov	d0, r4, r5
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	7fefffff 	.word	0x7fefffff
 800b350:	7ff00000 	.word	0x7ff00000
 800b354:	43500000 	.word	0x43500000

0800b358 <__register_exitproc>:
 800b358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b35c:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b3d4 <__register_exitproc+0x7c>
 800b360:	4606      	mov	r6, r0
 800b362:	f8da 0000 	ldr.w	r0, [sl]
 800b366:	4698      	mov	r8, r3
 800b368:	460f      	mov	r7, r1
 800b36a:	4691      	mov	r9, r2
 800b36c:	f7fe f902 	bl	8009574 <__retarget_lock_acquire_recursive>
 800b370:	4b16      	ldr	r3, [pc, #88]	; (800b3cc <__register_exitproc+0x74>)
 800b372:	681c      	ldr	r4, [r3, #0]
 800b374:	b90c      	cbnz	r4, 800b37a <__register_exitproc+0x22>
 800b376:	4c16      	ldr	r4, [pc, #88]	; (800b3d0 <__register_exitproc+0x78>)
 800b378:	601c      	str	r4, [r3, #0]
 800b37a:	6865      	ldr	r5, [r4, #4]
 800b37c:	f8da 0000 	ldr.w	r0, [sl]
 800b380:	2d1f      	cmp	r5, #31
 800b382:	dd05      	ble.n	800b390 <__register_exitproc+0x38>
 800b384:	f7fe f8f7 	bl	8009576 <__retarget_lock_release_recursive>
 800b388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b390:	b19e      	cbz	r6, 800b3ba <__register_exitproc+0x62>
 800b392:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800b396:	2201      	movs	r2, #1
 800b398:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800b39c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800b3a0:	40aa      	lsls	r2, r5
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800b3a8:	2e02      	cmp	r6, #2
 800b3aa:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800b3ae:	bf02      	ittt	eq
 800b3b0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800b3b4:	4313      	orreq	r3, r2
 800b3b6:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800b3ba:	1c6b      	adds	r3, r5, #1
 800b3bc:	3502      	adds	r5, #2
 800b3be:	6063      	str	r3, [r4, #4]
 800b3c0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800b3c4:	f7fe f8d7 	bl	8009576 <__retarget_lock_release_recursive>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	e7df      	b.n	800b38c <__register_exitproc+0x34>
 800b3cc:	200042c0 	.word	0x200042c0
 800b3d0:	200042f8 	.word	0x200042f8
 800b3d4:	2000016c 	.word	0x2000016c

0800b3d8 <quorem>:
 800b3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	6903      	ldr	r3, [r0, #16]
 800b3de:	690c      	ldr	r4, [r1, #16]
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	db7e      	blt.n	800b4e4 <quorem+0x10c>
 800b3e6:	3c01      	subs	r4, #1
 800b3e8:	f101 0814 	add.w	r8, r1, #20
 800b3ec:	f100 0514 	add.w	r5, r0, #20
 800b3f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3fe:	3301      	adds	r3, #1
 800b400:	429a      	cmp	r2, r3
 800b402:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b406:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b40a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b40e:	d331      	bcc.n	800b474 <quorem+0x9c>
 800b410:	f04f 0e00 	mov.w	lr, #0
 800b414:	4640      	mov	r0, r8
 800b416:	46ac      	mov	ip, r5
 800b418:	46f2      	mov	sl, lr
 800b41a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b41e:	b293      	uxth	r3, r2
 800b420:	fb06 e303 	mla	r3, r6, r3, lr
 800b424:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b428:	0c1a      	lsrs	r2, r3, #16
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	ebaa 0303 	sub.w	r3, sl, r3
 800b430:	f8dc a000 	ldr.w	sl, [ip]
 800b434:	fa13 f38a 	uxtah	r3, r3, sl
 800b438:	fb06 220e 	mla	r2, r6, lr, r2
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	9b00      	ldr	r3, [sp, #0]
 800b440:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b444:	b292      	uxth	r2, r2
 800b446:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b44a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b44e:	f8bd 3000 	ldrh.w	r3, [sp]
 800b452:	4581      	cmp	r9, r0
 800b454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b458:	f84c 3b04 	str.w	r3, [ip], #4
 800b45c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b460:	d2db      	bcs.n	800b41a <quorem+0x42>
 800b462:	f855 300b 	ldr.w	r3, [r5, fp]
 800b466:	b92b      	cbnz	r3, 800b474 <quorem+0x9c>
 800b468:	9b01      	ldr	r3, [sp, #4]
 800b46a:	3b04      	subs	r3, #4
 800b46c:	429d      	cmp	r5, r3
 800b46e:	461a      	mov	r2, r3
 800b470:	d32c      	bcc.n	800b4cc <quorem+0xf4>
 800b472:	613c      	str	r4, [r7, #16]
 800b474:	4638      	mov	r0, r7
 800b476:	f001 f83b 	bl	800c4f0 <__mcmp>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	db22      	blt.n	800b4c4 <quorem+0xec>
 800b47e:	3601      	adds	r6, #1
 800b480:	4629      	mov	r1, r5
 800b482:	2000      	movs	r0, #0
 800b484:	f858 2b04 	ldr.w	r2, [r8], #4
 800b488:	f8d1 c000 	ldr.w	ip, [r1]
 800b48c:	b293      	uxth	r3, r2
 800b48e:	1ac3      	subs	r3, r0, r3
 800b490:	0c12      	lsrs	r2, r2, #16
 800b492:	fa13 f38c 	uxtah	r3, r3, ip
 800b496:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b49a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4a4:	45c1      	cmp	r9, r8
 800b4a6:	f841 3b04 	str.w	r3, [r1], #4
 800b4aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b4ae:	d2e9      	bcs.n	800b484 <quorem+0xac>
 800b4b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4b8:	b922      	cbnz	r2, 800b4c4 <quorem+0xec>
 800b4ba:	3b04      	subs	r3, #4
 800b4bc:	429d      	cmp	r5, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	d30a      	bcc.n	800b4d8 <quorem+0x100>
 800b4c2:	613c      	str	r4, [r7, #16]
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	b003      	add	sp, #12
 800b4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4cc:	6812      	ldr	r2, [r2, #0]
 800b4ce:	3b04      	subs	r3, #4
 800b4d0:	2a00      	cmp	r2, #0
 800b4d2:	d1ce      	bne.n	800b472 <quorem+0x9a>
 800b4d4:	3c01      	subs	r4, #1
 800b4d6:	e7c9      	b.n	800b46c <quorem+0x94>
 800b4d8:	6812      	ldr	r2, [r2, #0]
 800b4da:	3b04      	subs	r3, #4
 800b4dc:	2a00      	cmp	r2, #0
 800b4de:	d1f0      	bne.n	800b4c2 <quorem+0xea>
 800b4e0:	3c01      	subs	r4, #1
 800b4e2:	e7eb      	b.n	800b4bc <quorem+0xe4>
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	e7ee      	b.n	800b4c6 <quorem+0xee>

0800b4e8 <_dtoa_r>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	ed2d 8b04 	vpush	{d8-d9}
 800b4f0:	b093      	sub	sp, #76	; 0x4c
 800b4f2:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b4f6:	9107      	str	r1, [sp, #28]
 800b4f8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b4fa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b4fc:	920a      	str	r2, [sp, #40]	; 0x28
 800b4fe:	ec57 6b10 	vmov	r6, r7, d0
 800b502:	4604      	mov	r4, r0
 800b504:	930d      	str	r3, [sp, #52]	; 0x34
 800b506:	b141      	cbz	r1, 800b51a <_dtoa_r+0x32>
 800b508:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b50a:	604a      	str	r2, [r1, #4]
 800b50c:	2301      	movs	r3, #1
 800b50e:	4093      	lsls	r3, r2
 800b510:	608b      	str	r3, [r1, #8]
 800b512:	f000 fde4 	bl	800c0de <_Bfree>
 800b516:	2300      	movs	r3, #0
 800b518:	63a3      	str	r3, [r4, #56]	; 0x38
 800b51a:	1e3b      	subs	r3, r7, #0
 800b51c:	bfb9      	ittee	lt
 800b51e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b522:	9303      	strlt	r3, [sp, #12]
 800b524:	2300      	movge	r3, #0
 800b526:	602b      	strge	r3, [r5, #0]
 800b528:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b52c:	4ba2      	ldr	r3, [pc, #648]	; (800b7b8 <_dtoa_r+0x2d0>)
 800b52e:	bfbc      	itt	lt
 800b530:	2201      	movlt	r2, #1
 800b532:	602a      	strlt	r2, [r5, #0]
 800b534:	ea33 0308 	bics.w	r3, r3, r8
 800b538:	d11b      	bne.n	800b572 <_dtoa_r+0x8a>
 800b53a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b53c:	f242 730f 	movw	r3, #9999	; 0x270f
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b546:	4333      	orrs	r3, r6
 800b548:	f000 858f 	beq.w	800c06a <_dtoa_r+0xb82>
 800b54c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b54e:	b90b      	cbnz	r3, 800b554 <_dtoa_r+0x6c>
 800b550:	4b9a      	ldr	r3, [pc, #616]	; (800b7bc <_dtoa_r+0x2d4>)
 800b552:	e027      	b.n	800b5a4 <_dtoa_r+0xbc>
 800b554:	4b99      	ldr	r3, [pc, #612]	; (800b7bc <_dtoa_r+0x2d4>)
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	3303      	adds	r3, #3
 800b55a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	9800      	ldr	r0, [sp, #0]
 800b560:	b013      	add	sp, #76	; 0x4c
 800b562:	ecbd 8b04 	vpop	{d8-d9}
 800b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56a:	4b95      	ldr	r3, [pc, #596]	; (800b7c0 <_dtoa_r+0x2d8>)
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	3308      	adds	r3, #8
 800b570:	e7f3      	b.n	800b55a <_dtoa_r+0x72>
 800b572:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b576:	2200      	movs	r2, #0
 800b578:	ec51 0b17 	vmov	r0, r1, d7
 800b57c:	eeb0 8a47 	vmov.f32	s16, s14
 800b580:	eef0 8a67 	vmov.f32	s17, s15
 800b584:	2300      	movs	r3, #0
 800b586:	f7f5 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b58a:	4681      	mov	r9, r0
 800b58c:	b160      	cbz	r0, 800b5a8 <_dtoa_r+0xc0>
 800b58e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b590:	2301      	movs	r3, #1
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 8564 	beq.w	800c064 <_dtoa_r+0xb7c>
 800b59c:	4b89      	ldr	r3, [pc, #548]	; (800b7c4 <_dtoa_r+0x2dc>)
 800b59e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	e7da      	b.n	800b55e <_dtoa_r+0x76>
 800b5a8:	aa10      	add	r2, sp, #64	; 0x40
 800b5aa:	a911      	add	r1, sp, #68	; 0x44
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	eeb0 0a48 	vmov.f32	s0, s16
 800b5b2:	eef0 0a68 	vmov.f32	s1, s17
 800b5b6:	f001 f841 	bl	800c63c <__d2b>
 800b5ba:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b5be:	4682      	mov	sl, r0
 800b5c0:	2d00      	cmp	r5, #0
 800b5c2:	d07e      	beq.n	800b6c2 <_dtoa_r+0x1da>
 800b5c4:	ee18 3a90 	vmov	r3, s17
 800b5c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5cc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b5d0:	ec51 0b18 	vmov	r0, r1, d8
 800b5d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b5d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5dc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4b78      	ldr	r3, [pc, #480]	; (800b7c8 <_dtoa_r+0x2e0>)
 800b5e6:	f7f4 fe4f 	bl	8000288 <__aeabi_dsub>
 800b5ea:	a36d      	add	r3, pc, #436	; (adr r3, 800b7a0 <_dtoa_r+0x2b8>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f7f5 f802 	bl	80005f8 <__aeabi_dmul>
 800b5f4:	a36c      	add	r3, pc, #432	; (adr r3, 800b7a8 <_dtoa_r+0x2c0>)
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	f7f4 fe47 	bl	800028c <__adddf3>
 800b5fe:	4606      	mov	r6, r0
 800b600:	4628      	mov	r0, r5
 800b602:	460f      	mov	r7, r1
 800b604:	f7f4 ff8e 	bl	8000524 <__aeabi_i2d>
 800b608:	a369      	add	r3, pc, #420	; (adr r3, 800b7b0 <_dtoa_r+0x2c8>)
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	f7f4 fff3 	bl	80005f8 <__aeabi_dmul>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4630      	mov	r0, r6
 800b618:	4639      	mov	r1, r7
 800b61a:	f7f4 fe37 	bl	800028c <__adddf3>
 800b61e:	4606      	mov	r6, r0
 800b620:	460f      	mov	r7, r1
 800b622:	f7f5 fa99 	bl	8000b58 <__aeabi_d2iz>
 800b626:	2200      	movs	r2, #0
 800b628:	4683      	mov	fp, r0
 800b62a:	2300      	movs	r3, #0
 800b62c:	4630      	mov	r0, r6
 800b62e:	4639      	mov	r1, r7
 800b630:	f7f5 fa54 	bl	8000adc <__aeabi_dcmplt>
 800b634:	b148      	cbz	r0, 800b64a <_dtoa_r+0x162>
 800b636:	4658      	mov	r0, fp
 800b638:	f7f4 ff74 	bl	8000524 <__aeabi_i2d>
 800b63c:	4632      	mov	r2, r6
 800b63e:	463b      	mov	r3, r7
 800b640:	f7f5 fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 800b644:	b908      	cbnz	r0, 800b64a <_dtoa_r+0x162>
 800b646:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b64a:	f1bb 0f16 	cmp.w	fp, #22
 800b64e:	d856      	bhi.n	800b6fe <_dtoa_r+0x216>
 800b650:	4b5e      	ldr	r3, [pc, #376]	; (800b7cc <_dtoa_r+0x2e4>)
 800b652:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	ec51 0b18 	vmov	r0, r1, d8
 800b65e:	f7f5 fa3d 	bl	8000adc <__aeabi_dcmplt>
 800b662:	2800      	cmp	r0, #0
 800b664:	d04d      	beq.n	800b702 <_dtoa_r+0x21a>
 800b666:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b66a:	2300      	movs	r3, #0
 800b66c:	930c      	str	r3, [sp, #48]	; 0x30
 800b66e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b670:	1b5b      	subs	r3, r3, r5
 800b672:	1e5a      	subs	r2, r3, #1
 800b674:	bf45      	ittet	mi
 800b676:	f1c3 0301 	rsbmi	r3, r3, #1
 800b67a:	9305      	strmi	r3, [sp, #20]
 800b67c:	2300      	movpl	r3, #0
 800b67e:	2300      	movmi	r3, #0
 800b680:	9206      	str	r2, [sp, #24]
 800b682:	bf54      	ite	pl
 800b684:	9305      	strpl	r3, [sp, #20]
 800b686:	9306      	strmi	r3, [sp, #24]
 800b688:	f1bb 0f00 	cmp.w	fp, #0
 800b68c:	db3b      	blt.n	800b706 <_dtoa_r+0x21e>
 800b68e:	9b06      	ldr	r3, [sp, #24]
 800b690:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b694:	445b      	add	r3, fp
 800b696:	9306      	str	r3, [sp, #24]
 800b698:	2300      	movs	r3, #0
 800b69a:	9308      	str	r3, [sp, #32]
 800b69c:	9b07      	ldr	r3, [sp, #28]
 800b69e:	2b09      	cmp	r3, #9
 800b6a0:	d868      	bhi.n	800b774 <_dtoa_r+0x28c>
 800b6a2:	2b05      	cmp	r3, #5
 800b6a4:	bfc4      	itt	gt
 800b6a6:	3b04      	subgt	r3, #4
 800b6a8:	9307      	strgt	r3, [sp, #28]
 800b6aa:	9b07      	ldr	r3, [sp, #28]
 800b6ac:	f1a3 0302 	sub.w	r3, r3, #2
 800b6b0:	bfcc      	ite	gt
 800b6b2:	2500      	movgt	r5, #0
 800b6b4:	2501      	movle	r5, #1
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d867      	bhi.n	800b78a <_dtoa_r+0x2a2>
 800b6ba:	e8df f003 	tbb	[pc, r3]
 800b6be:	3b2e      	.short	0x3b2e
 800b6c0:	5939      	.short	0x5939
 800b6c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b6c6:	441d      	add	r5, r3
 800b6c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b6cc:	2b20      	cmp	r3, #32
 800b6ce:	bfc1      	itttt	gt
 800b6d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6d4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b6d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b6dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b6e0:	bfd6      	itet	le
 800b6e2:	f1c3 0320 	rsble	r3, r3, #32
 800b6e6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b6ea:	fa06 f003 	lslle.w	r0, r6, r3
 800b6ee:	f7f4 ff09 	bl	8000504 <__aeabi_ui2d>
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b6f8:	3d01      	subs	r5, #1
 800b6fa:	920e      	str	r2, [sp, #56]	; 0x38
 800b6fc:	e770      	b.n	800b5e0 <_dtoa_r+0xf8>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e7b4      	b.n	800b66c <_dtoa_r+0x184>
 800b702:	900c      	str	r0, [sp, #48]	; 0x30
 800b704:	e7b3      	b.n	800b66e <_dtoa_r+0x186>
 800b706:	9b05      	ldr	r3, [sp, #20]
 800b708:	eba3 030b 	sub.w	r3, r3, fp
 800b70c:	9305      	str	r3, [sp, #20]
 800b70e:	f1cb 0300 	rsb	r3, fp, #0
 800b712:	9308      	str	r3, [sp, #32]
 800b714:	2300      	movs	r3, #0
 800b716:	930b      	str	r3, [sp, #44]	; 0x2c
 800b718:	e7c0      	b.n	800b69c <_dtoa_r+0x1b4>
 800b71a:	2300      	movs	r3, #0
 800b71c:	9309      	str	r3, [sp, #36]	; 0x24
 800b71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b720:	2b00      	cmp	r3, #0
 800b722:	dc35      	bgt.n	800b790 <_dtoa_r+0x2a8>
 800b724:	2301      	movs	r3, #1
 800b726:	9301      	str	r3, [sp, #4]
 800b728:	9304      	str	r3, [sp, #16]
 800b72a:	461a      	mov	r2, r3
 800b72c:	920a      	str	r2, [sp, #40]	; 0x28
 800b72e:	e00b      	b.n	800b748 <_dtoa_r+0x260>
 800b730:	2301      	movs	r3, #1
 800b732:	e7f3      	b.n	800b71c <_dtoa_r+0x234>
 800b734:	2300      	movs	r3, #0
 800b736:	9309      	str	r3, [sp, #36]	; 0x24
 800b738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b73a:	445b      	add	r3, fp
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	3301      	adds	r3, #1
 800b740:	2b01      	cmp	r3, #1
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	bfb8      	it	lt
 800b746:	2301      	movlt	r3, #1
 800b748:	2100      	movs	r1, #0
 800b74a:	2204      	movs	r2, #4
 800b74c:	f102 0014 	add.w	r0, r2, #20
 800b750:	4298      	cmp	r0, r3
 800b752:	d921      	bls.n	800b798 <_dtoa_r+0x2b0>
 800b754:	63e1      	str	r1, [r4, #60]	; 0x3c
 800b756:	4620      	mov	r0, r4
 800b758:	f000 fc9c 	bl	800c094 <_Balloc>
 800b75c:	9000      	str	r0, [sp, #0]
 800b75e:	2800      	cmp	r0, #0
 800b760:	d13a      	bne.n	800b7d8 <_dtoa_r+0x2f0>
 800b762:	4b1b      	ldr	r3, [pc, #108]	; (800b7d0 <_dtoa_r+0x2e8>)
 800b764:	4602      	mov	r2, r0
 800b766:	f240 11af 	movw	r1, #431	; 0x1af
 800b76a:	481a      	ldr	r0, [pc, #104]	; (800b7d4 <_dtoa_r+0x2ec>)
 800b76c:	f001 f85e 	bl	800c82c <__assert_func>
 800b770:	2301      	movs	r3, #1
 800b772:	e7e0      	b.n	800b736 <_dtoa_r+0x24e>
 800b774:	2501      	movs	r5, #1
 800b776:	2300      	movs	r3, #0
 800b778:	9307      	str	r3, [sp, #28]
 800b77a:	9509      	str	r5, [sp, #36]	; 0x24
 800b77c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	9304      	str	r3, [sp, #16]
 800b784:	2200      	movs	r2, #0
 800b786:	2312      	movs	r3, #18
 800b788:	e7d0      	b.n	800b72c <_dtoa_r+0x244>
 800b78a:	2301      	movs	r3, #1
 800b78c:	9309      	str	r3, [sp, #36]	; 0x24
 800b78e:	e7f5      	b.n	800b77c <_dtoa_r+0x294>
 800b790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b792:	9301      	str	r3, [sp, #4]
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	e7d7      	b.n	800b748 <_dtoa_r+0x260>
 800b798:	3101      	adds	r1, #1
 800b79a:	0052      	lsls	r2, r2, #1
 800b79c:	e7d6      	b.n	800b74c <_dtoa_r+0x264>
 800b79e:	bf00      	nop
 800b7a0:	636f4361 	.word	0x636f4361
 800b7a4:	3fd287a7 	.word	0x3fd287a7
 800b7a8:	8b60c8b3 	.word	0x8b60c8b3
 800b7ac:	3fc68a28 	.word	0x3fc68a28
 800b7b0:	509f79fb 	.word	0x509f79fb
 800b7b4:	3fd34413 	.word	0x3fd34413
 800b7b8:	7ff00000 	.word	0x7ff00000
 800b7bc:	0800e489 	.word	0x0800e489
 800b7c0:	0800e480 	.word	0x0800e480
 800b7c4:	0800e45f 	.word	0x0800e45f
 800b7c8:	3ff80000 	.word	0x3ff80000
 800b7cc:	0800e578 	.word	0x0800e578
 800b7d0:	0800e48d 	.word	0x0800e48d
 800b7d4:	0800e49e 	.word	0x0800e49e
 800b7d8:	9b00      	ldr	r3, [sp, #0]
 800b7da:	63a3      	str	r3, [r4, #56]	; 0x38
 800b7dc:	9b04      	ldr	r3, [sp, #16]
 800b7de:	2b0e      	cmp	r3, #14
 800b7e0:	f200 80a8 	bhi.w	800b934 <_dtoa_r+0x44c>
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	f000 80a5 	beq.w	800b934 <_dtoa_r+0x44c>
 800b7ea:	f1bb 0f00 	cmp.w	fp, #0
 800b7ee:	dd38      	ble.n	800b862 <_dtoa_r+0x37a>
 800b7f0:	4bbf      	ldr	r3, [pc, #764]	; (800baf0 <_dtoa_r+0x608>)
 800b7f2:	f00b 020f 	and.w	r2, fp, #15
 800b7f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b7fe:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b802:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b806:	d019      	beq.n	800b83c <_dtoa_r+0x354>
 800b808:	4bba      	ldr	r3, [pc, #744]	; (800baf4 <_dtoa_r+0x60c>)
 800b80a:	ec51 0b18 	vmov	r0, r1, d8
 800b80e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b812:	f7f5 f81b 	bl	800084c <__aeabi_ddiv>
 800b816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b81a:	f008 080f 	and.w	r8, r8, #15
 800b81e:	2503      	movs	r5, #3
 800b820:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800baf4 <_dtoa_r+0x60c>
 800b824:	f1b8 0f00 	cmp.w	r8, #0
 800b828:	d10a      	bne.n	800b840 <_dtoa_r+0x358>
 800b82a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b82e:	4632      	mov	r2, r6
 800b830:	463b      	mov	r3, r7
 800b832:	f7f5 f80b 	bl	800084c <__aeabi_ddiv>
 800b836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b83a:	e02b      	b.n	800b894 <_dtoa_r+0x3ac>
 800b83c:	2502      	movs	r5, #2
 800b83e:	e7ef      	b.n	800b820 <_dtoa_r+0x338>
 800b840:	f018 0f01 	tst.w	r8, #1
 800b844:	d008      	beq.n	800b858 <_dtoa_r+0x370>
 800b846:	4630      	mov	r0, r6
 800b848:	4639      	mov	r1, r7
 800b84a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b84e:	f7f4 fed3 	bl	80005f8 <__aeabi_dmul>
 800b852:	3501      	adds	r5, #1
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b85c:	f109 0908 	add.w	r9, r9, #8
 800b860:	e7e0      	b.n	800b824 <_dtoa_r+0x33c>
 800b862:	f000 809f 	beq.w	800b9a4 <_dtoa_r+0x4bc>
 800b866:	f1cb 0600 	rsb	r6, fp, #0
 800b86a:	4ba1      	ldr	r3, [pc, #644]	; (800baf0 <_dtoa_r+0x608>)
 800b86c:	4fa1      	ldr	r7, [pc, #644]	; (800baf4 <_dtoa_r+0x60c>)
 800b86e:	f006 020f 	and.w	r2, r6, #15
 800b872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	ec51 0b18 	vmov	r0, r1, d8
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b886:	1136      	asrs	r6, r6, #4
 800b888:	2300      	movs	r3, #0
 800b88a:	2502      	movs	r5, #2
 800b88c:	2e00      	cmp	r6, #0
 800b88e:	d17e      	bne.n	800b98e <_dtoa_r+0x4a6>
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1d0      	bne.n	800b836 <_dtoa_r+0x34e>
 800b894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b896:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 8084 	beq.w	800b9a8 <_dtoa_r+0x4c0>
 800b8a0:	4b95      	ldr	r3, [pc, #596]	; (800baf8 <_dtoa_r+0x610>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	f7f5 f918 	bl	8000adc <__aeabi_dcmplt>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d07b      	beq.n	800b9a8 <_dtoa_r+0x4c0>
 800b8b0:	9b04      	ldr	r3, [sp, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d078      	beq.n	800b9a8 <_dtoa_r+0x4c0>
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dd39      	ble.n	800b930 <_dtoa_r+0x448>
 800b8bc:	4b8f      	ldr	r3, [pc, #572]	; (800bafc <_dtoa_r+0x614>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	4649      	mov	r1, r9
 800b8c4:	f7f4 fe98 	bl	80005f8 <__aeabi_dmul>
 800b8c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8cc:	9e01      	ldr	r6, [sp, #4]
 800b8ce:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800b8d2:	3501      	adds	r5, #1
 800b8d4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b8d8:	4628      	mov	r0, r5
 800b8da:	f7f4 fe23 	bl	8000524 <__aeabi_i2d>
 800b8de:	4642      	mov	r2, r8
 800b8e0:	464b      	mov	r3, r9
 800b8e2:	f7f4 fe89 	bl	80005f8 <__aeabi_dmul>
 800b8e6:	4b86      	ldr	r3, [pc, #536]	; (800bb00 <_dtoa_r+0x618>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f7f4 fccf 	bl	800028c <__adddf3>
 800b8ee:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b8f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8f6:	9303      	str	r3, [sp, #12]
 800b8f8:	2e00      	cmp	r6, #0
 800b8fa:	d158      	bne.n	800b9ae <_dtoa_r+0x4c6>
 800b8fc:	4b81      	ldr	r3, [pc, #516]	; (800bb04 <_dtoa_r+0x61c>)
 800b8fe:	2200      	movs	r2, #0
 800b900:	4640      	mov	r0, r8
 800b902:	4649      	mov	r1, r9
 800b904:	f7f4 fcc0 	bl	8000288 <__aeabi_dsub>
 800b908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b90c:	4680      	mov	r8, r0
 800b90e:	4689      	mov	r9, r1
 800b910:	f7f5 f902 	bl	8000b18 <__aeabi_dcmpgt>
 800b914:	2800      	cmp	r0, #0
 800b916:	f040 8295 	bne.w	800be44 <_dtoa_r+0x95c>
 800b91a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b91e:	4640      	mov	r0, r8
 800b920:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b924:	4649      	mov	r1, r9
 800b926:	f7f5 f8d9 	bl	8000adc <__aeabi_dcmplt>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	f040 8288 	bne.w	800be40 <_dtoa_r+0x958>
 800b930:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b934:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b936:	2b00      	cmp	r3, #0
 800b938:	f2c0 814d 	blt.w	800bbd6 <_dtoa_r+0x6ee>
 800b93c:	f1bb 0f0e 	cmp.w	fp, #14
 800b940:	f300 8149 	bgt.w	800bbd6 <_dtoa_r+0x6ee>
 800b944:	4b6a      	ldr	r3, [pc, #424]	; (800baf0 <_dtoa_r+0x608>)
 800b946:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b94a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b950:	2b00      	cmp	r3, #0
 800b952:	f280 80db 	bge.w	800bb0c <_dtoa_r+0x624>
 800b956:	9b04      	ldr	r3, [sp, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f300 80d7 	bgt.w	800bb0c <_dtoa_r+0x624>
 800b95e:	f040 826e 	bne.w	800be3e <_dtoa_r+0x956>
 800b962:	4b68      	ldr	r3, [pc, #416]	; (800bb04 <_dtoa_r+0x61c>)
 800b964:	2200      	movs	r2, #0
 800b966:	4640      	mov	r0, r8
 800b968:	4649      	mov	r1, r9
 800b96a:	f7f4 fe45 	bl	80005f8 <__aeabi_dmul>
 800b96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b972:	f7f5 f8c7 	bl	8000b04 <__aeabi_dcmpge>
 800b976:	9e04      	ldr	r6, [sp, #16]
 800b978:	4637      	mov	r7, r6
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f040 8244 	bne.w	800be08 <_dtoa_r+0x920>
 800b980:	9d00      	ldr	r5, [sp, #0]
 800b982:	2331      	movs	r3, #49	; 0x31
 800b984:	f805 3b01 	strb.w	r3, [r5], #1
 800b988:	f10b 0b01 	add.w	fp, fp, #1
 800b98c:	e240      	b.n	800be10 <_dtoa_r+0x928>
 800b98e:	07f2      	lsls	r2, r6, #31
 800b990:	d505      	bpl.n	800b99e <_dtoa_r+0x4b6>
 800b992:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b996:	f7f4 fe2f 	bl	80005f8 <__aeabi_dmul>
 800b99a:	3501      	adds	r5, #1
 800b99c:	2301      	movs	r3, #1
 800b99e:	1076      	asrs	r6, r6, #1
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	e773      	b.n	800b88c <_dtoa_r+0x3a4>
 800b9a4:	2502      	movs	r5, #2
 800b9a6:	e775      	b.n	800b894 <_dtoa_r+0x3ac>
 800b9a8:	9e04      	ldr	r6, [sp, #16]
 800b9aa:	465f      	mov	r7, fp
 800b9ac:	e792      	b.n	800b8d4 <_dtoa_r+0x3ec>
 800b9ae:	9900      	ldr	r1, [sp, #0]
 800b9b0:	4b4f      	ldr	r3, [pc, #316]	; (800baf0 <_dtoa_r+0x608>)
 800b9b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9b6:	4431      	add	r1, r6
 800b9b8:	9102      	str	r1, [sp, #8]
 800b9ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9bc:	eeb0 9a47 	vmov.f32	s18, s14
 800b9c0:	eef0 9a67 	vmov.f32	s19, s15
 800b9c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	d044      	beq.n	800ba5a <_dtoa_r+0x572>
 800b9d0:	494d      	ldr	r1, [pc, #308]	; (800bb08 <_dtoa_r+0x620>)
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	f7f4 ff3a 	bl	800084c <__aeabi_ddiv>
 800b9d8:	ec53 2b19 	vmov	r2, r3, d9
 800b9dc:	f7f4 fc54 	bl	8000288 <__aeabi_dsub>
 800b9e0:	9d00      	ldr	r5, [sp, #0]
 800b9e2:	ec41 0b19 	vmov	d9, r0, r1
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	4640      	mov	r0, r8
 800b9ea:	f7f5 f8b5 	bl	8000b58 <__aeabi_d2iz>
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	f7f4 fd98 	bl	8000524 <__aeabi_i2d>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4640      	mov	r0, r8
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	f7f4 fc44 	bl	8000288 <__aeabi_dsub>
 800ba00:	3630      	adds	r6, #48	; 0x30
 800ba02:	f805 6b01 	strb.w	r6, [r5], #1
 800ba06:	ec53 2b19 	vmov	r2, r3, d9
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	4689      	mov	r9, r1
 800ba0e:	f7f5 f865 	bl	8000adc <__aeabi_dcmplt>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d164      	bne.n	800bae0 <_dtoa_r+0x5f8>
 800ba16:	4642      	mov	r2, r8
 800ba18:	464b      	mov	r3, r9
 800ba1a:	4937      	ldr	r1, [pc, #220]	; (800baf8 <_dtoa_r+0x610>)
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	f7f4 fc33 	bl	8000288 <__aeabi_dsub>
 800ba22:	ec53 2b19 	vmov	r2, r3, d9
 800ba26:	f7f5 f859 	bl	8000adc <__aeabi_dcmplt>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f040 80b5 	bne.w	800bb9a <_dtoa_r+0x6b2>
 800ba30:	9b02      	ldr	r3, [sp, #8]
 800ba32:	429d      	cmp	r5, r3
 800ba34:	f43f af7c 	beq.w	800b930 <_dtoa_r+0x448>
 800ba38:	4b30      	ldr	r3, [pc, #192]	; (800bafc <_dtoa_r+0x614>)
 800ba3a:	ec51 0b19 	vmov	r0, r1, d9
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f7f4 fdda 	bl	80005f8 <__aeabi_dmul>
 800ba44:	4b2d      	ldr	r3, [pc, #180]	; (800bafc <_dtoa_r+0x614>)
 800ba46:	ec41 0b19 	vmov	d9, r0, r1
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	4640      	mov	r0, r8
 800ba4e:	4649      	mov	r1, r9
 800ba50:	f7f4 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ba54:	4680      	mov	r8, r0
 800ba56:	4689      	mov	r9, r1
 800ba58:	e7c5      	b.n	800b9e6 <_dtoa_r+0x4fe>
 800ba5a:	ec51 0b17 	vmov	r0, r1, d7
 800ba5e:	f7f4 fdcb 	bl	80005f8 <__aeabi_dmul>
 800ba62:	9b02      	ldr	r3, [sp, #8]
 800ba64:	9d00      	ldr	r5, [sp, #0]
 800ba66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba68:	ec41 0b19 	vmov	d9, r0, r1
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	4640      	mov	r0, r8
 800ba70:	f7f5 f872 	bl	8000b58 <__aeabi_d2iz>
 800ba74:	4606      	mov	r6, r0
 800ba76:	f7f4 fd55 	bl	8000524 <__aeabi_i2d>
 800ba7a:	3630      	adds	r6, #48	; 0x30
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4640      	mov	r0, r8
 800ba82:	4649      	mov	r1, r9
 800ba84:	f7f4 fc00 	bl	8000288 <__aeabi_dsub>
 800ba88:	f805 6b01 	strb.w	r6, [r5], #1
 800ba8c:	9b02      	ldr	r3, [sp, #8]
 800ba8e:	429d      	cmp	r5, r3
 800ba90:	4680      	mov	r8, r0
 800ba92:	4689      	mov	r9, r1
 800ba94:	f04f 0200 	mov.w	r2, #0
 800ba98:	d124      	bne.n	800bae4 <_dtoa_r+0x5fc>
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <_dtoa_r+0x620>)
 800ba9c:	ec51 0b19 	vmov	r0, r1, d9
 800baa0:	f7f4 fbf4 	bl	800028c <__adddf3>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4640      	mov	r0, r8
 800baaa:	4649      	mov	r1, r9
 800baac:	f7f5 f834 	bl	8000b18 <__aeabi_dcmpgt>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d172      	bne.n	800bb9a <_dtoa_r+0x6b2>
 800bab4:	ec53 2b19 	vmov	r2, r3, d9
 800bab8:	4913      	ldr	r1, [pc, #76]	; (800bb08 <_dtoa_r+0x620>)
 800baba:	2000      	movs	r0, #0
 800babc:	f7f4 fbe4 	bl	8000288 <__aeabi_dsub>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4640      	mov	r0, r8
 800bac6:	4649      	mov	r1, r9
 800bac8:	f7f5 f808 	bl	8000adc <__aeabi_dcmplt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	f43f af2f 	beq.w	800b930 <_dtoa_r+0x448>
 800bad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bad4:	1e6b      	subs	r3, r5, #1
 800bad6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bad8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800badc:	2b30      	cmp	r3, #48	; 0x30
 800bade:	d0f8      	beq.n	800bad2 <_dtoa_r+0x5ea>
 800bae0:	46bb      	mov	fp, r7
 800bae2:	e049      	b.n	800bb78 <_dtoa_r+0x690>
 800bae4:	4b05      	ldr	r3, [pc, #20]	; (800bafc <_dtoa_r+0x614>)
 800bae6:	f7f4 fd87 	bl	80005f8 <__aeabi_dmul>
 800baea:	4680      	mov	r8, r0
 800baec:	4689      	mov	r9, r1
 800baee:	e7bd      	b.n	800ba6c <_dtoa_r+0x584>
 800baf0:	0800e578 	.word	0x0800e578
 800baf4:	0800e550 	.word	0x0800e550
 800baf8:	3ff00000 	.word	0x3ff00000
 800bafc:	40240000 	.word	0x40240000
 800bb00:	401c0000 	.word	0x401c0000
 800bb04:	40140000 	.word	0x40140000
 800bb08:	3fe00000 	.word	0x3fe00000
 800bb0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb10:	9d00      	ldr	r5, [sp, #0]
 800bb12:	4642      	mov	r2, r8
 800bb14:	464b      	mov	r3, r9
 800bb16:	4630      	mov	r0, r6
 800bb18:	4639      	mov	r1, r7
 800bb1a:	f7f4 fe97 	bl	800084c <__aeabi_ddiv>
 800bb1e:	f7f5 f81b 	bl	8000b58 <__aeabi_d2iz>
 800bb22:	9001      	str	r0, [sp, #4]
 800bb24:	f7f4 fcfe 	bl	8000524 <__aeabi_i2d>
 800bb28:	4642      	mov	r2, r8
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	f7f4 fd64 	bl	80005f8 <__aeabi_dmul>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4630      	mov	r0, r6
 800bb36:	4639      	mov	r1, r7
 800bb38:	f7f4 fba6 	bl	8000288 <__aeabi_dsub>
 800bb3c:	9e01      	ldr	r6, [sp, #4]
 800bb3e:	9f04      	ldr	r7, [sp, #16]
 800bb40:	3630      	adds	r6, #48	; 0x30
 800bb42:	f805 6b01 	strb.w	r6, [r5], #1
 800bb46:	9e00      	ldr	r6, [sp, #0]
 800bb48:	1bae      	subs	r6, r5, r6
 800bb4a:	42b7      	cmp	r7, r6
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	d134      	bne.n	800bbbc <_dtoa_r+0x6d4>
 800bb52:	f7f4 fb9b 	bl	800028c <__adddf3>
 800bb56:	4642      	mov	r2, r8
 800bb58:	464b      	mov	r3, r9
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	f7f4 ffdb 	bl	8000b18 <__aeabi_dcmpgt>
 800bb62:	b9c8      	cbnz	r0, 800bb98 <_dtoa_r+0x6b0>
 800bb64:	4642      	mov	r2, r8
 800bb66:	464b      	mov	r3, r9
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f7f4 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb70:	b110      	cbz	r0, 800bb78 <_dtoa_r+0x690>
 800bb72:	9b01      	ldr	r3, [sp, #4]
 800bb74:	07db      	lsls	r3, r3, #31
 800bb76:	d40f      	bmi.n	800bb98 <_dtoa_r+0x6b0>
 800bb78:	4651      	mov	r1, sl
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f000 faaf 	bl	800c0de <_Bfree>
 800bb80:	2300      	movs	r3, #0
 800bb82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb84:	702b      	strb	r3, [r5, #0]
 800bb86:	f10b 0301 	add.w	r3, fp, #1
 800bb8a:	6013      	str	r3, [r2, #0]
 800bb8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f43f ace5 	beq.w	800b55e <_dtoa_r+0x76>
 800bb94:	601d      	str	r5, [r3, #0]
 800bb96:	e4e2      	b.n	800b55e <_dtoa_r+0x76>
 800bb98:	465f      	mov	r7, fp
 800bb9a:	462b      	mov	r3, r5
 800bb9c:	461d      	mov	r5, r3
 800bb9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bba2:	2a39      	cmp	r2, #57	; 0x39
 800bba4:	d106      	bne.n	800bbb4 <_dtoa_r+0x6cc>
 800bba6:	9a00      	ldr	r2, [sp, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d1f7      	bne.n	800bb9c <_dtoa_r+0x6b4>
 800bbac:	9900      	ldr	r1, [sp, #0]
 800bbae:	2230      	movs	r2, #48	; 0x30
 800bbb0:	3701      	adds	r7, #1
 800bbb2:	700a      	strb	r2, [r1, #0]
 800bbb4:	781a      	ldrb	r2, [r3, #0]
 800bbb6:	3201      	adds	r2, #1
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	e791      	b.n	800bae0 <_dtoa_r+0x5f8>
 800bbbc:	4ba3      	ldr	r3, [pc, #652]	; (800be4c <_dtoa_r+0x964>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f7f4 fd1a 	bl	80005f8 <__aeabi_dmul>
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	4606      	mov	r6, r0
 800bbca:	460f      	mov	r7, r1
 800bbcc:	f7f4 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d09e      	beq.n	800bb12 <_dtoa_r+0x62a>
 800bbd4:	e7d0      	b.n	800bb78 <_dtoa_r+0x690>
 800bbd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbd8:	2a00      	cmp	r2, #0
 800bbda:	f000 80ca 	beq.w	800bd72 <_dtoa_r+0x88a>
 800bbde:	9a07      	ldr	r2, [sp, #28]
 800bbe0:	2a01      	cmp	r2, #1
 800bbe2:	f300 80ad 	bgt.w	800bd40 <_dtoa_r+0x858>
 800bbe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbe8:	2a00      	cmp	r2, #0
 800bbea:	f000 80a5 	beq.w	800bd38 <_dtoa_r+0x850>
 800bbee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbf2:	9e08      	ldr	r6, [sp, #32]
 800bbf4:	9d05      	ldr	r5, [sp, #20]
 800bbf6:	9a05      	ldr	r2, [sp, #20]
 800bbf8:	441a      	add	r2, r3
 800bbfa:	9205      	str	r2, [sp, #20]
 800bbfc:	9a06      	ldr	r2, [sp, #24]
 800bbfe:	2101      	movs	r1, #1
 800bc00:	441a      	add	r2, r3
 800bc02:	4620      	mov	r0, r4
 800bc04:	9206      	str	r2, [sp, #24]
 800bc06:	f000 fb07 	bl	800c218 <__i2b>
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	b165      	cbz	r5, 800bc28 <_dtoa_r+0x740>
 800bc0e:	9b06      	ldr	r3, [sp, #24]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	dd09      	ble.n	800bc28 <_dtoa_r+0x740>
 800bc14:	42ab      	cmp	r3, r5
 800bc16:	9a05      	ldr	r2, [sp, #20]
 800bc18:	bfa8      	it	ge
 800bc1a:	462b      	movge	r3, r5
 800bc1c:	1ad2      	subs	r2, r2, r3
 800bc1e:	9205      	str	r2, [sp, #20]
 800bc20:	9a06      	ldr	r2, [sp, #24]
 800bc22:	1aed      	subs	r5, r5, r3
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	9306      	str	r3, [sp, #24]
 800bc28:	9b08      	ldr	r3, [sp, #32]
 800bc2a:	b1f3      	cbz	r3, 800bc6a <_dtoa_r+0x782>
 800bc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f000 80a3 	beq.w	800bd7a <_dtoa_r+0x892>
 800bc34:	2e00      	cmp	r6, #0
 800bc36:	dd10      	ble.n	800bc5a <_dtoa_r+0x772>
 800bc38:	4639      	mov	r1, r7
 800bc3a:	4632      	mov	r2, r6
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f000 fbab 	bl	800c398 <__pow5mult>
 800bc42:	4652      	mov	r2, sl
 800bc44:	4601      	mov	r1, r0
 800bc46:	4607      	mov	r7, r0
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f000 fafb 	bl	800c244 <__multiply>
 800bc4e:	4651      	mov	r1, sl
 800bc50:	4680      	mov	r8, r0
 800bc52:	4620      	mov	r0, r4
 800bc54:	f000 fa43 	bl	800c0de <_Bfree>
 800bc58:	46c2      	mov	sl, r8
 800bc5a:	9b08      	ldr	r3, [sp, #32]
 800bc5c:	1b9a      	subs	r2, r3, r6
 800bc5e:	d004      	beq.n	800bc6a <_dtoa_r+0x782>
 800bc60:	4651      	mov	r1, sl
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 fb98 	bl	800c398 <__pow5mult>
 800bc68:	4682      	mov	sl, r0
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f000 fad3 	bl	800c218 <__i2b>
 800bc72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	4606      	mov	r6, r0
 800bc78:	f340 8081 	ble.w	800bd7e <_dtoa_r+0x896>
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	4601      	mov	r1, r0
 800bc80:	4620      	mov	r0, r4
 800bc82:	f000 fb89 	bl	800c398 <__pow5mult>
 800bc86:	9b07      	ldr	r3, [sp, #28]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	dd7a      	ble.n	800bd84 <_dtoa_r+0x89c>
 800bc8e:	f04f 0800 	mov.w	r8, #0
 800bc92:	6933      	ldr	r3, [r6, #16]
 800bc94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc98:	6918      	ldr	r0, [r3, #16]
 800bc9a:	f000 fa6f 	bl	800c17c <__hi0bits>
 800bc9e:	f1c0 0020 	rsb	r0, r0, #32
 800bca2:	9b06      	ldr	r3, [sp, #24]
 800bca4:	4418      	add	r0, r3
 800bca6:	f010 001f 	ands.w	r0, r0, #31
 800bcaa:	f000 8094 	beq.w	800bdd6 <_dtoa_r+0x8ee>
 800bcae:	f1c0 0320 	rsb	r3, r0, #32
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	f340 8085 	ble.w	800bdc2 <_dtoa_r+0x8da>
 800bcb8:	9b05      	ldr	r3, [sp, #20]
 800bcba:	f1c0 001c 	rsb	r0, r0, #28
 800bcbe:	4403      	add	r3, r0
 800bcc0:	9305      	str	r3, [sp, #20]
 800bcc2:	9b06      	ldr	r3, [sp, #24]
 800bcc4:	4403      	add	r3, r0
 800bcc6:	4405      	add	r5, r0
 800bcc8:	9306      	str	r3, [sp, #24]
 800bcca:	9b05      	ldr	r3, [sp, #20]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	dd05      	ble.n	800bcdc <_dtoa_r+0x7f4>
 800bcd0:	4651      	mov	r1, sl
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f000 fb9f 	bl	800c418 <__lshift>
 800bcda:	4682      	mov	sl, r0
 800bcdc:	9b06      	ldr	r3, [sp, #24]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	dd05      	ble.n	800bcee <_dtoa_r+0x806>
 800bce2:	4631      	mov	r1, r6
 800bce4:	461a      	mov	r2, r3
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 fb96 	bl	800c418 <__lshift>
 800bcec:	4606      	mov	r6, r0
 800bcee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d072      	beq.n	800bdda <_dtoa_r+0x8f2>
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	4650      	mov	r0, sl
 800bcf8:	f000 fbfa 	bl	800c4f0 <__mcmp>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	da6c      	bge.n	800bdda <_dtoa_r+0x8f2>
 800bd00:	2300      	movs	r3, #0
 800bd02:	4651      	mov	r1, sl
 800bd04:	220a      	movs	r2, #10
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 f9f2 	bl	800c0f0 <__multadd>
 800bd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd0e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bd12:	4682      	mov	sl, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 81af 	beq.w	800c078 <_dtoa_r+0xb90>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	4639      	mov	r1, r7
 800bd1e:	220a      	movs	r2, #10
 800bd20:	4620      	mov	r0, r4
 800bd22:	f000 f9e5 	bl	800c0f0 <__multadd>
 800bd26:	9b01      	ldr	r3, [sp, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	f300 8096 	bgt.w	800be5c <_dtoa_r+0x974>
 800bd30:	9b07      	ldr	r3, [sp, #28]
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	dc59      	bgt.n	800bdea <_dtoa_r+0x902>
 800bd36:	e091      	b.n	800be5c <_dtoa_r+0x974>
 800bd38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd3e:	e758      	b.n	800bbf2 <_dtoa_r+0x70a>
 800bd40:	9b04      	ldr	r3, [sp, #16]
 800bd42:	1e5e      	subs	r6, r3, #1
 800bd44:	9b08      	ldr	r3, [sp, #32]
 800bd46:	42b3      	cmp	r3, r6
 800bd48:	bfbf      	itttt	lt
 800bd4a:	9b08      	ldrlt	r3, [sp, #32]
 800bd4c:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bd4e:	9608      	strlt	r6, [sp, #32]
 800bd50:	1af3      	sublt	r3, r6, r3
 800bd52:	bfb4      	ite	lt
 800bd54:	18d2      	addlt	r2, r2, r3
 800bd56:	1b9e      	subge	r6, r3, r6
 800bd58:	9b04      	ldr	r3, [sp, #16]
 800bd5a:	bfbc      	itt	lt
 800bd5c:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bd5e:	2600      	movlt	r6, #0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	bfb7      	itett	lt
 800bd64:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bd68:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bd6c:	1a9d      	sublt	r5, r3, r2
 800bd6e:	2300      	movlt	r3, #0
 800bd70:	e741      	b.n	800bbf6 <_dtoa_r+0x70e>
 800bd72:	9e08      	ldr	r6, [sp, #32]
 800bd74:	9d05      	ldr	r5, [sp, #20]
 800bd76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bd78:	e748      	b.n	800bc0c <_dtoa_r+0x724>
 800bd7a:	9a08      	ldr	r2, [sp, #32]
 800bd7c:	e770      	b.n	800bc60 <_dtoa_r+0x778>
 800bd7e:	9b07      	ldr	r3, [sp, #28]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	dc19      	bgt.n	800bdb8 <_dtoa_r+0x8d0>
 800bd84:	9b02      	ldr	r3, [sp, #8]
 800bd86:	b9bb      	cbnz	r3, 800bdb8 <_dtoa_r+0x8d0>
 800bd88:	9b03      	ldr	r3, [sp, #12]
 800bd8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd8e:	b99b      	cbnz	r3, 800bdb8 <_dtoa_r+0x8d0>
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd96:	0d1b      	lsrs	r3, r3, #20
 800bd98:	051b      	lsls	r3, r3, #20
 800bd9a:	b183      	cbz	r3, 800bdbe <_dtoa_r+0x8d6>
 800bd9c:	9b05      	ldr	r3, [sp, #20]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	9305      	str	r3, [sp, #20]
 800bda2:	9b06      	ldr	r3, [sp, #24]
 800bda4:	3301      	adds	r3, #1
 800bda6:	9306      	str	r3, [sp, #24]
 800bda8:	f04f 0801 	mov.w	r8, #1
 800bdac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f47f af6f 	bne.w	800bc92 <_dtoa_r+0x7aa>
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	e774      	b.n	800bca2 <_dtoa_r+0x7ba>
 800bdb8:	f04f 0800 	mov.w	r8, #0
 800bdbc:	e7f6      	b.n	800bdac <_dtoa_r+0x8c4>
 800bdbe:	4698      	mov	r8, r3
 800bdc0:	e7f4      	b.n	800bdac <_dtoa_r+0x8c4>
 800bdc2:	d082      	beq.n	800bcca <_dtoa_r+0x7e2>
 800bdc4:	9a05      	ldr	r2, [sp, #20]
 800bdc6:	331c      	adds	r3, #28
 800bdc8:	441a      	add	r2, r3
 800bdca:	9205      	str	r2, [sp, #20]
 800bdcc:	9a06      	ldr	r2, [sp, #24]
 800bdce:	441a      	add	r2, r3
 800bdd0:	441d      	add	r5, r3
 800bdd2:	9206      	str	r2, [sp, #24]
 800bdd4:	e779      	b.n	800bcca <_dtoa_r+0x7e2>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	e7f4      	b.n	800bdc4 <_dtoa_r+0x8dc>
 800bdda:	9b04      	ldr	r3, [sp, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dc37      	bgt.n	800be50 <_dtoa_r+0x968>
 800bde0:	9b07      	ldr	r3, [sp, #28]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	dd34      	ble.n	800be50 <_dtoa_r+0x968>
 800bde6:	9b04      	ldr	r3, [sp, #16]
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	9b01      	ldr	r3, [sp, #4]
 800bdec:	b963      	cbnz	r3, 800be08 <_dtoa_r+0x920>
 800bdee:	4631      	mov	r1, r6
 800bdf0:	2205      	movs	r2, #5
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f000 f97c 	bl	800c0f0 <__multadd>
 800bdf8:	4601      	mov	r1, r0
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	4650      	mov	r0, sl
 800bdfe:	f000 fb77 	bl	800c4f0 <__mcmp>
 800be02:	2800      	cmp	r0, #0
 800be04:	f73f adbc 	bgt.w	800b980 <_dtoa_r+0x498>
 800be08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be0a:	9d00      	ldr	r5, [sp, #0]
 800be0c:	ea6f 0b03 	mvn.w	fp, r3
 800be10:	f04f 0800 	mov.w	r8, #0
 800be14:	4631      	mov	r1, r6
 800be16:	4620      	mov	r0, r4
 800be18:	f000 f961 	bl	800c0de <_Bfree>
 800be1c:	2f00      	cmp	r7, #0
 800be1e:	f43f aeab 	beq.w	800bb78 <_dtoa_r+0x690>
 800be22:	f1b8 0f00 	cmp.w	r8, #0
 800be26:	d005      	beq.n	800be34 <_dtoa_r+0x94c>
 800be28:	45b8      	cmp	r8, r7
 800be2a:	d003      	beq.n	800be34 <_dtoa_r+0x94c>
 800be2c:	4641      	mov	r1, r8
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 f955 	bl	800c0de <_Bfree>
 800be34:	4639      	mov	r1, r7
 800be36:	4620      	mov	r0, r4
 800be38:	f000 f951 	bl	800c0de <_Bfree>
 800be3c:	e69c      	b.n	800bb78 <_dtoa_r+0x690>
 800be3e:	2600      	movs	r6, #0
 800be40:	4637      	mov	r7, r6
 800be42:	e7e1      	b.n	800be08 <_dtoa_r+0x920>
 800be44:	46bb      	mov	fp, r7
 800be46:	4637      	mov	r7, r6
 800be48:	e59a      	b.n	800b980 <_dtoa_r+0x498>
 800be4a:	bf00      	nop
 800be4c:	40240000 	.word	0x40240000
 800be50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be52:	2b00      	cmp	r3, #0
 800be54:	f000 80c7 	beq.w	800bfe6 <_dtoa_r+0xafe>
 800be58:	9b04      	ldr	r3, [sp, #16]
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	dd05      	ble.n	800be6c <_dtoa_r+0x984>
 800be60:	4639      	mov	r1, r7
 800be62:	462a      	mov	r2, r5
 800be64:	4620      	mov	r0, r4
 800be66:	f000 fad7 	bl	800c418 <__lshift>
 800be6a:	4607      	mov	r7, r0
 800be6c:	f1b8 0f00 	cmp.w	r8, #0
 800be70:	d05a      	beq.n	800bf28 <_dtoa_r+0xa40>
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	4620      	mov	r0, r4
 800be76:	f000 f90d 	bl	800c094 <_Balloc>
 800be7a:	4605      	mov	r5, r0
 800be7c:	b920      	cbnz	r0, 800be88 <_dtoa_r+0x9a0>
 800be7e:	4b82      	ldr	r3, [pc, #520]	; (800c088 <_dtoa_r+0xba0>)
 800be80:	4602      	mov	r2, r0
 800be82:	f240 21ef 	movw	r1, #751	; 0x2ef
 800be86:	e470      	b.n	800b76a <_dtoa_r+0x282>
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	3202      	adds	r2, #2
 800be8c:	0092      	lsls	r2, r2, #2
 800be8e:	f107 010c 	add.w	r1, r7, #12
 800be92:	300c      	adds	r0, #12
 800be94:	f7fd fb70 	bl	8009578 <memcpy>
 800be98:	2201      	movs	r2, #1
 800be9a:	4629      	mov	r1, r5
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 fabb 	bl	800c418 <__lshift>
 800bea2:	9b00      	ldr	r3, [sp, #0]
 800bea4:	3301      	adds	r3, #1
 800bea6:	9304      	str	r3, [sp, #16]
 800bea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beac:	4413      	add	r3, r2
 800beae:	9308      	str	r3, [sp, #32]
 800beb0:	9b02      	ldr	r3, [sp, #8]
 800beb2:	f003 0301 	and.w	r3, r3, #1
 800beb6:	46b8      	mov	r8, r7
 800beb8:	9306      	str	r3, [sp, #24]
 800beba:	4607      	mov	r7, r0
 800bebc:	9b04      	ldr	r3, [sp, #16]
 800bebe:	4631      	mov	r1, r6
 800bec0:	3b01      	subs	r3, #1
 800bec2:	4650      	mov	r0, sl
 800bec4:	9301      	str	r3, [sp, #4]
 800bec6:	f7ff fa87 	bl	800b3d8 <quorem>
 800beca:	4641      	mov	r1, r8
 800becc:	9002      	str	r0, [sp, #8]
 800bece:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bed2:	4650      	mov	r0, sl
 800bed4:	f000 fb0c 	bl	800c4f0 <__mcmp>
 800bed8:	463a      	mov	r2, r7
 800beda:	9005      	str	r0, [sp, #20]
 800bedc:	4631      	mov	r1, r6
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 fb22 	bl	800c528 <__mdiff>
 800bee4:	68c2      	ldr	r2, [r0, #12]
 800bee6:	4605      	mov	r5, r0
 800bee8:	bb02      	cbnz	r2, 800bf2c <_dtoa_r+0xa44>
 800beea:	4601      	mov	r1, r0
 800beec:	4650      	mov	r0, sl
 800beee:	f000 faff 	bl	800c4f0 <__mcmp>
 800bef2:	4602      	mov	r2, r0
 800bef4:	4629      	mov	r1, r5
 800bef6:	4620      	mov	r0, r4
 800bef8:	9209      	str	r2, [sp, #36]	; 0x24
 800befa:	f000 f8f0 	bl	800c0de <_Bfree>
 800befe:	9b07      	ldr	r3, [sp, #28]
 800bf00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf02:	9d04      	ldr	r5, [sp, #16]
 800bf04:	ea43 0102 	orr.w	r1, r3, r2
 800bf08:	9b06      	ldr	r3, [sp, #24]
 800bf0a:	4319      	orrs	r1, r3
 800bf0c:	d110      	bne.n	800bf30 <_dtoa_r+0xa48>
 800bf0e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bf12:	d029      	beq.n	800bf68 <_dtoa_r+0xa80>
 800bf14:	9b05      	ldr	r3, [sp, #20]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	dd02      	ble.n	800bf20 <_dtoa_r+0xa38>
 800bf1a:	9b02      	ldr	r3, [sp, #8]
 800bf1c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bf20:	9b01      	ldr	r3, [sp, #4]
 800bf22:	f883 9000 	strb.w	r9, [r3]
 800bf26:	e775      	b.n	800be14 <_dtoa_r+0x92c>
 800bf28:	4638      	mov	r0, r7
 800bf2a:	e7ba      	b.n	800bea2 <_dtoa_r+0x9ba>
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	e7e1      	b.n	800bef4 <_dtoa_r+0xa0c>
 800bf30:	9b05      	ldr	r3, [sp, #20]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	db04      	blt.n	800bf40 <_dtoa_r+0xa58>
 800bf36:	9907      	ldr	r1, [sp, #28]
 800bf38:	430b      	orrs	r3, r1
 800bf3a:	9906      	ldr	r1, [sp, #24]
 800bf3c:	430b      	orrs	r3, r1
 800bf3e:	d120      	bne.n	800bf82 <_dtoa_r+0xa9a>
 800bf40:	2a00      	cmp	r2, #0
 800bf42:	dded      	ble.n	800bf20 <_dtoa_r+0xa38>
 800bf44:	4651      	mov	r1, sl
 800bf46:	2201      	movs	r2, #1
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f000 fa65 	bl	800c418 <__lshift>
 800bf4e:	4631      	mov	r1, r6
 800bf50:	4682      	mov	sl, r0
 800bf52:	f000 facd 	bl	800c4f0 <__mcmp>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	dc03      	bgt.n	800bf62 <_dtoa_r+0xa7a>
 800bf5a:	d1e1      	bne.n	800bf20 <_dtoa_r+0xa38>
 800bf5c:	f019 0f01 	tst.w	r9, #1
 800bf60:	d0de      	beq.n	800bf20 <_dtoa_r+0xa38>
 800bf62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bf66:	d1d8      	bne.n	800bf1a <_dtoa_r+0xa32>
 800bf68:	9a01      	ldr	r2, [sp, #4]
 800bf6a:	2339      	movs	r3, #57	; 0x39
 800bf6c:	7013      	strb	r3, [r2, #0]
 800bf6e:	462b      	mov	r3, r5
 800bf70:	461d      	mov	r5, r3
 800bf72:	3b01      	subs	r3, #1
 800bf74:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf78:	2a39      	cmp	r2, #57	; 0x39
 800bf7a:	d06c      	beq.n	800c056 <_dtoa_r+0xb6e>
 800bf7c:	3201      	adds	r2, #1
 800bf7e:	701a      	strb	r2, [r3, #0]
 800bf80:	e748      	b.n	800be14 <_dtoa_r+0x92c>
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	dd07      	ble.n	800bf96 <_dtoa_r+0xaae>
 800bf86:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bf8a:	d0ed      	beq.n	800bf68 <_dtoa_r+0xa80>
 800bf8c:	9a01      	ldr	r2, [sp, #4]
 800bf8e:	f109 0301 	add.w	r3, r9, #1
 800bf92:	7013      	strb	r3, [r2, #0]
 800bf94:	e73e      	b.n	800be14 <_dtoa_r+0x92c>
 800bf96:	9b04      	ldr	r3, [sp, #16]
 800bf98:	9a08      	ldr	r2, [sp, #32]
 800bf9a:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d043      	beq.n	800c02a <_dtoa_r+0xb42>
 800bfa2:	4651      	mov	r1, sl
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	220a      	movs	r2, #10
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 f8a1 	bl	800c0f0 <__multadd>
 800bfae:	45b8      	cmp	r8, r7
 800bfb0:	4682      	mov	sl, r0
 800bfb2:	f04f 0300 	mov.w	r3, #0
 800bfb6:	f04f 020a 	mov.w	r2, #10
 800bfba:	4641      	mov	r1, r8
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	d107      	bne.n	800bfd0 <_dtoa_r+0xae8>
 800bfc0:	f000 f896 	bl	800c0f0 <__multadd>
 800bfc4:	4680      	mov	r8, r0
 800bfc6:	4607      	mov	r7, r0
 800bfc8:	9b04      	ldr	r3, [sp, #16]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	9304      	str	r3, [sp, #16]
 800bfce:	e775      	b.n	800bebc <_dtoa_r+0x9d4>
 800bfd0:	f000 f88e 	bl	800c0f0 <__multadd>
 800bfd4:	4639      	mov	r1, r7
 800bfd6:	4680      	mov	r8, r0
 800bfd8:	2300      	movs	r3, #0
 800bfda:	220a      	movs	r2, #10
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 f887 	bl	800c0f0 <__multadd>
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	e7f0      	b.n	800bfc8 <_dtoa_r+0xae0>
 800bfe6:	9b04      	ldr	r3, [sp, #16]
 800bfe8:	9301      	str	r3, [sp, #4]
 800bfea:	9d00      	ldr	r5, [sp, #0]
 800bfec:	4631      	mov	r1, r6
 800bfee:	4650      	mov	r0, sl
 800bff0:	f7ff f9f2 	bl	800b3d8 <quorem>
 800bff4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bff8:	9b00      	ldr	r3, [sp, #0]
 800bffa:	f805 9b01 	strb.w	r9, [r5], #1
 800bffe:	1aea      	subs	r2, r5, r3
 800c000:	9b01      	ldr	r3, [sp, #4]
 800c002:	4293      	cmp	r3, r2
 800c004:	dd07      	ble.n	800c016 <_dtoa_r+0xb2e>
 800c006:	4651      	mov	r1, sl
 800c008:	2300      	movs	r3, #0
 800c00a:	220a      	movs	r2, #10
 800c00c:	4620      	mov	r0, r4
 800c00e:	f000 f86f 	bl	800c0f0 <__multadd>
 800c012:	4682      	mov	sl, r0
 800c014:	e7ea      	b.n	800bfec <_dtoa_r+0xb04>
 800c016:	9b01      	ldr	r3, [sp, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	bfc8      	it	gt
 800c01c:	461d      	movgt	r5, r3
 800c01e:	9b00      	ldr	r3, [sp, #0]
 800c020:	bfd8      	it	le
 800c022:	2501      	movle	r5, #1
 800c024:	441d      	add	r5, r3
 800c026:	f04f 0800 	mov.w	r8, #0
 800c02a:	4651      	mov	r1, sl
 800c02c:	2201      	movs	r2, #1
 800c02e:	4620      	mov	r0, r4
 800c030:	f000 f9f2 	bl	800c418 <__lshift>
 800c034:	4631      	mov	r1, r6
 800c036:	4682      	mov	sl, r0
 800c038:	f000 fa5a 	bl	800c4f0 <__mcmp>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	dc96      	bgt.n	800bf6e <_dtoa_r+0xa86>
 800c040:	d102      	bne.n	800c048 <_dtoa_r+0xb60>
 800c042:	f019 0f01 	tst.w	r9, #1
 800c046:	d192      	bne.n	800bf6e <_dtoa_r+0xa86>
 800c048:	462b      	mov	r3, r5
 800c04a:	461d      	mov	r5, r3
 800c04c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c050:	2a30      	cmp	r2, #48	; 0x30
 800c052:	d0fa      	beq.n	800c04a <_dtoa_r+0xb62>
 800c054:	e6de      	b.n	800be14 <_dtoa_r+0x92c>
 800c056:	9a00      	ldr	r2, [sp, #0]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d189      	bne.n	800bf70 <_dtoa_r+0xa88>
 800c05c:	f10b 0b01 	add.w	fp, fp, #1
 800c060:	2331      	movs	r3, #49	; 0x31
 800c062:	e796      	b.n	800bf92 <_dtoa_r+0xaaa>
 800c064:	4b09      	ldr	r3, [pc, #36]	; (800c08c <_dtoa_r+0xba4>)
 800c066:	f7ff ba9d 	b.w	800b5a4 <_dtoa_r+0xbc>
 800c06a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f47f aa7c 	bne.w	800b56a <_dtoa_r+0x82>
 800c072:	4b07      	ldr	r3, [pc, #28]	; (800c090 <_dtoa_r+0xba8>)
 800c074:	f7ff ba96 	b.w	800b5a4 <_dtoa_r+0xbc>
 800c078:	9b01      	ldr	r3, [sp, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	dcb5      	bgt.n	800bfea <_dtoa_r+0xb02>
 800c07e:	9b07      	ldr	r3, [sp, #28]
 800c080:	2b02      	cmp	r3, #2
 800c082:	f73f aeb2 	bgt.w	800bdea <_dtoa_r+0x902>
 800c086:	e7b0      	b.n	800bfea <_dtoa_r+0xb02>
 800c088:	0800e48d 	.word	0x0800e48d
 800c08c:	0800e45e 	.word	0x0800e45e
 800c090:	0800e480 	.word	0x0800e480

0800c094 <_Balloc>:
 800c094:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c096:	b570      	push	{r4, r5, r6, lr}
 800c098:	4605      	mov	r5, r0
 800c09a:	460c      	mov	r4, r1
 800c09c:	b17b      	cbz	r3, 800c0be <_Balloc+0x2a>
 800c09e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c0a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c0a4:	b9a0      	cbnz	r0, 800c0d0 <_Balloc+0x3c>
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	fa01 f604 	lsl.w	r6, r1, r4
 800c0ac:	1d72      	adds	r2, r6, #5
 800c0ae:	0092      	lsls	r2, r2, #2
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f000 fbd9 	bl	800c868 <_calloc_r>
 800c0b6:	b148      	cbz	r0, 800c0cc <_Balloc+0x38>
 800c0b8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c0bc:	e00b      	b.n	800c0d6 <_Balloc+0x42>
 800c0be:	2221      	movs	r2, #33	; 0x21
 800c0c0:	2104      	movs	r1, #4
 800c0c2:	f000 fbd1 	bl	800c868 <_calloc_r>
 800c0c6:	6468      	str	r0, [r5, #68]	; 0x44
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d1e8      	bne.n	800c09e <_Balloc+0xa>
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	bd70      	pop	{r4, r5, r6, pc}
 800c0d0:	6802      	ldr	r2, [r0, #0]
 800c0d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0dc:	e7f7      	b.n	800c0ce <_Balloc+0x3a>

0800c0de <_Bfree>:
 800c0de:	b131      	cbz	r1, 800c0ee <_Bfree+0x10>
 800c0e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c0e2:	684a      	ldr	r2, [r1, #4]
 800c0e4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c0e8:	6008      	str	r0, [r1, #0]
 800c0ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c0ee:	4770      	bx	lr

0800c0f0 <__multadd>:
 800c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	690d      	ldr	r5, [r1, #16]
 800c0f6:	4607      	mov	r7, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	461e      	mov	r6, r3
 800c0fc:	f101 0c14 	add.w	ip, r1, #20
 800c100:	2000      	movs	r0, #0
 800c102:	f8dc 3000 	ldr.w	r3, [ip]
 800c106:	b299      	uxth	r1, r3
 800c108:	fb02 6101 	mla	r1, r2, r1, r6
 800c10c:	0c1e      	lsrs	r6, r3, #16
 800c10e:	0c0b      	lsrs	r3, r1, #16
 800c110:	fb02 3306 	mla	r3, r2, r6, r3
 800c114:	b289      	uxth	r1, r1
 800c116:	3001      	adds	r0, #1
 800c118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c11c:	4285      	cmp	r5, r0
 800c11e:	f84c 1b04 	str.w	r1, [ip], #4
 800c122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c126:	dcec      	bgt.n	800c102 <__multadd+0x12>
 800c128:	b30e      	cbz	r6, 800c16e <__multadd+0x7e>
 800c12a:	68a3      	ldr	r3, [r4, #8]
 800c12c:	42ab      	cmp	r3, r5
 800c12e:	dc19      	bgt.n	800c164 <__multadd+0x74>
 800c130:	6861      	ldr	r1, [r4, #4]
 800c132:	4638      	mov	r0, r7
 800c134:	3101      	adds	r1, #1
 800c136:	f7ff ffad 	bl	800c094 <_Balloc>
 800c13a:	4680      	mov	r8, r0
 800c13c:	b928      	cbnz	r0, 800c14a <__multadd+0x5a>
 800c13e:	4602      	mov	r2, r0
 800c140:	4b0c      	ldr	r3, [pc, #48]	; (800c174 <__multadd+0x84>)
 800c142:	480d      	ldr	r0, [pc, #52]	; (800c178 <__multadd+0x88>)
 800c144:	21ba      	movs	r1, #186	; 0xba
 800c146:	f000 fb71 	bl	800c82c <__assert_func>
 800c14a:	6922      	ldr	r2, [r4, #16]
 800c14c:	3202      	adds	r2, #2
 800c14e:	f104 010c 	add.w	r1, r4, #12
 800c152:	0092      	lsls	r2, r2, #2
 800c154:	300c      	adds	r0, #12
 800c156:	f7fd fa0f 	bl	8009578 <memcpy>
 800c15a:	4621      	mov	r1, r4
 800c15c:	4638      	mov	r0, r7
 800c15e:	f7ff ffbe 	bl	800c0de <_Bfree>
 800c162:	4644      	mov	r4, r8
 800c164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c168:	3501      	adds	r5, #1
 800c16a:	615e      	str	r6, [r3, #20]
 800c16c:	6125      	str	r5, [r4, #16]
 800c16e:	4620      	mov	r0, r4
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c174:	0800e48d 	.word	0x0800e48d
 800c178:	0800e4f6 	.word	0x0800e4f6

0800c17c <__hi0bits>:
 800c17c:	0c03      	lsrs	r3, r0, #16
 800c17e:	041b      	lsls	r3, r3, #16
 800c180:	b9d3      	cbnz	r3, 800c1b8 <__hi0bits+0x3c>
 800c182:	0400      	lsls	r0, r0, #16
 800c184:	2310      	movs	r3, #16
 800c186:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c18a:	bf04      	itt	eq
 800c18c:	0200      	lsleq	r0, r0, #8
 800c18e:	3308      	addeq	r3, #8
 800c190:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c194:	bf04      	itt	eq
 800c196:	0100      	lsleq	r0, r0, #4
 800c198:	3304      	addeq	r3, #4
 800c19a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c19e:	bf04      	itt	eq
 800c1a0:	0080      	lsleq	r0, r0, #2
 800c1a2:	3302      	addeq	r3, #2
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	db05      	blt.n	800c1b4 <__hi0bits+0x38>
 800c1a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c1ac:	f103 0301 	add.w	r3, r3, #1
 800c1b0:	bf08      	it	eq
 800c1b2:	2320      	moveq	r3, #32
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	4770      	bx	lr
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e7e4      	b.n	800c186 <__hi0bits+0xa>

0800c1bc <__lo0bits>:
 800c1bc:	6803      	ldr	r3, [r0, #0]
 800c1be:	f013 0207 	ands.w	r2, r3, #7
 800c1c2:	d00c      	beq.n	800c1de <__lo0bits+0x22>
 800c1c4:	07d9      	lsls	r1, r3, #31
 800c1c6:	d422      	bmi.n	800c20e <__lo0bits+0x52>
 800c1c8:	079a      	lsls	r2, r3, #30
 800c1ca:	bf49      	itett	mi
 800c1cc:	085b      	lsrmi	r3, r3, #1
 800c1ce:	089b      	lsrpl	r3, r3, #2
 800c1d0:	6003      	strmi	r3, [r0, #0]
 800c1d2:	2201      	movmi	r2, #1
 800c1d4:	bf5c      	itt	pl
 800c1d6:	6003      	strpl	r3, [r0, #0]
 800c1d8:	2202      	movpl	r2, #2
 800c1da:	4610      	mov	r0, r2
 800c1dc:	4770      	bx	lr
 800c1de:	b299      	uxth	r1, r3
 800c1e0:	b909      	cbnz	r1, 800c1e6 <__lo0bits+0x2a>
 800c1e2:	0c1b      	lsrs	r3, r3, #16
 800c1e4:	2210      	movs	r2, #16
 800c1e6:	b2d9      	uxtb	r1, r3
 800c1e8:	b909      	cbnz	r1, 800c1ee <__lo0bits+0x32>
 800c1ea:	3208      	adds	r2, #8
 800c1ec:	0a1b      	lsrs	r3, r3, #8
 800c1ee:	0719      	lsls	r1, r3, #28
 800c1f0:	bf04      	itt	eq
 800c1f2:	091b      	lsreq	r3, r3, #4
 800c1f4:	3204      	addeq	r2, #4
 800c1f6:	0799      	lsls	r1, r3, #30
 800c1f8:	bf04      	itt	eq
 800c1fa:	089b      	lsreq	r3, r3, #2
 800c1fc:	3202      	addeq	r2, #2
 800c1fe:	07d9      	lsls	r1, r3, #31
 800c200:	d403      	bmi.n	800c20a <__lo0bits+0x4e>
 800c202:	085b      	lsrs	r3, r3, #1
 800c204:	f102 0201 	add.w	r2, r2, #1
 800c208:	d003      	beq.n	800c212 <__lo0bits+0x56>
 800c20a:	6003      	str	r3, [r0, #0]
 800c20c:	e7e5      	b.n	800c1da <__lo0bits+0x1e>
 800c20e:	2200      	movs	r2, #0
 800c210:	e7e3      	b.n	800c1da <__lo0bits+0x1e>
 800c212:	2220      	movs	r2, #32
 800c214:	e7e1      	b.n	800c1da <__lo0bits+0x1e>
	...

0800c218 <__i2b>:
 800c218:	b510      	push	{r4, lr}
 800c21a:	460c      	mov	r4, r1
 800c21c:	2101      	movs	r1, #1
 800c21e:	f7ff ff39 	bl	800c094 <_Balloc>
 800c222:	4602      	mov	r2, r0
 800c224:	b928      	cbnz	r0, 800c232 <__i2b+0x1a>
 800c226:	4b05      	ldr	r3, [pc, #20]	; (800c23c <__i2b+0x24>)
 800c228:	4805      	ldr	r0, [pc, #20]	; (800c240 <__i2b+0x28>)
 800c22a:	f240 1145 	movw	r1, #325	; 0x145
 800c22e:	f000 fafd 	bl	800c82c <__assert_func>
 800c232:	2301      	movs	r3, #1
 800c234:	6144      	str	r4, [r0, #20]
 800c236:	6103      	str	r3, [r0, #16]
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	bf00      	nop
 800c23c:	0800e48d 	.word	0x0800e48d
 800c240:	0800e4f6 	.word	0x0800e4f6

0800c244 <__multiply>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	4691      	mov	r9, r2
 800c24a:	690a      	ldr	r2, [r1, #16]
 800c24c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c250:	429a      	cmp	r2, r3
 800c252:	bfb8      	it	lt
 800c254:	460b      	movlt	r3, r1
 800c256:	460c      	mov	r4, r1
 800c258:	bfbc      	itt	lt
 800c25a:	464c      	movlt	r4, r9
 800c25c:	4699      	movlt	r9, r3
 800c25e:	6927      	ldr	r7, [r4, #16]
 800c260:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c264:	68a3      	ldr	r3, [r4, #8]
 800c266:	6861      	ldr	r1, [r4, #4]
 800c268:	eb07 060a 	add.w	r6, r7, sl
 800c26c:	42b3      	cmp	r3, r6
 800c26e:	b085      	sub	sp, #20
 800c270:	bfb8      	it	lt
 800c272:	3101      	addlt	r1, #1
 800c274:	f7ff ff0e 	bl	800c094 <_Balloc>
 800c278:	b930      	cbnz	r0, 800c288 <__multiply+0x44>
 800c27a:	4602      	mov	r2, r0
 800c27c:	4b44      	ldr	r3, [pc, #272]	; (800c390 <__multiply+0x14c>)
 800c27e:	4845      	ldr	r0, [pc, #276]	; (800c394 <__multiply+0x150>)
 800c280:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c284:	f000 fad2 	bl	800c82c <__assert_func>
 800c288:	f100 0514 	add.w	r5, r0, #20
 800c28c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c290:	462b      	mov	r3, r5
 800c292:	2200      	movs	r2, #0
 800c294:	4543      	cmp	r3, r8
 800c296:	d321      	bcc.n	800c2dc <__multiply+0x98>
 800c298:	f104 0314 	add.w	r3, r4, #20
 800c29c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2a0:	f109 0314 	add.w	r3, r9, #20
 800c2a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2a8:	9202      	str	r2, [sp, #8]
 800c2aa:	1b3a      	subs	r2, r7, r4
 800c2ac:	3a15      	subs	r2, #21
 800c2ae:	f022 0203 	bic.w	r2, r2, #3
 800c2b2:	3204      	adds	r2, #4
 800c2b4:	f104 0115 	add.w	r1, r4, #21
 800c2b8:	428f      	cmp	r7, r1
 800c2ba:	bf38      	it	cc
 800c2bc:	2204      	movcc	r2, #4
 800c2be:	9201      	str	r2, [sp, #4]
 800c2c0:	9a02      	ldr	r2, [sp, #8]
 800c2c2:	9303      	str	r3, [sp, #12]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d80c      	bhi.n	800c2e2 <__multiply+0x9e>
 800c2c8:	2e00      	cmp	r6, #0
 800c2ca:	dd03      	ble.n	800c2d4 <__multiply+0x90>
 800c2cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d05b      	beq.n	800c38c <__multiply+0x148>
 800c2d4:	6106      	str	r6, [r0, #16]
 800c2d6:	b005      	add	sp, #20
 800c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2dc:	f843 2b04 	str.w	r2, [r3], #4
 800c2e0:	e7d8      	b.n	800c294 <__multiply+0x50>
 800c2e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c2e6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ea:	d024      	beq.n	800c336 <__multiply+0xf2>
 800c2ec:	f104 0e14 	add.w	lr, r4, #20
 800c2f0:	46a9      	mov	r9, r5
 800c2f2:	f04f 0c00 	mov.w	ip, #0
 800c2f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c2fa:	f8d9 1000 	ldr.w	r1, [r9]
 800c2fe:	fa1f fb82 	uxth.w	fp, r2
 800c302:	b289      	uxth	r1, r1
 800c304:	fb0a 110b 	mla	r1, sl, fp, r1
 800c308:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c30c:	f8d9 2000 	ldr.w	r2, [r9]
 800c310:	4461      	add	r1, ip
 800c312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c316:	fb0a c20b 	mla	r2, sl, fp, ip
 800c31a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c31e:	b289      	uxth	r1, r1
 800c320:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c324:	4577      	cmp	r7, lr
 800c326:	f849 1b04 	str.w	r1, [r9], #4
 800c32a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c32e:	d8e2      	bhi.n	800c2f6 <__multiply+0xb2>
 800c330:	9a01      	ldr	r2, [sp, #4]
 800c332:	f845 c002 	str.w	ip, [r5, r2]
 800c336:	9a03      	ldr	r2, [sp, #12]
 800c338:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c33c:	3304      	adds	r3, #4
 800c33e:	f1b9 0f00 	cmp.w	r9, #0
 800c342:	d021      	beq.n	800c388 <__multiply+0x144>
 800c344:	6829      	ldr	r1, [r5, #0]
 800c346:	f104 0c14 	add.w	ip, r4, #20
 800c34a:	46ae      	mov	lr, r5
 800c34c:	f04f 0a00 	mov.w	sl, #0
 800c350:	f8bc b000 	ldrh.w	fp, [ip]
 800c354:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c358:	fb09 220b 	mla	r2, r9, fp, r2
 800c35c:	4452      	add	r2, sl
 800c35e:	b289      	uxth	r1, r1
 800c360:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c364:	f84e 1b04 	str.w	r1, [lr], #4
 800c368:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c36c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c370:	f8be 1000 	ldrh.w	r1, [lr]
 800c374:	fb09 110a 	mla	r1, r9, sl, r1
 800c378:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c37c:	4567      	cmp	r7, ip
 800c37e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c382:	d8e5      	bhi.n	800c350 <__multiply+0x10c>
 800c384:	9a01      	ldr	r2, [sp, #4]
 800c386:	50a9      	str	r1, [r5, r2]
 800c388:	3504      	adds	r5, #4
 800c38a:	e799      	b.n	800c2c0 <__multiply+0x7c>
 800c38c:	3e01      	subs	r6, #1
 800c38e:	e79b      	b.n	800c2c8 <__multiply+0x84>
 800c390:	0800e48d 	.word	0x0800e48d
 800c394:	0800e4f6 	.word	0x0800e4f6

0800c398 <__pow5mult>:
 800c398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c39c:	4615      	mov	r5, r2
 800c39e:	f012 0203 	ands.w	r2, r2, #3
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	460f      	mov	r7, r1
 800c3a6:	d007      	beq.n	800c3b8 <__pow5mult+0x20>
 800c3a8:	4c1a      	ldr	r4, [pc, #104]	; (800c414 <__pow5mult+0x7c>)
 800c3aa:	3a01      	subs	r2, #1
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3b2:	f7ff fe9d 	bl	800c0f0 <__multadd>
 800c3b6:	4607      	mov	r7, r0
 800c3b8:	10ad      	asrs	r5, r5, #2
 800c3ba:	d027      	beq.n	800c40c <__pow5mult+0x74>
 800c3bc:	6c34      	ldr	r4, [r6, #64]	; 0x40
 800c3be:	b944      	cbnz	r4, 800c3d2 <__pow5mult+0x3a>
 800c3c0:	f240 2171 	movw	r1, #625	; 0x271
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f7ff ff27 	bl	800c218 <__i2b>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	6430      	str	r0, [r6, #64]	; 0x40
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	6003      	str	r3, [r0, #0]
 800c3d2:	f04f 0900 	mov.w	r9, #0
 800c3d6:	07eb      	lsls	r3, r5, #31
 800c3d8:	d50a      	bpl.n	800c3f0 <__pow5mult+0x58>
 800c3da:	4639      	mov	r1, r7
 800c3dc:	4622      	mov	r2, r4
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7ff ff30 	bl	800c244 <__multiply>
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	4680      	mov	r8, r0
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f7ff fe78 	bl	800c0de <_Bfree>
 800c3ee:	4647      	mov	r7, r8
 800c3f0:	106d      	asrs	r5, r5, #1
 800c3f2:	d00b      	beq.n	800c40c <__pow5mult+0x74>
 800c3f4:	6820      	ldr	r0, [r4, #0]
 800c3f6:	b938      	cbnz	r0, 800c408 <__pow5mult+0x70>
 800c3f8:	4622      	mov	r2, r4
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f7ff ff21 	bl	800c244 <__multiply>
 800c402:	6020      	str	r0, [r4, #0]
 800c404:	f8c0 9000 	str.w	r9, [r0]
 800c408:	4604      	mov	r4, r0
 800c40a:	e7e4      	b.n	800c3d6 <__pow5mult+0x3e>
 800c40c:	4638      	mov	r0, r7
 800c40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c412:	bf00      	nop
 800c414:	0800e640 	.word	0x0800e640

0800c418 <__lshift>:
 800c418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c41c:	460c      	mov	r4, r1
 800c41e:	6849      	ldr	r1, [r1, #4]
 800c420:	6923      	ldr	r3, [r4, #16]
 800c422:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c426:	68a3      	ldr	r3, [r4, #8]
 800c428:	4607      	mov	r7, r0
 800c42a:	4691      	mov	r9, r2
 800c42c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c430:	f108 0601 	add.w	r6, r8, #1
 800c434:	42b3      	cmp	r3, r6
 800c436:	db0b      	blt.n	800c450 <__lshift+0x38>
 800c438:	4638      	mov	r0, r7
 800c43a:	f7ff fe2b 	bl	800c094 <_Balloc>
 800c43e:	4605      	mov	r5, r0
 800c440:	b948      	cbnz	r0, 800c456 <__lshift+0x3e>
 800c442:	4602      	mov	r2, r0
 800c444:	4b28      	ldr	r3, [pc, #160]	; (800c4e8 <__lshift+0xd0>)
 800c446:	4829      	ldr	r0, [pc, #164]	; (800c4ec <__lshift+0xd4>)
 800c448:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c44c:	f000 f9ee 	bl	800c82c <__assert_func>
 800c450:	3101      	adds	r1, #1
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	e7ee      	b.n	800c434 <__lshift+0x1c>
 800c456:	2300      	movs	r3, #0
 800c458:	f100 0114 	add.w	r1, r0, #20
 800c45c:	f100 0210 	add.w	r2, r0, #16
 800c460:	4618      	mov	r0, r3
 800c462:	4553      	cmp	r3, sl
 800c464:	db33      	blt.n	800c4ce <__lshift+0xb6>
 800c466:	6920      	ldr	r0, [r4, #16]
 800c468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c46c:	f104 0314 	add.w	r3, r4, #20
 800c470:	f019 091f 	ands.w	r9, r9, #31
 800c474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c478:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c47c:	d02b      	beq.n	800c4d6 <__lshift+0xbe>
 800c47e:	f1c9 0e20 	rsb	lr, r9, #32
 800c482:	468a      	mov	sl, r1
 800c484:	2200      	movs	r2, #0
 800c486:	6818      	ldr	r0, [r3, #0]
 800c488:	fa00 f009 	lsl.w	r0, r0, r9
 800c48c:	4310      	orrs	r0, r2
 800c48e:	f84a 0b04 	str.w	r0, [sl], #4
 800c492:	f853 2b04 	ldr.w	r2, [r3], #4
 800c496:	459c      	cmp	ip, r3
 800c498:	fa22 f20e 	lsr.w	r2, r2, lr
 800c49c:	d8f3      	bhi.n	800c486 <__lshift+0x6e>
 800c49e:	ebac 0304 	sub.w	r3, ip, r4
 800c4a2:	3b15      	subs	r3, #21
 800c4a4:	f023 0303 	bic.w	r3, r3, #3
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	f104 0015 	add.w	r0, r4, #21
 800c4ae:	4584      	cmp	ip, r0
 800c4b0:	bf38      	it	cc
 800c4b2:	2304      	movcc	r3, #4
 800c4b4:	50ca      	str	r2, [r1, r3]
 800c4b6:	b10a      	cbz	r2, 800c4bc <__lshift+0xa4>
 800c4b8:	f108 0602 	add.w	r6, r8, #2
 800c4bc:	3e01      	subs	r6, #1
 800c4be:	4638      	mov	r0, r7
 800c4c0:	612e      	str	r6, [r5, #16]
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	f7ff fe0b 	bl	800c0de <_Bfree>
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	e7c5      	b.n	800c462 <__lshift+0x4a>
 800c4d6:	3904      	subs	r1, #4
 800c4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4e0:	459c      	cmp	ip, r3
 800c4e2:	d8f9      	bhi.n	800c4d8 <__lshift+0xc0>
 800c4e4:	e7ea      	b.n	800c4bc <__lshift+0xa4>
 800c4e6:	bf00      	nop
 800c4e8:	0800e48d 	.word	0x0800e48d
 800c4ec:	0800e4f6 	.word	0x0800e4f6

0800c4f0 <__mcmp>:
 800c4f0:	b530      	push	{r4, r5, lr}
 800c4f2:	6902      	ldr	r2, [r0, #16]
 800c4f4:	690c      	ldr	r4, [r1, #16]
 800c4f6:	1b12      	subs	r2, r2, r4
 800c4f8:	d10e      	bne.n	800c518 <__mcmp+0x28>
 800c4fa:	f100 0314 	add.w	r3, r0, #20
 800c4fe:	3114      	adds	r1, #20
 800c500:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c504:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c508:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c50c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c510:	42a5      	cmp	r5, r4
 800c512:	d003      	beq.n	800c51c <__mcmp+0x2c>
 800c514:	d305      	bcc.n	800c522 <__mcmp+0x32>
 800c516:	2201      	movs	r2, #1
 800c518:	4610      	mov	r0, r2
 800c51a:	bd30      	pop	{r4, r5, pc}
 800c51c:	4283      	cmp	r3, r0
 800c51e:	d3f3      	bcc.n	800c508 <__mcmp+0x18>
 800c520:	e7fa      	b.n	800c518 <__mcmp+0x28>
 800c522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c526:	e7f7      	b.n	800c518 <__mcmp+0x28>

0800c528 <__mdiff>:
 800c528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	460c      	mov	r4, r1
 800c52e:	4606      	mov	r6, r0
 800c530:	4611      	mov	r1, r2
 800c532:	4620      	mov	r0, r4
 800c534:	4690      	mov	r8, r2
 800c536:	f7ff ffdb 	bl	800c4f0 <__mcmp>
 800c53a:	1e05      	subs	r5, r0, #0
 800c53c:	d110      	bne.n	800c560 <__mdiff+0x38>
 800c53e:	4629      	mov	r1, r5
 800c540:	4630      	mov	r0, r6
 800c542:	f7ff fda7 	bl	800c094 <_Balloc>
 800c546:	b930      	cbnz	r0, 800c556 <__mdiff+0x2e>
 800c548:	4b3a      	ldr	r3, [pc, #232]	; (800c634 <__mdiff+0x10c>)
 800c54a:	4602      	mov	r2, r0
 800c54c:	f240 2137 	movw	r1, #567	; 0x237
 800c550:	4839      	ldr	r0, [pc, #228]	; (800c638 <__mdiff+0x110>)
 800c552:	f000 f96b 	bl	800c82c <__assert_func>
 800c556:	2301      	movs	r3, #1
 800c558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c55c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c560:	bfa4      	itt	ge
 800c562:	4643      	movge	r3, r8
 800c564:	46a0      	movge	r8, r4
 800c566:	4630      	mov	r0, r6
 800c568:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c56c:	bfa6      	itte	ge
 800c56e:	461c      	movge	r4, r3
 800c570:	2500      	movge	r5, #0
 800c572:	2501      	movlt	r5, #1
 800c574:	f7ff fd8e 	bl	800c094 <_Balloc>
 800c578:	b920      	cbnz	r0, 800c584 <__mdiff+0x5c>
 800c57a:	4b2e      	ldr	r3, [pc, #184]	; (800c634 <__mdiff+0x10c>)
 800c57c:	4602      	mov	r2, r0
 800c57e:	f240 2145 	movw	r1, #581	; 0x245
 800c582:	e7e5      	b.n	800c550 <__mdiff+0x28>
 800c584:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c588:	6926      	ldr	r6, [r4, #16]
 800c58a:	60c5      	str	r5, [r0, #12]
 800c58c:	f104 0914 	add.w	r9, r4, #20
 800c590:	f108 0514 	add.w	r5, r8, #20
 800c594:	f100 0e14 	add.w	lr, r0, #20
 800c598:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c59c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5a0:	f108 0210 	add.w	r2, r8, #16
 800c5a4:	46f2      	mov	sl, lr
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5b0:	fa11 f88b 	uxtah	r8, r1, fp
 800c5b4:	b299      	uxth	r1, r3
 800c5b6:	0c1b      	lsrs	r3, r3, #16
 800c5b8:	eba8 0801 	sub.w	r8, r8, r1
 800c5bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5c4:	fa1f f888 	uxth.w	r8, r8
 800c5c8:	1419      	asrs	r1, r3, #16
 800c5ca:	454e      	cmp	r6, r9
 800c5cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5d0:	f84a 3b04 	str.w	r3, [sl], #4
 800c5d4:	d8e8      	bhi.n	800c5a8 <__mdiff+0x80>
 800c5d6:	1b33      	subs	r3, r6, r4
 800c5d8:	3b15      	subs	r3, #21
 800c5da:	f023 0303 	bic.w	r3, r3, #3
 800c5de:	3304      	adds	r3, #4
 800c5e0:	3415      	adds	r4, #21
 800c5e2:	42a6      	cmp	r6, r4
 800c5e4:	bf38      	it	cc
 800c5e6:	2304      	movcc	r3, #4
 800c5e8:	441d      	add	r5, r3
 800c5ea:	4473      	add	r3, lr
 800c5ec:	469e      	mov	lr, r3
 800c5ee:	462e      	mov	r6, r5
 800c5f0:	4566      	cmp	r6, ip
 800c5f2:	d30e      	bcc.n	800c612 <__mdiff+0xea>
 800c5f4:	f10c 0203 	add.w	r2, ip, #3
 800c5f8:	1b52      	subs	r2, r2, r5
 800c5fa:	f022 0203 	bic.w	r2, r2, #3
 800c5fe:	3d03      	subs	r5, #3
 800c600:	45ac      	cmp	ip, r5
 800c602:	bf38      	it	cc
 800c604:	2200      	movcc	r2, #0
 800c606:	4413      	add	r3, r2
 800c608:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c60c:	b17a      	cbz	r2, 800c62e <__mdiff+0x106>
 800c60e:	6107      	str	r7, [r0, #16]
 800c610:	e7a4      	b.n	800c55c <__mdiff+0x34>
 800c612:	f856 8b04 	ldr.w	r8, [r6], #4
 800c616:	fa11 f288 	uxtah	r2, r1, r8
 800c61a:	1414      	asrs	r4, r2, #16
 800c61c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c620:	b292      	uxth	r2, r2
 800c622:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c626:	f84e 2b04 	str.w	r2, [lr], #4
 800c62a:	1421      	asrs	r1, r4, #16
 800c62c:	e7e0      	b.n	800c5f0 <__mdiff+0xc8>
 800c62e:	3f01      	subs	r7, #1
 800c630:	e7ea      	b.n	800c608 <__mdiff+0xe0>
 800c632:	bf00      	nop
 800c634:	0800e48d 	.word	0x0800e48d
 800c638:	0800e4f6 	.word	0x0800e4f6

0800c63c <__d2b>:
 800c63c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c640:	460f      	mov	r7, r1
 800c642:	2101      	movs	r1, #1
 800c644:	ec59 8b10 	vmov	r8, r9, d0
 800c648:	4616      	mov	r6, r2
 800c64a:	f7ff fd23 	bl	800c094 <_Balloc>
 800c64e:	4604      	mov	r4, r0
 800c650:	b930      	cbnz	r0, 800c660 <__d2b+0x24>
 800c652:	4602      	mov	r2, r0
 800c654:	4b24      	ldr	r3, [pc, #144]	; (800c6e8 <__d2b+0xac>)
 800c656:	4825      	ldr	r0, [pc, #148]	; (800c6ec <__d2b+0xb0>)
 800c658:	f240 310f 	movw	r1, #783	; 0x30f
 800c65c:	f000 f8e6 	bl	800c82c <__assert_func>
 800c660:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c668:	bb2d      	cbnz	r5, 800c6b6 <__d2b+0x7a>
 800c66a:	9301      	str	r3, [sp, #4]
 800c66c:	f1b8 0300 	subs.w	r3, r8, #0
 800c670:	d026      	beq.n	800c6c0 <__d2b+0x84>
 800c672:	4668      	mov	r0, sp
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	f7ff fda1 	bl	800c1bc <__lo0bits>
 800c67a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c67e:	b1e8      	cbz	r0, 800c6bc <__d2b+0x80>
 800c680:	f1c0 0320 	rsb	r3, r0, #32
 800c684:	fa02 f303 	lsl.w	r3, r2, r3
 800c688:	430b      	orrs	r3, r1
 800c68a:	40c2      	lsrs	r2, r0
 800c68c:	6163      	str	r3, [r4, #20]
 800c68e:	9201      	str	r2, [sp, #4]
 800c690:	9b01      	ldr	r3, [sp, #4]
 800c692:	61a3      	str	r3, [r4, #24]
 800c694:	2b00      	cmp	r3, #0
 800c696:	bf14      	ite	ne
 800c698:	2202      	movne	r2, #2
 800c69a:	2201      	moveq	r2, #1
 800c69c:	6122      	str	r2, [r4, #16]
 800c69e:	b1bd      	cbz	r5, 800c6d0 <__d2b+0x94>
 800c6a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6a4:	4405      	add	r5, r0
 800c6a6:	603d      	str	r5, [r7, #0]
 800c6a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6ac:	6030      	str	r0, [r6, #0]
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	b003      	add	sp, #12
 800c6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6ba:	e7d6      	b.n	800c66a <__d2b+0x2e>
 800c6bc:	6161      	str	r1, [r4, #20]
 800c6be:	e7e7      	b.n	800c690 <__d2b+0x54>
 800c6c0:	a801      	add	r0, sp, #4
 800c6c2:	f7ff fd7b 	bl	800c1bc <__lo0bits>
 800c6c6:	9b01      	ldr	r3, [sp, #4]
 800c6c8:	6163      	str	r3, [r4, #20]
 800c6ca:	3020      	adds	r0, #32
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	e7e5      	b.n	800c69c <__d2b+0x60>
 800c6d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6d8:	6038      	str	r0, [r7, #0]
 800c6da:	6918      	ldr	r0, [r3, #16]
 800c6dc:	f7ff fd4e 	bl	800c17c <__hi0bits>
 800c6e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6e4:	e7e2      	b.n	800c6ac <__d2b+0x70>
 800c6e6:	bf00      	nop
 800c6e8:	0800e48d 	.word	0x0800e48d
 800c6ec:	0800e4f6 	.word	0x0800e4f6

0800c6f0 <__ssprint_r>:
 800c6f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	6813      	ldr	r3, [r2, #0]
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	6893      	ldr	r3, [r2, #8]
 800c6fa:	4680      	mov	r8, r0
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	4617      	mov	r7, r2
 800c700:	2b00      	cmp	r3, #0
 800c702:	d157      	bne.n	800c7b4 <__ssprint_r+0xc4>
 800c704:	2000      	movs	r0, #0
 800c706:	2300      	movs	r3, #0
 800c708:	607b      	str	r3, [r7, #4]
 800c70a:	b003      	add	sp, #12
 800c70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c710:	9b01      	ldr	r3, [sp, #4]
 800c712:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800c716:	3308      	adds	r3, #8
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	68a6      	ldr	r6, [r4, #8]
 800c71c:	6820      	ldr	r0, [r4, #0]
 800c71e:	f1bb 0f00 	cmp.w	fp, #0
 800c722:	d0f5      	beq.n	800c710 <__ssprint_r+0x20>
 800c724:	45b3      	cmp	fp, r6
 800c726:	d32d      	bcc.n	800c784 <__ssprint_r+0x94>
 800c728:	89a2      	ldrh	r2, [r4, #12]
 800c72a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c72e:	d029      	beq.n	800c784 <__ssprint_r+0x94>
 800c730:	6921      	ldr	r1, [r4, #16]
 800c732:	6965      	ldr	r5, [r4, #20]
 800c734:	eba0 0901 	sub.w	r9, r0, r1
 800c738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c73c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c740:	f109 0001 	add.w	r0, r9, #1
 800c744:	106d      	asrs	r5, r5, #1
 800c746:	4458      	add	r0, fp
 800c748:	4285      	cmp	r5, r0
 800c74a:	bf38      	it	cc
 800c74c:	4605      	movcc	r5, r0
 800c74e:	0553      	lsls	r3, r2, #21
 800c750:	d534      	bpl.n	800c7bc <__ssprint_r+0xcc>
 800c752:	4629      	mov	r1, r5
 800c754:	4640      	mov	r0, r8
 800c756:	f7fd f841 	bl	80097dc <_malloc_r>
 800c75a:	4606      	mov	r6, r0
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d038      	beq.n	800c7d2 <__ssprint_r+0xe2>
 800c760:	464a      	mov	r2, r9
 800c762:	6921      	ldr	r1, [r4, #16]
 800c764:	f7fc ff08 	bl	8009578 <memcpy>
 800c768:	89a2      	ldrh	r2, [r4, #12]
 800c76a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c76e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c772:	81a2      	strh	r2, [r4, #12]
 800c774:	6126      	str	r6, [r4, #16]
 800c776:	6165      	str	r5, [r4, #20]
 800c778:	444e      	add	r6, r9
 800c77a:	eba5 0509 	sub.w	r5, r5, r9
 800c77e:	6026      	str	r6, [r4, #0]
 800c780:	60a5      	str	r5, [r4, #8]
 800c782:	465e      	mov	r6, fp
 800c784:	455e      	cmp	r6, fp
 800c786:	bf28      	it	cs
 800c788:	465e      	movcs	r6, fp
 800c78a:	4632      	mov	r2, r6
 800c78c:	4651      	mov	r1, sl
 800c78e:	6820      	ldr	r0, [r4, #0]
 800c790:	f000 f82b 	bl	800c7ea <memmove>
 800c794:	68a2      	ldr	r2, [r4, #8]
 800c796:	1b92      	subs	r2, r2, r6
 800c798:	60a2      	str	r2, [r4, #8]
 800c79a:	6822      	ldr	r2, [r4, #0]
 800c79c:	4432      	add	r2, r6
 800c79e:	6022      	str	r2, [r4, #0]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	eba2 030b 	sub.w	r3, r2, fp
 800c7a6:	44da      	add	sl, fp
 800c7a8:	60bb      	str	r3, [r7, #8]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0aa      	beq.n	800c704 <__ssprint_r+0x14>
 800c7ae:	f04f 0b00 	mov.w	fp, #0
 800c7b2:	e7b2      	b.n	800c71a <__ssprint_r+0x2a>
 800c7b4:	f04f 0a00 	mov.w	sl, #0
 800c7b8:	46d3      	mov	fp, sl
 800c7ba:	e7ae      	b.n	800c71a <__ssprint_r+0x2a>
 800c7bc:	462a      	mov	r2, r5
 800c7be:	4640      	mov	r0, r8
 800c7c0:	f000 f89a 	bl	800c8f8 <_realloc_r>
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d1d4      	bne.n	800c774 <__ssprint_r+0x84>
 800c7ca:	6921      	ldr	r1, [r4, #16]
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	f7fc ff45 	bl	800965c <_free_r>
 800c7d2:	230c      	movs	r3, #12
 800c7d4:	f8c8 3000 	str.w	r3, [r8]
 800c7d8:	89a3      	ldrh	r3, [r4, #12]
 800c7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7de:	81a3      	strh	r3, [r4, #12]
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60bb      	str	r3, [r7, #8]
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7e8:	e78d      	b.n	800c706 <__ssprint_r+0x16>

0800c7ea <memmove>:
 800c7ea:	4288      	cmp	r0, r1
 800c7ec:	b510      	push	{r4, lr}
 800c7ee:	eb01 0402 	add.w	r4, r1, r2
 800c7f2:	d902      	bls.n	800c7fa <memmove+0x10>
 800c7f4:	4284      	cmp	r4, r0
 800c7f6:	4623      	mov	r3, r4
 800c7f8:	d807      	bhi.n	800c80a <memmove+0x20>
 800c7fa:	1e43      	subs	r3, r0, #1
 800c7fc:	42a1      	cmp	r1, r4
 800c7fe:	d008      	beq.n	800c812 <memmove+0x28>
 800c800:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c804:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c808:	e7f8      	b.n	800c7fc <memmove+0x12>
 800c80a:	4402      	add	r2, r0
 800c80c:	4601      	mov	r1, r0
 800c80e:	428a      	cmp	r2, r1
 800c810:	d100      	bne.n	800c814 <memmove+0x2a>
 800c812:	bd10      	pop	{r4, pc}
 800c814:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c818:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c81c:	e7f7      	b.n	800c80e <memmove+0x24>
	...

0800c820 <__locale_mb_cur_max>:
 800c820:	4b01      	ldr	r3, [pc, #4]	; (800c828 <__locale_mb_cur_max+0x8>)
 800c822:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800c826:	4770      	bx	lr
 800c828:	20000580 	.word	0x20000580

0800c82c <__assert_func>:
 800c82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c82e:	4614      	mov	r4, r2
 800c830:	461a      	mov	r2, r3
 800c832:	4b09      	ldr	r3, [pc, #36]	; (800c858 <__assert_func+0x2c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4605      	mov	r5, r0
 800c838:	68d8      	ldr	r0, [r3, #12]
 800c83a:	b14c      	cbz	r4, 800c850 <__assert_func+0x24>
 800c83c:	4b07      	ldr	r3, [pc, #28]	; (800c85c <__assert_func+0x30>)
 800c83e:	9100      	str	r1, [sp, #0]
 800c840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c844:	4906      	ldr	r1, [pc, #24]	; (800c860 <__assert_func+0x34>)
 800c846:	462b      	mov	r3, r5
 800c848:	f000 fa0c 	bl	800cc64 <fiprintf>
 800c84c:	f001 f92d 	bl	800daaa <abort>
 800c850:	4b04      	ldr	r3, [pc, #16]	; (800c864 <__assert_func+0x38>)
 800c852:	461c      	mov	r4, r3
 800c854:	e7f3      	b.n	800c83e <__assert_func+0x12>
 800c856:	bf00      	nop
 800c858:	20000168 	.word	0x20000168
 800c85c:	0800e656 	.word	0x0800e656
 800c860:	0800e663 	.word	0x0800e663
 800c864:	0800e691 	.word	0x0800e691

0800c868 <_calloc_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	fba1 1502 	umull	r1, r5, r1, r2
 800c86e:	b92d      	cbnz	r5, 800c87c <_calloc_r+0x14>
 800c870:	f7fc ffb4 	bl	80097dc <_malloc_r>
 800c874:	4604      	mov	r4, r0
 800c876:	b938      	cbnz	r0, 800c888 <_calloc_r+0x20>
 800c878:	4620      	mov	r0, r4
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	f7fc fe4e 	bl	800951c <__errno>
 800c880:	230c      	movs	r3, #12
 800c882:	6003      	str	r3, [r0, #0]
 800c884:	2400      	movs	r4, #0
 800c886:	e7f7      	b.n	800c878 <_calloc_r+0x10>
 800c888:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c88c:	f022 0203 	bic.w	r2, r2, #3
 800c890:	3a04      	subs	r2, #4
 800c892:	2a24      	cmp	r2, #36	; 0x24
 800c894:	d819      	bhi.n	800c8ca <_calloc_r+0x62>
 800c896:	2a13      	cmp	r2, #19
 800c898:	d915      	bls.n	800c8c6 <_calloc_r+0x5e>
 800c89a:	2a1b      	cmp	r2, #27
 800c89c:	e9c0 5500 	strd	r5, r5, [r0]
 800c8a0:	d806      	bhi.n	800c8b0 <_calloc_r+0x48>
 800c8a2:	f100 0308 	add.w	r3, r0, #8
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	e9c3 2200 	strd	r2, r2, [r3]
 800c8ac:	609a      	str	r2, [r3, #8]
 800c8ae:	e7e3      	b.n	800c878 <_calloc_r+0x10>
 800c8b0:	2a24      	cmp	r2, #36	; 0x24
 800c8b2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800c8b6:	bf11      	iteee	ne
 800c8b8:	f100 0310 	addne.w	r3, r0, #16
 800c8bc:	6105      	streq	r5, [r0, #16]
 800c8be:	f100 0318 	addeq.w	r3, r0, #24
 800c8c2:	6145      	streq	r5, [r0, #20]
 800c8c4:	e7ef      	b.n	800c8a6 <_calloc_r+0x3e>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	e7ed      	b.n	800c8a6 <_calloc_r+0x3e>
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	f7fc fda9 	bl	8009422 <memset>
 800c8d0:	e7d2      	b.n	800c878 <_calloc_r+0x10>

0800c8d2 <__ascii_mbtowc>:
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	b901      	cbnz	r1, 800c8d8 <__ascii_mbtowc+0x6>
 800c8d6:	a901      	add	r1, sp, #4
 800c8d8:	b142      	cbz	r2, 800c8ec <__ascii_mbtowc+0x1a>
 800c8da:	b14b      	cbz	r3, 800c8f0 <__ascii_mbtowc+0x1e>
 800c8dc:	7813      	ldrb	r3, [r2, #0]
 800c8de:	600b      	str	r3, [r1, #0]
 800c8e0:	7812      	ldrb	r2, [r2, #0]
 800c8e2:	1e10      	subs	r0, r2, #0
 800c8e4:	bf18      	it	ne
 800c8e6:	2001      	movne	r0, #1
 800c8e8:	b002      	add	sp, #8
 800c8ea:	4770      	bx	lr
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	e7fb      	b.n	800c8e8 <__ascii_mbtowc+0x16>
 800c8f0:	f06f 0001 	mvn.w	r0, #1
 800c8f4:	e7f8      	b.n	800c8e8 <__ascii_mbtowc+0x16>
	...

0800c8f8 <_realloc_r>:
 800c8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fc:	4682      	mov	sl, r0
 800c8fe:	460c      	mov	r4, r1
 800c900:	b929      	cbnz	r1, 800c90e <_realloc_r+0x16>
 800c902:	4611      	mov	r1, r2
 800c904:	b003      	add	sp, #12
 800c906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90a:	f7fc bf67 	b.w	80097dc <_malloc_r>
 800c90e:	9201      	str	r2, [sp, #4]
 800c910:	f7fd f99e 	bl	8009c50 <__malloc_lock>
 800c914:	9a01      	ldr	r2, [sp, #4]
 800c916:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c91a:	f102 080b 	add.w	r8, r2, #11
 800c91e:	f1b8 0f16 	cmp.w	r8, #22
 800c922:	d90b      	bls.n	800c93c <_realloc_r+0x44>
 800c924:	f038 0807 	bics.w	r8, r8, #7
 800c928:	d50a      	bpl.n	800c940 <_realloc_r+0x48>
 800c92a:	230c      	movs	r3, #12
 800c92c:	f8ca 3000 	str.w	r3, [sl]
 800c930:	f04f 0b00 	mov.w	fp, #0
 800c934:	4658      	mov	r0, fp
 800c936:	b003      	add	sp, #12
 800c938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93c:	f04f 0810 	mov.w	r8, #16
 800c940:	4590      	cmp	r8, r2
 800c942:	d3f2      	bcc.n	800c92a <_realloc_r+0x32>
 800c944:	f025 0603 	bic.w	r6, r5, #3
 800c948:	45b0      	cmp	r8, r6
 800c94a:	f1a4 0908 	sub.w	r9, r4, #8
 800c94e:	f340 8170 	ble.w	800cc32 <_realloc_r+0x33a>
 800c952:	499c      	ldr	r1, [pc, #624]	; (800cbc4 <_realloc_r+0x2cc>)
 800c954:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800c958:	eb09 0306 	add.w	r3, r9, r6
 800c95c:	459c      	cmp	ip, r3
 800c95e:	6859      	ldr	r1, [r3, #4]
 800c960:	d005      	beq.n	800c96e <_realloc_r+0x76>
 800c962:	f021 0001 	bic.w	r0, r1, #1
 800c966:	4418      	add	r0, r3
 800c968:	6840      	ldr	r0, [r0, #4]
 800c96a:	07c7      	lsls	r7, r0, #31
 800c96c:	d447      	bmi.n	800c9fe <_realloc_r+0x106>
 800c96e:	f021 0103 	bic.w	r1, r1, #3
 800c972:	459c      	cmp	ip, r3
 800c974:	eb06 0701 	add.w	r7, r6, r1
 800c978:	d119      	bne.n	800c9ae <_realloc_r+0xb6>
 800c97a:	f108 0010 	add.w	r0, r8, #16
 800c97e:	42b8      	cmp	r0, r7
 800c980:	dc3f      	bgt.n	800ca02 <_realloc_r+0x10a>
 800c982:	eb09 0308 	add.w	r3, r9, r8
 800c986:	4a8f      	ldr	r2, [pc, #572]	; (800cbc4 <_realloc_r+0x2cc>)
 800c988:	eba7 0708 	sub.w	r7, r7, r8
 800c98c:	f047 0701 	orr.w	r7, r7, #1
 800c990:	6093      	str	r3, [r2, #8]
 800c992:	605f      	str	r7, [r3, #4]
 800c994:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	ea43 0308 	orr.w	r3, r3, r8
 800c9a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9a4:	4650      	mov	r0, sl
 800c9a6:	f7fd f959 	bl	8009c5c <__malloc_unlock>
 800c9aa:	46a3      	mov	fp, r4
 800c9ac:	e7c2      	b.n	800c934 <_realloc_r+0x3c>
 800c9ae:	45b8      	cmp	r8, r7
 800c9b0:	dc27      	bgt.n	800ca02 <_realloc_r+0x10a>
 800c9b2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800c9b6:	60da      	str	r2, [r3, #12]
 800c9b8:	6093      	str	r3, [r2, #8]
 800c9ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c9be:	eba7 0008 	sub.w	r0, r7, r8
 800c9c2:	280f      	cmp	r0, #15
 800c9c4:	f003 0301 	and.w	r3, r3, #1
 800c9c8:	eb09 0207 	add.w	r2, r9, r7
 800c9cc:	f240 8133 	bls.w	800cc36 <_realloc_r+0x33e>
 800c9d0:	eb09 0108 	add.w	r1, r9, r8
 800c9d4:	ea48 0303 	orr.w	r3, r8, r3
 800c9d8:	f040 0001 	orr.w	r0, r0, #1
 800c9dc:	f8c9 3004 	str.w	r3, [r9, #4]
 800c9e0:	6048      	str	r0, [r1, #4]
 800c9e2:	6853      	ldr	r3, [r2, #4]
 800c9e4:	f043 0301 	orr.w	r3, r3, #1
 800c9e8:	6053      	str	r3, [r2, #4]
 800c9ea:	3108      	adds	r1, #8
 800c9ec:	4650      	mov	r0, sl
 800c9ee:	f7fc fe35 	bl	800965c <_free_r>
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	f7fd f932 	bl	8009c5c <__malloc_unlock>
 800c9f8:	f109 0b08 	add.w	fp, r9, #8
 800c9fc:	e79a      	b.n	800c934 <_realloc_r+0x3c>
 800c9fe:	2100      	movs	r1, #0
 800ca00:	460b      	mov	r3, r1
 800ca02:	07e8      	lsls	r0, r5, #31
 800ca04:	f100 80c6 	bmi.w	800cb94 <_realloc_r+0x29c>
 800ca08:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800ca0c:	eba9 0505 	sub.w	r5, r9, r5
 800ca10:	6868      	ldr	r0, [r5, #4]
 800ca12:	f020 0003 	bic.w	r0, r0, #3
 800ca16:	eb00 0b06 	add.w	fp, r0, r6
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	f000 8086 	beq.w	800cb2c <_realloc_r+0x234>
 800ca20:	459c      	cmp	ip, r3
 800ca22:	eb01 070b 	add.w	r7, r1, fp
 800ca26:	d149      	bne.n	800cabc <_realloc_r+0x1c4>
 800ca28:	f108 0310 	add.w	r3, r8, #16
 800ca2c:	42bb      	cmp	r3, r7
 800ca2e:	dc7d      	bgt.n	800cb2c <_realloc_r+0x234>
 800ca30:	46ab      	mov	fp, r5
 800ca32:	68eb      	ldr	r3, [r5, #12]
 800ca34:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800ca38:	60d3      	str	r3, [r2, #12]
 800ca3a:	609a      	str	r2, [r3, #8]
 800ca3c:	1f32      	subs	r2, r6, #4
 800ca3e:	2a24      	cmp	r2, #36	; 0x24
 800ca40:	d837      	bhi.n	800cab2 <_realloc_r+0x1ba>
 800ca42:	2a13      	cmp	r2, #19
 800ca44:	d933      	bls.n	800caae <_realloc_r+0x1b6>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	60ab      	str	r3, [r5, #8]
 800ca4a:	6863      	ldr	r3, [r4, #4]
 800ca4c:	60eb      	str	r3, [r5, #12]
 800ca4e:	2a1b      	cmp	r2, #27
 800ca50:	d81b      	bhi.n	800ca8a <_realloc_r+0x192>
 800ca52:	3408      	adds	r4, #8
 800ca54:	f105 0310 	add.w	r3, r5, #16
 800ca58:	6822      	ldr	r2, [r4, #0]
 800ca5a:	601a      	str	r2, [r3, #0]
 800ca5c:	6862      	ldr	r2, [r4, #4]
 800ca5e:	605a      	str	r2, [r3, #4]
 800ca60:	68a2      	ldr	r2, [r4, #8]
 800ca62:	609a      	str	r2, [r3, #8]
 800ca64:	eb05 0308 	add.w	r3, r5, r8
 800ca68:	4a56      	ldr	r2, [pc, #344]	; (800cbc4 <_realloc_r+0x2cc>)
 800ca6a:	eba7 0708 	sub.w	r7, r7, r8
 800ca6e:	f047 0701 	orr.w	r7, r7, #1
 800ca72:	6093      	str	r3, [r2, #8]
 800ca74:	605f      	str	r7, [r3, #4]
 800ca76:	686b      	ldr	r3, [r5, #4]
 800ca78:	f003 0301 	and.w	r3, r3, #1
 800ca7c:	ea43 0308 	orr.w	r3, r3, r8
 800ca80:	606b      	str	r3, [r5, #4]
 800ca82:	4650      	mov	r0, sl
 800ca84:	f7fd f8ea 	bl	8009c5c <__malloc_unlock>
 800ca88:	e754      	b.n	800c934 <_realloc_r+0x3c>
 800ca8a:	68a3      	ldr	r3, [r4, #8]
 800ca8c:	612b      	str	r3, [r5, #16]
 800ca8e:	68e3      	ldr	r3, [r4, #12]
 800ca90:	616b      	str	r3, [r5, #20]
 800ca92:	2a24      	cmp	r2, #36	; 0x24
 800ca94:	bf01      	itttt	eq
 800ca96:	6923      	ldreq	r3, [r4, #16]
 800ca98:	61ab      	streq	r3, [r5, #24]
 800ca9a:	6962      	ldreq	r2, [r4, #20]
 800ca9c:	61ea      	streq	r2, [r5, #28]
 800ca9e:	bf19      	ittee	ne
 800caa0:	3410      	addne	r4, #16
 800caa2:	f105 0318 	addne.w	r3, r5, #24
 800caa6:	f105 0320 	addeq.w	r3, r5, #32
 800caaa:	3418      	addeq	r4, #24
 800caac:	e7d4      	b.n	800ca58 <_realloc_r+0x160>
 800caae:	465b      	mov	r3, fp
 800cab0:	e7d2      	b.n	800ca58 <_realloc_r+0x160>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4658      	mov	r0, fp
 800cab6:	f7ff fe98 	bl	800c7ea <memmove>
 800caba:	e7d3      	b.n	800ca64 <_realloc_r+0x16c>
 800cabc:	45b8      	cmp	r8, r7
 800cabe:	dc35      	bgt.n	800cb2c <_realloc_r+0x234>
 800cac0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800cac4:	4628      	mov	r0, r5
 800cac6:	60da      	str	r2, [r3, #12]
 800cac8:	6093      	str	r3, [r2, #8]
 800caca:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800cace:	68eb      	ldr	r3, [r5, #12]
 800cad0:	60d3      	str	r3, [r2, #12]
 800cad2:	609a      	str	r2, [r3, #8]
 800cad4:	1f32      	subs	r2, r6, #4
 800cad6:	2a24      	cmp	r2, #36	; 0x24
 800cad8:	d824      	bhi.n	800cb24 <_realloc_r+0x22c>
 800cada:	2a13      	cmp	r2, #19
 800cadc:	d908      	bls.n	800caf0 <_realloc_r+0x1f8>
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	60ab      	str	r3, [r5, #8]
 800cae2:	6863      	ldr	r3, [r4, #4]
 800cae4:	60eb      	str	r3, [r5, #12]
 800cae6:	2a1b      	cmp	r2, #27
 800cae8:	d80a      	bhi.n	800cb00 <_realloc_r+0x208>
 800caea:	3408      	adds	r4, #8
 800caec:	f105 0010 	add.w	r0, r5, #16
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	6003      	str	r3, [r0, #0]
 800caf4:	6863      	ldr	r3, [r4, #4]
 800caf6:	6043      	str	r3, [r0, #4]
 800caf8:	68a3      	ldr	r3, [r4, #8]
 800cafa:	6083      	str	r3, [r0, #8]
 800cafc:	46a9      	mov	r9, r5
 800cafe:	e75c      	b.n	800c9ba <_realloc_r+0xc2>
 800cb00:	68a3      	ldr	r3, [r4, #8]
 800cb02:	612b      	str	r3, [r5, #16]
 800cb04:	68e3      	ldr	r3, [r4, #12]
 800cb06:	616b      	str	r3, [r5, #20]
 800cb08:	2a24      	cmp	r2, #36	; 0x24
 800cb0a:	bf01      	itttt	eq
 800cb0c:	6923      	ldreq	r3, [r4, #16]
 800cb0e:	61ab      	streq	r3, [r5, #24]
 800cb10:	6963      	ldreq	r3, [r4, #20]
 800cb12:	61eb      	streq	r3, [r5, #28]
 800cb14:	bf19      	ittee	ne
 800cb16:	3410      	addne	r4, #16
 800cb18:	f105 0018 	addne.w	r0, r5, #24
 800cb1c:	f105 0020 	addeq.w	r0, r5, #32
 800cb20:	3418      	addeq	r4, #24
 800cb22:	e7e5      	b.n	800caf0 <_realloc_r+0x1f8>
 800cb24:	4621      	mov	r1, r4
 800cb26:	f7ff fe60 	bl	800c7ea <memmove>
 800cb2a:	e7e7      	b.n	800cafc <_realloc_r+0x204>
 800cb2c:	45d8      	cmp	r8, fp
 800cb2e:	dc31      	bgt.n	800cb94 <_realloc_r+0x29c>
 800cb30:	4628      	mov	r0, r5
 800cb32:	68eb      	ldr	r3, [r5, #12]
 800cb34:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800cb38:	60d3      	str	r3, [r2, #12]
 800cb3a:	609a      	str	r2, [r3, #8]
 800cb3c:	1f32      	subs	r2, r6, #4
 800cb3e:	2a24      	cmp	r2, #36	; 0x24
 800cb40:	d824      	bhi.n	800cb8c <_realloc_r+0x294>
 800cb42:	2a13      	cmp	r2, #19
 800cb44:	d908      	bls.n	800cb58 <_realloc_r+0x260>
 800cb46:	6823      	ldr	r3, [r4, #0]
 800cb48:	60ab      	str	r3, [r5, #8]
 800cb4a:	6863      	ldr	r3, [r4, #4]
 800cb4c:	60eb      	str	r3, [r5, #12]
 800cb4e:	2a1b      	cmp	r2, #27
 800cb50:	d80a      	bhi.n	800cb68 <_realloc_r+0x270>
 800cb52:	3408      	adds	r4, #8
 800cb54:	f105 0010 	add.w	r0, r5, #16
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	6003      	str	r3, [r0, #0]
 800cb5c:	6863      	ldr	r3, [r4, #4]
 800cb5e:	6043      	str	r3, [r0, #4]
 800cb60:	68a3      	ldr	r3, [r4, #8]
 800cb62:	6083      	str	r3, [r0, #8]
 800cb64:	465f      	mov	r7, fp
 800cb66:	e7c9      	b.n	800cafc <_realloc_r+0x204>
 800cb68:	68a3      	ldr	r3, [r4, #8]
 800cb6a:	612b      	str	r3, [r5, #16]
 800cb6c:	68e3      	ldr	r3, [r4, #12]
 800cb6e:	616b      	str	r3, [r5, #20]
 800cb70:	2a24      	cmp	r2, #36	; 0x24
 800cb72:	bf01      	itttt	eq
 800cb74:	6923      	ldreq	r3, [r4, #16]
 800cb76:	61ab      	streq	r3, [r5, #24]
 800cb78:	6963      	ldreq	r3, [r4, #20]
 800cb7a:	61eb      	streq	r3, [r5, #28]
 800cb7c:	bf19      	ittee	ne
 800cb7e:	3410      	addne	r4, #16
 800cb80:	f105 0018 	addne.w	r0, r5, #24
 800cb84:	f105 0020 	addeq.w	r0, r5, #32
 800cb88:	3418      	addeq	r4, #24
 800cb8a:	e7e5      	b.n	800cb58 <_realloc_r+0x260>
 800cb8c:	4621      	mov	r1, r4
 800cb8e:	f7ff fe2c 	bl	800c7ea <memmove>
 800cb92:	e7e7      	b.n	800cb64 <_realloc_r+0x26c>
 800cb94:	4611      	mov	r1, r2
 800cb96:	4650      	mov	r0, sl
 800cb98:	f7fc fe20 	bl	80097dc <_malloc_r>
 800cb9c:	4683      	mov	fp, r0
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	f43f af6f 	beq.w	800ca82 <_realloc_r+0x18a>
 800cba4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cba8:	f023 0301 	bic.w	r3, r3, #1
 800cbac:	444b      	add	r3, r9
 800cbae:	f1a0 0208 	sub.w	r2, r0, #8
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d108      	bne.n	800cbc8 <_realloc_r+0x2d0>
 800cbb6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800cbba:	f027 0703 	bic.w	r7, r7, #3
 800cbbe:	4437      	add	r7, r6
 800cbc0:	e6fb      	b.n	800c9ba <_realloc_r+0xc2>
 800cbc2:	bf00      	nop
 800cbc4:	20000170 	.word	0x20000170
 800cbc8:	1f32      	subs	r2, r6, #4
 800cbca:	2a24      	cmp	r2, #36	; 0x24
 800cbcc:	d82d      	bhi.n	800cc2a <_realloc_r+0x332>
 800cbce:	2a13      	cmp	r2, #19
 800cbd0:	d928      	bls.n	800cc24 <_realloc_r+0x32c>
 800cbd2:	6823      	ldr	r3, [r4, #0]
 800cbd4:	6003      	str	r3, [r0, #0]
 800cbd6:	6863      	ldr	r3, [r4, #4]
 800cbd8:	6043      	str	r3, [r0, #4]
 800cbda:	2a1b      	cmp	r2, #27
 800cbdc:	d80e      	bhi.n	800cbfc <_realloc_r+0x304>
 800cbde:	f104 0208 	add.w	r2, r4, #8
 800cbe2:	f100 0308 	add.w	r3, r0, #8
 800cbe6:	6811      	ldr	r1, [r2, #0]
 800cbe8:	6019      	str	r1, [r3, #0]
 800cbea:	6851      	ldr	r1, [r2, #4]
 800cbec:	6059      	str	r1, [r3, #4]
 800cbee:	6892      	ldr	r2, [r2, #8]
 800cbf0:	609a      	str	r2, [r3, #8]
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	4650      	mov	r0, sl
 800cbf6:	f7fc fd31 	bl	800965c <_free_r>
 800cbfa:	e742      	b.n	800ca82 <_realloc_r+0x18a>
 800cbfc:	68a3      	ldr	r3, [r4, #8]
 800cbfe:	6083      	str	r3, [r0, #8]
 800cc00:	68e3      	ldr	r3, [r4, #12]
 800cc02:	60c3      	str	r3, [r0, #12]
 800cc04:	2a24      	cmp	r2, #36	; 0x24
 800cc06:	bf01      	itttt	eq
 800cc08:	6923      	ldreq	r3, [r4, #16]
 800cc0a:	6103      	streq	r3, [r0, #16]
 800cc0c:	6961      	ldreq	r1, [r4, #20]
 800cc0e:	6141      	streq	r1, [r0, #20]
 800cc10:	bf19      	ittee	ne
 800cc12:	f104 0210 	addne.w	r2, r4, #16
 800cc16:	f100 0310 	addne.w	r3, r0, #16
 800cc1a:	f104 0218 	addeq.w	r2, r4, #24
 800cc1e:	f100 0318 	addeq.w	r3, r0, #24
 800cc22:	e7e0      	b.n	800cbe6 <_realloc_r+0x2ee>
 800cc24:	4603      	mov	r3, r0
 800cc26:	4622      	mov	r2, r4
 800cc28:	e7dd      	b.n	800cbe6 <_realloc_r+0x2ee>
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	f7ff fddd 	bl	800c7ea <memmove>
 800cc30:	e7df      	b.n	800cbf2 <_realloc_r+0x2fa>
 800cc32:	4637      	mov	r7, r6
 800cc34:	e6c1      	b.n	800c9ba <_realloc_r+0xc2>
 800cc36:	431f      	orrs	r7, r3
 800cc38:	f8c9 7004 	str.w	r7, [r9, #4]
 800cc3c:	6853      	ldr	r3, [r2, #4]
 800cc3e:	f043 0301 	orr.w	r3, r3, #1
 800cc42:	6053      	str	r3, [r2, #4]
 800cc44:	e6d5      	b.n	800c9f2 <_realloc_r+0xfa>
 800cc46:	bf00      	nop

0800cc48 <__ascii_wctomb>:
 800cc48:	b149      	cbz	r1, 800cc5e <__ascii_wctomb+0x16>
 800cc4a:	2aff      	cmp	r2, #255	; 0xff
 800cc4c:	bf85      	ittet	hi
 800cc4e:	238a      	movhi	r3, #138	; 0x8a
 800cc50:	6003      	strhi	r3, [r0, #0]
 800cc52:	700a      	strbls	r2, [r1, #0]
 800cc54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cc58:	bf98      	it	ls
 800cc5a:	2001      	movls	r0, #1
 800cc5c:	4770      	bx	lr
 800cc5e:	4608      	mov	r0, r1
 800cc60:	4770      	bx	lr
	...

0800cc64 <fiprintf>:
 800cc64:	b40e      	push	{r1, r2, r3}
 800cc66:	b503      	push	{r0, r1, lr}
 800cc68:	4601      	mov	r1, r0
 800cc6a:	ab03      	add	r3, sp, #12
 800cc6c:	4805      	ldr	r0, [pc, #20]	; (800cc84 <fiprintf+0x20>)
 800cc6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc72:	6800      	ldr	r0, [r0, #0]
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	f000 f839 	bl	800ccec <_vfiprintf_r>
 800cc7a:	b002      	add	sp, #8
 800cc7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc80:	b003      	add	sp, #12
 800cc82:	4770      	bx	lr
 800cc84:	20000168 	.word	0x20000168

0800cc88 <__sprint_r>:
 800cc88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8c:	6893      	ldr	r3, [r2, #8]
 800cc8e:	4680      	mov	r8, r0
 800cc90:	460f      	mov	r7, r1
 800cc92:	4614      	mov	r4, r2
 800cc94:	b343      	cbz	r3, 800cce8 <__sprint_r+0x60>
 800cc96:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800cc98:	049d      	lsls	r5, r3, #18
 800cc9a:	d522      	bpl.n	800cce2 <__sprint_r+0x5a>
 800cc9c:	6815      	ldr	r5, [r2, #0]
 800cc9e:	3508      	adds	r5, #8
 800cca0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800cca4:	f04f 0900 	mov.w	r9, #0
 800cca8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800ccac:	45ca      	cmp	sl, r9
 800ccae:	dc0d      	bgt.n	800cccc <__sprint_r+0x44>
 800ccb0:	68a3      	ldr	r3, [r4, #8]
 800ccb2:	f026 0603 	bic.w	r6, r6, #3
 800ccb6:	1b98      	subs	r0, r3, r6
 800ccb8:	60a0      	str	r0, [r4, #8]
 800ccba:	3508      	adds	r5, #8
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	d1ef      	bne.n	800cca0 <__sprint_r+0x18>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	60a3      	str	r3, [r4, #8]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	6063      	str	r3, [r4, #4]
 800ccc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cccc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800ccd0:	463a      	mov	r2, r7
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	f000 febf 	bl	800da56 <_fputwc_r>
 800ccd8:	1c43      	adds	r3, r0, #1
 800ccda:	d0f1      	beq.n	800ccc0 <__sprint_r+0x38>
 800ccdc:	f109 0901 	add.w	r9, r9, #1
 800cce0:	e7e4      	b.n	800ccac <__sprint_r+0x24>
 800cce2:	f000 fcd5 	bl	800d690 <__sfvwrite_r>
 800cce6:	e7eb      	b.n	800ccc0 <__sprint_r+0x38>
 800cce8:	4618      	mov	r0, r3
 800ccea:	e7eb      	b.n	800ccc4 <__sprint_r+0x3c>

0800ccec <_vfiprintf_r>:
 800ccec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	ed2d 8b02 	vpush	{d8}
 800ccf4:	b0bb      	sub	sp, #236	; 0xec
 800ccf6:	460f      	mov	r7, r1
 800ccf8:	9201      	str	r2, [sp, #4]
 800ccfa:	461d      	mov	r5, r3
 800ccfc:	461c      	mov	r4, r3
 800ccfe:	4681      	mov	r9, r0
 800cd00:	b118      	cbz	r0, 800cd0a <_vfiprintf_r+0x1e>
 800cd02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd04:	b90b      	cbnz	r3, 800cd0a <_vfiprintf_r+0x1e>
 800cd06:	f7fc faf3 	bl	80092f0 <__sinit>
 800cd0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd0c:	07d8      	lsls	r0, r3, #31
 800cd0e:	d405      	bmi.n	800cd1c <_vfiprintf_r+0x30>
 800cd10:	89bb      	ldrh	r3, [r7, #12]
 800cd12:	0599      	lsls	r1, r3, #22
 800cd14:	d402      	bmi.n	800cd1c <_vfiprintf_r+0x30>
 800cd16:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cd18:	f7fc fc2c 	bl	8009574 <__retarget_lock_acquire_recursive>
 800cd1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cd20:	049a      	lsls	r2, r3, #18
 800cd22:	d406      	bmi.n	800cd32 <_vfiprintf_r+0x46>
 800cd24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cd28:	81bb      	strh	r3, [r7, #12]
 800cd2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd30:	667b      	str	r3, [r7, #100]	; 0x64
 800cd32:	89bb      	ldrh	r3, [r7, #12]
 800cd34:	071e      	lsls	r6, r3, #28
 800cd36:	d501      	bpl.n	800cd3c <_vfiprintf_r+0x50>
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	b9bb      	cbnz	r3, 800cd6c <_vfiprintf_r+0x80>
 800cd3c:	4639      	mov	r1, r7
 800cd3e:	4648      	mov	r0, r9
 800cd40:	f000 fdf0 	bl	800d924 <__swsetup_r>
 800cd44:	b190      	cbz	r0, 800cd6c <_vfiprintf_r+0x80>
 800cd46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd48:	07d8      	lsls	r0, r3, #31
 800cd4a:	d508      	bpl.n	800cd5e <_vfiprintf_r+0x72>
 800cd4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd50:	9302      	str	r3, [sp, #8]
 800cd52:	9802      	ldr	r0, [sp, #8]
 800cd54:	b03b      	add	sp, #236	; 0xec
 800cd56:	ecbd 8b02 	vpop	{d8}
 800cd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd5e:	89bb      	ldrh	r3, [r7, #12]
 800cd60:	0599      	lsls	r1, r3, #22
 800cd62:	d4f3      	bmi.n	800cd4c <_vfiprintf_r+0x60>
 800cd64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cd66:	f7fc fc06 	bl	8009576 <__retarget_lock_release_recursive>
 800cd6a:	e7ef      	b.n	800cd4c <_vfiprintf_r+0x60>
 800cd6c:	89bb      	ldrh	r3, [r7, #12]
 800cd6e:	f003 021a 	and.w	r2, r3, #26
 800cd72:	2a0a      	cmp	r2, #10
 800cd74:	d116      	bne.n	800cda4 <_vfiprintf_r+0xb8>
 800cd76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cd7a:	2a00      	cmp	r2, #0
 800cd7c:	db12      	blt.n	800cda4 <_vfiprintf_r+0xb8>
 800cd7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cd80:	07d2      	lsls	r2, r2, #31
 800cd82:	d404      	bmi.n	800cd8e <_vfiprintf_r+0xa2>
 800cd84:	059e      	lsls	r6, r3, #22
 800cd86:	d402      	bmi.n	800cd8e <_vfiprintf_r+0xa2>
 800cd88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cd8a:	f7fc fbf4 	bl	8009576 <__retarget_lock_release_recursive>
 800cd8e:	9a01      	ldr	r2, [sp, #4]
 800cd90:	462b      	mov	r3, r5
 800cd92:	4639      	mov	r1, r7
 800cd94:	4648      	mov	r0, r9
 800cd96:	b03b      	add	sp, #236	; 0xec
 800cd98:	ecbd 8b02 	vpop	{d8}
 800cd9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda0:	f000 bc36 	b.w	800d610 <__sbprintf>
 800cda4:	2300      	movs	r3, #0
 800cda6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800cdaa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800cdae:	ae11      	add	r6, sp, #68	; 0x44
 800cdb0:	ee08 3a10 	vmov	s16, r3
 800cdb4:	960e      	str	r6, [sp, #56]	; 0x38
 800cdb6:	9307      	str	r3, [sp, #28]
 800cdb8:	9302      	str	r3, [sp, #8]
 800cdba:	9b01      	ldr	r3, [sp, #4]
 800cdbc:	461d      	mov	r5, r3
 800cdbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdc2:	b10a      	cbz	r2, 800cdc8 <_vfiprintf_r+0xdc>
 800cdc4:	2a25      	cmp	r2, #37	; 0x25
 800cdc6:	d1f9      	bne.n	800cdbc <_vfiprintf_r+0xd0>
 800cdc8:	9b01      	ldr	r3, [sp, #4]
 800cdca:	ebb5 0803 	subs.w	r8, r5, r3
 800cdce:	d00d      	beq.n	800cdec <_vfiprintf_r+0x100>
 800cdd0:	e9c6 3800 	strd	r3, r8, [r6]
 800cdd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdd6:	4443      	add	r3, r8
 800cdd8:	9310      	str	r3, [sp, #64]	; 0x40
 800cdda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cddc:	3301      	adds	r3, #1
 800cdde:	2b07      	cmp	r3, #7
 800cde0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cde2:	dc76      	bgt.n	800ced2 <_vfiprintf_r+0x1e6>
 800cde4:	3608      	adds	r6, #8
 800cde6:	9b02      	ldr	r3, [sp, #8]
 800cde8:	4443      	add	r3, r8
 800cdea:	9302      	str	r3, [sp, #8]
 800cdec:	782b      	ldrb	r3, [r5, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f000 83d0 	beq.w	800d594 <_vfiprintf_r+0x8a8>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdfa:	3501      	adds	r5, #1
 800cdfc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800ce00:	9200      	str	r2, [sp, #0]
 800ce02:	9303      	str	r3, [sp, #12]
 800ce04:	469a      	mov	sl, r3
 800ce06:	462a      	mov	r2, r5
 800ce08:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ce0c:	9201      	str	r2, [sp, #4]
 800ce0e:	f1a3 0220 	sub.w	r2, r3, #32
 800ce12:	2a5a      	cmp	r2, #90	; 0x5a
 800ce14:	f200 831c 	bhi.w	800d450 <_vfiprintf_r+0x764>
 800ce18:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ce1c:	031a007e 	.word	0x031a007e
 800ce20:	0086031a 	.word	0x0086031a
 800ce24:	031a031a 	.word	0x031a031a
 800ce28:	0065031a 	.word	0x0065031a
 800ce2c:	031a031a 	.word	0x031a031a
 800ce30:	00930089 	.word	0x00930089
 800ce34:	0090031a 	.word	0x0090031a
 800ce38:	031a0095 	.word	0x031a0095
 800ce3c:	00b300b0 	.word	0x00b300b0
 800ce40:	00b300b3 	.word	0x00b300b3
 800ce44:	00b300b3 	.word	0x00b300b3
 800ce48:	00b300b3 	.word	0x00b300b3
 800ce4c:	00b300b3 	.word	0x00b300b3
 800ce50:	031a031a 	.word	0x031a031a
 800ce54:	031a031a 	.word	0x031a031a
 800ce58:	031a031a 	.word	0x031a031a
 800ce5c:	031a031a 	.word	0x031a031a
 800ce60:	00dd031a 	.word	0x00dd031a
 800ce64:	031a00eb 	.word	0x031a00eb
 800ce68:	031a031a 	.word	0x031a031a
 800ce6c:	031a031a 	.word	0x031a031a
 800ce70:	031a031a 	.word	0x031a031a
 800ce74:	031a031a 	.word	0x031a031a
 800ce78:	013b031a 	.word	0x013b031a
 800ce7c:	031a031a 	.word	0x031a031a
 800ce80:	0180031a 	.word	0x0180031a
 800ce84:	025e031a 	.word	0x025e031a
 800ce88:	031a031a 	.word	0x031a031a
 800ce8c:	031a027e 	.word	0x031a027e
 800ce90:	031a031a 	.word	0x031a031a
 800ce94:	031a031a 	.word	0x031a031a
 800ce98:	031a031a 	.word	0x031a031a
 800ce9c:	031a031a 	.word	0x031a031a
 800cea0:	00dd031a 	.word	0x00dd031a
 800cea4:	031a00ed 	.word	0x031a00ed
 800cea8:	031a031a 	.word	0x031a031a
 800ceac:	00ed00c3 	.word	0x00ed00c3
 800ceb0:	031a00d7 	.word	0x031a00d7
 800ceb4:	031a00d0 	.word	0x031a00d0
 800ceb8:	013d0119 	.word	0x013d0119
 800cebc:	00d70172 	.word	0x00d70172
 800cec0:	0180031a 	.word	0x0180031a
 800cec4:	0260007c 	.word	0x0260007c
 800cec8:	031a031a 	.word	0x031a031a
 800cecc:	031a029a 	.word	0x031a029a
 800ced0:	007c      	.short	0x007c
 800ced2:	aa0e      	add	r2, sp, #56	; 0x38
 800ced4:	4639      	mov	r1, r7
 800ced6:	4648      	mov	r0, r9
 800ced8:	f7ff fed6 	bl	800cc88 <__sprint_r>
 800cedc:	2800      	cmp	r0, #0
 800cede:	f040 8338 	bne.w	800d552 <_vfiprintf_r+0x866>
 800cee2:	ae11      	add	r6, sp, #68	; 0x44
 800cee4:	e77f      	b.n	800cde6 <_vfiprintf_r+0xfa>
 800cee6:	4648      	mov	r0, r9
 800cee8:	f7fe f9ca 	bl	800b280 <_localeconv_r>
 800ceec:	6843      	ldr	r3, [r0, #4]
 800ceee:	4618      	mov	r0, r3
 800cef0:	ee08 3a10 	vmov	s16, r3
 800cef4:	f7f3 f9bc 	bl	8000270 <strlen>
 800cef8:	9007      	str	r0, [sp, #28]
 800cefa:	4648      	mov	r0, r9
 800cefc:	f7fe f9c0 	bl	800b280 <_localeconv_r>
 800cf00:	6883      	ldr	r3, [r0, #8]
 800cf02:	9306      	str	r3, [sp, #24]
 800cf04:	9b07      	ldr	r3, [sp, #28]
 800cf06:	b12b      	cbz	r3, 800cf14 <_vfiprintf_r+0x228>
 800cf08:	9b06      	ldr	r3, [sp, #24]
 800cf0a:	b11b      	cbz	r3, 800cf14 <_vfiprintf_r+0x228>
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	b10b      	cbz	r3, 800cf14 <_vfiprintf_r+0x228>
 800cf10:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800cf14:	9d01      	ldr	r5, [sp, #4]
 800cf16:	e776      	b.n	800ce06 <_vfiprintf_r+0x11a>
 800cf18:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1f9      	bne.n	800cf14 <_vfiprintf_r+0x228>
 800cf20:	2320      	movs	r3, #32
 800cf22:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800cf26:	e7f5      	b.n	800cf14 <_vfiprintf_r+0x228>
 800cf28:	f04a 0a01 	orr.w	sl, sl, #1
 800cf2c:	e7f2      	b.n	800cf14 <_vfiprintf_r+0x228>
 800cf2e:	f854 3b04 	ldr.w	r3, [r4], #4
 800cf32:	9303      	str	r3, [sp, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	daed      	bge.n	800cf14 <_vfiprintf_r+0x228>
 800cf38:	425b      	negs	r3, r3
 800cf3a:	9303      	str	r3, [sp, #12]
 800cf3c:	f04a 0a04 	orr.w	sl, sl, #4
 800cf40:	e7e8      	b.n	800cf14 <_vfiprintf_r+0x228>
 800cf42:	232b      	movs	r3, #43	; 0x2b
 800cf44:	e7ed      	b.n	800cf22 <_vfiprintf_r+0x236>
 800cf46:	9a01      	ldr	r2, [sp, #4]
 800cf48:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cf4c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf4e:	d112      	bne.n	800cf76 <_vfiprintf_r+0x28a>
 800cf50:	f854 3b04 	ldr.w	r3, [r4], #4
 800cf54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf58:	e9cd 3200 	strd	r3, r2, [sp]
 800cf5c:	e7da      	b.n	800cf14 <_vfiprintf_r+0x228>
 800cf5e:	9b00      	ldr	r3, [sp, #0]
 800cf60:	200a      	movs	r0, #10
 800cf62:	fb00 1303 	mla	r3, r0, r3, r1
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cf6c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cf70:	2909      	cmp	r1, #9
 800cf72:	d9f4      	bls.n	800cf5e <_vfiprintf_r+0x272>
 800cf74:	e74a      	b.n	800ce0c <_vfiprintf_r+0x120>
 800cf76:	2100      	movs	r1, #0
 800cf78:	9100      	str	r1, [sp, #0]
 800cf7a:	e7f7      	b.n	800cf6c <_vfiprintf_r+0x280>
 800cf7c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800cf80:	e7c8      	b.n	800cf14 <_vfiprintf_r+0x228>
 800cf82:	2100      	movs	r1, #0
 800cf84:	9a01      	ldr	r2, [sp, #4]
 800cf86:	9103      	str	r1, [sp, #12]
 800cf88:	9903      	ldr	r1, [sp, #12]
 800cf8a:	3b30      	subs	r3, #48	; 0x30
 800cf8c:	200a      	movs	r0, #10
 800cf8e:	fb00 3301 	mla	r3, r0, r1, r3
 800cf92:	9303      	str	r3, [sp, #12]
 800cf94:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cf98:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cf9c:	2909      	cmp	r1, #9
 800cf9e:	d9f3      	bls.n	800cf88 <_vfiprintf_r+0x29c>
 800cfa0:	e734      	b.n	800ce0c <_vfiprintf_r+0x120>
 800cfa2:	9b01      	ldr	r3, [sp, #4]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2b68      	cmp	r3, #104	; 0x68
 800cfa8:	bf01      	itttt	eq
 800cfaa:	9b01      	ldreq	r3, [sp, #4]
 800cfac:	3301      	addeq	r3, #1
 800cfae:	9301      	streq	r3, [sp, #4]
 800cfb0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800cfb4:	bf18      	it	ne
 800cfb6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800cfba:	e7ab      	b.n	800cf14 <_vfiprintf_r+0x228>
 800cfbc:	9b01      	ldr	r3, [sp, #4]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2b6c      	cmp	r3, #108	; 0x6c
 800cfc2:	d105      	bne.n	800cfd0 <_vfiprintf_r+0x2e4>
 800cfc4:	9b01      	ldr	r3, [sp, #4]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	f04a 0a20 	orr.w	sl, sl, #32
 800cfce:	e7a1      	b.n	800cf14 <_vfiprintf_r+0x228>
 800cfd0:	f04a 0a10 	orr.w	sl, sl, #16
 800cfd4:	e79e      	b.n	800cf14 <_vfiprintf_r+0x228>
 800cfd6:	46a0      	mov	r8, r4
 800cfd8:	f858 3b04 	ldr.w	r3, [r8], #4
 800cfdc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	9200      	str	r2, [sp, #0]
 800cfea:	461d      	mov	r5, r3
 800cfec:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800cff0:	e0a9      	b.n	800d146 <_vfiprintf_r+0x45a>
 800cff2:	f04a 0a10 	orr.w	sl, sl, #16
 800cff6:	f01a 0f20 	tst.w	sl, #32
 800cffa:	d011      	beq.n	800d020 <_vfiprintf_r+0x334>
 800cffc:	3407      	adds	r4, #7
 800cffe:	f024 0307 	bic.w	r3, r4, #7
 800d002:	4698      	mov	r8, r3
 800d004:	685d      	ldr	r5, [r3, #4]
 800d006:	f858 4b08 	ldr.w	r4, [r8], #8
 800d00a:	2d00      	cmp	r5, #0
 800d00c:	da06      	bge.n	800d01c <_vfiprintf_r+0x330>
 800d00e:	4264      	negs	r4, r4
 800d010:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800d014:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800d018:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800d01c:	2301      	movs	r3, #1
 800d01e:	e04a      	b.n	800d0b6 <_vfiprintf_r+0x3ca>
 800d020:	46a0      	mov	r8, r4
 800d022:	f01a 0f10 	tst.w	sl, #16
 800d026:	f858 5b04 	ldr.w	r5, [r8], #4
 800d02a:	d002      	beq.n	800d032 <_vfiprintf_r+0x346>
 800d02c:	462c      	mov	r4, r5
 800d02e:	17ed      	asrs	r5, r5, #31
 800d030:	e7eb      	b.n	800d00a <_vfiprintf_r+0x31e>
 800d032:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800d036:	d003      	beq.n	800d040 <_vfiprintf_r+0x354>
 800d038:	b22c      	sxth	r4, r5
 800d03a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800d03e:	e7e4      	b.n	800d00a <_vfiprintf_r+0x31e>
 800d040:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800d044:	d0f2      	beq.n	800d02c <_vfiprintf_r+0x340>
 800d046:	b26c      	sxtb	r4, r5
 800d048:	f345 15c0 	sbfx	r5, r5, #7, #1
 800d04c:	e7dd      	b.n	800d00a <_vfiprintf_r+0x31e>
 800d04e:	f01a 0f20 	tst.w	sl, #32
 800d052:	f104 0804 	add.w	r8, r4, #4
 800d056:	d007      	beq.n	800d068 <_vfiprintf_r+0x37c>
 800d058:	9a02      	ldr	r2, [sp, #8]
 800d05a:	6823      	ldr	r3, [r4, #0]
 800d05c:	9902      	ldr	r1, [sp, #8]
 800d05e:	17d2      	asrs	r2, r2, #31
 800d060:	e9c3 1200 	strd	r1, r2, [r3]
 800d064:	4644      	mov	r4, r8
 800d066:	e6a8      	b.n	800cdba <_vfiprintf_r+0xce>
 800d068:	f01a 0f10 	tst.w	sl, #16
 800d06c:	d003      	beq.n	800d076 <_vfiprintf_r+0x38a>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	9a02      	ldr	r2, [sp, #8]
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	e7f6      	b.n	800d064 <_vfiprintf_r+0x378>
 800d076:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800d07a:	d003      	beq.n	800d084 <_vfiprintf_r+0x398>
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	9a02      	ldr	r2, [sp, #8]
 800d080:	801a      	strh	r2, [r3, #0]
 800d082:	e7ef      	b.n	800d064 <_vfiprintf_r+0x378>
 800d084:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800d088:	d0f1      	beq.n	800d06e <_vfiprintf_r+0x382>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	9a02      	ldr	r2, [sp, #8]
 800d08e:	701a      	strb	r2, [r3, #0]
 800d090:	e7e8      	b.n	800d064 <_vfiprintf_r+0x378>
 800d092:	f04a 0a10 	orr.w	sl, sl, #16
 800d096:	f01a 0320 	ands.w	r3, sl, #32
 800d09a:	d01f      	beq.n	800d0dc <_vfiprintf_r+0x3f0>
 800d09c:	3407      	adds	r4, #7
 800d09e:	f024 0307 	bic.w	r3, r4, #7
 800d0a2:	4698      	mov	r8, r3
 800d0a4:	685d      	ldr	r5, [r3, #4]
 800d0a6:	f858 4b08 	ldr.w	r4, [r8], #8
 800d0aa:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800d0b6:	9a00      	ldr	r2, [sp, #0]
 800d0b8:	3201      	adds	r2, #1
 800d0ba:	f000 8278 	beq.w	800d5ae <_vfiprintf_r+0x8c2>
 800d0be:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800d0c2:	9204      	str	r2, [sp, #16]
 800d0c4:	ea54 0205 	orrs.w	r2, r4, r5
 800d0c8:	f040 8277 	bne.w	800d5ba <_vfiprintf_r+0x8ce>
 800d0cc:	9a00      	ldr	r2, [sp, #0]
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	f000 81b3 	beq.w	800d43a <_vfiprintf_r+0x74e>
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	f040 8273 	bne.w	800d5c0 <_vfiprintf_r+0x8d4>
 800d0da:	e151      	b.n	800d380 <_vfiprintf_r+0x694>
 800d0dc:	46a0      	mov	r8, r4
 800d0de:	f01a 0510 	ands.w	r5, sl, #16
 800d0e2:	f858 4b04 	ldr.w	r4, [r8], #4
 800d0e6:	d001      	beq.n	800d0ec <_vfiprintf_r+0x400>
 800d0e8:	461d      	mov	r5, r3
 800d0ea:	e7de      	b.n	800d0aa <_vfiprintf_r+0x3be>
 800d0ec:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800d0f0:	d001      	beq.n	800d0f6 <_vfiprintf_r+0x40a>
 800d0f2:	b2a4      	uxth	r4, r4
 800d0f4:	e7d9      	b.n	800d0aa <_vfiprintf_r+0x3be>
 800d0f6:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d0fa:	d0d6      	beq.n	800d0aa <_vfiprintf_r+0x3be>
 800d0fc:	b2e4      	uxtb	r4, r4
 800d0fe:	e7f3      	b.n	800d0e8 <_vfiprintf_r+0x3fc>
 800d100:	46a0      	mov	r8, r4
 800d102:	f647 0330 	movw	r3, #30768	; 0x7830
 800d106:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d10a:	f858 4b04 	ldr.w	r4, [r8], #4
 800d10e:	4b9f      	ldr	r3, [pc, #636]	; (800d38c <_vfiprintf_r+0x6a0>)
 800d110:	9305      	str	r3, [sp, #20]
 800d112:	2500      	movs	r5, #0
 800d114:	f04a 0a02 	orr.w	sl, sl, #2
 800d118:	2302      	movs	r3, #2
 800d11a:	e7c9      	b.n	800d0b0 <_vfiprintf_r+0x3c4>
 800d11c:	9b00      	ldr	r3, [sp, #0]
 800d11e:	46a0      	mov	r8, r4
 800d120:	2500      	movs	r5, #0
 800d122:	1c5c      	adds	r4, r3, #1
 800d124:	f858 bb04 	ldr.w	fp, [r8], #4
 800d128:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800d12c:	f000 80cf 	beq.w	800d2ce <_vfiprintf_r+0x5e2>
 800d130:	461a      	mov	r2, r3
 800d132:	4629      	mov	r1, r5
 800d134:	4658      	mov	r0, fp
 800d136:	f7f3 f84b 	bl	80001d0 <memchr>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	f000 8192 	beq.w	800d464 <_vfiprintf_r+0x778>
 800d140:	eba0 030b 	sub.w	r3, r0, fp
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	9b00      	ldr	r3, [sp, #0]
 800d148:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800d14c:	42ab      	cmp	r3, r5
 800d14e:	bfb8      	it	lt
 800d150:	462b      	movlt	r3, r5
 800d152:	9304      	str	r3, [sp, #16]
 800d154:	b10a      	cbz	r2, 800d15a <_vfiprintf_r+0x46e>
 800d156:	3301      	adds	r3, #1
 800d158:	9304      	str	r3, [sp, #16]
 800d15a:	f01a 0302 	ands.w	r3, sl, #2
 800d15e:	9308      	str	r3, [sp, #32]
 800d160:	bf1e      	ittt	ne
 800d162:	9b04      	ldrne	r3, [sp, #16]
 800d164:	3302      	addne	r3, #2
 800d166:	9304      	strne	r3, [sp, #16]
 800d168:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800d16c:	9309      	str	r3, [sp, #36]	; 0x24
 800d16e:	d11f      	bne.n	800d1b0 <_vfiprintf_r+0x4c4>
 800d170:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d174:	1a9c      	subs	r4, r3, r2
 800d176:	2c00      	cmp	r4, #0
 800d178:	dd1a      	ble.n	800d1b0 <_vfiprintf_r+0x4c4>
 800d17a:	4b85      	ldr	r3, [pc, #532]	; (800d390 <_vfiprintf_r+0x6a4>)
 800d17c:	6033      	str	r3, [r6, #0]
 800d17e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800d182:	2c10      	cmp	r4, #16
 800d184:	f102 0201 	add.w	r2, r2, #1
 800d188:	f106 0008 	add.w	r0, r6, #8
 800d18c:	f300 816c 	bgt.w	800d468 <_vfiprintf_r+0x77c>
 800d190:	6074      	str	r4, [r6, #4]
 800d192:	2a07      	cmp	r2, #7
 800d194:	4464      	add	r4, ip
 800d196:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d19a:	f340 8178 	ble.w	800d48e <_vfiprintf_r+0x7a2>
 800d19e:	aa0e      	add	r2, sp, #56	; 0x38
 800d1a0:	4639      	mov	r1, r7
 800d1a2:	4648      	mov	r0, r9
 800d1a4:	f7ff fd70 	bl	800cc88 <__sprint_r>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	f040 81d2 	bne.w	800d552 <_vfiprintf_r+0x866>
 800d1ae:	ae11      	add	r6, sp, #68	; 0x44
 800d1b0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800d1b4:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d1b8:	b160      	cbz	r0, 800d1d4 <_vfiprintf_r+0x4e8>
 800d1ba:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800d1be:	3201      	adds	r2, #1
 800d1c0:	6030      	str	r0, [r6, #0]
 800d1c2:	2001      	movs	r0, #1
 800d1c4:	4401      	add	r1, r0
 800d1c6:	2a07      	cmp	r2, #7
 800d1c8:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d1cc:	6070      	str	r0, [r6, #4]
 800d1ce:	f300 8160 	bgt.w	800d492 <_vfiprintf_r+0x7a6>
 800d1d2:	3608      	adds	r6, #8
 800d1d4:	9b08      	ldr	r3, [sp, #32]
 800d1d6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d1da:	b15b      	cbz	r3, 800d1f4 <_vfiprintf_r+0x508>
 800d1dc:	a80d      	add	r0, sp, #52	; 0x34
 800d1de:	3201      	adds	r2, #1
 800d1e0:	6030      	str	r0, [r6, #0]
 800d1e2:	2002      	movs	r0, #2
 800d1e4:	4401      	add	r1, r0
 800d1e6:	2a07      	cmp	r2, #7
 800d1e8:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d1ec:	6070      	str	r0, [r6, #4]
 800d1ee:	f300 8159 	bgt.w	800d4a4 <_vfiprintf_r+0x7b8>
 800d1f2:	3608      	adds	r6, #8
 800d1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1f6:	2b80      	cmp	r3, #128	; 0x80
 800d1f8:	d11f      	bne.n	800d23a <_vfiprintf_r+0x54e>
 800d1fa:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d1fe:	1a9c      	subs	r4, r3, r2
 800d200:	2c00      	cmp	r4, #0
 800d202:	dd1a      	ble.n	800d23a <_vfiprintf_r+0x54e>
 800d204:	4b63      	ldr	r3, [pc, #396]	; (800d394 <_vfiprintf_r+0x6a8>)
 800d206:	6033      	str	r3, [r6, #0]
 800d208:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800d20c:	2c10      	cmp	r4, #16
 800d20e:	f102 0201 	add.w	r2, r2, #1
 800d212:	f106 0008 	add.w	r0, r6, #8
 800d216:	f300 814e 	bgt.w	800d4b6 <_vfiprintf_r+0x7ca>
 800d21a:	6074      	str	r4, [r6, #4]
 800d21c:	2a07      	cmp	r2, #7
 800d21e:	4464      	add	r4, ip
 800d220:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d224:	f340 815a 	ble.w	800d4dc <_vfiprintf_r+0x7f0>
 800d228:	aa0e      	add	r2, sp, #56	; 0x38
 800d22a:	4639      	mov	r1, r7
 800d22c:	4648      	mov	r0, r9
 800d22e:	f7ff fd2b 	bl	800cc88 <__sprint_r>
 800d232:	2800      	cmp	r0, #0
 800d234:	f040 818d 	bne.w	800d552 <_vfiprintf_r+0x866>
 800d238:	ae11      	add	r6, sp, #68	; 0x44
 800d23a:	9b00      	ldr	r3, [sp, #0]
 800d23c:	1aec      	subs	r4, r5, r3
 800d23e:	2c00      	cmp	r4, #0
 800d240:	dd1b      	ble.n	800d27a <_vfiprintf_r+0x58e>
 800d242:	4d54      	ldr	r5, [pc, #336]	; (800d394 <_vfiprintf_r+0x6a8>)
 800d244:	2310      	movs	r3, #16
 800d246:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d24a:	2c10      	cmp	r4, #16
 800d24c:	f102 0201 	add.w	r2, r2, #1
 800d250:	f106 0008 	add.w	r0, r6, #8
 800d254:	6035      	str	r5, [r6, #0]
 800d256:	f300 8143 	bgt.w	800d4e0 <_vfiprintf_r+0x7f4>
 800d25a:	6074      	str	r4, [r6, #4]
 800d25c:	2a07      	cmp	r2, #7
 800d25e:	440c      	add	r4, r1
 800d260:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d264:	f340 814d 	ble.w	800d502 <_vfiprintf_r+0x816>
 800d268:	aa0e      	add	r2, sp, #56	; 0x38
 800d26a:	4639      	mov	r1, r7
 800d26c:	4648      	mov	r0, r9
 800d26e:	f7ff fd0b 	bl	800cc88 <__sprint_r>
 800d272:	2800      	cmp	r0, #0
 800d274:	f040 816d 	bne.w	800d552 <_vfiprintf_r+0x866>
 800d278:	ae11      	add	r6, sp, #68	; 0x44
 800d27a:	9b00      	ldr	r3, [sp, #0]
 800d27c:	9a00      	ldr	r2, [sp, #0]
 800d27e:	6073      	str	r3, [r6, #4]
 800d280:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d282:	f8c6 b000 	str.w	fp, [r6]
 800d286:	4413      	add	r3, r2
 800d288:	9310      	str	r3, [sp, #64]	; 0x40
 800d28a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d28c:	3301      	adds	r3, #1
 800d28e:	2b07      	cmp	r3, #7
 800d290:	930f      	str	r3, [sp, #60]	; 0x3c
 800d292:	f300 8138 	bgt.w	800d506 <_vfiprintf_r+0x81a>
 800d296:	f106 0308 	add.w	r3, r6, #8
 800d29a:	f01a 0f04 	tst.w	sl, #4
 800d29e:	f040 813a 	bne.w	800d516 <_vfiprintf_r+0x82a>
 800d2a2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d2a6:	9904      	ldr	r1, [sp, #16]
 800d2a8:	428a      	cmp	r2, r1
 800d2aa:	bfac      	ite	ge
 800d2ac:	189b      	addge	r3, r3, r2
 800d2ae:	185b      	addlt	r3, r3, r1
 800d2b0:	9302      	str	r3, [sp, #8]
 800d2b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2b4:	b13b      	cbz	r3, 800d2c6 <_vfiprintf_r+0x5da>
 800d2b6:	aa0e      	add	r2, sp, #56	; 0x38
 800d2b8:	4639      	mov	r1, r7
 800d2ba:	4648      	mov	r0, r9
 800d2bc:	f7ff fce4 	bl	800cc88 <__sprint_r>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	f040 8146 	bne.w	800d552 <_vfiprintf_r+0x866>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2ca:	ae11      	add	r6, sp, #68	; 0x44
 800d2cc:	e6ca      	b.n	800d064 <_vfiprintf_r+0x378>
 800d2ce:	4658      	mov	r0, fp
 800d2d0:	f7f2 ffce 	bl	8000270 <strlen>
 800d2d4:	9000      	str	r0, [sp, #0]
 800d2d6:	e736      	b.n	800d146 <_vfiprintf_r+0x45a>
 800d2d8:	f04a 0a10 	orr.w	sl, sl, #16
 800d2dc:	f01a 0320 	ands.w	r3, sl, #32
 800d2e0:	d008      	beq.n	800d2f4 <_vfiprintf_r+0x608>
 800d2e2:	3407      	adds	r4, #7
 800d2e4:	f024 0307 	bic.w	r3, r4, #7
 800d2e8:	4698      	mov	r8, r3
 800d2ea:	685d      	ldr	r5, [r3, #4]
 800d2ec:	f858 4b08 	ldr.w	r4, [r8], #8
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e6dd      	b.n	800d0b0 <_vfiprintf_r+0x3c4>
 800d2f4:	46a0      	mov	r8, r4
 800d2f6:	f01a 0510 	ands.w	r5, sl, #16
 800d2fa:	f858 4b04 	ldr.w	r4, [r8], #4
 800d2fe:	d001      	beq.n	800d304 <_vfiprintf_r+0x618>
 800d300:	461d      	mov	r5, r3
 800d302:	e7f5      	b.n	800d2f0 <_vfiprintf_r+0x604>
 800d304:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800d308:	d001      	beq.n	800d30e <_vfiprintf_r+0x622>
 800d30a:	b2a4      	uxth	r4, r4
 800d30c:	e7f0      	b.n	800d2f0 <_vfiprintf_r+0x604>
 800d30e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d312:	d0ed      	beq.n	800d2f0 <_vfiprintf_r+0x604>
 800d314:	b2e4      	uxtb	r4, r4
 800d316:	e7f3      	b.n	800d300 <_vfiprintf_r+0x614>
 800d318:	4a1f      	ldr	r2, [pc, #124]	; (800d398 <_vfiprintf_r+0x6ac>)
 800d31a:	9205      	str	r2, [sp, #20]
 800d31c:	f01a 0220 	ands.w	r2, sl, #32
 800d320:	d018      	beq.n	800d354 <_vfiprintf_r+0x668>
 800d322:	3407      	adds	r4, #7
 800d324:	f024 0207 	bic.w	r2, r4, #7
 800d328:	4690      	mov	r8, r2
 800d32a:	6855      	ldr	r5, [r2, #4]
 800d32c:	f858 4b08 	ldr.w	r4, [r8], #8
 800d330:	f01a 0f01 	tst.w	sl, #1
 800d334:	d009      	beq.n	800d34a <_vfiprintf_r+0x65e>
 800d336:	ea54 0205 	orrs.w	r2, r4, r5
 800d33a:	bf1f      	itttt	ne
 800d33c:	2230      	movne	r2, #48	; 0x30
 800d33e:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800d342:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800d346:	f04a 0a02 	orrne.w	sl, sl, #2
 800d34a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800d34e:	e6e3      	b.n	800d118 <_vfiprintf_r+0x42c>
 800d350:	4a0e      	ldr	r2, [pc, #56]	; (800d38c <_vfiprintf_r+0x6a0>)
 800d352:	e7e2      	b.n	800d31a <_vfiprintf_r+0x62e>
 800d354:	46a0      	mov	r8, r4
 800d356:	f01a 0510 	ands.w	r5, sl, #16
 800d35a:	f858 4b04 	ldr.w	r4, [r8], #4
 800d35e:	d001      	beq.n	800d364 <_vfiprintf_r+0x678>
 800d360:	4615      	mov	r5, r2
 800d362:	e7e5      	b.n	800d330 <_vfiprintf_r+0x644>
 800d364:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800d368:	d001      	beq.n	800d36e <_vfiprintf_r+0x682>
 800d36a:	b2a4      	uxth	r4, r4
 800d36c:	e7e0      	b.n	800d330 <_vfiprintf_r+0x644>
 800d36e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d372:	d0dd      	beq.n	800d330 <_vfiprintf_r+0x644>
 800d374:	b2e4      	uxtb	r4, r4
 800d376:	e7f3      	b.n	800d360 <_vfiprintf_r+0x674>
 800d378:	2c0a      	cmp	r4, #10
 800d37a:	f175 0300 	sbcs.w	r3, r5, #0
 800d37e:	d20d      	bcs.n	800d39c <_vfiprintf_r+0x6b0>
 800d380:	3430      	adds	r4, #48	; 0x30
 800d382:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800d386:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800d38a:	e135      	b.n	800d5f8 <_vfiprintf_r+0x90c>
 800d38c:	0800e43c 	.word	0x0800e43c
 800d390:	0800e793 	.word	0x0800e793
 800d394:	0800e7a3 	.word	0x0800e7a3
 800d398:	0800e44d 	.word	0x0800e44d
 800d39c:	ab3a      	add	r3, sp, #232	; 0xe8
 800d39e:	9308      	str	r3, [sp, #32]
 800d3a0:	9b04      	ldr	r3, [sp, #16]
 800d3a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3a6:	f04f 0a00 	mov.w	sl, #0
 800d3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ac:	220a      	movs	r2, #10
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	4629      	mov	r1, r5
 800d3b4:	f7f3 fbf8 	bl	8000ba8 <__aeabi_uldivmod>
 800d3b8:	9b08      	ldr	r3, [sp, #32]
 800d3ba:	3230      	adds	r2, #48	; 0x30
 800d3bc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d3c0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d3ca:	f10a 0a01 	add.w	sl, sl, #1
 800d3ce:	b1d3      	cbz	r3, 800d406 <_vfiprintf_r+0x71a>
 800d3d0:	9b06      	ldr	r3, [sp, #24]
 800d3d2:	781a      	ldrb	r2, [r3, #0]
 800d3d4:	4552      	cmp	r2, sl
 800d3d6:	d116      	bne.n	800d406 <_vfiprintf_r+0x71a>
 800d3d8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d3dc:	d013      	beq.n	800d406 <_vfiprintf_r+0x71a>
 800d3de:	2c0a      	cmp	r4, #10
 800d3e0:	f175 0200 	sbcs.w	r2, r5, #0
 800d3e4:	d30f      	bcc.n	800d406 <_vfiprintf_r+0x71a>
 800d3e6:	9b07      	ldr	r3, [sp, #28]
 800d3e8:	ebab 0b03 	sub.w	fp, fp, r3
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	ee18 1a10 	vmov	r1, s16
 800d3f2:	4658      	mov	r0, fp
 800d3f4:	f7fd ff31 	bl	800b25a <strncpy>
 800d3f8:	9b06      	ldr	r3, [sp, #24]
 800d3fa:	785a      	ldrb	r2, [r3, #1]
 800d3fc:	b16a      	cbz	r2, 800d41a <_vfiprintf_r+0x72e>
 800d3fe:	3301      	adds	r3, #1
 800d400:	9306      	str	r3, [sp, #24]
 800d402:	f04f 0a00 	mov.w	sl, #0
 800d406:	2c0a      	cmp	r4, #10
 800d408:	f175 0500 	sbcs.w	r5, r5, #0
 800d40c:	f0c0 80f4 	bcc.w	800d5f8 <_vfiprintf_r+0x90c>
 800d410:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800d414:	f8cd b020 	str.w	fp, [sp, #32]
 800d418:	e7c8      	b.n	800d3ac <_vfiprintf_r+0x6c0>
 800d41a:	4692      	mov	sl, r2
 800d41c:	e7f3      	b.n	800d406 <_vfiprintf_r+0x71a>
 800d41e:	f004 020f 	and.w	r2, r4, #15
 800d422:	9b05      	ldr	r3, [sp, #20]
 800d424:	0924      	lsrs	r4, r4, #4
 800d426:	5c9a      	ldrb	r2, [r3, r2]
 800d428:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800d42c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800d430:	092d      	lsrs	r5, r5, #4
 800d432:	ea54 0205 	orrs.w	r2, r4, r5
 800d436:	d1f2      	bne.n	800d41e <_vfiprintf_r+0x732>
 800d438:	e0de      	b.n	800d5f8 <_vfiprintf_r+0x90c>
 800d43a:	b933      	cbnz	r3, 800d44a <_vfiprintf_r+0x75e>
 800d43c:	f01a 0f01 	tst.w	sl, #1
 800d440:	d003      	beq.n	800d44a <_vfiprintf_r+0x75e>
 800d442:	2330      	movs	r3, #48	; 0x30
 800d444:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800d448:	e79d      	b.n	800d386 <_vfiprintf_r+0x69a>
 800d44a:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800d44e:	e0d3      	b.n	800d5f8 <_vfiprintf_r+0x90c>
 800d450:	2b00      	cmp	r3, #0
 800d452:	f000 809f 	beq.w	800d594 <_vfiprintf_r+0x8a8>
 800d456:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800d45a:	2300      	movs	r3, #0
 800d45c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800d460:	46a0      	mov	r8, r4
 800d462:	e5c0      	b.n	800cfe6 <_vfiprintf_r+0x2fa>
 800d464:	4605      	mov	r5, r0
 800d466:	e66e      	b.n	800d146 <_vfiprintf_r+0x45a>
 800d468:	2110      	movs	r1, #16
 800d46a:	6071      	str	r1, [r6, #4]
 800d46c:	2a07      	cmp	r2, #7
 800d46e:	4461      	add	r1, ip
 800d470:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d474:	dd08      	ble.n	800d488 <_vfiprintf_r+0x79c>
 800d476:	aa0e      	add	r2, sp, #56	; 0x38
 800d478:	4639      	mov	r1, r7
 800d47a:	4648      	mov	r0, r9
 800d47c:	f7ff fc04 	bl	800cc88 <__sprint_r>
 800d480:	2800      	cmp	r0, #0
 800d482:	d166      	bne.n	800d552 <_vfiprintf_r+0x866>
 800d484:	4b60      	ldr	r3, [pc, #384]	; (800d608 <_vfiprintf_r+0x91c>)
 800d486:	a811      	add	r0, sp, #68	; 0x44
 800d488:	3c10      	subs	r4, #16
 800d48a:	4606      	mov	r6, r0
 800d48c:	e676      	b.n	800d17c <_vfiprintf_r+0x490>
 800d48e:	4606      	mov	r6, r0
 800d490:	e68e      	b.n	800d1b0 <_vfiprintf_r+0x4c4>
 800d492:	aa0e      	add	r2, sp, #56	; 0x38
 800d494:	4639      	mov	r1, r7
 800d496:	4648      	mov	r0, r9
 800d498:	f7ff fbf6 	bl	800cc88 <__sprint_r>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d158      	bne.n	800d552 <_vfiprintf_r+0x866>
 800d4a0:	ae11      	add	r6, sp, #68	; 0x44
 800d4a2:	e697      	b.n	800d1d4 <_vfiprintf_r+0x4e8>
 800d4a4:	aa0e      	add	r2, sp, #56	; 0x38
 800d4a6:	4639      	mov	r1, r7
 800d4a8:	4648      	mov	r0, r9
 800d4aa:	f7ff fbed 	bl	800cc88 <__sprint_r>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d14f      	bne.n	800d552 <_vfiprintf_r+0x866>
 800d4b2:	ae11      	add	r6, sp, #68	; 0x44
 800d4b4:	e69e      	b.n	800d1f4 <_vfiprintf_r+0x508>
 800d4b6:	2110      	movs	r1, #16
 800d4b8:	6071      	str	r1, [r6, #4]
 800d4ba:	2a07      	cmp	r2, #7
 800d4bc:	4461      	add	r1, ip
 800d4be:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d4c2:	dd08      	ble.n	800d4d6 <_vfiprintf_r+0x7ea>
 800d4c4:	aa0e      	add	r2, sp, #56	; 0x38
 800d4c6:	4639      	mov	r1, r7
 800d4c8:	4648      	mov	r0, r9
 800d4ca:	f7ff fbdd 	bl	800cc88 <__sprint_r>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d13f      	bne.n	800d552 <_vfiprintf_r+0x866>
 800d4d2:	4b4e      	ldr	r3, [pc, #312]	; (800d60c <_vfiprintf_r+0x920>)
 800d4d4:	a811      	add	r0, sp, #68	; 0x44
 800d4d6:	3c10      	subs	r4, #16
 800d4d8:	4606      	mov	r6, r0
 800d4da:	e694      	b.n	800d206 <_vfiprintf_r+0x51a>
 800d4dc:	4606      	mov	r6, r0
 800d4de:	e6ac      	b.n	800d23a <_vfiprintf_r+0x54e>
 800d4e0:	3110      	adds	r1, #16
 800d4e2:	2a07      	cmp	r2, #7
 800d4e4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d4e8:	6073      	str	r3, [r6, #4]
 800d4ea:	dd07      	ble.n	800d4fc <_vfiprintf_r+0x810>
 800d4ec:	aa0e      	add	r2, sp, #56	; 0x38
 800d4ee:	4639      	mov	r1, r7
 800d4f0:	4648      	mov	r0, r9
 800d4f2:	f7ff fbc9 	bl	800cc88 <__sprint_r>
 800d4f6:	bb60      	cbnz	r0, 800d552 <_vfiprintf_r+0x866>
 800d4f8:	a811      	add	r0, sp, #68	; 0x44
 800d4fa:	2310      	movs	r3, #16
 800d4fc:	3c10      	subs	r4, #16
 800d4fe:	4606      	mov	r6, r0
 800d500:	e6a1      	b.n	800d246 <_vfiprintf_r+0x55a>
 800d502:	4606      	mov	r6, r0
 800d504:	e6b9      	b.n	800d27a <_vfiprintf_r+0x58e>
 800d506:	aa0e      	add	r2, sp, #56	; 0x38
 800d508:	4639      	mov	r1, r7
 800d50a:	4648      	mov	r0, r9
 800d50c:	f7ff fbbc 	bl	800cc88 <__sprint_r>
 800d510:	b9f8      	cbnz	r0, 800d552 <_vfiprintf_r+0x866>
 800d512:	ab11      	add	r3, sp, #68	; 0x44
 800d514:	e6c1      	b.n	800d29a <_vfiprintf_r+0x5ae>
 800d516:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800d51a:	1a54      	subs	r4, r2, r1
 800d51c:	2c00      	cmp	r4, #0
 800d51e:	f77f aec0 	ble.w	800d2a2 <_vfiprintf_r+0x5b6>
 800d522:	4d39      	ldr	r5, [pc, #228]	; (800d608 <_vfiprintf_r+0x91c>)
 800d524:	2610      	movs	r6, #16
 800d526:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d52a:	2c10      	cmp	r4, #16
 800d52c:	f102 0201 	add.w	r2, r2, #1
 800d530:	601d      	str	r5, [r3, #0]
 800d532:	dc1d      	bgt.n	800d570 <_vfiprintf_r+0x884>
 800d534:	605c      	str	r4, [r3, #4]
 800d536:	2a07      	cmp	r2, #7
 800d538:	440c      	add	r4, r1
 800d53a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d53e:	f77f aeb0 	ble.w	800d2a2 <_vfiprintf_r+0x5b6>
 800d542:	aa0e      	add	r2, sp, #56	; 0x38
 800d544:	4639      	mov	r1, r7
 800d546:	4648      	mov	r0, r9
 800d548:	f7ff fb9e 	bl	800cc88 <__sprint_r>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	f43f aea8 	beq.w	800d2a2 <_vfiprintf_r+0x5b6>
 800d552:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d554:	07d9      	lsls	r1, r3, #31
 800d556:	d405      	bmi.n	800d564 <_vfiprintf_r+0x878>
 800d558:	89bb      	ldrh	r3, [r7, #12]
 800d55a:	059a      	lsls	r2, r3, #22
 800d55c:	d402      	bmi.n	800d564 <_vfiprintf_r+0x878>
 800d55e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d560:	f7fc f809 	bl	8009576 <__retarget_lock_release_recursive>
 800d564:	89bb      	ldrh	r3, [r7, #12]
 800d566:	065b      	lsls	r3, r3, #25
 800d568:	f57f abf3 	bpl.w	800cd52 <_vfiprintf_r+0x66>
 800d56c:	f7ff bbee 	b.w	800cd4c <_vfiprintf_r+0x60>
 800d570:	3110      	adds	r1, #16
 800d572:	2a07      	cmp	r2, #7
 800d574:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d578:	605e      	str	r6, [r3, #4]
 800d57a:	dc02      	bgt.n	800d582 <_vfiprintf_r+0x896>
 800d57c:	3308      	adds	r3, #8
 800d57e:	3c10      	subs	r4, #16
 800d580:	e7d1      	b.n	800d526 <_vfiprintf_r+0x83a>
 800d582:	aa0e      	add	r2, sp, #56	; 0x38
 800d584:	4639      	mov	r1, r7
 800d586:	4648      	mov	r0, r9
 800d588:	f7ff fb7e 	bl	800cc88 <__sprint_r>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	d1e0      	bne.n	800d552 <_vfiprintf_r+0x866>
 800d590:	ab11      	add	r3, sp, #68	; 0x44
 800d592:	e7f4      	b.n	800d57e <_vfiprintf_r+0x892>
 800d594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d596:	b913      	cbnz	r3, 800d59e <_vfiprintf_r+0x8b2>
 800d598:	2300      	movs	r3, #0
 800d59a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d59c:	e7d9      	b.n	800d552 <_vfiprintf_r+0x866>
 800d59e:	aa0e      	add	r2, sp, #56	; 0x38
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	4648      	mov	r0, r9
 800d5a4:	f7ff fb70 	bl	800cc88 <__sprint_r>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	d0f5      	beq.n	800d598 <_vfiprintf_r+0x8ac>
 800d5ac:	e7d1      	b.n	800d552 <_vfiprintf_r+0x866>
 800d5ae:	ea54 0205 	orrs.w	r2, r4, r5
 800d5b2:	f8cd a010 	str.w	sl, [sp, #16]
 800d5b6:	f43f ad8d 	beq.w	800d0d4 <_vfiprintf_r+0x3e8>
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	f43f aedc 	beq.w	800d378 <_vfiprintf_r+0x68c>
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800d5c6:	f43f af2a 	beq.w	800d41e <_vfiprintf_r+0x732>
 800d5ca:	f004 0207 	and.w	r2, r4, #7
 800d5ce:	08e4      	lsrs	r4, r4, #3
 800d5d0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800d5d4:	08ed      	lsrs	r5, r5, #3
 800d5d6:	3230      	adds	r2, #48	; 0x30
 800d5d8:	ea54 0005 	orrs.w	r0, r4, r5
 800d5dc:	4659      	mov	r1, fp
 800d5de:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800d5e2:	d1f2      	bne.n	800d5ca <_vfiprintf_r+0x8de>
 800d5e4:	9b04      	ldr	r3, [sp, #16]
 800d5e6:	07d8      	lsls	r0, r3, #31
 800d5e8:	d506      	bpl.n	800d5f8 <_vfiprintf_r+0x90c>
 800d5ea:	2a30      	cmp	r2, #48	; 0x30
 800d5ec:	d004      	beq.n	800d5f8 <_vfiprintf_r+0x90c>
 800d5ee:	2230      	movs	r2, #48	; 0x30
 800d5f0:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800d5f4:	f1a1 0b02 	sub.w	fp, r1, #2
 800d5f8:	ab3a      	add	r3, sp, #232	; 0xe8
 800d5fa:	eba3 030b 	sub.w	r3, r3, fp
 800d5fe:	9d00      	ldr	r5, [sp, #0]
 800d600:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	e59e      	b.n	800d146 <_vfiprintf_r+0x45a>
 800d608:	0800e793 	.word	0x0800e793
 800d60c:	0800e7a3 	.word	0x0800e7a3

0800d610 <__sbprintf>:
 800d610:	b570      	push	{r4, r5, r6, lr}
 800d612:	460c      	mov	r4, r1
 800d614:	8989      	ldrh	r1, [r1, #12]
 800d616:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800d61a:	f021 0102 	bic.w	r1, r1, #2
 800d61e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d622:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d624:	911b      	str	r1, [sp, #108]	; 0x6c
 800d626:	89e1      	ldrh	r1, [r4, #14]
 800d628:	f8ad 1016 	strh.w	r1, [sp, #22]
 800d62c:	69e1      	ldr	r1, [r4, #28]
 800d62e:	9109      	str	r1, [sp, #36]	; 0x24
 800d630:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d632:	910b      	str	r1, [sp, #44]	; 0x2c
 800d634:	a91c      	add	r1, sp, #112	; 0x70
 800d636:	9102      	str	r1, [sp, #8]
 800d638:	9106      	str	r1, [sp, #24]
 800d63a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d63e:	4606      	mov	r6, r0
 800d640:	9104      	str	r1, [sp, #16]
 800d642:	9107      	str	r1, [sp, #28]
 800d644:	a818      	add	r0, sp, #96	; 0x60
 800d646:	2100      	movs	r1, #0
 800d648:	e9cd 3200 	strd	r3, r2, [sp]
 800d64c:	9108      	str	r1, [sp, #32]
 800d64e:	f7fb ff8f 	bl	8009570 <__retarget_lock_init_recursive>
 800d652:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d656:	a902      	add	r1, sp, #8
 800d658:	4630      	mov	r0, r6
 800d65a:	f7ff fb47 	bl	800ccec <_vfiprintf_r>
 800d65e:	1e05      	subs	r5, r0, #0
 800d660:	db07      	blt.n	800d672 <__sbprintf+0x62>
 800d662:	a902      	add	r1, sp, #8
 800d664:	4630      	mov	r0, r6
 800d666:	f7fd fdd3 	bl	800b210 <_fflush_r>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	bf18      	it	ne
 800d66e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800d672:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d676:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d678:	065b      	lsls	r3, r3, #25
 800d67a:	bf42      	ittt	mi
 800d67c:	89a3      	ldrhmi	r3, [r4, #12]
 800d67e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800d682:	81a3      	strhmi	r3, [r4, #12]
 800d684:	f7fb ff75 	bl	8009572 <__retarget_lock_close_recursive>
 800d688:	4628      	mov	r0, r5
 800d68a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800d68e:	bd70      	pop	{r4, r5, r6, pc}

0800d690 <__sfvwrite_r>:
 800d690:	6893      	ldr	r3, [r2, #8]
 800d692:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d696:	4606      	mov	r6, r0
 800d698:	460c      	mov	r4, r1
 800d69a:	4691      	mov	r9, r2
 800d69c:	b91b      	cbnz	r3, 800d6a6 <__sfvwrite_r+0x16>
 800d69e:	2000      	movs	r0, #0
 800d6a0:	b003      	add	sp, #12
 800d6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a6:	898b      	ldrh	r3, [r1, #12]
 800d6a8:	0718      	lsls	r0, r3, #28
 800d6aa:	d54f      	bpl.n	800d74c <__sfvwrite_r+0xbc>
 800d6ac:	690b      	ldr	r3, [r1, #16]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d04c      	beq.n	800d74c <__sfvwrite_r+0xbc>
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	f8d9 8000 	ldr.w	r8, [r9]
 800d6b8:	f013 0702 	ands.w	r7, r3, #2
 800d6bc:	d16b      	bne.n	800d796 <__sfvwrite_r+0x106>
 800d6be:	f013 0301 	ands.w	r3, r3, #1
 800d6c2:	f000 809b 	beq.w	800d7fc <__sfvwrite_r+0x16c>
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	46ba      	mov	sl, r7
 800d6ca:	46bb      	mov	fp, r7
 800d6cc:	f1bb 0f00 	cmp.w	fp, #0
 800d6d0:	f000 8102 	beq.w	800d8d8 <__sfvwrite_r+0x248>
 800d6d4:	b950      	cbnz	r0, 800d6ec <__sfvwrite_r+0x5c>
 800d6d6:	465a      	mov	r2, fp
 800d6d8:	210a      	movs	r1, #10
 800d6da:	4650      	mov	r0, sl
 800d6dc:	f7f2 fd78 	bl	80001d0 <memchr>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	f000 80ff 	beq.w	800d8e4 <__sfvwrite_r+0x254>
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	eba0 070a 	sub.w	r7, r0, sl
 800d6ec:	6820      	ldr	r0, [r4, #0]
 800d6ee:	6921      	ldr	r1, [r4, #16]
 800d6f0:	68a5      	ldr	r5, [r4, #8]
 800d6f2:	6963      	ldr	r3, [r4, #20]
 800d6f4:	455f      	cmp	r7, fp
 800d6f6:	463a      	mov	r2, r7
 800d6f8:	bf28      	it	cs
 800d6fa:	465a      	movcs	r2, fp
 800d6fc:	4288      	cmp	r0, r1
 800d6fe:	f240 80f4 	bls.w	800d8ea <__sfvwrite_r+0x25a>
 800d702:	441d      	add	r5, r3
 800d704:	42aa      	cmp	r2, r5
 800d706:	f340 80f0 	ble.w	800d8ea <__sfvwrite_r+0x25a>
 800d70a:	4651      	mov	r1, sl
 800d70c:	462a      	mov	r2, r5
 800d70e:	f7ff f86c 	bl	800c7ea <memmove>
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	442b      	add	r3, r5
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	4621      	mov	r1, r4
 800d71a:	4630      	mov	r0, r6
 800d71c:	f7fd fd78 	bl	800b210 <_fflush_r>
 800d720:	2800      	cmp	r0, #0
 800d722:	d166      	bne.n	800d7f2 <__sfvwrite_r+0x162>
 800d724:	1b7f      	subs	r7, r7, r5
 800d726:	f040 80f8 	bne.w	800d91a <__sfvwrite_r+0x28a>
 800d72a:	4621      	mov	r1, r4
 800d72c:	4630      	mov	r0, r6
 800d72e:	f7fd fd6f 	bl	800b210 <_fflush_r>
 800d732:	2800      	cmp	r0, #0
 800d734:	d15d      	bne.n	800d7f2 <__sfvwrite_r+0x162>
 800d736:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d73a:	1b5b      	subs	r3, r3, r5
 800d73c:	44aa      	add	sl, r5
 800d73e:	ebab 0b05 	sub.w	fp, fp, r5
 800d742:	f8c9 3008 	str.w	r3, [r9, #8]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1c0      	bne.n	800d6cc <__sfvwrite_r+0x3c>
 800d74a:	e7a8      	b.n	800d69e <__sfvwrite_r+0xe>
 800d74c:	4621      	mov	r1, r4
 800d74e:	4630      	mov	r0, r6
 800d750:	f000 f8e8 	bl	800d924 <__swsetup_r>
 800d754:	2800      	cmp	r0, #0
 800d756:	d0ac      	beq.n	800d6b2 <__sfvwrite_r+0x22>
 800d758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d75c:	e7a0      	b.n	800d6a0 <__sfvwrite_r+0x10>
 800d75e:	e9d8 a500 	ldrd	sl, r5, [r8]
 800d762:	f108 0808 	add.w	r8, r8, #8
 800d766:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800d76a:	69e1      	ldr	r1, [r4, #28]
 800d76c:	2d00      	cmp	r5, #0
 800d76e:	d0f6      	beq.n	800d75e <__sfvwrite_r+0xce>
 800d770:	42bd      	cmp	r5, r7
 800d772:	462b      	mov	r3, r5
 800d774:	4652      	mov	r2, sl
 800d776:	bf28      	it	cs
 800d778:	463b      	movcs	r3, r7
 800d77a:	4630      	mov	r0, r6
 800d77c:	47d8      	blx	fp
 800d77e:	2800      	cmp	r0, #0
 800d780:	dd37      	ble.n	800d7f2 <__sfvwrite_r+0x162>
 800d782:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d786:	1a1b      	subs	r3, r3, r0
 800d788:	4482      	add	sl, r0
 800d78a:	1a2d      	subs	r5, r5, r0
 800d78c:	f8c9 3008 	str.w	r3, [r9, #8]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1e8      	bne.n	800d766 <__sfvwrite_r+0xd6>
 800d794:	e783      	b.n	800d69e <__sfvwrite_r+0xe>
 800d796:	f04f 0a00 	mov.w	sl, #0
 800d79a:	4f61      	ldr	r7, [pc, #388]	; (800d920 <__sfvwrite_r+0x290>)
 800d79c:	4655      	mov	r5, sl
 800d79e:	e7e2      	b.n	800d766 <__sfvwrite_r+0xd6>
 800d7a0:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800d7a4:	f108 0808 	add.w	r8, r8, #8
 800d7a8:	6820      	ldr	r0, [r4, #0]
 800d7aa:	68a2      	ldr	r2, [r4, #8]
 800d7ac:	f1ba 0f00 	cmp.w	sl, #0
 800d7b0:	d0f6      	beq.n	800d7a0 <__sfvwrite_r+0x110>
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	0599      	lsls	r1, r3, #22
 800d7b6:	d563      	bpl.n	800d880 <__sfvwrite_r+0x1f0>
 800d7b8:	4552      	cmp	r2, sl
 800d7ba:	d836      	bhi.n	800d82a <__sfvwrite_r+0x19a>
 800d7bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800d7c0:	d033      	beq.n	800d82a <__sfvwrite_r+0x19a>
 800d7c2:	6921      	ldr	r1, [r4, #16]
 800d7c4:	6965      	ldr	r5, [r4, #20]
 800d7c6:	eba0 0b01 	sub.w	fp, r0, r1
 800d7ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7d2:	f10b 0201 	add.w	r2, fp, #1
 800d7d6:	106d      	asrs	r5, r5, #1
 800d7d8:	4452      	add	r2, sl
 800d7da:	4295      	cmp	r5, r2
 800d7dc:	bf38      	it	cc
 800d7de:	4615      	movcc	r5, r2
 800d7e0:	055b      	lsls	r3, r3, #21
 800d7e2:	d53d      	bpl.n	800d860 <__sfvwrite_r+0x1d0>
 800d7e4:	4629      	mov	r1, r5
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	f7fb fff8 	bl	80097dc <_malloc_r>
 800d7ec:	b948      	cbnz	r0, 800d802 <__sfvwrite_r+0x172>
 800d7ee:	230c      	movs	r3, #12
 800d7f0:	6033      	str	r3, [r6, #0]
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f8:	81a3      	strh	r3, [r4, #12]
 800d7fa:	e7ad      	b.n	800d758 <__sfvwrite_r+0xc8>
 800d7fc:	461f      	mov	r7, r3
 800d7fe:	469a      	mov	sl, r3
 800d800:	e7d2      	b.n	800d7a8 <__sfvwrite_r+0x118>
 800d802:	465a      	mov	r2, fp
 800d804:	6921      	ldr	r1, [r4, #16]
 800d806:	9001      	str	r0, [sp, #4]
 800d808:	f7fb feb6 	bl	8009578 <memcpy>
 800d80c:	89a2      	ldrh	r2, [r4, #12]
 800d80e:	9b01      	ldr	r3, [sp, #4]
 800d810:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d814:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d818:	81a2      	strh	r2, [r4, #12]
 800d81a:	6123      	str	r3, [r4, #16]
 800d81c:	6165      	str	r5, [r4, #20]
 800d81e:	445b      	add	r3, fp
 800d820:	eba5 050b 	sub.w	r5, r5, fp
 800d824:	6023      	str	r3, [r4, #0]
 800d826:	4652      	mov	r2, sl
 800d828:	60a5      	str	r5, [r4, #8]
 800d82a:	4552      	cmp	r2, sl
 800d82c:	bf28      	it	cs
 800d82e:	4652      	movcs	r2, sl
 800d830:	6820      	ldr	r0, [r4, #0]
 800d832:	9201      	str	r2, [sp, #4]
 800d834:	4639      	mov	r1, r7
 800d836:	f7fe ffd8 	bl	800c7ea <memmove>
 800d83a:	68a3      	ldr	r3, [r4, #8]
 800d83c:	9a01      	ldr	r2, [sp, #4]
 800d83e:	1a9b      	subs	r3, r3, r2
 800d840:	60a3      	str	r3, [r4, #8]
 800d842:	6823      	ldr	r3, [r4, #0]
 800d844:	4413      	add	r3, r2
 800d846:	4655      	mov	r5, sl
 800d848:	6023      	str	r3, [r4, #0]
 800d84a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d84e:	1b5b      	subs	r3, r3, r5
 800d850:	442f      	add	r7, r5
 800d852:	ebaa 0a05 	sub.w	sl, sl, r5
 800d856:	f8c9 3008 	str.w	r3, [r9, #8]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1a4      	bne.n	800d7a8 <__sfvwrite_r+0x118>
 800d85e:	e71e      	b.n	800d69e <__sfvwrite_r+0xe>
 800d860:	462a      	mov	r2, r5
 800d862:	4630      	mov	r0, r6
 800d864:	f7ff f848 	bl	800c8f8 <_realloc_r>
 800d868:	4603      	mov	r3, r0
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d1d5      	bne.n	800d81a <__sfvwrite_r+0x18a>
 800d86e:	6921      	ldr	r1, [r4, #16]
 800d870:	4630      	mov	r0, r6
 800d872:	f7fb fef3 	bl	800965c <_free_r>
 800d876:	89a3      	ldrh	r3, [r4, #12]
 800d878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d87c:	81a3      	strh	r3, [r4, #12]
 800d87e:	e7b6      	b.n	800d7ee <__sfvwrite_r+0x15e>
 800d880:	6923      	ldr	r3, [r4, #16]
 800d882:	4283      	cmp	r3, r0
 800d884:	d302      	bcc.n	800d88c <__sfvwrite_r+0x1fc>
 800d886:	6961      	ldr	r1, [r4, #20]
 800d888:	4551      	cmp	r1, sl
 800d88a:	d915      	bls.n	800d8b8 <__sfvwrite_r+0x228>
 800d88c:	4552      	cmp	r2, sl
 800d88e:	bf28      	it	cs
 800d890:	4652      	movcs	r2, sl
 800d892:	4639      	mov	r1, r7
 800d894:	4615      	mov	r5, r2
 800d896:	f7fe ffa8 	bl	800c7ea <memmove>
 800d89a:	68a3      	ldr	r3, [r4, #8]
 800d89c:	6822      	ldr	r2, [r4, #0]
 800d89e:	1b5b      	subs	r3, r3, r5
 800d8a0:	442a      	add	r2, r5
 800d8a2:	60a3      	str	r3, [r4, #8]
 800d8a4:	6022      	str	r2, [r4, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1cf      	bne.n	800d84a <__sfvwrite_r+0x1ba>
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	f7fd fcaf 	bl	800b210 <_fflush_r>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d0c9      	beq.n	800d84a <__sfvwrite_r+0x1ba>
 800d8b6:	e79c      	b.n	800d7f2 <__sfvwrite_r+0x162>
 800d8b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d8bc:	459a      	cmp	sl, r3
 800d8be:	bf38      	it	cc
 800d8c0:	4653      	movcc	r3, sl
 800d8c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d8c4:	fb93 f3f1 	sdiv	r3, r3, r1
 800d8c8:	463a      	mov	r2, r7
 800d8ca:	434b      	muls	r3, r1
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	69e1      	ldr	r1, [r4, #28]
 800d8d0:	47a8      	blx	r5
 800d8d2:	1e05      	subs	r5, r0, #0
 800d8d4:	dcb9      	bgt.n	800d84a <__sfvwrite_r+0x1ba>
 800d8d6:	e78c      	b.n	800d7f2 <__sfvwrite_r+0x162>
 800d8d8:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800d8dc:	2000      	movs	r0, #0
 800d8de:	f108 0808 	add.w	r8, r8, #8
 800d8e2:	e6f3      	b.n	800d6cc <__sfvwrite_r+0x3c>
 800d8e4:	f10b 0701 	add.w	r7, fp, #1
 800d8e8:	e700      	b.n	800d6ec <__sfvwrite_r+0x5c>
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	dc08      	bgt.n	800d900 <__sfvwrite_r+0x270>
 800d8ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d8f0:	69e1      	ldr	r1, [r4, #28]
 800d8f2:	4652      	mov	r2, sl
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	47a8      	blx	r5
 800d8f8:	1e05      	subs	r5, r0, #0
 800d8fa:	f73f af13 	bgt.w	800d724 <__sfvwrite_r+0x94>
 800d8fe:	e778      	b.n	800d7f2 <__sfvwrite_r+0x162>
 800d900:	4651      	mov	r1, sl
 800d902:	9201      	str	r2, [sp, #4]
 800d904:	f7fe ff71 	bl	800c7ea <memmove>
 800d908:	9a01      	ldr	r2, [sp, #4]
 800d90a:	68a3      	ldr	r3, [r4, #8]
 800d90c:	1a9b      	subs	r3, r3, r2
 800d90e:	60a3      	str	r3, [r4, #8]
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	4413      	add	r3, r2
 800d914:	6023      	str	r3, [r4, #0]
 800d916:	4615      	mov	r5, r2
 800d918:	e704      	b.n	800d724 <__sfvwrite_r+0x94>
 800d91a:	2001      	movs	r0, #1
 800d91c:	e70b      	b.n	800d736 <__sfvwrite_r+0xa6>
 800d91e:	bf00      	nop
 800d920:	7ffffc00 	.word	0x7ffffc00

0800d924 <__swsetup_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	4b2a      	ldr	r3, [pc, #168]	; (800d9d0 <__swsetup_r+0xac>)
 800d928:	4605      	mov	r5, r0
 800d92a:	6818      	ldr	r0, [r3, #0]
 800d92c:	460c      	mov	r4, r1
 800d92e:	b118      	cbz	r0, 800d938 <__swsetup_r+0x14>
 800d930:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d932:	b90b      	cbnz	r3, 800d938 <__swsetup_r+0x14>
 800d934:	f7fb fcdc 	bl	80092f0 <__sinit>
 800d938:	89a3      	ldrh	r3, [r4, #12]
 800d93a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d93e:	0718      	lsls	r0, r3, #28
 800d940:	d422      	bmi.n	800d988 <__swsetup_r+0x64>
 800d942:	06d9      	lsls	r1, r3, #27
 800d944:	d407      	bmi.n	800d956 <__swsetup_r+0x32>
 800d946:	2309      	movs	r3, #9
 800d948:	602b      	str	r3, [r5, #0]
 800d94a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d94e:	81a3      	strh	r3, [r4, #12]
 800d950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d954:	e034      	b.n	800d9c0 <__swsetup_r+0x9c>
 800d956:	0758      	lsls	r0, r3, #29
 800d958:	d512      	bpl.n	800d980 <__swsetup_r+0x5c>
 800d95a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d95c:	b141      	cbz	r1, 800d970 <__swsetup_r+0x4c>
 800d95e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d962:	4299      	cmp	r1, r3
 800d964:	d002      	beq.n	800d96c <__swsetup_r+0x48>
 800d966:	4628      	mov	r0, r5
 800d968:	f7fb fe78 	bl	800965c <_free_r>
 800d96c:	2300      	movs	r3, #0
 800d96e:	6323      	str	r3, [r4, #48]	; 0x30
 800d970:	89a3      	ldrh	r3, [r4, #12]
 800d972:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d976:	81a3      	strh	r3, [r4, #12]
 800d978:	2300      	movs	r3, #0
 800d97a:	6063      	str	r3, [r4, #4]
 800d97c:	6923      	ldr	r3, [r4, #16]
 800d97e:	6023      	str	r3, [r4, #0]
 800d980:	89a3      	ldrh	r3, [r4, #12]
 800d982:	f043 0308 	orr.w	r3, r3, #8
 800d986:	81a3      	strh	r3, [r4, #12]
 800d988:	6923      	ldr	r3, [r4, #16]
 800d98a:	b94b      	cbnz	r3, 800d9a0 <__swsetup_r+0x7c>
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d996:	d003      	beq.n	800d9a0 <__swsetup_r+0x7c>
 800d998:	4621      	mov	r1, r4
 800d99a:	4628      	mov	r0, r5
 800d99c:	f000 f8ca 	bl	800db34 <__smakebuf_r>
 800d9a0:	89a0      	ldrh	r0, [r4, #12]
 800d9a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9a6:	f010 0301 	ands.w	r3, r0, #1
 800d9aa:	d00a      	beq.n	800d9c2 <__swsetup_r+0x9e>
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	60a3      	str	r3, [r4, #8]
 800d9b0:	6963      	ldr	r3, [r4, #20]
 800d9b2:	425b      	negs	r3, r3
 800d9b4:	61a3      	str	r3, [r4, #24]
 800d9b6:	6923      	ldr	r3, [r4, #16]
 800d9b8:	b943      	cbnz	r3, 800d9cc <__swsetup_r+0xa8>
 800d9ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d9be:	d1c4      	bne.n	800d94a <__swsetup_r+0x26>
 800d9c0:	bd38      	pop	{r3, r4, r5, pc}
 800d9c2:	0781      	lsls	r1, r0, #30
 800d9c4:	bf58      	it	pl
 800d9c6:	6963      	ldrpl	r3, [r4, #20]
 800d9c8:	60a3      	str	r3, [r4, #8]
 800d9ca:	e7f4      	b.n	800d9b6 <__swsetup_r+0x92>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e7f7      	b.n	800d9c0 <__swsetup_r+0x9c>
 800d9d0:	20000168 	.word	0x20000168

0800d9d4 <__fputwc>:
 800d9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9d8:	4680      	mov	r8, r0
 800d9da:	460e      	mov	r6, r1
 800d9dc:	4615      	mov	r5, r2
 800d9de:	f7fe ff1f 	bl	800c820 <__locale_mb_cur_max>
 800d9e2:	2801      	cmp	r0, #1
 800d9e4:	d11c      	bne.n	800da20 <__fputwc+0x4c>
 800d9e6:	1e73      	subs	r3, r6, #1
 800d9e8:	2bfe      	cmp	r3, #254	; 0xfe
 800d9ea:	d819      	bhi.n	800da20 <__fputwc+0x4c>
 800d9ec:	f88d 6004 	strb.w	r6, [sp, #4]
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	2700      	movs	r7, #0
 800d9f4:	f10d 0904 	add.w	r9, sp, #4
 800d9f8:	42a7      	cmp	r7, r4
 800d9fa:	d020      	beq.n	800da3e <__fputwc+0x6a>
 800d9fc:	68ab      	ldr	r3, [r5, #8]
 800d9fe:	f817 1009 	ldrb.w	r1, [r7, r9]
 800da02:	3b01      	subs	r3, #1
 800da04:	2b00      	cmp	r3, #0
 800da06:	60ab      	str	r3, [r5, #8]
 800da08:	da04      	bge.n	800da14 <__fputwc+0x40>
 800da0a:	69aa      	ldr	r2, [r5, #24]
 800da0c:	4293      	cmp	r3, r2
 800da0e:	db1a      	blt.n	800da46 <__fputwc+0x72>
 800da10:	290a      	cmp	r1, #10
 800da12:	d018      	beq.n	800da46 <__fputwc+0x72>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	602a      	str	r2, [r5, #0]
 800da1a:	7019      	strb	r1, [r3, #0]
 800da1c:	3701      	adds	r7, #1
 800da1e:	e7eb      	b.n	800d9f8 <__fputwc+0x24>
 800da20:	a901      	add	r1, sp, #4
 800da22:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800da26:	4632      	mov	r2, r6
 800da28:	4640      	mov	r0, r8
 800da2a:	f000 f845 	bl	800dab8 <_wcrtomb_r>
 800da2e:	1c41      	adds	r1, r0, #1
 800da30:	4604      	mov	r4, r0
 800da32:	d1de      	bne.n	800d9f2 <__fputwc+0x1e>
 800da34:	89ab      	ldrh	r3, [r5, #12]
 800da36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da3a:	81ab      	strh	r3, [r5, #12]
 800da3c:	4606      	mov	r6, r0
 800da3e:	4630      	mov	r0, r6
 800da40:	b003      	add	sp, #12
 800da42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da46:	462a      	mov	r2, r5
 800da48:	4640      	mov	r0, r8
 800da4a:	f000 f8af 	bl	800dbac <__swbuf_r>
 800da4e:	1c42      	adds	r2, r0, #1
 800da50:	d1e4      	bne.n	800da1c <__fputwc+0x48>
 800da52:	4606      	mov	r6, r0
 800da54:	e7f3      	b.n	800da3e <__fputwc+0x6a>

0800da56 <_fputwc_r>:
 800da56:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800da58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da5a:	4614      	mov	r4, r2
 800da5c:	07da      	lsls	r2, r3, #31
 800da5e:	4605      	mov	r5, r0
 800da60:	d407      	bmi.n	800da72 <_fputwc_r+0x1c>
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	059b      	lsls	r3, r3, #22
 800da66:	d404      	bmi.n	800da72 <_fputwc_r+0x1c>
 800da68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da6a:	9101      	str	r1, [sp, #4]
 800da6c:	f7fb fd82 	bl	8009574 <__retarget_lock_acquire_recursive>
 800da70:	9901      	ldr	r1, [sp, #4]
 800da72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da76:	0498      	lsls	r0, r3, #18
 800da78:	d406      	bmi.n	800da88 <_fputwc_r+0x32>
 800da7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800da7e:	81a3      	strh	r3, [r4, #12]
 800da80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800da86:	6663      	str	r3, [r4, #100]	; 0x64
 800da88:	4622      	mov	r2, r4
 800da8a:	4628      	mov	r0, r5
 800da8c:	f7ff ffa2 	bl	800d9d4 <__fputwc>
 800da90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da92:	07da      	lsls	r2, r3, #31
 800da94:	4605      	mov	r5, r0
 800da96:	d405      	bmi.n	800daa4 <_fputwc_r+0x4e>
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	059b      	lsls	r3, r3, #22
 800da9c:	d402      	bmi.n	800daa4 <_fputwc_r+0x4e>
 800da9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daa0:	f7fb fd69 	bl	8009576 <__retarget_lock_release_recursive>
 800daa4:	4628      	mov	r0, r5
 800daa6:	b003      	add	sp, #12
 800daa8:	bd30      	pop	{r4, r5, pc}

0800daaa <abort>:
 800daaa:	b508      	push	{r3, lr}
 800daac:	2006      	movs	r0, #6
 800daae:	f000 f8ef 	bl	800dc90 <raise>
 800dab2:	2001      	movs	r0, #1
 800dab4:	f7f4 fce3 	bl	800247e <_exit>

0800dab8 <_wcrtomb_r>:
 800dab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daba:	4c09      	ldr	r4, [pc, #36]	; (800dae0 <_wcrtomb_r+0x28>)
 800dabc:	b085      	sub	sp, #20
 800dabe:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800dac2:	4605      	mov	r5, r0
 800dac4:	461e      	mov	r6, r3
 800dac6:	b909      	cbnz	r1, 800dacc <_wcrtomb_r+0x14>
 800dac8:	460a      	mov	r2, r1
 800daca:	a901      	add	r1, sp, #4
 800dacc:	47b8      	blx	r7
 800dace:	1c43      	adds	r3, r0, #1
 800dad0:	bf01      	itttt	eq
 800dad2:	2300      	moveq	r3, #0
 800dad4:	6033      	streq	r3, [r6, #0]
 800dad6:	238a      	moveq	r3, #138	; 0x8a
 800dad8:	602b      	streq	r3, [r5, #0]
 800dada:	b005      	add	sp, #20
 800dadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dade:	bf00      	nop
 800dae0:	20000580 	.word	0x20000580

0800dae4 <__swhatbuf_r>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	460c      	mov	r4, r1
 800dae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daec:	2900      	cmp	r1, #0
 800daee:	b096      	sub	sp, #88	; 0x58
 800daf0:	4615      	mov	r5, r2
 800daf2:	461e      	mov	r6, r3
 800daf4:	da07      	bge.n	800db06 <__swhatbuf_r+0x22>
 800daf6:	89a1      	ldrh	r1, [r4, #12]
 800daf8:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800dafc:	d017      	beq.n	800db2e <__swhatbuf_r+0x4a>
 800dafe:	2100      	movs	r1, #0
 800db00:	2340      	movs	r3, #64	; 0x40
 800db02:	4608      	mov	r0, r1
 800db04:	e00f      	b.n	800db26 <__swhatbuf_r+0x42>
 800db06:	466a      	mov	r2, sp
 800db08:	f000 f8ca 	bl	800dca0 <_fstat_r>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	dbf2      	blt.n	800daf6 <__swhatbuf_r+0x12>
 800db10:	9901      	ldr	r1, [sp, #4]
 800db12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800db16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800db1a:	4259      	negs	r1, r3
 800db1c:	4159      	adcs	r1, r3
 800db1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800db22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db26:	6031      	str	r1, [r6, #0]
 800db28:	602b      	str	r3, [r5, #0]
 800db2a:	b016      	add	sp, #88	; 0x58
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
 800db2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db32:	e7e6      	b.n	800db02 <__swhatbuf_r+0x1e>

0800db34 <__smakebuf_r>:
 800db34:	898b      	ldrh	r3, [r1, #12]
 800db36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db38:	079d      	lsls	r5, r3, #30
 800db3a:	4606      	mov	r6, r0
 800db3c:	460c      	mov	r4, r1
 800db3e:	d507      	bpl.n	800db50 <__smakebuf_r+0x1c>
 800db40:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	6123      	str	r3, [r4, #16]
 800db48:	2301      	movs	r3, #1
 800db4a:	6163      	str	r3, [r4, #20]
 800db4c:	b002      	add	sp, #8
 800db4e:	bd70      	pop	{r4, r5, r6, pc}
 800db50:	ab01      	add	r3, sp, #4
 800db52:	466a      	mov	r2, sp
 800db54:	f7ff ffc6 	bl	800dae4 <__swhatbuf_r>
 800db58:	9900      	ldr	r1, [sp, #0]
 800db5a:	4605      	mov	r5, r0
 800db5c:	4630      	mov	r0, r6
 800db5e:	f7fb fe3d 	bl	80097dc <_malloc_r>
 800db62:	b948      	cbnz	r0, 800db78 <__smakebuf_r+0x44>
 800db64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db68:	059a      	lsls	r2, r3, #22
 800db6a:	d4ef      	bmi.n	800db4c <__smakebuf_r+0x18>
 800db6c:	f023 0303 	bic.w	r3, r3, #3
 800db70:	f043 0302 	orr.w	r3, r3, #2
 800db74:	81a3      	strh	r3, [r4, #12]
 800db76:	e7e3      	b.n	800db40 <__smakebuf_r+0xc>
 800db78:	89a3      	ldrh	r3, [r4, #12]
 800db7a:	6020      	str	r0, [r4, #0]
 800db7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db80:	81a3      	strh	r3, [r4, #12]
 800db82:	9b00      	ldr	r3, [sp, #0]
 800db84:	6163      	str	r3, [r4, #20]
 800db86:	9b01      	ldr	r3, [sp, #4]
 800db88:	6120      	str	r0, [r4, #16]
 800db8a:	b15b      	cbz	r3, 800dba4 <__smakebuf_r+0x70>
 800db8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db90:	4630      	mov	r0, r6
 800db92:	f000 f897 	bl	800dcc4 <_isatty_r>
 800db96:	b128      	cbz	r0, 800dba4 <__smakebuf_r+0x70>
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	f023 0303 	bic.w	r3, r3, #3
 800db9e:	f043 0301 	orr.w	r3, r3, #1
 800dba2:	81a3      	strh	r3, [r4, #12]
 800dba4:	89a3      	ldrh	r3, [r4, #12]
 800dba6:	431d      	orrs	r5, r3
 800dba8:	81a5      	strh	r5, [r4, #12]
 800dbaa:	e7cf      	b.n	800db4c <__smakebuf_r+0x18>

0800dbac <__swbuf_r>:
 800dbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbae:	460e      	mov	r6, r1
 800dbb0:	4614      	mov	r4, r2
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	b118      	cbz	r0, 800dbbe <__swbuf_r+0x12>
 800dbb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dbb8:	b90b      	cbnz	r3, 800dbbe <__swbuf_r+0x12>
 800dbba:	f7fb fb99 	bl	80092f0 <__sinit>
 800dbbe:	69a3      	ldr	r3, [r4, #24]
 800dbc0:	60a3      	str	r3, [r4, #8]
 800dbc2:	89a3      	ldrh	r3, [r4, #12]
 800dbc4:	0719      	lsls	r1, r3, #28
 800dbc6:	d529      	bpl.n	800dc1c <__swbuf_r+0x70>
 800dbc8:	6923      	ldr	r3, [r4, #16]
 800dbca:	b33b      	cbz	r3, 800dc1c <__swbuf_r+0x70>
 800dbcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbd0:	b2f6      	uxtb	r6, r6
 800dbd2:	049a      	lsls	r2, r3, #18
 800dbd4:	4637      	mov	r7, r6
 800dbd6:	d52a      	bpl.n	800dc2e <__swbuf_r+0x82>
 800dbd8:	6823      	ldr	r3, [r4, #0]
 800dbda:	6922      	ldr	r2, [r4, #16]
 800dbdc:	1a98      	subs	r0, r3, r2
 800dbde:	6963      	ldr	r3, [r4, #20]
 800dbe0:	4283      	cmp	r3, r0
 800dbe2:	dc04      	bgt.n	800dbee <__swbuf_r+0x42>
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f7fd fb12 	bl	800b210 <_fflush_r>
 800dbec:	b9e0      	cbnz	r0, 800dc28 <__swbuf_r+0x7c>
 800dbee:	68a3      	ldr	r3, [r4, #8]
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	60a3      	str	r3, [r4, #8]
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	1c5a      	adds	r2, r3, #1
 800dbf8:	6022      	str	r2, [r4, #0]
 800dbfa:	701e      	strb	r6, [r3, #0]
 800dbfc:	6962      	ldr	r2, [r4, #20]
 800dbfe:	1c43      	adds	r3, r0, #1
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d004      	beq.n	800dc0e <__swbuf_r+0x62>
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	07db      	lsls	r3, r3, #31
 800dc08:	d506      	bpl.n	800dc18 <__swbuf_r+0x6c>
 800dc0a:	2e0a      	cmp	r6, #10
 800dc0c:	d104      	bne.n	800dc18 <__swbuf_r+0x6c>
 800dc0e:	4621      	mov	r1, r4
 800dc10:	4628      	mov	r0, r5
 800dc12:	f7fd fafd 	bl	800b210 <_fflush_r>
 800dc16:	b938      	cbnz	r0, 800dc28 <__swbuf_r+0x7c>
 800dc18:	4638      	mov	r0, r7
 800dc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f7ff fe80 	bl	800d924 <__swsetup_r>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d0d1      	beq.n	800dbcc <__swbuf_r+0x20>
 800dc28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dc2c:	e7f4      	b.n	800dc18 <__swbuf_r+0x6c>
 800dc2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dc32:	81a3      	strh	r3, [r4, #12]
 800dc34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc3a:	6663      	str	r3, [r4, #100]	; 0x64
 800dc3c:	e7cc      	b.n	800dbd8 <__swbuf_r+0x2c>

0800dc3e <_raise_r>:
 800dc3e:	291f      	cmp	r1, #31
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4604      	mov	r4, r0
 800dc44:	460d      	mov	r5, r1
 800dc46:	d904      	bls.n	800dc52 <_raise_r+0x14>
 800dc48:	2316      	movs	r3, #22
 800dc4a:	6003      	str	r3, [r0, #0]
 800dc4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc50:	bd38      	pop	{r3, r4, r5, pc}
 800dc52:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 800dc56:	b112      	cbz	r2, 800dc5e <_raise_r+0x20>
 800dc58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc5c:	b94b      	cbnz	r3, 800dc72 <_raise_r+0x34>
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f000 f852 	bl	800dd08 <_getpid_r>
 800dc64:	462a      	mov	r2, r5
 800dc66:	4601      	mov	r1, r0
 800dc68:	4620      	mov	r0, r4
 800dc6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc6e:	f000 b839 	b.w	800dce4 <_kill_r>
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d00a      	beq.n	800dc8c <_raise_r+0x4e>
 800dc76:	1c59      	adds	r1, r3, #1
 800dc78:	d103      	bne.n	800dc82 <_raise_r+0x44>
 800dc7a:	2316      	movs	r3, #22
 800dc7c:	6003      	str	r3, [r0, #0]
 800dc7e:	2001      	movs	r0, #1
 800dc80:	e7e6      	b.n	800dc50 <_raise_r+0x12>
 800dc82:	2400      	movs	r4, #0
 800dc84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc88:	4628      	mov	r0, r5
 800dc8a:	4798      	blx	r3
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	e7df      	b.n	800dc50 <_raise_r+0x12>

0800dc90 <raise>:
 800dc90:	4b02      	ldr	r3, [pc, #8]	; (800dc9c <raise+0xc>)
 800dc92:	4601      	mov	r1, r0
 800dc94:	6818      	ldr	r0, [r3, #0]
 800dc96:	f7ff bfd2 	b.w	800dc3e <_raise_r>
 800dc9a:	bf00      	nop
 800dc9c:	20000168 	.word	0x20000168

0800dca0 <_fstat_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	4d07      	ldr	r5, [pc, #28]	; (800dcc0 <_fstat_r+0x20>)
 800dca4:	2300      	movs	r3, #0
 800dca6:	4604      	mov	r4, r0
 800dca8:	4608      	mov	r0, r1
 800dcaa:	4611      	mov	r1, r2
 800dcac:	602b      	str	r3, [r5, #0]
 800dcae:	f7f4 fc35 	bl	800251c <_fstat>
 800dcb2:	1c43      	adds	r3, r0, #1
 800dcb4:	d102      	bne.n	800dcbc <_fstat_r+0x1c>
 800dcb6:	682b      	ldr	r3, [r5, #0]
 800dcb8:	b103      	cbz	r3, 800dcbc <_fstat_r+0x1c>
 800dcba:	6023      	str	r3, [r4, #0]
 800dcbc:	bd38      	pop	{r3, r4, r5, pc}
 800dcbe:	bf00      	nop
 800dcc0:	200042b8 	.word	0x200042b8

0800dcc4 <_isatty_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4d06      	ldr	r5, [pc, #24]	; (800dce0 <_isatty_r+0x1c>)
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4604      	mov	r4, r0
 800dccc:	4608      	mov	r0, r1
 800dcce:	602b      	str	r3, [r5, #0]
 800dcd0:	f7f4 fc34 	bl	800253c <_isatty>
 800dcd4:	1c43      	adds	r3, r0, #1
 800dcd6:	d102      	bne.n	800dcde <_isatty_r+0x1a>
 800dcd8:	682b      	ldr	r3, [r5, #0]
 800dcda:	b103      	cbz	r3, 800dcde <_isatty_r+0x1a>
 800dcdc:	6023      	str	r3, [r4, #0]
 800dcde:	bd38      	pop	{r3, r4, r5, pc}
 800dce0:	200042b8 	.word	0x200042b8

0800dce4 <_kill_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	4d07      	ldr	r5, [pc, #28]	; (800dd04 <_kill_r+0x20>)
 800dce8:	2300      	movs	r3, #0
 800dcea:	4604      	mov	r4, r0
 800dcec:	4608      	mov	r0, r1
 800dcee:	4611      	mov	r1, r2
 800dcf0:	602b      	str	r3, [r5, #0]
 800dcf2:	f7f4 fbb4 	bl	800245e <_kill>
 800dcf6:	1c43      	adds	r3, r0, #1
 800dcf8:	d102      	bne.n	800dd00 <_kill_r+0x1c>
 800dcfa:	682b      	ldr	r3, [r5, #0]
 800dcfc:	b103      	cbz	r3, 800dd00 <_kill_r+0x1c>
 800dcfe:	6023      	str	r3, [r4, #0]
 800dd00:	bd38      	pop	{r3, r4, r5, pc}
 800dd02:	bf00      	nop
 800dd04:	200042b8 	.word	0x200042b8

0800dd08 <_getpid_r>:
 800dd08:	f7f4 bba1 	b.w	800244e <_getpid>

0800dd0c <_init>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr

0800dd18 <_fini>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	bf00      	nop
 800dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	469e      	mov	lr, r3
 800dd22:	4770      	bx	lr
