
RTOS_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007868  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c94  08007c94  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c9c  08007c9c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c9c  08007c9c  00017c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ca0  08007ca0  00017ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000241c  20000060  08007d04  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000247c  08007d04  0002247c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b873  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003709  00000000  00000000  0003b946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  0003f050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c3  00000000  00000000  00040730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000291cd  00000000  00000000  000418f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f3f  00000000  00000000  0006aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd248  00000000  00000000  000839ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000650c  00000000  00000000  00180c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00187154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079e0 	.word	0x080079e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080079e0 	.word	0x080079e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09c      	sub	sp, #112	; 0x70
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[100];
	int data_size;
	data_size = sprintf((char*)buffer, "A BUTTON PRESSED!!\r\n");
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	4923      	ldr	r1, [pc, #140]	; (8000618 <HAL_GPIO_EXTI_Callback+0x9c>)
 800058c:	4618      	mov	r0, r3
 800058e:	f006 fd2d 	bl	8006fec <siprintf>
 8000592:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 8000594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000596:	b29a      	uxth	r2, r3
 8000598:	f107 0108 	add.w	r1, r7, #8
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	481f      	ldr	r0, [pc, #124]	; (800061c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005a0:	f002 fff4 	bl	800358c <HAL_UART_Transmit>
	if(GPIO_Pin == S1_SHLD_BUTTON_Pin)
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d10e      	bne.n	80005c8 <HAL_GPIO_EXTI_Callback+0x4c>
	{
		data_size = sprintf((char*)buffer, "S1 BUTTON PRESSED!!\r\n");
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	491c      	ldr	r1, [pc, #112]	; (8000620 <HAL_GPIO_EXTI_Callback+0xa4>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f006 fd1b 	bl	8006fec <siprintf>
 80005b6:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 80005b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f107 0108 	add.w	r1, r7, #8
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	4816      	ldr	r0, [pc, #88]	; (800061c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005c4:	f002 ffe2 	bl	800358c <HAL_UART_Transmit>
	}

	if(GPIO_Pin == S2_SHLD_BUTTON_Pin)
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	2b10      	cmp	r3, #16
 80005cc:	d10e      	bne.n	80005ec <HAL_GPIO_EXTI_Callback+0x70>
	{
		data_size = sprintf((char*)buffer, "S2 BUTTON PRESSED!!\r\n");
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4914      	ldr	r1, [pc, #80]	; (8000624 <HAL_GPIO_EXTI_Callback+0xa8>)
 80005d4:	4618      	mov	r0, r3
 80005d6:	f006 fd09 	bl	8006fec <siprintf>
 80005da:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 80005dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f107 0108 	add.w	r1, r7, #8
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <HAL_GPIO_EXTI_Callback+0xa0>)
 80005e8:	f002 ffd0 	bl	800358c <HAL_UART_Transmit>
	}

	if(GPIO_Pin == S3_SHLD_BUTTON_Pin)
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d10e      	bne.n	8000610 <HAL_GPIO_EXTI_Callback+0x94>
	{
		data_size = sprintf((char*)buffer, "S3 BUTTON PRESSED!!\r\n");
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	490c      	ldr	r1, [pc, #48]	; (8000628 <HAL_GPIO_EXTI_Callback+0xac>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f006 fcf7 	bl	8006fec <siprintf>
 80005fe:	66f8      	str	r0, [r7, #108]	; 0x6c
		HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 8000600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000602:	b29a      	uxth	r2, r3
 8000604:	f107 0108 	add.w	r1, r7, #8
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <HAL_GPIO_EXTI_Callback+0xa0>)
 800060c:	f002 ffbe 	bl	800358c <HAL_UART_Transmit>
	}
}
 8000610:	bf00      	nop
 8000612:	3770      	adds	r7, #112	; 0x70
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	08007a4c 	.word	0x08007a4c
 800061c:	200000c8 	.word	0x200000c8
 8000620:	08007a64 	.word	0x08007a64
 8000624:	08007a7c 	.word	0x08007a7c
 8000628:	08007a94 	.word	0x08007a94

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09a      	sub	sp, #104	; 0x68
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fc79 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f889 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f000 f957 	bl	80008ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f925 	bl	800088c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000642:	f000 f8d5 	bl	80007f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000646:	f003 fd3d 	bl	80040c4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 800064a:	482a      	ldr	r0, [pc, #168]	; (80006f4 <main+0xc8>)
 800064c:	f003 fe52 	bl	80042f4 <osMutexNew>
 8000650:	4603      	mov	r3, r0
 8000652:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <main+0xcc>)
 8000654:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of customerQueue */
  customerQueueHandle = osMessageQueueNew (421, sizeof(uint16_t), &customerQueue_attributes);
 8000656:	4a29      	ldr	r2, [pc, #164]	; (80006fc <main+0xd0>)
 8000658:	2102      	movs	r1, #2
 800065a:	f240 10a5 	movw	r0, #421	; 0x1a5
 800065e:	f003 fecf 	bl	8004400 <osMessageQueueNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a26      	ldr	r2, [pc, #152]	; (8000700 <main+0xd4>)
 8000666:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000668:	4a26      	ldr	r2, [pc, #152]	; (8000704 <main+0xd8>)
 800066a:	2100      	movs	r1, #0
 800066c:	4826      	ldr	r0, [pc, #152]	; (8000708 <main+0xdc>)
 800066e:	f003 fd73 	bl	8004158 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a25      	ldr	r2, [pc, #148]	; (800070c <main+0xe0>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of genCustomer */
  genCustomerHandle = osThreadNew(StartGenCustomerTask, NULL, &genCustomer_attributes);
 8000678:	4a25      	ldr	r2, [pc, #148]	; (8000710 <main+0xe4>)
 800067a:	2100      	movs	r1, #0
 800067c:	4825      	ldr	r0, [pc, #148]	; (8000714 <main+0xe8>)
 800067e:	f003 fd6b 	bl	8004158 <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a24      	ldr	r2, [pc, #144]	; (8000718 <main+0xec>)
 8000686:	6013      	str	r3, [r2, #0]

  /* creation of teller01 */
  teller01Handle = osThreadNew(StartTeller01, NULL, &teller01_attributes);
 8000688:	4a24      	ldr	r2, [pc, #144]	; (800071c <main+0xf0>)
 800068a:	2100      	movs	r1, #0
 800068c:	4824      	ldr	r0, [pc, #144]	; (8000720 <main+0xf4>)
 800068e:	f003 fd63 	bl	8004158 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a23      	ldr	r2, [pc, #140]	; (8000724 <main+0xf8>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of teller02 */
  teller02Handle = osThreadNew(StartTeller02, NULL, &teller02_attributes);
 8000698:	4a23      	ldr	r2, [pc, #140]	; (8000728 <main+0xfc>)
 800069a:	2100      	movs	r1, #0
 800069c:	4823      	ldr	r0, [pc, #140]	; (800072c <main+0x100>)
 800069e:	f003 fd5b 	bl	8004158 <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a22      	ldr	r2, [pc, #136]	; (8000730 <main+0x104>)
 80006a6:	6013      	str	r3, [r2, #0]

  /* creation of teller03 */
  teller03Handle = osThreadNew(StartTeller03, NULL, &teller03_attributes);
 80006a8:	4a22      	ldr	r2, [pc, #136]	; (8000734 <main+0x108>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4822      	ldr	r0, [pc, #136]	; (8000738 <main+0x10c>)
 80006ae:	f003 fd53 	bl	8004158 <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <main+0x110>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // start simulated timer
  SIMULATED_TIME_START = HAL_GetTick();
 80006b8:	f000 fc6a 	bl	8000f90 <HAL_GetTick>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <main+0x114>)
 80006c2:	601a      	str	r2, [r3, #0]
  uint8_t buffer[100];
  int data_size;
  data_size = sprintf((char*)buffer, "SIM START: %ld ; SIM STOP TIME: %d\r\n", SIMULATED_TIME_START, SIM_MIN_TO_MS(TOTAL_SIM_TIME_MIN));
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <main+0x114>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4638      	mov	r0, r7
 80006ca:	f24a 4310 	movw	r3, #42000	; 0xa410
 80006ce:	491d      	ldr	r1, [pc, #116]	; (8000744 <main+0x118>)
 80006d0:	f006 fc8c 	bl	8006fec <siprintf>
 80006d4:	6678      	str	r0, [r7, #100]	; 0x64
  HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 80006d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4639      	mov	r1, r7
 80006dc:	2364      	movs	r3, #100	; 0x64
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <main+0x11c>)
 80006e0:	f002 ff54 	bl	800358c <HAL_UART_Transmit>

  // temporary for testing
  osThreadSuspend(genCustomerHandle);
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <main+0xec>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fdc7 	bl	800427c <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006ee:	f003 fd0d 	bl	800410c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0xc6>
 80006f4:	08007c08 	.word	0x08007c08
 80006f8:	20000168 	.word	0x20000168
 80006fc:	08007bf0 	.word	0x08007bf0
 8000700:	20000164 	.word	0x20000164
 8000704:	08007b3c 	.word	0x08007b3c
 8000708:	08000a6d 	.word	0x08000a6d
 800070c:	20000150 	.word	0x20000150
 8000710:	08007b60 	.word	0x08007b60
 8000714:	08000a7d 	.word	0x08000a7d
 8000718:	20000154 	.word	0x20000154
 800071c:	08007b84 	.word	0x08007b84
 8000720:	08000a8d 	.word	0x08000a8d
 8000724:	20000158 	.word	0x20000158
 8000728:	08007ba8 	.word	0x08007ba8
 800072c:	08000af9 	.word	0x08000af9
 8000730:	2000015c 	.word	0x2000015c
 8000734:	08007bcc 	.word	0x08007bcc
 8000738:	08000b61 	.word	0x08000b61
 800073c:	20000160 	.word	0x20000160
 8000740:	2000016c 	.word	0x2000016c
 8000744:	08007aac 	.word	0x08007aac
 8000748:	200000c8 	.word	0x200000c8

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b096      	sub	sp, #88	; 0x58
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2244      	movs	r2, #68	; 0x44
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f006 fc66 	bl	800702c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000772:	f000 fee3 	bl	800153c <HAL_PWREx_ControlVoltageScaling>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800077c:	f000 fa0a 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000788:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078a:	2310      	movs	r3, #16
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800079a:	230a      	movs	r3, #10
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800079e:	2307      	movs	r3, #7
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 ff1a 	bl	80015e8 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ba:	f000 f9eb 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2104      	movs	r1, #4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fae2 	bl	8001da0 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007e2:	f000 f9d7 	bl	8000b94 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3758      	adds	r7, #88	; 0x58
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_TIM2_Init+0x98>)
 8000810:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000814:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_TIM2_Init+0x98>)
 8000818:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800081c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_TIM2_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_TIM2_Init+0x98>)
 8000826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800082a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_TIM2_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_TIM2_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <MX_TIM2_Init+0x98>)
 800083a:	f002 f9c3 	bl	8002bc4 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 f9a6 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_TIM2_Init+0x98>)
 8000856:	f002 fb7f 	bl	8002f58 <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000860:	f000 f998 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_TIM2_Init+0x98>)
 8000872:	f002 fd97 	bl	80033a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800087c:	f000 f98a 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000007c 	.word	0x2000007c

0800088c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <MX_USART2_UART_Init+0x5c>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x58>)
 80008d0:	f002 fe0e 	bl	80034f0 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f95b 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000c8 	.word	0x200000c8
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b57      	ldr	r3, [pc, #348]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a56      	ldr	r2, [pc, #344]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b54      	ldr	r3, [pc, #336]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	4b51      	ldr	r3, [pc, #324]	; (8000a60 <MX_GPIO_Init+0x174>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a50      	ldr	r2, [pc, #320]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b4e      	ldr	r3, [pc, #312]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b4b      	ldr	r3, [pc, #300]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a4a      	ldr	r2, [pc, #296]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b48      	ldr	r3, [pc, #288]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <MX_GPIO_Init+0x174>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a44      	ldr	r2, [pc, #272]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <MX_GPIO_Init+0x174>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 fda8 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2120      	movs	r1, #32
 8000974:	483b      	ldr	r0, [pc, #236]	; (8000a64 <MX_GPIO_Init+0x178>)
 8000976:	f000 fda3 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000980:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4835      	ldr	r0, [pc, #212]	; (8000a68 <MX_GPIO_Init+0x17c>)
 8000992:	f000 fbeb 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_SHLD_BUTTON_Pin S2_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S1_SHLD_BUTTON_Pin|S2_SHLD_BUTTON_Pin;
 8000996:	2312      	movs	r3, #18
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800099a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f000 fbdd 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f000 fbce 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : S3_SHLD_BUTTON_Pin */
  GPIO_InitStruct.Pin = S3_SHLD_BUTTON_Pin;
 80009d0:	2301      	movs	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009d4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S3_SHLD_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	481f      	ldr	r0, [pc, #124]	; (8000a64 <MX_GPIO_Init+0x178>)
 80009e6:	f000 fbc1 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_D7_SEG7_Clock_Pin SHLD_D8_SEG7_Data_Pin */
  GPIO_InitStruct.Pin = SHLD_D7_SEG7_Clock_Pin|SHLD_D8_SEG7_Data_Pin;
 80009ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009f8:	2301      	movs	r3, #1
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f000 fbb1 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
  GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4810      	ldr	r0, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x178>)
 8000a22:	f000 fba3 	bl	800116c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // S1_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f000 fb74 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a30:	2007      	movs	r0, #7
 8000a32:	f000 fb8d 	bl	8001150 <HAL_NVIC_EnableIRQ>

  // S2_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f000 fb6c 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a40:	200a      	movs	r0, #10
 8000a42:	f000 fb85 	bl	8001150 <HAL_NVIC_EnableIRQ>

  // S3_SHLD_BUTTON
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2006      	movs	r0, #6
 8000a4c:	f000 fb64 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a50:	2006      	movs	r0, #6
 8000a52:	f000 fb7d 	bl	8001150 <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	48000800 	.word	0x48000800

08000a6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f003 fc22 	bl	80042be <osDelay>
 8000a7a:	e7fb      	b.n	8000a74 <StartDefaultTask+0x8>

08000a7c <StartGenCustomerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGenCustomerTask */
void StartGenCustomerTask(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGenCustomerTask */
  /* Infinite loop */

  for(;;)
  {
	osDelay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f003 fc1a 	bl	80042be <osDelay>
 8000a8a:	e7fb      	b.n	8000a84 <StartGenCustomerTask+0x8>

08000a8c <StartTeller01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller01 */
void StartTeller01(void *argument)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09c      	sub	sp, #112	; 0x70
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint8_t buffer[100];
  int data_size;

  for(;;)
  {
	data_size = sprintf((char*)buffer, "Teller01 - Current elapsed ticks: %ld\r\n", HAL_GetTick() - SIMULATED_TIME_START);
 8000a94:	f000 fa7c 	bl	8000f90 <HAL_GetTick>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <StartTeller01+0x5c>)
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	1a9a      	subs	r2, r3, r2
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	4911      	ldr	r1, [pc, #68]	; (8000aec <StartTeller01+0x60>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f006 faa0 	bl	8006fec <siprintf>
 8000aac:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 8000aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	f107 0108 	add.w	r1, r7, #8
 8000ab6:	2364      	movs	r3, #100	; 0x64
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <StartTeller01+0x64>)
 8000aba:	f002 fd67 	bl	800358c <HAL_UART_Transmit>
    if(HAL_GetTick() >= (SIM_MIN_TO_MS(TOTAL_SIM_TIME_MIN) + SIMULATED_TIME_START))
 8000abe:	f000 fa67 	bl	8000f90 <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <StartTeller01+0x5c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 8000acc:	3310      	adds	r3, #16
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d304      	bcc.n	8000adc <StartTeller01+0x50>
	{
		osThreadSuspend(teller01Handle);
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <StartTeller01+0x68>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 fbd0 	bl	800427c <osThreadSuspend>
	}
    osDelay(1000);
 8000adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae0:	f003 fbed 	bl	80042be <osDelay>
	data_size = sprintf((char*)buffer, "Teller01 - Current elapsed ticks: %ld\r\n", HAL_GetTick() - SIMULATED_TIME_START);
 8000ae4:	e7d6      	b.n	8000a94 <StartTeller01+0x8>
 8000ae6:	bf00      	nop
 8000ae8:	2000016c 	.word	0x2000016c
 8000aec:	08007ad4 	.word	0x08007ad4
 8000af0:	200000c8 	.word	0x200000c8
 8000af4:	20000158 	.word	0x20000158

08000af8 <StartTeller02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller02 */
void StartTeller02(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09c      	sub	sp, #112	; 0x70
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint8_t buffer[100];
  int data_size;

  for(;;)
  {
	data_size = sprintf((char*)buffer, "Teller02 - Current elapsed ticks: %ld\r\n", HAL_GetTick() - SIMULATED_TIME_START);
 8000b00:	f000 fa46 	bl	8000f90 <HAL_GetTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <StartTeller02+0x58>)
 8000b08:	6812      	ldr	r2, [r2, #0]
 8000b0a:	1a9a      	subs	r2, r3, r2
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4910      	ldr	r1, [pc, #64]	; (8000b54 <StartTeller02+0x5c>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f006 fa6a 	bl	8006fec <siprintf>
 8000b18:	66f8      	str	r0, [r7, #108]	; 0x6c
	HAL_UART_Transmit(&huart2, buffer, data_size, 100U);
 8000b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	f107 0108 	add.w	r1, r7, #8
 8000b22:	2364      	movs	r3, #100	; 0x64
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <StartTeller02+0x60>)
 8000b26:	f002 fd31 	bl	800358c <HAL_UART_Transmit>
	if(HAL_GetTick() >= (SIM_MIN_TO_MS(TOTAL_SIM_TIME_MIN) + SIMULATED_TIME_START))
 8000b2a:	f000 fa31 	bl	8000f90 <HAL_GetTick>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <StartTeller02+0x58>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 8000b38:	3310      	adds	r3, #16
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d304      	bcc.n	8000b48 <StartTeller02+0x50>
	{
		osThreadSuspend(teller02Handle);
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <StartTeller02+0x64>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 fb9a 	bl	800427c <osThreadSuspend>
	}
	osDelay(100);
 8000b48:	2064      	movs	r0, #100	; 0x64
 8000b4a:	f003 fbb8 	bl	80042be <osDelay>
	data_size = sprintf((char*)buffer, "Teller02 - Current elapsed ticks: %ld\r\n", HAL_GetTick() - SIMULATED_TIME_START);
 8000b4e:	e7d7      	b.n	8000b00 <StartTeller02+0x8>
 8000b50:	2000016c 	.word	0x2000016c
 8000b54:	08007afc 	.word	0x08007afc
 8000b58:	200000c8 	.word	0x200000c8
 8000b5c:	2000015c 	.word	0x2000015c

08000b60 <StartTeller03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller03 */
void StartTeller03(void *argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f003 fba8 	bl	80042be <osDelay>
 8000b6e:	e7fb      	b.n	8000b68 <StartTeller03+0x8>

08000b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b82:	f000 f9f1 	bl	8000f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40001000 	.word	0x40001000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_MspInit+0x4c>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210f      	movs	r1, #15
 8000bda:	f06f 0001 	mvn.w	r0, #1
 8000bde:	f000 fa9b 	bl	8001118 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c00:	d10b      	bne.n	8000c1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_TIM_Base_MspInit+0x38>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_TIM_Base_MspInit+0x38>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_TIM_Base_MspInit+0x38>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0ac      	sub	sp, #176	; 0xb0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2288      	movs	r2, #136	; 0x88
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f006 f9ed 	bl	800702c <memset>
  if(huart->Instance==USART2)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a21      	ldr	r2, [pc, #132]	; (8000cdc <HAL_UART_MspInit+0xb0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d13b      	bne.n	8000cd4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 faef 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c74:	f7ff ff8e 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c82:	6593      	str	r3, [r2, #88]	; 0x58
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_UART_MspInit+0xb4>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f000 fa4c 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	37b0      	adds	r7, #176	; 0xb0
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cf2:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <HAL_InitTick+0xe0>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a33      	ldr	r2, [pc, #204]	; (8000dc4 <HAL_InitTick+0xe0>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <HAL_InitTick+0xe0>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0a:	f107 0210 	add.w	r2, r7, #16
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 fa07 	bl	8002128 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d103      	bne.n	8000d2c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d24:	f001 f9d4 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8000d28:	6378      	str	r0, [r7, #52]	; 0x34
 8000d2a:	e004      	b.n	8000d36 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d2c:	f001 f9d0 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8000d30:	4603      	mov	r3, r0
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d38:	4a23      	ldr	r2, [pc, #140]	; (8000dc8 <HAL_InitTick+0xe4>)
 8000d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3e:	0c9b      	lsrs	r3, r3, #18
 8000d40:	3b01      	subs	r3, #1
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d46:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d6a:	4818      	ldr	r0, [pc, #96]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d6c:	f001 ff2a 	bl	8002bc4 <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d11b      	bne.n	8000db6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d7e:	4813      	ldr	r0, [pc, #76]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d80:	f001 ff78 	bl	8002c74 <HAL_TIM_Base_Start_IT>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d111      	bne.n	8000db6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d92:	2036      	movs	r0, #54	; 0x36
 8000d94:	f000 f9dc 	bl	8001150 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b0f      	cmp	r3, #15
 8000d9c:	d808      	bhi.n	8000db0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	2036      	movs	r0, #54	; 0x36
 8000da4:	f000 f9b8 	bl	8001118 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e002      	b.n	8000db6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000db6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3738      	adds	r7, #56	; 0x38
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	431bde83 	.word	0x431bde83
 8000dcc:	20000170 	.word	0x20000170
 8000dd0:	40001000 	.word	0x40001000
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM6_DAC_IRQHandler+0x10>)
 8000e0a:	f001 ffa3 	bl	8002d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000170 	.word	0x20000170

08000e18 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f000 fb67 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000e2a:	2010      	movs	r0, #16
 8000e2c:	f000 fb60 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fb59 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f006 f938 	bl	80070e8 <__errno>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <_sbrk+0x64>)
 8000e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20018000 	.word	0x20018000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	200001bc 	.word	0x200001bc
 8000eac:	20002480 	.word	0x20002480

08000eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed8:	f7ff ffea 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	; (8000f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <LoopForever+0xe>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <LoopForever+0x16>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f006 f8f7 	bl	80070f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f06:	f7ff fb91 	bl	800062c <main>

08000f0a <LoopForever>:

LoopForever:
    b LoopForever
 8000f0a:	e7fe      	b.n	8000f0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f18:	08007ca4 	.word	0x08007ca4
  ldr r2, =_sbss
 8000f1c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f20:	2000247c 	.word	0x2000247c

08000f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_2_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_Init+0x3c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_Init+0x3c>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f8df 	bl	8001102 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f44:	200f      	movs	r0, #15
 8000f46:	f7ff fecd 	bl	8000ce4 <HAL_InitTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	e001      	b.n	8000f5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f56:	f7ff fe23 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	200001c0 	.word	0x200001c0

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200001c0 	.word	0x200001c0

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	; (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff4c 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800112a:	f7ff ff61 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 800112e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f7ff ffb1 	bl	800109c <NVIC_EncodePriority>
 800113a:	4602      	mov	r2, r0
 800113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff80 	bl	8001048 <__NVIC_SetPriority>
}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff54 	bl	800100c <__NVIC_EnableIRQ>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e17f      	b.n	800147c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8171 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d005      	beq.n	80011ac <HAL_GPIO_Init+0x40>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 0201 	and.w	r2, r3, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b03      	cmp	r3, #3
 8001218:	d118      	bne.n	800124c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d017      	beq.n	8001288 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ac 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_GPIO_Init+0x330>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	4a5e      	ldr	r2, [pc, #376]	; (800149c <HAL_GPIO_Init+0x330>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6613      	str	r3, [r2, #96]	; 0x60
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_GPIO_Init+0x330>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001336:	4a5a      	ldr	r2, [pc, #360]	; (80014a0 <HAL_GPIO_Init+0x334>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x242>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x338>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x23e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x33c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x23a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x340>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x236>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x344>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x232>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x348>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x22e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x22a>
 8001392:	2306      	movs	r3, #6
 8001394:	e00c      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 8001396:	2307      	movs	r3, #7
 8001398:	e00a      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139e:	2304      	movs	r3, #4
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013ae:	2300      	movs	r3, #0
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c0:	4937      	ldr	r1, [pc, #220]	; (80014a0 <HAL_GPIO_Init+0x334>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_GPIO_Init+0x350>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_GPIO_Init+0x350>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f ae78 	bne.w	800117c <HAL_GPIO_Init+0x10>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800
 80014ac:	48000c00 	.word	0x48000c00
 80014b0:	48001000 	.word	0x48001000
 80014b4:	48001400 	.word	0x48001400
 80014b8:	48001800 	.word	0x48001800
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f834 	bl	800057c <HAL_GPIO_EXTI_Callback>
  }
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <HAL_PWREx_GetVoltageRange+0x18>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40007000 	.word	0x40007000

0800153c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800154a:	d130      	bne.n	80015ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001558:	d038      	beq.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001562:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001568:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2232      	movs	r2, #50	; 0x32
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9b      	lsrs	r3, r3, #18
 800157c:	3301      	adds	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001580:	e002      	b.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3b01      	subs	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001594:	d102      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f2      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a8:	d110      	bne.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e00f      	b.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ba:	d007      	beq.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c4:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40007000 	.word	0x40007000
 80015e0:	20000000 	.word	0x20000000
 80015e4:	431bde83 	.word	0x431bde83

080015e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e3ca      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fa:	4b97      	ldr	r3, [pc, #604]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001604:	4b94      	ldr	r3, [pc, #592]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80e4 	beq.w	80017e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <HAL_RCC_OscConfig+0x4a>
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	f040 808b 	bne.w	8001740 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b01      	cmp	r3, #1
 800162e:	f040 8087 	bne.w	8001740 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001632:	4b89      	ldr	r3, [pc, #548]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x62>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e3a2      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1a      	ldr	r2, [r3, #32]
 800164e:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <HAL_RCC_OscConfig+0x7c>
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001662:	e005      	b.n	8001670 <HAL_RCC_OscConfig+0x88>
 8001664:	4b7c      	ldr	r3, [pc, #496]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001670:	4293      	cmp	r3, r2
 8001672:	d223      	bcs.n	80016bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fd87 	bl	800218c <RCC_SetFlashLatencyFromMSIRange>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e383      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001688:	4b73      	ldr	r3, [pc, #460]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a72      	ldr	r2, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b70      	ldr	r3, [pc, #448]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	496d      	ldr	r1, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a6:	4b6c      	ldr	r3, [pc, #432]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	4968      	ldr	r1, [pc, #416]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
 80016ba:	e025      	b.n	8001708 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016bc:	4b66      	ldr	r3, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a65      	ldr	r2, [pc, #404]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b63      	ldr	r3, [pc, #396]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4960      	ldr	r1, [pc, #384]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016da:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	495b      	ldr	r1, [pc, #364]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fd47 	bl	800218c <RCC_SetFlashLatencyFromMSIRange>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e343      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001708:	f000 fc4a 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b52      	ldr	r3, [pc, #328]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	4950      	ldr	r1, [pc, #320]	; (800185c <HAL_RCC_OscConfig+0x274>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	4a4e      	ldr	r2, [pc, #312]	; (8001860 <HAL_RCC_OscConfig+0x278>)
 8001726:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001728:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <HAL_RCC_OscConfig+0x27c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fad9 	bl	8000ce4 <HAL_InitTick>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d052      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	e327      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d032      	beq.n	80017ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001748:	4b43      	ldr	r3, [pc, #268]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a42      	ldr	r2, [pc, #264]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001754:	f7ff fc1c 	bl	8000f90 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800175c:	f7ff fc18 	bl	8000f90 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e310      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a36      	ldr	r2, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4931      	ldr	r1, [pc, #196]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	492c      	ldr	r1, [pc, #176]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e01a      	b.n	80017e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a29      	ldr	r2, [pc, #164]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fbe9 	bl	8000f90 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c2:	f7ff fbe5 	bl	8000f90 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e2dd      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x1da>
 80017e0:	e000      	b.n	80017e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d074      	beq.n	80018da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d005      	beq.n	8001802 <HAL_RCC_OscConfig+0x21a>
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b0c      	cmp	r3, #12
 80017fa:	d10e      	bne.n	800181a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d10b      	bne.n	800181a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d064      	beq.n	80018d8 <HAL_RCC_OscConfig+0x2f0>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d160      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e2ba      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x24a>
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e026      	b.n	8001880 <HAL_RCC_OscConfig+0x298>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183a:	d115      	bne.n	8001868 <HAL_RCC_OscConfig+0x280>
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 8001842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a02      	ldr	r2, [pc, #8]	; (8001858 <HAL_RCC_OscConfig+0x270>)
 800184e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e014      	b.n	8001880 <HAL_RCC_OscConfig+0x298>
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	08007c18 	.word	0x08007c18
 8001860:	20000000 	.word	0x20000000
 8001864:	20000004 	.word	0x20000004
 8001868:	4ba0      	ldr	r3, [pc, #640]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a9f      	ldr	r2, [pc, #636]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 800186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b9d      	ldr	r3, [pc, #628]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a9c      	ldr	r2, [pc, #624]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 800187a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d013      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fb82 	bl	8000f90 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fb7e 	bl	8000f90 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e276      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a2:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x2a8>
 80018ae:	e014      	b.n	80018da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb6e 	bl	8000f90 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fb6a 	bl	8000f90 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e262      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ca:	4b88      	ldr	r3, [pc, #544]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2d0>
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d060      	beq.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x310>
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d116      	bne.n	8001926 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	4b7c      	ldr	r3, [pc, #496]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_OscConfig+0x328>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e23f      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b76      	ldr	r3, [pc, #472]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	4973      	ldr	r1, [pc, #460]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001924:	e040      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d023      	beq.n	8001976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800192e:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff fb29 	bl	8000f90 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fb25 	bl	8000f90 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e21d      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001954:	4b65      	ldr	r3, [pc, #404]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b62      	ldr	r3, [pc, #392]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	495f      	ldr	r1, [pc, #380]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
 8001974:	e018      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5c      	ldr	r2, [pc, #368]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 800197c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff fb05 	bl	8000f90 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff fb01 	bl	8000f90 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e1f9      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019bc:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 80019be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c2:	4a4a      	ldr	r2, [pc, #296]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff fae0 	bl	8000f90 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff fadc 	bl	8000f90 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1d4      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 80019e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0ef      	beq.n	80019d4 <HAL_RCC_OscConfig+0x3ec>
 80019f4:	e01b      	b.n	8001a2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f6:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fc:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff fac3 	bl	8000f90 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fabf 	bl	8000f90 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e1b7      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a20:	4b32      	ldr	r3, [pc, #200]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ef      	bne.n	8001a0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80a6 	beq.w	8001b88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10d      	bne.n	8001a68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a50:	4a26      	ldr	r2, [pc, #152]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a56:	6593      	str	r3, [r2, #88]	; 0x58
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_RCC_OscConfig+0x508>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d118      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_RCC_OscConfig+0x508>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <HAL_RCC_OscConfig+0x508>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a80:	f7ff fa86 	bl	8000f90 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a88:	f7ff fa82 	bl	8000f90 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e17a      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_RCC_OscConfig+0x508>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d108      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4d8>
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001abe:	e029      	b.n	8001b14 <HAL_RCC_OscConfig+0x52c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d115      	bne.n	8001af4 <HAL_RCC_OscConfig+0x50c>
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	4a03      	ldr	r2, [pc, #12]	; (8001aec <HAL_RCC_OscConfig+0x504>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae8:	e014      	b.n	8001b14 <HAL_RCC_OscConfig+0x52c>
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40007000 	.word	0x40007000
 8001af4:	4b9c      	ldr	r3, [pc, #624]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afa:	4a9b      	ldr	r2, [pc, #620]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b04:	4b98      	ldr	r3, [pc, #608]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	4a97      	ldr	r2, [pc, #604]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d016      	beq.n	8001b4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fa38 	bl	8000f90 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff fa34 	bl	8000f90 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e12a      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3a:	4b8b      	ldr	r3, [pc, #556]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ed      	beq.n	8001b24 <HAL_RCC_OscConfig+0x53c>
 8001b48:	e015      	b.n	8001b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fa21 	bl	8000f90 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff fa1d 	bl	8000f90 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e113      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b68:	4b7f      	ldr	r3, [pc, #508]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ed      	bne.n	8001b52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7c:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	4a79      	ldr	r2, [pc, #484]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b86:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80fe 	beq.w	8001d8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	f040 80d0 	bne.w	8001d3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b9c:	4b72      	ldr	r3, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d130      	bne.n	8001c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d127      	bne.n	8001c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d11f      	bne.n	8001c12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bdc:	2a07      	cmp	r2, #7
 8001bde:	bf14      	ite	ne
 8001be0:	2201      	movne	r2, #1
 8001be2:	2200      	moveq	r2, #0
 8001be4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d113      	bne.n	8001c12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	085b      	lsrs	r3, r3, #1
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d06e      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d069      	beq.n	8001cec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0ad      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c40:	f7ff f9a6 	bl	8000f90 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f9a2 	bl	8000f90 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e09a      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5a:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c66:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <HAL_RCC_OscConfig+0x784>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c76:	3a01      	subs	r2, #1
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c80:	0212      	lsls	r2, r2, #8
 8001c82:	4311      	orrs	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c88:	0852      	lsrs	r2, r2, #1
 8001c8a:	3a01      	subs	r2, #1
 8001c8c:	0552      	lsls	r2, r2, #21
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c94:	0852      	lsrs	r2, r2, #1
 8001c96:	3a01      	subs	r2, #1
 8001c98:	0652      	lsls	r2, r2, #25
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ca0:	0912      	lsrs	r2, r2, #4
 8001ca2:	0452      	lsls	r2, r2, #17
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	4930      	ldr	r1, [pc, #192]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a2d      	ldr	r2, [pc, #180]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a2a      	ldr	r2, [pc, #168]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc4:	f7ff f964 	bl	8000f90 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff f960 	bl	8000f90 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e058      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cea:	e050      	b.n	8001d8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e04f      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d148      	bne.n	8001d8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d14:	f7ff f93c 	bl	8000f90 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff f938 	bl	8000f90 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e030      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x734>
 8001d3a:	e028      	b.n	8001d8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d023      	beq.n	8001d8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <HAL_RCC_OscConfig+0x780>)
 8001d48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7ff f91f 	bl	8000f90 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	e00c      	b.n	8001d70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7ff f91b 	bl	8000f90 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d905      	bls.n	8001d70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e013      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_OscConfig+0x7b0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ec      	bne.n	8001d56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_OscConfig+0x7b0>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4905      	ldr	r1, [pc, #20]	; (8001d98 <HAL_RCC_OscConfig+0x7b0>)
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_OscConfig+0x7b4>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
 8001d88:	e001      	b.n	8001d8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	feeefffc 	.word	0xfeeefffc

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0e7      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d910      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b72      	ldr	r3, [pc, #456]	; (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	4970      	ldr	r1, [pc, #448]	; (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0cf      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d010      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d908      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4960      	ldr	r1, [pc, #384]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d04c      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d121      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0a6      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d115      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e09a      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e56:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e08e      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e66:	4b4a      	ldr	r3, [pc, #296]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e086      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e76:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f023 0203 	bic.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4943      	ldr	r1, [pc, #268]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e88:	f7ff f882 	bl	8000f90 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7ff f87e 	bl	8000f90 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e06e      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 020c 	and.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1eb      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d208      	bcs.n	8001ee6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	492b      	ldr	r1, [pc, #172]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d210      	bcs.n	8001f16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 0207 	bic.w	r2, r3, #7
 8001efc:	4923      	ldr	r1, [pc, #140]	; (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e036      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4918      	ldr	r1, [pc, #96]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4910      	ldr	r1, [pc, #64]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f54:	f000 f824 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	490b      	ldr	r1, [pc, #44]	; (8001f94 <HAL_RCC_ClockConfig+0x1f4>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f70:	4a09      	ldr	r2, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1fc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe feb3 	bl	8000ce4 <HAL_InitTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f82:	7afb      	ldrb	r3, [r7, #11]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	08007c18 	.word	0x08007c18
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fae:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d121      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d11e      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fe0:	4b31      	ldr	r3, [pc, #196]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e005      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10d      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b04      	cmp	r3, #4
 8002016:	d102      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	e004      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d101      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002026:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d134      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d003      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0xa6>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d003      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0xac>
 8002044:	e005      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002048:	617b      	str	r3, [r7, #20]
      break;
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800204e:	617b      	str	r3, [r7, #20]
      break;
 8002050:	e002      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	617b      	str	r3, [r7, #20]
      break;
 8002056:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	3301      	adds	r3, #1
 8002064:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	fb03 f202 	mul.w	r2, r3, r2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	0e5b      	lsrs	r3, r3, #25
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	3301      	adds	r3, #1
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002098:	69bb      	ldr	r3, [r7, #24]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08007c30 	.word	0x08007c30
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200

080020b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b03      	ldr	r3, [pc, #12]	; (80020cc <HAL_RCC_GetHCLKFreq+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000000 	.word	0x20000000

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020d4:	f7ff fff0 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4904      	ldr	r1, [pc, #16]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08007c28 	.word	0x08007c28

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002100:	f7ff ffda 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0adb      	lsrs	r3, r3, #11
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4904      	ldr	r1, [pc, #16]	; (8002124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	08007c28 	.word	0x08007c28

08002128 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	220f      	movs	r2, #15
 8002136:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_RCC_GetClockConfig+0x5c>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0203 	and.w	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_RCC_GetClockConfig+0x5c>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_RCC_GetClockConfig+0x5c>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_GetClockConfig+0x5c>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	08db      	lsrs	r3, r3, #3
 8002162:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_RCC_GetClockConfig+0x60>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0207 	and.w	r2, r3, #7
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	601a      	str	r2, [r3, #0]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	40022000 	.word	0x40022000

0800218c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021a4:	f7ff f9bc 	bl	8001520 <HAL_PWREx_GetVoltageRange>
 80021a8:	6178      	str	r0, [r7, #20]
 80021aa:	e014      	b.n	80021d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	4a24      	ldr	r2, [pc, #144]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6593      	str	r3, [r2, #88]	; 0x58
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021c4:	f7ff f9ac 	bl	8001520 <HAL_PWREx_GetVoltageRange>
 80021c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021dc:	d10b      	bne.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d919      	bls.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2ba0      	cmp	r3, #160	; 0xa0
 80021e8:	d902      	bls.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ea:	2302      	movs	r3, #2
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	e013      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f0:	2301      	movs	r3, #1
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	e010      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d902      	bls.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021fc:	2303      	movs	r3, #3
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e00a      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b80      	cmp	r3, #128	; 0x80
 8002206:	d102      	bne.n	800220e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002208:	2302      	movs	r3, #2
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	e004      	b.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b70      	cmp	r3, #112	; 0x70
 8002212:	d101      	bne.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002214:	2301      	movs	r3, #1
 8002216:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 0207 	bic.w	r2, r3, #7
 8002220:	4909      	ldr	r1, [pc, #36]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	40022000 	.word	0x40022000

0800224c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002254:	2300      	movs	r3, #0
 8002256:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002258:	2300      	movs	r3, #0
 800225a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002264:	2b00      	cmp	r3, #0
 8002266:	d041      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800226c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002270:	d02a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002272:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002276:	d824      	bhi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002278:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800227c:	d008      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800227e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002282:	d81e      	bhi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228c:	d010      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800228e:	e018      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002290:	4b86      	ldr	r3, [pc, #536]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a85      	ldr	r2, [pc, #532]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800229c:	e015      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fabb 	bl	8002820 <RCCEx_PLLSAI1_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ae:	e00c      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3320      	adds	r3, #32
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fba6 	bl	8002a08 <RCCEx_PLLSAI2_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c0:	e003      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	74fb      	strb	r3, [r7, #19]
      break;
 80022c6:	e000      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d0:	4b76      	ldr	r3, [pc, #472]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022de:	4973      	ldr	r1, [pc, #460]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022e6:	e001      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d041      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002300:	d02a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002302:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002306:	d824      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800230c:	d008      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800230e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002312:	d81e      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800231c:	d010      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800231e:	e018      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002320:	4b62      	ldr	r3, [pc, #392]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a61      	ldr	r2, [pc, #388]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800232c:	e015      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fa73 	bl	8002820 <RCCEx_PLLSAI1_Config>
 800233a:	4603      	mov	r3, r0
 800233c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800233e:	e00c      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3320      	adds	r3, #32
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fb5e 	bl	8002a08 <RCCEx_PLLSAI2_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002350:	e003      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	74fb      	strb	r3, [r7, #19]
      break;
 8002356:	e000      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002360:	4b52      	ldr	r3, [pc, #328]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236e:	494f      	ldr	r1, [pc, #316]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002376:	e001      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80a0 	beq.w	80024ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800239e:	2300      	movs	r3, #0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b41      	ldr	r3, [pc, #260]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	4a40      	ldr	r2, [pc, #256]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6593      	str	r3, [r2, #88]	; 0x58
 80023b0:	4b3e      	ldr	r3, [pc, #248]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c0:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023cc:	f7fe fde0 	bl	8000f90 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d2:	e009      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d4:	f7fe fddc 	bl	8000f90 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d902      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	74fb      	strb	r3, [r7, #19]
        break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e8:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ef      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d15c      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023fa:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002404:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01f      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	429a      	cmp	r2, r3
 8002416:	d019      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002444:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d016      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002456:	f7fe fd9b 	bl	8000f90 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245c:	e00b      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fd97 	bl	8000f90 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d902      	bls.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	74fb      	strb	r3, [r7, #19]
            break;
 8002474:	e006      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ec      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249a:	4904      	ldr	r1, [pc, #16]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024a2:	e009      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	74bb      	strb	r3, [r7, #18]
 80024a8:	e006      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b8:	7c7b      	ldrb	r3, [r7, #17]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b9e      	ldr	r3, [pc, #632]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	4a9d      	ldr	r2, [pc, #628]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d6:	4b98      	ldr	r3, [pc, #608]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f023 0203 	bic.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	4994      	ldr	r1, [pc, #592]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f8:	4b8f      	ldr	r3, [pc, #572]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f023 020c 	bic.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	498c      	ldr	r1, [pc, #560]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800251a:	4b87      	ldr	r3, [pc, #540]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	4983      	ldr	r1, [pc, #524]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	497b      	ldr	r1, [pc, #492]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	4972      	ldr	r1, [pc, #456]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002580:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	496a      	ldr	r1, [pc, #424]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	4961      	ldr	r1, [pc, #388]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025c4:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4959      	ldr	r1, [pc, #356]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e6:	4b54      	ldr	r3, [pc, #336]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	4950      	ldr	r1, [pc, #320]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	4948      	ldr	r1, [pc, #288]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800262a:	4b43      	ldr	r3, [pc, #268]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	493f      	ldr	r1, [pc, #252]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d028      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265a:	4937      	ldr	r1, [pc, #220]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266a:	d106      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002676:	60d3      	str	r3, [r2, #12]
 8002678:	e011      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002682:	d10c      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f8c8 	bl	8002820 <RCCEx_PLLSAI1_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d028      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026aa:	4b23      	ldr	r3, [pc, #140]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	491f      	ldr	r1, [pc, #124]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c8:	d106      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d4:	60d3      	str	r3, [r2, #12]
 80026d6:	e011      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2101      	movs	r1, #1
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f899 	bl	8002820 <RCCEx_PLLSAI1_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d02b      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	4908      	ldr	r1, [pc, #32]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002726:	d109      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a02      	ldr	r2, [pc, #8]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002732:	60d3      	str	r3, [r2, #12]
 8002734:	e014      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002744:	d10c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f867 	bl	8002820 <RCCEx_PLLSAI1_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02f      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800276c:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800277a:	4928      	ldr	r1, [pc, #160]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800278a:	d10d      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3304      	adds	r3, #4
 8002790:	2102      	movs	r1, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f844 	bl	8002820 <RCCEx_PLLSAI1_Config>
 8002798:	4603      	mov	r3, r0
 800279a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	74bb      	strb	r3, [r7, #18]
 80027a6:	e011      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3320      	adds	r3, #32
 80027b6:	2102      	movs	r1, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f925 	bl	8002a08 <RCCEx_PLLSAI2_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027e6:	490d      	ldr	r1, [pc, #52]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280a:	4904      	ldr	r1, [pc, #16]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002812:	7cbb      	ldrb	r3, [r7, #18]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000

08002820 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800282e:	4b75      	ldr	r3, [pc, #468]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800283a:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0203 	and.w	r2, r3, #3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d10d      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
       ||
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002852:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
       ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d047      	beq.n	80028f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	e044      	b.n	80028f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d018      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0x86>
 8002874:	2b03      	cmp	r3, #3
 8002876:	d825      	bhi.n	80028c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002878:	2b01      	cmp	r3, #1
 800287a:	d002      	beq.n	8002882 <RCCEx_PLLSAI1_Config+0x62>
 800287c:	2b02      	cmp	r3, #2
 800287e:	d009      	beq.n	8002894 <RCCEx_PLLSAI1_Config+0x74>
 8002880:	e020      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002882:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11d      	bne.n	80028ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002892:	e01a      	b.n	80028ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002894:	4b5b      	ldr	r3, [pc, #364]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a4:	e013      	b.n	80028ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028a6:	4b57      	ldr	r3, [pc, #348]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028b2:	4b54      	ldr	r3, [pc, #336]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028c2:	e006      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      break;
 80028c8:	e004      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ca:	bf00      	nop
 80028cc:	e002      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10d      	bne.n	80028f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028da:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	430b      	orrs	r3, r1
 80028f0:	4944      	ldr	r1, [pc, #272]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d17d      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028fc:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a40      	ldr	r2, [pc, #256]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fb42 	bl	8000f90 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800290e:	e009      	b.n	8002924 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002910:	f7fe fb3e 	bl	8000f90 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d902      	bls.n	8002924 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	73fb      	strb	r3, [r7, #15]
        break;
 8002922:	e005      	b.n	8002930 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002924:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1ef      	bne.n	8002910 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d160      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d111      	bne.n	8002960 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293c:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	0211      	lsls	r1, r2, #8
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	0912      	lsrs	r2, r2, #4
 8002954:	0452      	lsls	r2, r2, #17
 8002956:	430a      	orrs	r2, r1
 8002958:	492a      	ldr	r1, [pc, #168]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	610b      	str	r3, [r1, #16]
 800295e:	e027      	b.n	80029b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d112      	bne.n	800298c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800296e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	0211      	lsls	r1, r2, #8
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6912      	ldr	r2, [r2, #16]
 800297c:	0852      	lsrs	r2, r2, #1
 800297e:	3a01      	subs	r2, #1
 8002980:	0552      	lsls	r2, r2, #21
 8002982:	430a      	orrs	r2, r1
 8002984:	491f      	ldr	r1, [pc, #124]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	610b      	str	r3, [r1, #16]
 800298a:	e011      	b.n	80029b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002994:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6892      	ldr	r2, [r2, #8]
 800299c:	0211      	lsls	r1, r2, #8
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6952      	ldr	r2, [r2, #20]
 80029a2:	0852      	lsrs	r2, r2, #1
 80029a4:	3a01      	subs	r2, #1
 80029a6:	0652      	lsls	r2, r2, #25
 80029a8:	430a      	orrs	r2, r1
 80029aa:	4916      	ldr	r1, [pc, #88]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fae8 	bl	8000f90 <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029c2:	e009      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029c4:	f7fe fae4 	bl	8000f90 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d902      	bls.n	80029d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	73fb      	strb	r3, [r7, #15]
          break;
 80029d6:	e005      	b.n	80029e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ef      	beq.n	80029c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	4904      	ldr	r1, [pc, #16]	; (8002a04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000

08002a08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a16:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d018      	beq.n	8002a54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a22:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0203 	and.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d10d      	bne.n	8002a4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
       ||
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a3a:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
       ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d047      	beq.n	8002ade <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e044      	b.n	8002ade <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d018      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0x86>
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d825      	bhi.n	8002aac <RCCEx_PLLSAI2_Config+0xa4>
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d002      	beq.n	8002a6a <RCCEx_PLLSAI2_Config+0x62>
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d009      	beq.n	8002a7c <RCCEx_PLLSAI2_Config+0x74>
 8002a68:	e020      	b.n	8002aac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a6a:	4b55      	ldr	r3, [pc, #340]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11d      	bne.n	8002ab2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7a:	e01a      	b.n	8002ab2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d116      	bne.n	8002ab6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8c:	e013      	b.n	8002ab6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a8e:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a9a:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aaa:	e006      	b.n	8002aba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab0:	e004      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e002      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ac2:	4b3f      	ldr	r3, [pc, #252]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	4939      	ldr	r1, [pc, #228]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d167      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ae4:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af0:	f7fe fa4e 	bl	8000f90 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002af6:	e009      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af8:	f7fe fa4a 	bl	8000f90 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	73fb      	strb	r3, [r7, #15]
        break;
 8002b0a:	e005      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ef      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d14a      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d111      	bne.n	8002b48 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b24:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6892      	ldr	r2, [r2, #8]
 8002b34:	0211      	lsls	r1, r2, #8
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68d2      	ldr	r2, [r2, #12]
 8002b3a:	0912      	lsrs	r2, r2, #4
 8002b3c:	0452      	lsls	r2, r2, #17
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	491f      	ldr	r1, [pc, #124]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	614b      	str	r3, [r1, #20]
 8002b46:	e011      	b.n	8002b6c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6892      	ldr	r2, [r2, #8]
 8002b58:	0211      	lsls	r1, r2, #8
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6912      	ldr	r2, [r2, #16]
 8002b5e:	0852      	lsrs	r2, r2, #1
 8002b60:	3a01      	subs	r2, #1
 8002b62:	0652      	lsls	r2, r2, #25
 8002b64:	430a      	orrs	r2, r1
 8002b66:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fa0a 	bl	8000f90 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b7e:	e009      	b.n	8002b94 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b80:	f7fe fa06 	bl	8000f90 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d902      	bls.n	8002b94 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	73fb      	strb	r3, [r7, #15]
          break;
 8002b92:	e005      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	4904      	ldr	r1, [pc, #16]	; (8002bc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e049      	b.n	8002c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe f800 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 fa9a 	bl	800313c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d001      	beq.n	8002c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e04f      	b.n	8002d2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <HAL_TIM_Base_Start_IT+0xc4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01d      	beq.n	8002cea <HAL_TIM_Base_Start_IT+0x76>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d018      	beq.n	8002cea <HAL_TIM_Base_Start_IT+0x76>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_TIM_Base_Start_IT+0x76>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00e      	beq.n	8002cea <HAL_TIM_Base_Start_IT+0x76>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_TIM_Base_Start_IT+0x76>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_TIM_Base_Start_IT+0xd4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_TIM_Base_Start_IT+0x76>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d115      	bne.n	8002d16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	4b17      	ldr	r3, [pc, #92]	; (8002d50 <HAL_TIM_Base_Start_IT+0xdc>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b06      	cmp	r3, #6
 8002cfa:	d015      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0xb4>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d02:	d011      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d14:	e008      	b.n	8002d28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e000      	b.n	8002d2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40013400 	.word	0x40013400
 8002d4c:	40014000 	.word	0x40014000
 8002d50:	00010007 	.word	0x00010007

08002d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d020      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01b      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0202 	mvn.w	r2, #2
 8002d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f9ad 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f99f 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f9b0 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d020      	beq.n	8002e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0204 	mvn.w	r2, #4
 8002dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f987 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f979 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f98a 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d020      	beq.n	8002e50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01b      	beq.n	8002e50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0208 	mvn.w	r2, #8
 8002e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2204      	movs	r2, #4
 8002e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f961 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002e3c:	e005      	b.n	8002e4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f953 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f964 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d020      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01b      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0210 	mvn.w	r2, #16
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2208      	movs	r2, #8
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f93b 	bl	80030fe <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f92d 	bl	80030ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f93e 	bl	8003112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0201 	mvn.w	r2, #1
 8002eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd fe58 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 faf2 	bl	80034c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 faea 	bl	80034dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00c      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8fd 	bl	8003126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0220 	mvn.w	r2, #32
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fab2 	bl	80034b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_TIM_ConfigClockSource+0x1c>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e0b6      	b.n	80030e2 <HAL_TIM_ConfigClockSource+0x18a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb0:	d03e      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0xd8>
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb6:	f200 8087 	bhi.w	80030c8 <HAL_TIM_ConfigClockSource+0x170>
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	f000 8086 	beq.w	80030ce <HAL_TIM_ConfigClockSource+0x176>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc6:	d87f      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x170>
 8002fc8:	2b70      	cmp	r3, #112	; 0x70
 8002fca:	d01a      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0xaa>
 8002fcc:	2b70      	cmp	r3, #112	; 0x70
 8002fce:	d87b      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x170>
 8002fd0:	2b60      	cmp	r3, #96	; 0x60
 8002fd2:	d050      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0x11e>
 8002fd4:	2b60      	cmp	r3, #96	; 0x60
 8002fd6:	d877      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x170>
 8002fd8:	2b50      	cmp	r3, #80	; 0x50
 8002fda:	d03c      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0xfe>
 8002fdc:	2b50      	cmp	r3, #80	; 0x50
 8002fde:	d873      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x170>
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d058      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x13e>
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d86f      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x170>
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d064      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15e>
 8002fec:	2b30      	cmp	r3, #48	; 0x30
 8002fee:	d86b      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x170>
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d060      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15e>
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d867      	bhi.n	80030c8 <HAL_TIM_ConfigClockSource+0x170>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05c      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15e>
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d05a      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x15e>
 8003000:	e062      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003012:	f000 f9a7 	bl	8003364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	609a      	str	r2, [r3, #8]
      break;
 800302e:	e04f      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003040:	f000 f990 	bl	8003364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003052:	609a      	str	r2, [r3, #8]
      break;
 8003054:	e03c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	461a      	mov	r2, r3
 8003064:	f000 f904 	bl	8003270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2150      	movs	r1, #80	; 0x50
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f95d 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8003074:	e02c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003082:	461a      	mov	r2, r3
 8003084:	f000 f923 	bl	80032ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2160      	movs	r1, #96	; 0x60
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f94d 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8003094:	e01c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 f8e4 	bl	8003270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2140      	movs	r1, #64	; 0x40
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f93d 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 80030b4:	e00c      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f000 f934 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 80030c6:	e003      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      break;
 80030cc:	e000      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a40      	ldr	r2, [pc, #256]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d013      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d00f      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3d      	ldr	r2, [pc, #244]	; (8003254 <TIM_Base_SetConfig+0x118>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00b      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3c      	ldr	r2, [pc, #240]	; (8003258 <TIM_Base_SetConfig+0x11c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d007      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3b      	ldr	r2, [pc, #236]	; (800325c <TIM_Base_SetConfig+0x120>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d003      	beq.n	800317c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3a      	ldr	r2, [pc, #232]	; (8003260 <TIM_Base_SetConfig+0x124>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d108      	bne.n	800318e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d01b      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2c      	ldr	r2, [pc, #176]	; (8003254 <TIM_Base_SetConfig+0x118>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d017      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2b      	ldr	r2, [pc, #172]	; (8003258 <TIM_Base_SetConfig+0x11c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2a      	ldr	r2, [pc, #168]	; (800325c <TIM_Base_SetConfig+0x120>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00f      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <TIM_Base_SetConfig+0x124>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a28      	ldr	r2, [pc, #160]	; (8003264 <TIM_Base_SetConfig+0x128>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a27      	ldr	r2, [pc, #156]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_Base_SetConfig+0x9a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <TIM_Base_SetConfig+0x130>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a10      	ldr	r2, [pc, #64]	; (8003250 <TIM_Base_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00f      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <TIM_Base_SetConfig+0x124>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00b      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a11      	ldr	r2, [pc, #68]	; (8003264 <TIM_Base_SetConfig+0x128>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a10      	ldr	r2, [pc, #64]	; (8003268 <TIM_Base_SetConfig+0x12c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d003      	beq.n	8003234 <TIM_Base_SetConfig+0xf8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0f      	ldr	r2, [pc, #60]	; (800326c <TIM_Base_SetConfig+0x130>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40000400 	.word	0x40000400
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800

08003270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0201 	bic.w	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800329a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f023 030a 	bic.w	r3, r3, #10
 80032ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f023 0210 	bic.w	r2, r3, #16
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	031b      	lsls	r3, r3, #12
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800330a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	f043 0307 	orr.w	r3, r3, #7
 8003350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800337e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	431a      	orrs	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e068      	b.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2e      	ldr	r2, [pc, #184]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d004      	beq.n	80033f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2d      	ldr	r2, [pc, #180]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1e      	ldr	r2, [pc, #120]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01d      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d018      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a18      	ldr	r2, [pc, #96]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10c      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40012c00 	.word	0x40012c00
 80034a0:	40013400 	.word	0x40013400
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40000c00 	.word	0x40000c00
 80034b0:	40014000 	.word	0x40014000

080034b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e040      	b.n	8003584 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fb8a 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	; 0x24
 800351c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fb6a 	bl	8003c10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f8af 	bl	80036a0 <UART_SetConfig>
 8003542:	4603      	mov	r3, r0
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e01b      	b.n	8003584 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800355a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800356a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fbe9 	bl	8003d54 <UART_CheckIdleState>
 8003582:	4603      	mov	r3, r0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d178      	bne.n	8003696 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_UART_Transmit+0x24>
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e071      	b.n	8003698 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2221      	movs	r2, #33	; 0x21
 80035c0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035c2:	f7fd fce5 	bl	8000f90 <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e0:	d108      	bne.n	80035f4 <HAL_UART_Transmit+0x68>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	e003      	b.n	80035fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035fc:	e030      	b.n	8003660 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	2180      	movs	r1, #128	; 0x80
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fc4b 	bl	8003ea4 <UART_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e03c      	b.n	8003698 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	881a      	ldrh	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003630:	b292      	uxth	r2, r2
 8003632:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	3302      	adds	r3, #2
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	e008      	b.n	800364e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b292      	uxth	r2, r2
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1c8      	bne.n	80035fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	2140      	movs	r1, #64	; 0x40
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fc14 	bl	8003ea4 <UART_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e005      	b.n	8003698 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a4:	b08a      	sub	sp, #40	; 0x28
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	431a      	orrs	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4ba4      	ldr	r3, [pc, #656]	; (8003960 <UART_SetConfig+0x2c0>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d8:	430b      	orrs	r3, r1
 80036da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a99      	ldr	r2, [pc, #612]	; (8003964 <UART_SetConfig+0x2c4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003708:	4313      	orrs	r3, r2
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	430a      	orrs	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a90      	ldr	r2, [pc, #576]	; (8003968 <UART_SetConfig+0x2c8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d126      	bne.n	8003778 <UART_SetConfig+0xd8>
 800372a:	4b90      	ldr	r3, [pc, #576]	; (800396c <UART_SetConfig+0x2cc>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b03      	cmp	r3, #3
 8003736:	d81b      	bhi.n	8003770 <UART_SetConfig+0xd0>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <UART_SetConfig+0xa0>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003751 	.word	0x08003751
 8003744:	08003761 	.word	0x08003761
 8003748:	08003759 	.word	0x08003759
 800374c:	08003769 	.word	0x08003769
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e116      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003758:	2302      	movs	r3, #2
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e112      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003760:	2304      	movs	r3, #4
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003766:	e10e      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003768:	2308      	movs	r3, #8
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376e:	e10a      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003770:	2310      	movs	r3, #16
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e106      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7c      	ldr	r2, [pc, #496]	; (8003970 <UART_SetConfig+0x2d0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d138      	bne.n	80037f4 <UART_SetConfig+0x154>
 8003782:	4b7a      	ldr	r3, [pc, #488]	; (800396c <UART_SetConfig+0x2cc>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d82d      	bhi.n	80037ec <UART_SetConfig+0x14c>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0xf8>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037cd 	.word	0x080037cd
 800379c:	080037ed 	.word	0x080037ed
 80037a0:	080037ed 	.word	0x080037ed
 80037a4:	080037ed 	.word	0x080037ed
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080037ed 	.word	0x080037ed
 80037b0:	080037ed 	.word	0x080037ed
 80037b4:	080037ed 	.word	0x080037ed
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	080037ed 	.word	0x080037ed
 80037c0:	080037ed 	.word	0x080037ed
 80037c4:	080037ed 	.word	0x080037ed
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e0d8      	b.n	8003986 <UART_SetConfig+0x2e6>
 80037d4:	2302      	movs	r3, #2
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e0d4      	b.n	8003986 <UART_SetConfig+0x2e6>
 80037dc:	2304      	movs	r3, #4
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e0d0      	b.n	8003986 <UART_SetConfig+0x2e6>
 80037e4:	2308      	movs	r3, #8
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e0cc      	b.n	8003986 <UART_SetConfig+0x2e6>
 80037ec:	2310      	movs	r3, #16
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e0c8      	b.n	8003986 <UART_SetConfig+0x2e6>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5e      	ldr	r2, [pc, #376]	; (8003974 <UART_SetConfig+0x2d4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d125      	bne.n	800384a <UART_SetConfig+0x1aa>
 80037fe:	4b5b      	ldr	r3, [pc, #364]	; (800396c <UART_SetConfig+0x2cc>)
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003804:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003808:	2b30      	cmp	r3, #48	; 0x30
 800380a:	d016      	beq.n	800383a <UART_SetConfig+0x19a>
 800380c:	2b30      	cmp	r3, #48	; 0x30
 800380e:	d818      	bhi.n	8003842 <UART_SetConfig+0x1a2>
 8003810:	2b20      	cmp	r3, #32
 8003812:	d00a      	beq.n	800382a <UART_SetConfig+0x18a>
 8003814:	2b20      	cmp	r3, #32
 8003816:	d814      	bhi.n	8003842 <UART_SetConfig+0x1a2>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <UART_SetConfig+0x182>
 800381c:	2b10      	cmp	r3, #16
 800381e:	d008      	beq.n	8003832 <UART_SetConfig+0x192>
 8003820:	e00f      	b.n	8003842 <UART_SetConfig+0x1a2>
 8003822:	2300      	movs	r3, #0
 8003824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003828:	e0ad      	b.n	8003986 <UART_SetConfig+0x2e6>
 800382a:	2302      	movs	r3, #2
 800382c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003830:	e0a9      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003832:	2304      	movs	r3, #4
 8003834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003838:	e0a5      	b.n	8003986 <UART_SetConfig+0x2e6>
 800383a:	2308      	movs	r3, #8
 800383c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003840:	e0a1      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003842:	2310      	movs	r3, #16
 8003844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003848:	e09d      	b.n	8003986 <UART_SetConfig+0x2e6>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <UART_SetConfig+0x2d8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d125      	bne.n	80038a0 <UART_SetConfig+0x200>
 8003854:	4b45      	ldr	r3, [pc, #276]	; (800396c <UART_SetConfig+0x2cc>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800385e:	2bc0      	cmp	r3, #192	; 0xc0
 8003860:	d016      	beq.n	8003890 <UART_SetConfig+0x1f0>
 8003862:	2bc0      	cmp	r3, #192	; 0xc0
 8003864:	d818      	bhi.n	8003898 <UART_SetConfig+0x1f8>
 8003866:	2b80      	cmp	r3, #128	; 0x80
 8003868:	d00a      	beq.n	8003880 <UART_SetConfig+0x1e0>
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	d814      	bhi.n	8003898 <UART_SetConfig+0x1f8>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <UART_SetConfig+0x1d8>
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d008      	beq.n	8003888 <UART_SetConfig+0x1e8>
 8003876:	e00f      	b.n	8003898 <UART_SetConfig+0x1f8>
 8003878:	2300      	movs	r3, #0
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387e:	e082      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003880:	2302      	movs	r3, #2
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003886:	e07e      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003888:	2304      	movs	r3, #4
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800388e:	e07a      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003890:	2308      	movs	r3, #8
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003896:	e076      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003898:	2310      	movs	r3, #16
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e072      	b.n	8003986 <UART_SetConfig+0x2e6>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a35      	ldr	r2, [pc, #212]	; (800397c <UART_SetConfig+0x2dc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d12a      	bne.n	8003900 <UART_SetConfig+0x260>
 80038aa:	4b30      	ldr	r3, [pc, #192]	; (800396c <UART_SetConfig+0x2cc>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038b8:	d01a      	beq.n	80038f0 <UART_SetConfig+0x250>
 80038ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038be:	d81b      	bhi.n	80038f8 <UART_SetConfig+0x258>
 80038c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c4:	d00c      	beq.n	80038e0 <UART_SetConfig+0x240>
 80038c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ca:	d815      	bhi.n	80038f8 <UART_SetConfig+0x258>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <UART_SetConfig+0x238>
 80038d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d4:	d008      	beq.n	80038e8 <UART_SetConfig+0x248>
 80038d6:	e00f      	b.n	80038f8 <UART_SetConfig+0x258>
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038de:	e052      	b.n	8003986 <UART_SetConfig+0x2e6>
 80038e0:	2302      	movs	r3, #2
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e6:	e04e      	b.n	8003986 <UART_SetConfig+0x2e6>
 80038e8:	2304      	movs	r3, #4
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ee:	e04a      	b.n	8003986 <UART_SetConfig+0x2e6>
 80038f0:	2308      	movs	r3, #8
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f6:	e046      	b.n	8003986 <UART_SetConfig+0x2e6>
 80038f8:	2310      	movs	r3, #16
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fe:	e042      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a17      	ldr	r2, [pc, #92]	; (8003964 <UART_SetConfig+0x2c4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d13a      	bne.n	8003980 <UART_SetConfig+0x2e0>
 800390a:	4b18      	ldr	r3, [pc, #96]	; (800396c <UART_SetConfig+0x2cc>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003914:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003918:	d01a      	beq.n	8003950 <UART_SetConfig+0x2b0>
 800391a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800391e:	d81b      	bhi.n	8003958 <UART_SetConfig+0x2b8>
 8003920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003924:	d00c      	beq.n	8003940 <UART_SetConfig+0x2a0>
 8003926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392a:	d815      	bhi.n	8003958 <UART_SetConfig+0x2b8>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <UART_SetConfig+0x298>
 8003930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003934:	d008      	beq.n	8003948 <UART_SetConfig+0x2a8>
 8003936:	e00f      	b.n	8003958 <UART_SetConfig+0x2b8>
 8003938:	2300      	movs	r3, #0
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393e:	e022      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003940:	2302      	movs	r3, #2
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003946:	e01e      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003948:	2304      	movs	r3, #4
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394e:	e01a      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003950:	2308      	movs	r3, #8
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003956:	e016      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003958:	2310      	movs	r3, #16
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395e:	e012      	b.n	8003986 <UART_SetConfig+0x2e6>
 8003960:	efff69f3 	.word	0xefff69f3
 8003964:	40008000 	.word	0x40008000
 8003968:	40013800 	.word	0x40013800
 800396c:	40021000 	.word	0x40021000
 8003970:	40004400 	.word	0x40004400
 8003974:	40004800 	.word	0x40004800
 8003978:	40004c00 	.word	0x40004c00
 800397c:	40005000 	.word	0x40005000
 8003980:	2310      	movs	r3, #16
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a9f      	ldr	r2, [pc, #636]	; (8003c08 <UART_SetConfig+0x568>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d17a      	bne.n	8003a86 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003994:	2b08      	cmp	r3, #8
 8003996:	d824      	bhi.n	80039e2 <UART_SetConfig+0x342>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UART_SetConfig+0x300>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039e3 	.word	0x080039e3
 80039a8:	080039cd 	.word	0x080039cd
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	080039d3 	.word	0x080039d3
 80039b4:	080039e3 	.word	0x080039e3
 80039b8:	080039e3 	.word	0x080039e3
 80039bc:	080039e3 	.word	0x080039e3
 80039c0:	080039db 	.word	0x080039db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c4:	f7fe fb84 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 80039c8:	61f8      	str	r0, [r7, #28]
        break;
 80039ca:	e010      	b.n	80039ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	4b8f      	ldr	r3, [pc, #572]	; (8003c0c <UART_SetConfig+0x56c>)
 80039ce:	61fb      	str	r3, [r7, #28]
        break;
 80039d0:	e00d      	b.n	80039ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d2:	f7fe fae5 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 80039d6:	61f8      	str	r0, [r7, #28]
        break;
 80039d8:	e009      	b.n	80039ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039de:	61fb      	str	r3, [r7, #28]
        break;
 80039e0:	e005      	b.n	80039ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80fb 	beq.w	8003bec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d305      	bcc.n	8003a12 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d903      	bls.n	8003a1a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a18:	e0e8      	b.n	8003bec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	461c      	mov	r4, r3
 8003a20:	4615      	mov	r5, r2
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	022b      	lsls	r3, r5, #8
 8003a2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a30:	0222      	lsls	r2, r4, #8
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	6849      	ldr	r1, [r1, #4]
 8003a36:	0849      	lsrs	r1, r1, #1
 8003a38:	2000      	movs	r0, #0
 8003a3a:	4688      	mov	r8, r1
 8003a3c:	4681      	mov	r9, r0
 8003a3e:	eb12 0a08 	adds.w	sl, r2, r8
 8003a42:	eb43 0b09 	adc.w	fp, r3, r9
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a54:	4650      	mov	r0, sl
 8003a56:	4659      	mov	r1, fp
 8003a58:	f7fc fc0a 	bl	8000270 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4613      	mov	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a6a:	d308      	bcc.n	8003a7e <UART_SetConfig+0x3de>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a72:	d204      	bcs.n	8003a7e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	60da      	str	r2, [r3, #12]
 8003a7c:	e0b6      	b.n	8003bec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a84:	e0b2      	b.n	8003bec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a8e:	d15e      	bne.n	8003b4e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d828      	bhi.n	8003aea <UART_SetConfig+0x44a>
 8003a98:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <UART_SetConfig+0x400>)
 8003a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9e:	bf00      	nop
 8003aa0:	08003ac5 	.word	0x08003ac5
 8003aa4:	08003acd 	.word	0x08003acd
 8003aa8:	08003ad5 	.word	0x08003ad5
 8003aac:	08003aeb 	.word	0x08003aeb
 8003ab0:	08003adb 	.word	0x08003adb
 8003ab4:	08003aeb 	.word	0x08003aeb
 8003ab8:	08003aeb 	.word	0x08003aeb
 8003abc:	08003aeb 	.word	0x08003aeb
 8003ac0:	08003ae3 	.word	0x08003ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac4:	f7fe fb04 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8003ac8:	61f8      	str	r0, [r7, #28]
        break;
 8003aca:	e014      	b.n	8003af6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003acc:	f7fe fb16 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8003ad0:	61f8      	str	r0, [r7, #28]
        break;
 8003ad2:	e010      	b.n	8003af6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad4:	4b4d      	ldr	r3, [pc, #308]	; (8003c0c <UART_SetConfig+0x56c>)
 8003ad6:	61fb      	str	r3, [r7, #28]
        break;
 8003ad8:	e00d      	b.n	8003af6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ada:	f7fe fa61 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8003ade:	61f8      	str	r0, [r7, #28]
        break;
 8003ae0:	e009      	b.n	8003af6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	61fb      	str	r3, [r7, #28]
        break;
 8003ae8:	e005      	b.n	8003af6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003af4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d077      	beq.n	8003bec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005a      	lsls	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	441a      	add	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b0f      	cmp	r3, #15
 8003b16:	d916      	bls.n	8003b46 <UART_SetConfig+0x4a6>
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1e:	d212      	bcs.n	8003b46 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f023 030f 	bic.w	r3, r3, #15
 8003b28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	8afb      	ldrh	r3, [r7, #22]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	8afa      	ldrh	r2, [r7, #22]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	e052      	b.n	8003bec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b4c:	e04e      	b.n	8003bec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d827      	bhi.n	8003ba6 <UART_SetConfig+0x506>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x4bc>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe faa6 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8003b84:	61f8      	str	r0, [r7, #28]
        break;
 8003b86:	e014      	b.n	8003bb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe fab8 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8003b8c:	61f8      	str	r0, [r7, #28]
        break;
 8003b8e:	e010      	b.n	8003bb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <UART_SetConfig+0x56c>)
 8003b92:	61fb      	str	r3, [r7, #28]
        break;
 8003b94:	e00d      	b.n	8003bb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe fa03 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8003b9a:	61f8      	str	r0, [r7, #28]
        break;
 8003b9c:	e009      	b.n	8003bb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	61fb      	str	r3, [r7, #28]
        break;
 8003ba4:	e005      	b.n	8003bb2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d019      	beq.n	8003bec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	085a      	lsrs	r2, r3, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	441a      	add	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	d909      	bls.n	8003be6 <UART_SetConfig+0x546>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d205      	bcs.n	8003be6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	e002      	b.n	8003bec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bf8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	; 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c06:	bf00      	nop
 8003c08:	40008000 	.word	0x40008000
 8003c0c:	00f42400 	.word	0x00f42400

08003c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01a      	beq.n	8003d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d0e:	d10a      	bne.n	8003d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  }
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b098      	sub	sp, #96	; 0x60
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d64:	f7fd f914 	bl	8000f90 <HAL_GetTick>
 8003d68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d12e      	bne.n	8003dd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d80:	2200      	movs	r2, #0
 8003d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f88c 	bl	8003ea4 <UART_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d021      	beq.n	8003dd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da6:	653b      	str	r3, [r7, #80]	; 0x50
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db0:	647b      	str	r3, [r7, #68]	; 0x44
 8003db2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e6      	bne.n	8003d92 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e062      	b.n	8003e9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d149      	bne.n	8003e78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dec:	2200      	movs	r2, #0
 8003dee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f856 	bl	8003ea4 <UART_WaitOnFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d03c      	beq.n	8003e78 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e6      	bne.n	8003dfe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3308      	adds	r3, #8
 8003e36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e50:	61fa      	str	r2, [r7, #28]
 8003e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e011      	b.n	8003e9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3758      	adds	r7, #88	; 0x58
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb4:	e049      	b.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ebc:	d045      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fd f867 	bl	8000f90 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d302      	bcc.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e048      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d031      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d110      	bne.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2208      	movs	r2, #8
 8003efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f838 	bl	8003f72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2208      	movs	r2, #8
 8003f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e029      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f24:	d111      	bne.n	8003f4a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f81e 	bl	8003f72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e00f      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	bf0c      	ite	eq
 8003f5a:	2301      	moveq	r3, #1
 8003f5c:	2300      	movne	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d0a6      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b095      	sub	sp, #84	; 0x54
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f98:	643b      	str	r3, [r7, #64]	; 0x40
 8003f9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1e6      	bne.n	8003f7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d118      	bne.n	800401a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f023 0310 	bic.w	r3, r3, #16
 8003ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6979      	ldr	r1, [r7, #20]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	613b      	str	r3, [r7, #16]
   return(result);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e6      	bne.n	8003fe8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800402e:	bf00      	nop
 8004030:	3754      	adds	r7, #84	; 0x54
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <__NVIC_SetPriority>:
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	6039      	str	r1, [r7, #0]
 8004046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404c:	2b00      	cmp	r3, #0
 800404e:	db0a      	blt.n	8004066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	490c      	ldr	r1, [pc, #48]	; (8004088 <__NVIC_SetPriority+0x4c>)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	0112      	lsls	r2, r2, #4
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	440b      	add	r3, r1
 8004060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004064:	e00a      	b.n	800407c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4908      	ldr	r1, [pc, #32]	; (800408c <__NVIC_SetPriority+0x50>)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	3b04      	subs	r3, #4
 8004074:	0112      	lsls	r2, r2, #4
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	440b      	add	r3, r1
 800407a:	761a      	strb	r2, [r3, #24]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000e100 	.word	0xe000e100
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <SysTick_Handler+0x1c>)
 8004096:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004098:	f001 ff40 	bl	8005f1c <xTaskGetSchedulerState>
 800409c:	4603      	mov	r3, r0
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d001      	beq.n	80040a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80040a2:	f002 fd29 	bl	8006af8 <xPortSysTickHandler>
  }
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	e000e010 	.word	0xe000e010

080040b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80040b4:	2100      	movs	r1, #0
 80040b6:	f06f 0004 	mvn.w	r0, #4
 80040ba:	f7ff ffbf 	bl	800403c <__NVIC_SetPriority>
#endif
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ca:	f3ef 8305 	mrs	r3, IPSR
 80040ce:	603b      	str	r3, [r7, #0]
  return(result);
 80040d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80040d6:	f06f 0305 	mvn.w	r3, #5
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	e00c      	b.n	80040f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <osKernelInitialize+0x44>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d105      	bne.n	80040f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <osKernelInitialize+0x44>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	e002      	b.n	80040f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80040f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040f8:	687b      	ldr	r3, [r7, #4]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	200001c4 	.word	0x200001c4

0800410c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004112:	f3ef 8305 	mrs	r3, IPSR
 8004116:	603b      	str	r3, [r7, #0]
  return(result);
 8004118:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <osKernelStart+0x1a>
    stat = osErrorISR;
 800411e:	f06f 0305 	mvn.w	r3, #5
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	e010      	b.n	8004148 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <osKernelStart+0x48>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d109      	bne.n	8004142 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800412e:	f7ff ffbf 	bl	80040b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <osKernelStart+0x48>)
 8004134:	2202      	movs	r2, #2
 8004136:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004138:	f001 fa92 	bl	8005660 <vTaskStartScheduler>
      stat = osOK;
 800413c:	2300      	movs	r3, #0
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	e002      	b.n	8004148 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004148:	687b      	ldr	r3, [r7, #4]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200001c4 	.word	0x200001c4

08004158 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b08e      	sub	sp, #56	; 0x38
 800415c:	af04      	add	r7, sp, #16
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004168:	f3ef 8305 	mrs	r3, IPSR
 800416c:	617b      	str	r3, [r7, #20]
  return(result);
 800416e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004170:	2b00      	cmp	r3, #0
 8004172:	d17e      	bne.n	8004272 <osThreadNew+0x11a>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d07b      	beq.n	8004272 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800417e:	2318      	movs	r3, #24
 8004180:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800418a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d045      	beq.n	800421e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <osThreadNew+0x48>
        name = attr->name;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <osThreadNew+0x6e>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b38      	cmp	r3, #56	; 0x38
 80041b8:	d805      	bhi.n	80041c6 <osThreadNew+0x6e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <osThreadNew+0x72>
        return (NULL);
 80041c6:	2300      	movs	r3, #0
 80041c8:	e054      	b.n	8004274 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	089b      	lsrs	r3, r3, #2
 80041d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00e      	beq.n	8004200 <osThreadNew+0xa8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2ba7      	cmp	r3, #167	; 0xa7
 80041e8:	d90a      	bls.n	8004200 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <osThreadNew+0xa8>
        mem = 1;
 80041fa:	2301      	movs	r3, #1
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	e010      	b.n	8004222 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10c      	bne.n	8004222 <osThreadNew+0xca>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d108      	bne.n	8004222 <osThreadNew+0xca>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d104      	bne.n	8004222 <osThreadNew+0xca>
          mem = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	e001      	b.n	8004222 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d110      	bne.n	800424a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004230:	9202      	str	r2, [sp, #8]
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	6a3a      	ldr	r2, [r7, #32]
 800423c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 ffac 	bl	800519c <xTaskCreateStatic>
 8004244:	4603      	mov	r3, r0
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e013      	b.n	8004272 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d110      	bne.n	8004272 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	b29a      	uxth	r2, r3
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fff7 	bl	8005256 <xTaskCreate>
 8004268:	4603      	mov	r3, r0
 800426a:	2b01      	cmp	r3, #1
 800426c:	d001      	beq.n	8004272 <osThreadNew+0x11a>
            hTask = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004272:	693b      	ldr	r3, [r7, #16]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3728      	adds	r7, #40	; 0x28
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004288:	f3ef 8305 	mrs	r3, IPSR
 800428c:	60fb      	str	r3, [r7, #12]
  return(result);
 800428e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8004294:	f06f 0305 	mvn.w	r3, #5
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	e00b      	b.n	80042b4 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80042a2:	f06f 0303 	mvn.w	r3, #3
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e004      	b.n	80042b4 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80042ae:	6938      	ldr	r0, [r7, #16]
 80042b0:	f001 f960 	bl	8005574 <vTaskSuspend>
  }

  return (stat);
 80042b4:	697b      	ldr	r3, [r7, #20]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042c6:	f3ef 8305 	mrs	r3, IPSR
 80042ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80042cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <osDelay+0x1c>
    stat = osErrorISR;
 80042d2:	f06f 0305 	mvn.w	r3, #5
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e007      	b.n	80042ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <osDelay+0x2c>
      vTaskDelay(ticks);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f001 f911 	bl	800550c <vTaskDelay>
    }
  }

  return (stat);
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004300:	f3ef 8305 	mrs	r3, IPSR
 8004304:	60bb      	str	r3, [r7, #8]
  return(result);
 8004306:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004308:	2b00      	cmp	r3, #0
 800430a:	d174      	bne.n	80043f6 <osMutexNew+0x102>
    if (attr != NULL) {
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <osMutexNew+0x26>
      type = attr->attr_bits;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e001      	b.n	800431e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <osMutexNew+0x3a>
      rmtx = 1U;
 8004328:	2301      	movs	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e001      	b.n	8004332 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d15c      	bne.n	80043f6 <osMutexNew+0x102>
      mem = -1;
 800433c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004340:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d015      	beq.n	8004374 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <osMutexNew+0x6a>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	2b4f      	cmp	r3, #79	; 0x4f
 8004356:	d902      	bls.n	800435e <osMutexNew+0x6a>
          mem = 1;
 8004358:	2301      	movs	r3, #1
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e00c      	b.n	8004378 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <osMutexNew+0x84>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <osMutexNew+0x84>
            mem = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e001      	b.n	8004378 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d112      	bne.n	80043a4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4619      	mov	r1, r3
 800438a:	2004      	movs	r0, #4
 800438c:	f000 fb03 	bl	8004996 <xQueueCreateMutexStatic>
 8004390:	61f8      	str	r0, [r7, #28]
 8004392:	e016      	b.n	80043c2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4619      	mov	r1, r3
 800439a:	2001      	movs	r0, #1
 800439c:	f000 fafb 	bl	8004996 <xQueueCreateMutexStatic>
 80043a0:	61f8      	str	r0, [r7, #28]
 80043a2:	e00e      	b.n	80043c2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80043b0:	2004      	movs	r0, #4
 80043b2:	f000 fad8 	bl	8004966 <xQueueCreateMutex>
 80043b6:	61f8      	str	r0, [r7, #28]
 80043b8:	e003      	b.n	80043c2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80043ba:	2001      	movs	r0, #1
 80043bc:	f000 fad3 	bl	8004966 <xQueueCreateMutex>
 80043c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00c      	beq.n	80043e2 <osMutexNew+0xee>
        if (attr != NULL) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <osMutexNew+0xe2>
          name = attr->name;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	e001      	b.n	80043da <osMutexNew+0xe6>
        } else {
          name = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	69f8      	ldr	r0, [r7, #28]
 80043de:	f000 fe7f 	bl	80050e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d006      	beq.n	80043f6 <osMutexNew+0x102>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80043f6:	69fb      	ldr	r3, [r7, #28]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004410:	f3ef 8305 	mrs	r3, IPSR
 8004414:	613b      	str	r3, [r7, #16]
  return(result);
 8004416:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004418:	2b00      	cmp	r3, #0
 800441a:	d15f      	bne.n	80044dc <osMessageQueueNew+0xdc>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d05c      	beq.n	80044dc <osMessageQueueNew+0xdc>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d059      	beq.n	80044dc <osMessageQueueNew+0xdc>
    mem = -1;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800442c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d029      	beq.n	8004488 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d012      	beq.n	8004462 <osMessageQueueNew+0x62>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b4f      	cmp	r3, #79	; 0x4f
 8004442:	d90e      	bls.n	8004462 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	fb01 f303 	mul.w	r3, r1, r3
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <osMessageQueueNew+0x62>
        mem = 1;
 800445c:	2301      	movs	r3, #1
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e014      	b.n	800448c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d110      	bne.n	800448c <osMessageQueueNew+0x8c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10c      	bne.n	800448c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004476:	2b00      	cmp	r3, #0
 8004478:	d108      	bne.n	800448c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d104      	bne.n	800448c <osMessageQueueNew+0x8c>
          mem = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e001      	b.n	800448c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d10b      	bne.n	80044aa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2100      	movs	r1, #0
 800449c:	9100      	str	r1, [sp, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f971 	bl	8004788 <xQueueGenericCreateStatic>
 80044a6:	61f8      	str	r0, [r7, #28]
 80044a8:	e008      	b.n	80044bc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80044b0:	2200      	movs	r2, #0
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f9df 	bl	8004878 <xQueueGenericCreate>
 80044ba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e001      	b.n	80044d4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80044d4:	6979      	ldr	r1, [r7, #20]
 80044d6:	69f8      	ldr	r0, [r7, #28]
 80044d8:	f000 fe02 	bl	80050e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80044dc:	69fb      	ldr	r3, [r7, #28]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a07      	ldr	r2, [pc, #28]	; (8004514 <vApplicationGetIdleTaskMemory+0x2c>)
 80044f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a06      	ldr	r2, [pc, #24]	; (8004518 <vApplicationGetIdleTaskMemory+0x30>)
 80044fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2280      	movs	r2, #128	; 0x80
 8004504:	601a      	str	r2, [r3, #0]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	200001c8 	.word	0x200001c8
 8004518:	20000270 	.word	0x20000270

0800451c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a07      	ldr	r2, [pc, #28]	; (8004548 <vApplicationGetTimerTaskMemory+0x2c>)
 800452c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4a06      	ldr	r2, [pc, #24]	; (800454c <vApplicationGetTimerTaskMemory+0x30>)
 8004532:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800453a:	601a      	str	r2, [r3, #0]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000470 	.word	0x20000470
 800454c:	20000518 	.word	0x20000518

08004550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f103 0208 	add.w	r2, r3, #8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f103 0208 	add.w	r2, r3, #8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f103 0208 	add.w	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004608:	d103      	bne.n	8004612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e00c      	b.n	800462c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3308      	adds	r3, #8
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e002      	b.n	8004620 <vListInsert+0x2e>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	429a      	cmp	r2, r3
 800462a:	d2f6      	bcs.n	800461a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6892      	ldr	r2, [r2, #8]
 800467a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6852      	ldr	r2, [r2, #4]
 8004684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d103      	bne.n	8004698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	1e5a      	subs	r2, r3, #1
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046e2:	f002 f977 	bl	80069d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	441a      	add	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	3b01      	subs	r3, #1
 8004714:	68f9      	ldr	r1, [r7, #12]
 8004716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	441a      	add	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	22ff      	movs	r2, #255	; 0xff
 8004726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	22ff      	movs	r2, #255	; 0xff
 800472e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d114      	bne.n	8004762 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01a      	beq.n	8004776 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3310      	adds	r3, #16
 8004744:	4618      	mov	r0, r3
 8004746:	f001 fa25 	bl	8005b94 <xTaskRemoveFromEventList>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d012      	beq.n	8004776 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <xQueueGenericReset+0xcc>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	e009      	b.n	8004776 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3310      	adds	r3, #16
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fef2 	bl	8004550 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3324      	adds	r3, #36	; 0x24
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff feed 	bl	8004550 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004776:	f002 f95d 	bl	8006a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800477a:	2301      	movs	r3, #1
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08e      	sub	sp, #56	; 0x38
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047ae:	bf00      	nop
 80047b0:	e7fe      	b.n	80047b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <xQueueGenericCreateStatic+0x52>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <xQueueGenericCreateStatic+0x56>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <xQueueGenericCreateStatic+0x58>
 80047de:	2300      	movs	r3, #0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	623b      	str	r3, [r7, #32]
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <xQueueGenericCreateStatic+0x7e>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <xQueueGenericCreateStatic+0x82>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <xQueueGenericCreateStatic+0x84>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61fb      	str	r3, [r7, #28]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004826:	2350      	movs	r3, #80	; 0x50
 8004828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b50      	cmp	r3, #80	; 0x50
 800482e:	d00a      	beq.n	8004846 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	61bb      	str	r3, [r7, #24]
}
 8004842:	bf00      	nop
 8004844:	e7fe      	b.n	8004844 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004846:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800485a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	4613      	mov	r3, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f83f 	bl	80048ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800486e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004870:	4618      	mov	r0, r3
 8004872:	3730      	adds	r7, #48	; 0x30
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	613b      	str	r3, [r7, #16]
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	3350      	adds	r3, #80	; 0x50
 80048b0:	4618      	mov	r0, r3
 80048b2:	f002 f9b1 	bl	8006c18 <pvPortMalloc>
 80048b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d011      	beq.n	80048e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	3350      	adds	r3, #80	; 0x50
 80048c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048d0:	79fa      	ldrb	r2, [r7, #7]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f805 	bl	80048ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048e2:	69bb      	ldr	r3, [r7, #24]
	}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d103      	bne.n	8004908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e002      	b.n	800490e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800491a:	2101      	movs	r1, #1
 800491c:	69b8      	ldr	r0, [r7, #24]
 800491e:	f7ff fecb 	bl	80046b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	78fa      	ldrb	r2, [r7, #3]
 8004926:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00e      	beq.n	800495e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004952:	2300      	movs	r3, #0
 8004954:	2200      	movs	r2, #0
 8004956:	2100      	movs	r1, #0
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f837 	bl	80049cc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	4603      	mov	r3, r0
 800496e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	461a      	mov	r2, r3
 800497c:	6939      	ldr	r1, [r7, #16]
 800497e:	6978      	ldr	r0, [r7, #20]
 8004980:	f7ff ff7a 	bl	8004878 <xQueueGenericCreate>
 8004984:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff ffd3 	bl	8004932 <prvInitialiseMutex>

		return xNewQueue;
 800498c:	68fb      	ldr	r3, [r7, #12]
	}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004996:	b580      	push	{r7, lr}
 8004998:	b088      	sub	sp, #32
 800499a:	af02      	add	r7, sp, #8
 800499c:	4603      	mov	r3, r0
 800499e:	6039      	str	r1, [r7, #0]
 80049a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80049a2:	2301      	movs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2200      	movs	r2, #0
 80049b2:	6939      	ldr	r1, [r7, #16]
 80049b4:	6978      	ldr	r0, [r7, #20]
 80049b6:	f7ff fee7 	bl	8004788 <xQueueGenericCreateStatic>
 80049ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff ffb8 	bl	8004932 <prvInitialiseMutex>

		return xNewQueue;
 80049c2:	68fb      	ldr	r3, [r7, #12]
	}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08e      	sub	sp, #56	; 0x38
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049da:	2300      	movs	r3, #0
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <xQueueGenericSend+0x32>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d103      	bne.n	8004a0c <xQueueGenericSend+0x40>
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <xQueueGenericSend+0x44>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <xQueueGenericSend+0x46>
 8004a10:	2300      	movs	r3, #0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <xQueueGenericSend+0x60>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d103      	bne.n	8004a3a <xQueueGenericSend+0x6e>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <xQueueGenericSend+0x72>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <xQueueGenericSend+0x74>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <xQueueGenericSend+0x8e>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	623b      	str	r3, [r7, #32]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a5a:	f001 fa5f 	bl	8005f1c <xTaskGetSchedulerState>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <xQueueGenericSend+0x9e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <xQueueGenericSend+0xa2>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <xQueueGenericSend+0xa4>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <xQueueGenericSend+0xbe>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	61fb      	str	r3, [r7, #28]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a8a:	f001 ffa3 	bl	80069d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d302      	bcc.n	8004aa0 <xQueueGenericSend+0xd4>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d129      	bne.n	8004af4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aa6:	f000 fa0b 	bl	8004ec0 <prvCopyDataToQueue>
 8004aaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d010      	beq.n	8004ad6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	3324      	adds	r3, #36	; 0x24
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f001 f86b 	bl	8005b94 <xTaskRemoveFromEventList>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ac4:	4b3f      	ldr	r3, [pc, #252]	; (8004bc4 <xQueueGenericSend+0x1f8>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	e00a      	b.n	8004aec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004adc:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <xQueueGenericSend+0x1f8>)
 8004ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004aec:	f001 ffa2 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e063      	b.n	8004bbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004afa:	f001 ff9b 	bl	8006a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e05c      	b.n	8004bbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b08:	f107 0314 	add.w	r3, r7, #20
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 f8a5 	bl	8005c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b12:	2301      	movs	r3, #1
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b16:	f001 ff8d 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b1a:	f000 fe11 	bl	8005740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b1e:	f001 ff59 	bl	80069d4 <vPortEnterCritical>
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b28:	b25b      	sxtb	r3, r3
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b2e:	d103      	bne.n	8004b38 <xQueueGenericSend+0x16c>
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b3e:	b25b      	sxtb	r3, r3
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b44:	d103      	bne.n	8004b4e <xQueueGenericSend+0x182>
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b4e:	f001 ff71 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b52:	1d3a      	adds	r2, r7, #4
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 f894 	bl	8005c88 <xTaskCheckForTimeOut>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d124      	bne.n	8004bb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b68:	f000 faa2 	bl	80050b0 <prvIsQueueFull>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d018      	beq.n	8004ba4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	3310      	adds	r3, #16
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 ffba 	bl	8005af4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b82:	f000 fa2d 	bl	8004fe0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b86:	f000 fde9 	bl	800575c <xTaskResumeAll>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f47f af7c 	bne.w	8004a8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <xQueueGenericSend+0x1f8>)
 8004b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	e772      	b.n	8004a8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ba6:	f000 fa1b 	bl	8004fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004baa:	f000 fdd7 	bl	800575c <xTaskResumeAll>
 8004bae:	e76c      	b.n	8004a8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bb2:	f000 fa15 	bl	8004fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bb6:	f000 fdd1 	bl	800575c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3738      	adds	r7, #56	; 0x38
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b090      	sub	sp, #64	; 0x40
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <xQueueGenericSendFromISR+0x3c>
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <xQueueGenericSendFromISR+0x40>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <xQueueGenericSendFromISR+0x42>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d103      	bne.n	8004c32 <xQueueGenericSendFromISR+0x6a>
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <xQueueGenericSendFromISR+0x6e>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <xQueueGenericSendFromISR+0x70>
 8004c36:	2300      	movs	r3, #0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	623b      	str	r3, [r7, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c52:	f001 ffa1 	bl	8006b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c56:	f3ef 8211 	mrs	r2, BASEPRI
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	61fa      	str	r2, [r7, #28]
 8004c6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <xQueueGenericSendFromISR+0xbc>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d12f      	bne.n	8004ce4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	68b9      	ldr	r1, [r7, #8]
 8004c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004c9a:	f000 f911 	bl	8004ec0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca6:	d112      	bne.n	8004cce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	3324      	adds	r3, #36	; 0x24
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 ff6d 	bl	8005b94 <xTaskRemoveFromEventList>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00e      	beq.n	8004cde <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e007      	b.n	8004cde <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	b25a      	sxtb	r2, r3
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004ce2:	e001      	b.n	8004ce8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cf2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3740      	adds	r7, #64	; 0x40
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08c      	sub	sp, #48	; 0x30
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <xQueueReceive+0x30>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	623b      	str	r3, [r7, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <xQueueReceive+0x3e>
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <xQueueReceive+0x42>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <xQueueReceive+0x44>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <xQueueReceive+0x5e>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	61fb      	str	r3, [r7, #28]
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d5e:	f001 f8dd 	bl	8005f1c <xTaskGetSchedulerState>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <xQueueReceive+0x6e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <xQueueReceive+0x72>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <xQueueReceive+0x74>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xQueueReceive+0x8e>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	61bb      	str	r3, [r7, #24]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d8e:	f001 fe21 	bl	80069d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01f      	beq.n	8004dde <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da2:	f000 f8f7 	bl	8004f94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	1e5a      	subs	r2, r3, #1
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00f      	beq.n	8004dd6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	3310      	adds	r3, #16
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 feea 	bl	8005b94 <xTaskRemoveFromEventList>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dc6:	4b3d      	ldr	r3, [pc, #244]	; (8004ebc <xQueueReceive+0x1bc>)
 8004dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dd6:	f001 fe2d 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e069      	b.n	8004eb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004de4:	f001 fe26 	bl	8006a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e062      	b.n	8004eb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004df2:	f107 0310 	add.w	r3, r7, #16
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 ff30 	bl	8005c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e00:	f001 fe18 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e04:	f000 fc9c 	bl	8005740 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e08:	f001 fde4 	bl	80069d4 <vPortEnterCritical>
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e18:	d103      	bne.n	8004e22 <xQueueReceive+0x122>
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e28:	b25b      	sxtb	r3, r3
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e2e:	d103      	bne.n	8004e38 <xQueueReceive+0x138>
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e38:	f001 fdfc 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e3c:	1d3a      	adds	r2, r7, #4
 8004e3e:	f107 0310 	add.w	r3, r7, #16
 8004e42:	4611      	mov	r1, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 ff1f 	bl	8005c88 <xTaskCheckForTimeOut>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d123      	bne.n	8004e98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e52:	f000 f917 	bl	8005084 <prvIsQueueEmpty>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d017      	beq.n	8004e8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	3324      	adds	r3, #36	; 0x24
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fe45 	bl	8005af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e6c:	f000 f8b8 	bl	8004fe0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e70:	f000 fc74 	bl	800575c <xTaskResumeAll>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d189      	bne.n	8004d8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <xQueueReceive+0x1bc>)
 8004e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	e780      	b.n	8004d8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8e:	f000 f8a7 	bl	8004fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e92:	f000 fc63 	bl	800575c <xTaskResumeAll>
 8004e96:	e77a      	b.n	8004d8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9a:	f000 f8a1 	bl	8004fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e9e:	f000 fc5d 	bl	800575c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea4:	f000 f8ee 	bl	8005084 <prvIsQueueEmpty>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f43f af6f 	beq.w	8004d8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3730      	adds	r7, #48	; 0x30
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10d      	bne.n	8004efa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d14d      	bne.n	8004f82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 f834 	bl	8005f58 <xTaskPriorityDisinherit>
 8004ef0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	609a      	str	r2, [r3, #8]
 8004ef8:	e043      	b.n	8004f82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d119      	bne.n	8004f34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6858      	ldr	r0, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	f002 f918 	bl	8007140 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	441a      	add	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d32b      	bcc.n	8004f82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	e026      	b.n	8004f82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68d8      	ldr	r0, [r3, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	f002 f8fe 	bl	8007140 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	425b      	negs	r3, r3
 8004f4e:	441a      	add	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d207      	bcs.n	8004f70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	425b      	negs	r3, r3
 8004f6a:	441a      	add	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d105      	bne.n	8004f82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f8a:	697b      	ldr	r3, [r7, #20]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d018      	beq.n	8004fd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	441a      	add	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d303      	bcc.n	8004fc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68d9      	ldr	r1, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6838      	ldr	r0, [r7, #0]
 8004fd4:	f002 f8b4 	bl	8007140 <memcpy>
	}
}
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fe8:	f001 fcf4 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ff4:	e011      	b.n	800501a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d012      	beq.n	8005024 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3324      	adds	r3, #36	; 0x24
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fdc6 	bl	8005b94 <xTaskRemoveFromEventList>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800500e:	f000 fe9d 	bl	8005d4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	3b01      	subs	r3, #1
 8005016:	b2db      	uxtb	r3, r3
 8005018:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800501a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	dce9      	bgt.n	8004ff6 <prvUnlockQueue+0x16>
 8005022:	e000      	b.n	8005026 <prvUnlockQueue+0x46>
					break;
 8005024:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	22ff      	movs	r2, #255	; 0xff
 800502a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800502e:	f001 fd01 	bl	8006a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005032:	f001 fccf 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800503c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800503e:	e011      	b.n	8005064 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d012      	beq.n	800506e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3310      	adds	r3, #16
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fda1 	bl	8005b94 <xTaskRemoveFromEventList>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005058:	f000 fe78 	bl	8005d4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800505c:	7bbb      	ldrb	r3, [r7, #14]
 800505e:	3b01      	subs	r3, #1
 8005060:	b2db      	uxtb	r3, r3
 8005062:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005068:	2b00      	cmp	r3, #0
 800506a:	dce9      	bgt.n	8005040 <prvUnlockQueue+0x60>
 800506c:	e000      	b.n	8005070 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800506e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	22ff      	movs	r2, #255	; 0xff
 8005074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005078:	f001 fcdc 	bl	8006a34 <vPortExitCritical>
}
 800507c:	bf00      	nop
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800508c:	f001 fca2 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e001      	b.n	80050a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050a2:	f001 fcc7 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 80050a6:	68fb      	ldr	r3, [r7, #12]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050b8:	f001 fc8c 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d102      	bne.n	80050ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	e001      	b.n	80050d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050d2:	f001 fcaf 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 80050d6:	68fb      	ldr	r3, [r7, #12]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e014      	b.n	800511a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050f0:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <vQueueAddToRegistry+0x50>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050fc:	490c      	ldr	r1, [pc, #48]	; (8005130 <vQueueAddToRegistry+0x50>)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005106:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <vQueueAddToRegistry+0x50>)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005112:	e006      	b.n	8005122 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b07      	cmp	r3, #7
 800511e:	d9e7      	bls.n	80050f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000918 	.word	0x20000918

08005134 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005144:	f001 fc46 	bl	80069d4 <vPortEnterCritical>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800514e:	b25b      	sxtb	r3, r3
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005154:	d103      	bne.n	800515e <vQueueWaitForMessageRestricted+0x2a>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005164:	b25b      	sxtb	r3, r3
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800516a:	d103      	bne.n	8005174 <vQueueWaitForMessageRestricted+0x40>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005174:	f001 fc5e 	bl	8006a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	3324      	adds	r3, #36	; 0x24
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fcd7 	bl	8005b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800518e:	6978      	ldr	r0, [r7, #20]
 8005190:	f7ff ff26 	bl	8004fe0 <prvUnlockQueue>
	}
 8005194:	bf00      	nop
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08e      	sub	sp, #56	; 0x38
 80051a0:	af04      	add	r7, sp, #16
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	623b      	str	r3, [r7, #32]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	61fb      	str	r3, [r7, #28]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051e2:	23a8      	movs	r3, #168	; 0xa8
 80051e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2ba8      	cmp	r3, #168	; 0xa8
 80051ea:	d00a      	beq.n	8005202 <xTaskCreateStatic+0x66>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	61bb      	str	r3, [r7, #24]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005202:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01e      	beq.n	8005248 <xTaskCreateStatic+0xac>
 800520a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01b      	beq.n	8005248 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005218:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	2202      	movs	r2, #2
 800521e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005222:	2300      	movs	r3, #0
 8005224:	9303      	str	r3, [sp, #12]
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	9302      	str	r3, [sp, #8]
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f850 	bl	80052e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005242:	f000 f8f3 	bl	800542c <prvAddNewTaskToReadyList>
 8005246:	e001      	b.n	800524c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800524c:	697b      	ldr	r3, [r7, #20]
	}
 800524e:	4618      	mov	r0, r3
 8005250:	3728      	adds	r7, #40	; 0x28
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005256:	b580      	push	{r7, lr}
 8005258:	b08c      	sub	sp, #48	; 0x30
 800525a:	af04      	add	r7, sp, #16
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4618      	mov	r0, r3
 800526c:	f001 fcd4 	bl	8006c18 <pvPortMalloc>
 8005270:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00e      	beq.n	8005296 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005278:	20a8      	movs	r0, #168	; 0xa8
 800527a:	f001 fccd 	bl	8006c18 <pvPortMalloc>
 800527e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	631a      	str	r2, [r3, #48]	; 0x30
 800528c:	e005      	b.n	800529a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800528e:	6978      	ldr	r0, [r7, #20]
 8005290:	f001 fd8e 	bl	8006db0 <vPortFree>
 8005294:	e001      	b.n	800529a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d017      	beq.n	80052d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	2300      	movs	r3, #0
 80052ac:	9303      	str	r3, [sp, #12]
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	9302      	str	r3, [sp, #8]
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f80e 	bl	80052e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052c4:	69f8      	ldr	r0, [r7, #28]
 80052c6:	f000 f8b1 	bl	800542c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052ca:	2301      	movs	r3, #1
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e002      	b.n	80052d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052d6:	69bb      	ldr	r3, [r7, #24]
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	3720      	adds	r7, #32
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	461a      	mov	r2, r3
 80052f8:	21a5      	movs	r1, #165	; 0xa5
 80052fa:	f001 fe97 	bl	800702c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005308:	3b01      	subs	r3, #1
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f023 0307 	bic.w	r3, r3, #7
 8005316:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	617b      	str	r3, [r7, #20]
}
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01f      	beq.n	800537e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	e012      	b.n	800536a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	7819      	ldrb	r1, [r3, #0]
 800534c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	3334      	adds	r3, #52	; 0x34
 8005354:	460a      	mov	r2, r1
 8005356:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d006      	beq.n	8005372 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	3301      	adds	r3, #1
 8005368:	61fb      	str	r3, [r7, #28]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2b0f      	cmp	r3, #15
 800536e:	d9e9      	bls.n	8005344 <prvInitialiseNewTask+0x64>
 8005370:	e000      	b.n	8005374 <prvInitialiseNewTask+0x94>
			{
				break;
 8005372:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800537c:	e003      	b.n	8005386 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	2b37      	cmp	r3, #55	; 0x37
 800538a:	d901      	bls.n	8005390 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800538c:	2337      	movs	r3, #55	; 0x37
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005394:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800539a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	2200      	movs	r2, #0
 80053a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	3304      	adds	r3, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff f8f2 	bl	8004590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	3318      	adds	r3, #24
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff f8ed 	bl	8004590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	3354      	adds	r3, #84	; 0x54
 80053e0:	224c      	movs	r2, #76	; 0x4c
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 fe21 	bl	800702c <memset>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	4a0c      	ldr	r2, [pc, #48]	; (8005420 <prvInitialiseNewTask+0x140>)
 80053ee:	659a      	str	r2, [r3, #88]	; 0x58
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	4a0c      	ldr	r2, [pc, #48]	; (8005424 <prvInitialiseNewTask+0x144>)
 80053f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <prvInitialiseNewTask+0x148>)
 80053fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	69b8      	ldr	r0, [r7, #24]
 8005402:	f001 f9b9 	bl	8006778 <pxPortInitialiseStack>
 8005406:	4602      	mov	r2, r0
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005416:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005418:	bf00      	nop
 800541a:	3720      	adds	r7, #32
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20002334 	.word	0x20002334
 8005424:	2000239c 	.word	0x2000239c
 8005428:	20002404 	.word	0x20002404

0800542c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005434:	f001 face 	bl	80069d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005438:	4b2d      	ldr	r3, [pc, #180]	; (80054f0 <prvAddNewTaskToReadyList+0xc4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <prvAddNewTaskToReadyList+0xc4>)
 8005440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005442:	4b2c      	ldr	r3, [pc, #176]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800544a:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005450:	4b27      	ldr	r3, [pc, #156]	; (80054f0 <prvAddNewTaskToReadyList+0xc4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d110      	bne.n	800547a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005458:	f000 fc9e 	bl	8005d98 <prvInitialiseTaskLists>
 800545c:	e00d      	b.n	800547a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <prvAddNewTaskToReadyList+0xcc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005466:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	429a      	cmp	r2, r3
 8005472:	d802      	bhi.n	800547a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005474:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800547a:	4b20      	ldr	r3, [pc, #128]	; (80054fc <prvAddNewTaskToReadyList+0xd0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <prvAddNewTaskToReadyList+0xd0>)
 8005482:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005484:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <prvAddNewTaskToReadyList+0xd0>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <prvAddNewTaskToReadyList+0xd4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d903      	bls.n	80054a0 <prvAddNewTaskToReadyList+0x74>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	4a18      	ldr	r2, [pc, #96]	; (8005500 <prvAddNewTaskToReadyList+0xd4>)
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <prvAddNewTaskToReadyList+0xd8>)
 80054ae:	441a      	add	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f7ff f877 	bl	80045aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054bc:	f001 faba 	bl	8006a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054c0:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <prvAddNewTaskToReadyList+0xcc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00e      	beq.n	80054e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d207      	bcs.n	80054e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <prvAddNewTaskToReadyList+0xdc>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000e2c 	.word	0x20000e2c
 80054f4:	20000958 	.word	0x20000958
 80054f8:	20000e38 	.word	0x20000e38
 80054fc:	20000e48 	.word	0x20000e48
 8005500:	20000e34 	.word	0x20000e34
 8005504:	2000095c 	.word	0x2000095c
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d017      	beq.n	800554e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <vTaskDelay+0x60>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <vTaskDelay+0x30>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60bb      	str	r3, [r7, #8]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800553c:	f000 f900 	bl	8005740 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005540:	2100      	movs	r1, #0
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fd76 	bl	8006034 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005548:	f000 f908 	bl	800575c <xTaskResumeAll>
 800554c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <vTaskDelay+0x64>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000e54 	.word	0x20000e54
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800557c:	f001 fa2a 	bl	80069d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <vTaskSuspend+0x18>
 8005586:	4b30      	ldr	r3, [pc, #192]	; (8005648 <vTaskSuspend+0xd4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	e000      	b.n	800558e <vTaskSuspend+0x1a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3304      	adds	r3, #4
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff f865 	bl	8004664 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3318      	adds	r3, #24
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff f85c 	bl	8004664 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4826      	ldr	r0, [pc, #152]	; (800564c <vTaskSuspend+0xd8>)
 80055b4:	f7fe fff9 	bl	80045aa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d103      	bne.n	80055cc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80055cc:	f001 fa32 	bl	8006a34 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80055d0:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <vTaskSuspend+0xdc>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80055d8:	f001 f9fc 	bl	80069d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80055dc:	f000 fc7e 	bl	8005edc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80055e0:	f001 fa28 	bl	8006a34 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80055e4:	4b18      	ldr	r3, [pc, #96]	; (8005648 <vTaskSuspend+0xd4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d127      	bne.n	800563e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80055ee:	4b18      	ldr	r3, [pc, #96]	; (8005650 <vTaskSuspend+0xdc>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d017      	beq.n	8005626 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80055f6:	4b17      	ldr	r3, [pc, #92]	; (8005654 <vTaskSuspend+0xe0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <vTaskSuspend+0xa0>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	60bb      	str	r3, [r7, #8]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005614:	4b10      	ldr	r3, [pc, #64]	; (8005658 <vTaskSuspend+0xe4>)
 8005616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005624:	e00b      	b.n	800563e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005626:	4b09      	ldr	r3, [pc, #36]	; (800564c <vTaskSuspend+0xd8>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b0c      	ldr	r3, [pc, #48]	; (800565c <vTaskSuspend+0xe8>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d103      	bne.n	800563a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8005632:	4b05      	ldr	r3, [pc, #20]	; (8005648 <vTaskSuspend+0xd4>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
	}
 8005638:	e001      	b.n	800563e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800563a:	f000 f9f7 	bl	8005a2c <vTaskSwitchContext>
	}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000958 	.word	0x20000958
 800564c:	20000e18 	.word	0x20000e18
 8005650:	20000e38 	.word	0x20000e38
 8005654:	20000e54 	.word	0x20000e54
 8005658:	e000ed04 	.word	0xe000ed04
 800565c:	20000e2c 	.word	0x20000e2c

08005660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800566e:	463a      	mov	r2, r7
 8005670:	1d39      	adds	r1, r7, #4
 8005672:	f107 0308 	add.w	r3, r7, #8
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe ff36 	bl	80044e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	9202      	str	r2, [sp, #8]
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	2300      	movs	r3, #0
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	2300      	movs	r3, #0
 800568c:	460a      	mov	r2, r1
 800568e:	4924      	ldr	r1, [pc, #144]	; (8005720 <vTaskStartScheduler+0xc0>)
 8005690:	4824      	ldr	r0, [pc, #144]	; (8005724 <vTaskStartScheduler+0xc4>)
 8005692:	f7ff fd83 	bl	800519c <xTaskCreateStatic>
 8005696:	4603      	mov	r3, r0
 8005698:	4a23      	ldr	r2, [pc, #140]	; (8005728 <vTaskStartScheduler+0xc8>)
 800569a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800569c:	4b22      	ldr	r3, [pc, #136]	; (8005728 <vTaskStartScheduler+0xc8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056a4:	2301      	movs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e001      	b.n	80056ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d102      	bne.n	80056ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056b4:	f000 fd12 	bl	80060dc <xTimerCreateTimerTask>
 80056b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d11b      	bne.n	80056f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	613b      	str	r3, [r7, #16]
}
 80056d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056d4:	4b15      	ldr	r3, [pc, #84]	; (800572c <vTaskStartScheduler+0xcc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3354      	adds	r3, #84	; 0x54
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <vTaskStartScheduler+0xd0>)
 80056dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056de:	4b15      	ldr	r3, [pc, #84]	; (8005734 <vTaskStartScheduler+0xd4>)
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <vTaskStartScheduler+0xd8>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056ec:	4b13      	ldr	r3, [pc, #76]	; (800573c <vTaskStartScheduler+0xdc>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056f2:	f001 f8cd 	bl	8006890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056f6:	e00e      	b.n	8005716 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056fe:	d10a      	bne.n	8005716 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	60fb      	str	r3, [r7, #12]
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <vTaskStartScheduler+0xb4>
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	08007b24 	.word	0x08007b24
 8005724:	08005d65 	.word	0x08005d65
 8005728:	20000e50 	.word	0x20000e50
 800572c:	20000958 	.word	0x20000958
 8005730:	2000005c 	.word	0x2000005c
 8005734:	20000e4c 	.word	0x20000e4c
 8005738:	20000e38 	.word	0x20000e38
 800573c:	20000e30 	.word	0x20000e30

08005740 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <vTaskSuspendAll+0x18>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	4a03      	ldr	r2, [pc, #12]	; (8005758 <vTaskSuspendAll+0x18>)
 800574c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	20000e54 	.word	0x20000e54

0800575c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800576a:	4b42      	ldr	r3, [pc, #264]	; (8005874 <xTaskResumeAll+0x118>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <xTaskResumeAll+0x2c>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	603b      	str	r3, [r7, #0]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005788:	f001 f924 	bl	80069d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800578c:	4b39      	ldr	r3, [pc, #228]	; (8005874 <xTaskResumeAll+0x118>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3b01      	subs	r3, #1
 8005792:	4a38      	ldr	r2, [pc, #224]	; (8005874 <xTaskResumeAll+0x118>)
 8005794:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005796:	4b37      	ldr	r3, [pc, #220]	; (8005874 <xTaskResumeAll+0x118>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d162      	bne.n	8005864 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800579e:	4b36      	ldr	r3, [pc, #216]	; (8005878 <xTaskResumeAll+0x11c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d05e      	beq.n	8005864 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057a6:	e02f      	b.n	8005808 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a8:	4b34      	ldr	r3, [pc, #208]	; (800587c <xTaskResumeAll+0x120>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3318      	adds	r3, #24
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe ff55 	bl	8004664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3304      	adds	r3, #4
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe ff50 	bl	8004664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c8:	4b2d      	ldr	r3, [pc, #180]	; (8005880 <xTaskResumeAll+0x124>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d903      	bls.n	80057d8 <xTaskResumeAll+0x7c>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	4a2a      	ldr	r2, [pc, #168]	; (8005880 <xTaskResumeAll+0x124>)
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	4613      	mov	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4a27      	ldr	r2, [pc, #156]	; (8005884 <xTaskResumeAll+0x128>)
 80057e6:	441a      	add	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe fedb 	bl	80045aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4b23      	ldr	r3, [pc, #140]	; (8005888 <xTaskResumeAll+0x12c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <xTaskResumeAll+0x130>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005808:	4b1c      	ldr	r3, [pc, #112]	; (800587c <xTaskResumeAll+0x120>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1cb      	bne.n	80057a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005816:	f000 fb61 	bl	8005edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800581a:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <xTaskResumeAll+0x134>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d010      	beq.n	8005848 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005826:	f000 f847 	bl	80058b8 <xTaskIncrementTick>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005830:	4b16      	ldr	r3, [pc, #88]	; (800588c <xTaskResumeAll+0x130>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3b01      	subs	r3, #1
 800583a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f1      	bne.n	8005826 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005842:	4b13      	ldr	r3, [pc, #76]	; (8005890 <xTaskResumeAll+0x134>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005848:	4b10      	ldr	r3, [pc, #64]	; (800588c <xTaskResumeAll+0x130>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <xTaskResumeAll+0x138>)
 8005856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005864:	f001 f8e6 	bl	8006a34 <vPortExitCritical>

	return xAlreadyYielded;
 8005868:	68bb      	ldr	r3, [r7, #8]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000e54 	.word	0x20000e54
 8005878:	20000e2c 	.word	0x20000e2c
 800587c:	20000dec 	.word	0x20000dec
 8005880:	20000e34 	.word	0x20000e34
 8005884:	2000095c 	.word	0x2000095c
 8005888:	20000958 	.word	0x20000958
 800588c:	20000e40 	.word	0x20000e40
 8005890:	20000e3c 	.word	0x20000e3c
 8005894:	e000ed04 	.word	0xe000ed04

08005898 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800589e:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <xTaskGetTickCount+0x1c>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058a4:	687b      	ldr	r3, [r7, #4]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20000e30 	.word	0x20000e30

080058b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c2:	4b4f      	ldr	r3, [pc, #316]	; (8005a00 <xTaskIncrementTick+0x148>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f040 808f 	bne.w	80059ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058cc:	4b4d      	ldr	r3, [pc, #308]	; (8005a04 <xTaskIncrementTick+0x14c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058d4:	4a4b      	ldr	r2, [pc, #300]	; (8005a04 <xTaskIncrementTick+0x14c>)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d120      	bne.n	8005922 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058e0:	4b49      	ldr	r3, [pc, #292]	; (8005a08 <xTaskIncrementTick+0x150>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <xTaskIncrementTick+0x48>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	603b      	str	r3, [r7, #0]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xTaskIncrementTick+0x46>
 8005900:	4b41      	ldr	r3, [pc, #260]	; (8005a08 <xTaskIncrementTick+0x150>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <xTaskIncrementTick+0x154>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3f      	ldr	r2, [pc, #252]	; (8005a08 <xTaskIncrementTick+0x150>)
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	4a3f      	ldr	r2, [pc, #252]	; (8005a0c <xTaskIncrementTick+0x154>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	4b3e      	ldr	r3, [pc, #248]	; (8005a10 <xTaskIncrementTick+0x158>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	4a3d      	ldr	r2, [pc, #244]	; (8005a10 <xTaskIncrementTick+0x158>)
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	f000 fadd 	bl	8005edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005922:	4b3c      	ldr	r3, [pc, #240]	; (8005a14 <xTaskIncrementTick+0x15c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	429a      	cmp	r2, r3
 800592a:	d349      	bcc.n	80059c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800592c:	4b36      	ldr	r3, [pc, #216]	; (8005a08 <xTaskIncrementTick+0x150>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d104      	bne.n	8005940 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005936:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <xTaskIncrementTick+0x15c>)
 8005938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800593c:	601a      	str	r2, [r3, #0]
					break;
 800593e:	e03f      	b.n	80059c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005940:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <xTaskIncrementTick+0x150>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d203      	bcs.n	8005960 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005958:	4a2e      	ldr	r2, [pc, #184]	; (8005a14 <xTaskIncrementTick+0x15c>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800595e:	e02f      	b.n	80059c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3304      	adds	r3, #4
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe fe7d 	bl	8004664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3318      	adds	r3, #24
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fe74 	bl	8004664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <xTaskIncrementTick+0x160>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d903      	bls.n	8005990 <xTaskIncrementTick+0xd8>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <xTaskIncrementTick+0x160>)
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <xTaskIncrementTick+0x164>)
 800599e:	441a      	add	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4619      	mov	r1, r3
 80059a6:	4610      	mov	r0, r2
 80059a8:	f7fe fdff 	bl	80045aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <xTaskIncrementTick+0x168>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d3b8      	bcc.n	800592c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059ba:	2301      	movs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059be:	e7b5      	b.n	800592c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <xTaskIncrementTick+0x168>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	4915      	ldr	r1, [pc, #84]	; (8005a1c <xTaskIncrementTick+0x164>)
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d901      	bls.n	80059dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059dc:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <xTaskIncrementTick+0x16c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d007      	beq.n	80059f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059e4:	2301      	movs	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e004      	b.n	80059f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059ea:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <xTaskIncrementTick+0x170>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3301      	adds	r3, #1
 80059f0:	4a0d      	ldr	r2, [pc, #52]	; (8005a28 <xTaskIncrementTick+0x170>)
 80059f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059f4:	697b      	ldr	r3, [r7, #20]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000e54 	.word	0x20000e54
 8005a04:	20000e30 	.word	0x20000e30
 8005a08:	20000de4 	.word	0x20000de4
 8005a0c:	20000de8 	.word	0x20000de8
 8005a10:	20000e44 	.word	0x20000e44
 8005a14:	20000e4c 	.word	0x20000e4c
 8005a18:	20000e34 	.word	0x20000e34
 8005a1c:	2000095c 	.word	0x2000095c
 8005a20:	20000958 	.word	0x20000958
 8005a24:	20000e40 	.word	0x20000e40
 8005a28:	20000e3c 	.word	0x20000e3c

08005a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a32:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <vTaskSwitchContext+0xb0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a3a:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <vTaskSwitchContext+0xb4>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a40:	e046      	b.n	8005ad0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a42:	4b27      	ldr	r3, [pc, #156]	; (8005ae0 <vTaskSwitchContext+0xb4>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a48:	4b26      	ldr	r3, [pc, #152]	; (8005ae4 <vTaskSwitchContext+0xb8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e010      	b.n	8005a72 <vTaskSwitchContext+0x46>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10a      	bne.n	8005a6c <vTaskSwitchContext+0x40>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	607b      	str	r3, [r7, #4]
}
 8005a68:	bf00      	nop
 8005a6a:	e7fe      	b.n	8005a6a <vTaskSwitchContext+0x3e>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	491d      	ldr	r1, [pc, #116]	; (8005ae8 <vTaskSwitchContext+0xbc>)
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0e4      	beq.n	8005a50 <vTaskSwitchContext+0x24>
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <vTaskSwitchContext+0xbc>)
 8005a92:	4413      	add	r3, r2
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	605a      	str	r2, [r3, #4]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d104      	bne.n	8005ab6 <vTaskSwitchContext+0x8a>
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a0b      	ldr	r2, [pc, #44]	; (8005aec <vTaskSwitchContext+0xc0>)
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <vTaskSwitchContext+0xb8>)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ac6:	4b09      	ldr	r3, [pc, #36]	; (8005aec <vTaskSwitchContext+0xc0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3354      	adds	r3, #84	; 0x54
 8005acc:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <vTaskSwitchContext+0xc4>)
 8005ace:	6013      	str	r3, [r2, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	20000e54 	.word	0x20000e54
 8005ae0:	20000e40 	.word	0x20000e40
 8005ae4:	20000e34 	.word	0x20000e34
 8005ae8:	2000095c 	.word	0x2000095c
 8005aec:	20000958 	.word	0x20000958
 8005af0:	2000005c 	.word	0x2000005c

08005af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	60fb      	str	r3, [r7, #12]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b1a:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <vTaskPlaceOnEventList+0x44>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3318      	adds	r3, #24
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fe fd65 	bl	80045f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b28:	2101      	movs	r1, #1
 8005b2a:	6838      	ldr	r0, [r7, #0]
 8005b2c:	f000 fa82 	bl	8006034 <prvAddCurrentTaskToDelayedList>
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000958 	.word	0x20000958

08005b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	617b      	str	r3, [r7, #20]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b64:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3318      	adds	r3, #24
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f7fe fd1c 	bl	80045aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	68b8      	ldr	r0, [r7, #8]
 8005b82:	f000 fa57 	bl	8006034 <prvAddCurrentTaskToDelayedList>
	}
 8005b86:	bf00      	nop
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000958 	.word	0x20000958

08005b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	60fb      	str	r3, [r7, #12]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	3318      	adds	r3, #24
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe fd4d 	bl	8004664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bca:	4b1e      	ldr	r3, [pc, #120]	; (8005c44 <xTaskRemoveFromEventList+0xb0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d11d      	bne.n	8005c0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fd44 	bl	8004664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be0:	4b19      	ldr	r3, [pc, #100]	; (8005c48 <xTaskRemoveFromEventList+0xb4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d903      	bls.n	8005bf0 <xTaskRemoveFromEventList+0x5c>
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <xTaskRemoveFromEventList+0xb4>)
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <xTaskRemoveFromEventList+0xb8>)
 8005bfe:	441a      	add	r2, r3
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	4610      	mov	r0, r2
 8005c08:	f7fe fccf 	bl	80045aa <vListInsertEnd>
 8005c0c:	e005      	b.n	8005c1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	3318      	adds	r3, #24
 8005c12:	4619      	mov	r1, r3
 8005c14:	480e      	ldr	r0, [pc, #56]	; (8005c50 <xTaskRemoveFromEventList+0xbc>)
 8005c16:	f7fe fcc8 	bl	80045aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <xTaskRemoveFromEventList+0xc0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d905      	bls.n	8005c34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <xTaskRemoveFromEventList+0xc4>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e001      	b.n	8005c38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c38:	697b      	ldr	r3, [r7, #20]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000e54 	.word	0x20000e54
 8005c48:	20000e34 	.word	0x20000e34
 8005c4c:	2000095c 	.word	0x2000095c
 8005c50:	20000dec 	.word	0x20000dec
 8005c54:	20000958 	.word	0x20000958
 8005c58:	20000e40 	.word	0x20000e40

08005c5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <vTaskInternalSetTimeOutState+0x24>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <vTaskInternalSetTimeOutState+0x28>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	605a      	str	r2, [r3, #4]
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	20000e44 	.word	0x20000e44
 8005c84:	20000e30 	.word	0x20000e30

08005c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	613b      	str	r3, [r7, #16]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	60fb      	str	r3, [r7, #12]
}
 8005cc6:	bf00      	nop
 8005cc8:	e7fe      	b.n	8005cc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cca:	f000 fe83 	bl	80069d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cce:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <xTaskCheckForTimeOut+0xbc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce6:	d102      	bne.n	8005cee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	e023      	b.n	8005d36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <xTaskCheckForTimeOut+0xc0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d007      	beq.n	8005d0a <xTaskCheckForTimeOut+0x82>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d302      	bcc.n	8005d0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d04:	2301      	movs	r3, #1
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	e015      	b.n	8005d36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d20b      	bcs.n	8005d2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1ad2      	subs	r2, r2, r3
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff ff9b 	bl	8005c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	e004      	b.n	8005d36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d32:	2301      	movs	r3, #1
 8005d34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d36:	f000 fe7d 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000e30 	.word	0x20000e30
 8005d48:	20000e44 	.word	0x20000e44

08005d4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d50:	4b03      	ldr	r3, [pc, #12]	; (8005d60 <vTaskMissedYield+0x14>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
}
 8005d56:	bf00      	nop
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	20000e40 	.word	0x20000e40

08005d64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d6c:	f000 f854 	bl	8005e18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d70:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <prvIdleTask+0x2c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d907      	bls.n	8005d88 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <prvIdleTask+0x30>)
 8005d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005d88:	f7fa fbf0 	bl	800056c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005d8c:	e7ee      	b.n	8005d6c <prvIdleTask+0x8>
 8005d8e:	bf00      	nop
 8005d90:	2000095c 	.word	0x2000095c
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d9e:	2300      	movs	r3, #0
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	e00c      	b.n	8005dbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <prvInitialiseTaskLists+0x60>)
 8005db0:	4413      	add	r3, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fbcc 	bl	8004550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	607b      	str	r3, [r7, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b37      	cmp	r3, #55	; 0x37
 8005dc2:	d9ef      	bls.n	8005da4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dc4:	480d      	ldr	r0, [pc, #52]	; (8005dfc <prvInitialiseTaskLists+0x64>)
 8005dc6:	f7fe fbc3 	bl	8004550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dca:	480d      	ldr	r0, [pc, #52]	; (8005e00 <prvInitialiseTaskLists+0x68>)
 8005dcc:	f7fe fbc0 	bl	8004550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dd0:	480c      	ldr	r0, [pc, #48]	; (8005e04 <prvInitialiseTaskLists+0x6c>)
 8005dd2:	f7fe fbbd 	bl	8004550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dd6:	480c      	ldr	r0, [pc, #48]	; (8005e08 <prvInitialiseTaskLists+0x70>)
 8005dd8:	f7fe fbba 	bl	8004550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ddc:	480b      	ldr	r0, [pc, #44]	; (8005e0c <prvInitialiseTaskLists+0x74>)
 8005dde:	f7fe fbb7 	bl	8004550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <prvInitialiseTaskLists+0x78>)
 8005de4:	4a05      	ldr	r2, [pc, #20]	; (8005dfc <prvInitialiseTaskLists+0x64>)
 8005de6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <prvInitialiseTaskLists+0x7c>)
 8005dea:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <prvInitialiseTaskLists+0x68>)
 8005dec:	601a      	str	r2, [r3, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	2000095c 	.word	0x2000095c
 8005dfc:	20000dbc 	.word	0x20000dbc
 8005e00:	20000dd0 	.word	0x20000dd0
 8005e04:	20000dec 	.word	0x20000dec
 8005e08:	20000e00 	.word	0x20000e00
 8005e0c:	20000e18 	.word	0x20000e18
 8005e10:	20000de4 	.word	0x20000de4
 8005e14:	20000de8 	.word	0x20000de8

08005e18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e1e:	e019      	b.n	8005e54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e20:	f000 fdd8 	bl	80069d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e24:	4b10      	ldr	r3, [pc, #64]	; (8005e68 <prvCheckTasksWaitingTermination+0x50>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fc17 	bl	8004664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <prvCheckTasksWaitingTermination+0x54>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	4a0b      	ldr	r2, [pc, #44]	; (8005e6c <prvCheckTasksWaitingTermination+0x54>)
 8005e3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <prvCheckTasksWaitingTermination+0x58>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <prvCheckTasksWaitingTermination+0x58>)
 8005e48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e4a:	f000 fdf3 	bl	8006a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f810 	bl	8005e74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <prvCheckTasksWaitingTermination+0x58>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e1      	bne.n	8005e20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000e00 	.word	0x20000e00
 8005e6c:	20000e2c 	.word	0x20000e2c
 8005e70:	20000e14 	.word	0x20000e14

08005e74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3354      	adds	r3, #84	; 0x54
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 f8db 	bl	800703c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 ff8b 	bl	8006db0 <vPortFree>
				vPortFree( pxTCB );
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 ff88 	bl	8006db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ea0:	e018      	b.n	8005ed4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d103      	bne.n	8005eb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 ff7f 	bl	8006db0 <vPortFree>
	}
 8005eb2:	e00f      	b.n	8005ed4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d00a      	beq.n	8005ed4 <prvDeleteTCB+0x60>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	60fb      	str	r3, [r7, #12]
}
 8005ed0:	bf00      	nop
 8005ed2:	e7fe      	b.n	8005ed2 <prvDeleteTCB+0x5e>
	}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	; (8005f14 <prvResetNextTaskUnblockTime+0x38>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <prvResetNextTaskUnblockTime+0x3c>)
 8005eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ef4:	e008      	b.n	8005f08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <prvResetNextTaskUnblockTime+0x38>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <prvResetNextTaskUnblockTime+0x3c>)
 8005f06:	6013      	str	r3, [r2, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	20000de4 	.word	0x20000de4
 8005f18:	20000e4c 	.word	0x20000e4c

08005f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f22:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <xTaskGetSchedulerState+0x34>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	e008      	b.n	8005f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <xTaskGetSchedulerState+0x38>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	e001      	b.n	8005f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f42:	687b      	ldr	r3, [r7, #4]
	}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000e38 	.word	0x20000e38
 8005f54:	20000e54 	.word	0x20000e54

08005f58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d056      	beq.n	800601c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <xTaskPriorityDisinherit+0xd0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d00a      	beq.n	8005f8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	60fb      	str	r3, [r7, #12]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	60bb      	str	r3, [r7, #8]
}
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb0:	1e5a      	subs	r2, r3, #1
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d02c      	beq.n	800601c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d128      	bne.n	800601c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fb48 	bl	8004664 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fec:	4b0f      	ldr	r3, [pc, #60]	; (800602c <xTaskPriorityDisinherit+0xd4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d903      	bls.n	8005ffc <xTaskPriorityDisinherit+0xa4>
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	; (800602c <xTaskPriorityDisinherit+0xd4>)
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <xTaskPriorityDisinherit+0xd8>)
 800600a:	441a      	add	r2, r3
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f7fe fac9 	bl	80045aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800601c:	697b      	ldr	r3, [r7, #20]
	}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000958 	.word	0x20000958
 800602c:	20000e34 	.word	0x20000e34
 8006030:	2000095c 	.word	0x2000095c

08006034 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800603e:	4b21      	ldr	r3, [pc, #132]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006044:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3304      	adds	r3, #4
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fb0a 	bl	8004664 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006056:	d10a      	bne.n	800606e <prvAddCurrentTaskToDelayedList+0x3a>
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800605e:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3304      	adds	r3, #4
 8006064:	4619      	mov	r1, r3
 8006066:	4819      	ldr	r0, [pc, #100]	; (80060cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006068:	f7fe fa9f 	bl	80045aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800606c:	e026      	b.n	80060bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4413      	add	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	429a      	cmp	r2, r3
 8006084:	d209      	bcs.n	800609a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006086:	4b12      	ldr	r3, [pc, #72]	; (80060d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3304      	adds	r3, #4
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f7fe faad 	bl	80045f2 <vListInsert>
}
 8006098:	e010      	b.n	80060bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800609a:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fe faa3 	bl	80045f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060ac:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d202      	bcs.n	80060bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060b6:	4a08      	ldr	r2, [pc, #32]	; (80060d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6013      	str	r3, [r2, #0]
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	20000e30 	.word	0x20000e30
 80060c8:	20000958 	.word	0x20000958
 80060cc:	20000e18 	.word	0x20000e18
 80060d0:	20000de8 	.word	0x20000de8
 80060d4:	20000de4 	.word	0x20000de4
 80060d8:	20000e4c 	.word	0x20000e4c

080060dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060e6:	f000 fb07 	bl	80066f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ea:	4b1c      	ldr	r3, [pc, #112]	; (800615c <xTimerCreateTimerTask+0x80>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d021      	beq.n	8006136 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060fa:	1d3a      	adds	r2, r7, #4
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	f107 030c 	add.w	r3, r7, #12
 8006104:	4618      	mov	r0, r3
 8006106:	f7fe fa09 	bl	800451c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	9202      	str	r2, [sp, #8]
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	2302      	movs	r3, #2
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2300      	movs	r3, #0
 800611a:	460a      	mov	r2, r1
 800611c:	4910      	ldr	r1, [pc, #64]	; (8006160 <xTimerCreateTimerTask+0x84>)
 800611e:	4811      	ldr	r0, [pc, #68]	; (8006164 <xTimerCreateTimerTask+0x88>)
 8006120:	f7ff f83c 	bl	800519c <xTaskCreateStatic>
 8006124:	4603      	mov	r3, r0
 8006126:	4a10      	ldr	r2, [pc, #64]	; (8006168 <xTimerCreateTimerTask+0x8c>)
 8006128:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800612a:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <xTimerCreateTimerTask+0x8c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006132:	2301      	movs	r3, #1
 8006134:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	613b      	str	r3, [r7, #16]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006152:	697b      	ldr	r3, [r7, #20]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	20000e88 	.word	0x20000e88
 8006160:	08007b2c 	.word	0x08007b2c
 8006164:	080062a1 	.word	0x080062a1
 8006168:	20000e8c 	.word	0x20000e8c

0800616c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08a      	sub	sp, #40	; 0x28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800617a:	2300      	movs	r3, #0
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	623b      	str	r3, [r7, #32]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800619a:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <xTimerGenericCommand+0x98>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02a      	beq.n	80061f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b05      	cmp	r3, #5
 80061b2:	dc18      	bgt.n	80061e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061b4:	f7ff feb2 	bl	8005f1c <xTaskGetSchedulerState>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d109      	bne.n	80061d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <xTimerGenericCommand+0x98>)
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f107 0110 	add.w	r1, r7, #16
 80061c6:	2300      	movs	r3, #0
 80061c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ca:	f7fe fbff 	bl	80049cc <xQueueGenericSend>
 80061ce:	6278      	str	r0, [r7, #36]	; 0x24
 80061d0:	e012      	b.n	80061f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061d2:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <xTimerGenericCommand+0x98>)
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	f107 0110 	add.w	r1, r7, #16
 80061da:	2300      	movs	r3, #0
 80061dc:	2200      	movs	r2, #0
 80061de:	f7fe fbf5 	bl	80049cc <xQueueGenericSend>
 80061e2:	6278      	str	r0, [r7, #36]	; 0x24
 80061e4:	e008      	b.n	80061f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061e6:	4b07      	ldr	r3, [pc, #28]	; (8006204 <xTimerGenericCommand+0x98>)
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	f107 0110 	add.w	r1, r7, #16
 80061ee:	2300      	movs	r3, #0
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	f7fe fce9 	bl	8004bc8 <xQueueGenericSendFromISR>
 80061f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3728      	adds	r7, #40	; 0x28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000e88 	.word	0x20000e88

08006208 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af02      	add	r7, sp, #8
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006212:	4b22      	ldr	r3, [pc, #136]	; (800629c <prvProcessExpiredTimer+0x94>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3304      	adds	r3, #4
 8006220:	4618      	mov	r0, r3
 8006222:	f7fe fa1f 	bl	8004664 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d022      	beq.n	800627a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	18d1      	adds	r1, r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	6978      	ldr	r0, [r7, #20]
 8006242:	f000 f8d1 	bl	80063e8 <prvInsertTimerInActiveList>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d01f      	beq.n	800628c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800624c:	2300      	movs	r3, #0
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	2300      	movs	r3, #0
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	2100      	movs	r1, #0
 8006256:	6978      	ldr	r0, [r7, #20]
 8006258:	f7ff ff88 	bl	800616c <xTimerGenericCommand>
 800625c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d113      	bne.n	800628c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	60fb      	str	r3, [r7, #12]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	6978      	ldr	r0, [r7, #20]
 8006292:	4798      	blx	r3
}
 8006294:	bf00      	nop
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	20000e80 	.word	0x20000e80

080062a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f857 	bl	8006360 <prvGetNextExpireTime>
 80062b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4619      	mov	r1, r3
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f803 	bl	80062c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062be:	f000 f8d5 	bl	800646c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062c2:	e7f1      	b.n	80062a8 <prvTimerTask+0x8>

080062c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062ce:	f7ff fa37 	bl	8005740 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f866 	bl	80063a8 <prvSampleTimeNow>
 80062dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d130      	bne.n	8006346 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <prvProcessTimerOrBlockTask+0x3c>
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d806      	bhi.n	8006300 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062f2:	f7ff fa33 	bl	800575c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ff85 	bl	8006208 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062fe:	e024      	b.n	800634a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <prvProcessTimerOrBlockTask+0x90>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <prvProcessTimerOrBlockTask+0x50>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <prvProcessTimerOrBlockTask+0x52>
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <prvProcessTimerOrBlockTask+0x94>)
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	4619      	mov	r1, r3
 8006326:	f7fe ff05 	bl	8005134 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800632a:	f7ff fa17 	bl	800575c <xTaskResumeAll>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <prvProcessTimerOrBlockTask+0x98>)
 8006336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	f3bf 8f6f 	isb	sy
}
 8006344:	e001      	b.n	800634a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006346:	f7ff fa09 	bl	800575c <xTaskResumeAll>
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20000e84 	.word	0x20000e84
 8006358:	20000e88 	.word	0x20000e88
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006368:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <prvGetNextExpireTime+0x44>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <prvGetNextExpireTime+0x16>
 8006372:	2201      	movs	r2, #1
 8006374:	e000      	b.n	8006378 <prvGetNextExpireTime+0x18>
 8006376:	2200      	movs	r2, #0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <prvGetNextExpireTime+0x44>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e001      	b.n	8006394 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006394:	68fb      	ldr	r3, [r7, #12]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000e80 	.word	0x20000e80

080063a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063b0:	f7ff fa72 	bl	8005898 <xTaskGetTickCount>
 80063b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063b6:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <prvSampleTimeNow+0x3c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d205      	bcs.n	80063cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063c0:	f000 f936 	bl	8006630 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063d2:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <prvSampleTimeNow+0x3c>)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063d8:	68fb      	ldr	r3, [r7, #12]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	20000e90 	.word	0x20000e90

080063e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	429a      	cmp	r2, r3
 800640c:	d812      	bhi.n	8006434 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e01b      	b.n	800645a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006422:	4b10      	ldr	r3, [pc, #64]	; (8006464 <prvInsertTimerInActiveList+0x7c>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3304      	adds	r3, #4
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7fe f8e0 	bl	80045f2 <vListInsert>
 8006432:	e012      	b.n	800645a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d206      	bcs.n	800644a <prvInsertTimerInActiveList+0x62>
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	429a      	cmp	r2, r3
 8006442:	d302      	bcc.n	800644a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006444:	2301      	movs	r3, #1
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e007      	b.n	800645a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800644a:	4b07      	ldr	r3, [pc, #28]	; (8006468 <prvInsertTimerInActiveList+0x80>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fe f8cc 	bl	80045f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800645a:	697b      	ldr	r3, [r7, #20]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20000e84 	.word	0x20000e84
 8006468:	20000e80 	.word	0x20000e80

0800646c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08e      	sub	sp, #56	; 0x38
 8006470:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006472:	e0ca      	b.n	800660a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	da18      	bge.n	80064ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800647a:	1d3b      	adds	r3, r7, #4
 800647c:	3304      	adds	r3, #4
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	61fb      	str	r3, [r7, #28]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a2:	6850      	ldr	r0, [r2, #4]
 80064a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064a6:	6892      	ldr	r2, [r2, #8]
 80064a8:	4611      	mov	r1, r2
 80064aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f2c0 80ab 	blt.w	800660a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d004      	beq.n	80064ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	3304      	adds	r3, #4
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fe f8cd 	bl	8004664 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ca:	463b      	mov	r3, r7
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff ff6b 	bl	80063a8 <prvSampleTimeNow>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b09      	cmp	r3, #9
 80064d8:	f200 8096 	bhi.w	8006608 <prvProcessReceivedCommands+0x19c>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <prvProcessReceivedCommands+0x78>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	0800650d 	.word	0x0800650d
 80064f0:	08006581 	.word	0x08006581
 80064f4:	08006595 	.word	0x08006595
 80064f8:	080065df 	.word	0x080065df
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	0800650d 	.word	0x0800650d
 8006504:	08006581 	.word	0x08006581
 8006508:	08006595 	.word	0x08006595
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	b2da      	uxtb	r2, r3
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	18d1      	adds	r1, r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652c:	f7ff ff5c 	bl	80063e8 <prvInsertTimerInActiveList>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d069      	beq.n	800660a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800653c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05e      	beq.n	800660a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	441a      	add	r2, r3
 8006554:	2300      	movs	r3, #0
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	2300      	movs	r3, #0
 800655a:	2100      	movs	r1, #0
 800655c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655e:	f7ff fe05 	bl	800616c <xTimerGenericCommand>
 8006562:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d14f      	bne.n	800660a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	61bb      	str	r3, [r7, #24]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006586:	f023 0301 	bic.w	r3, r3, #1
 800658a:	b2da      	uxtb	r2, r3
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006592:	e03a      	b.n	800660a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	617b      	str	r3, [r7, #20]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	699a      	ldr	r2, [r3, #24]
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	18d1      	adds	r1, r2, r3
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d8:	f7ff ff06 	bl	80063e8 <prvInsertTimerInActiveList>
					break;
 80065dc:	e015      	b.n	800660a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ee:	f000 fbdf 	bl	8006db0 <vPortFree>
 80065f2:	e00a      	b.n	800660a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065fa:	f023 0301 	bic.w	r3, r3, #1
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006606:	e000      	b.n	800660a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006608:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800660a:	4b08      	ldr	r3, [pc, #32]	; (800662c <prvProcessReceivedCommands+0x1c0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	1d39      	adds	r1, r7, #4
 8006610:	2200      	movs	r2, #0
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fb74 	bl	8004d00 <xQueueReceive>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	f47f af2a 	bne.w	8006474 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	3730      	adds	r7, #48	; 0x30
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000e88 	.word	0x20000e88

08006630 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006636:	e048      	b.n	80066ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006638:	4b2d      	ldr	r3, [pc, #180]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006642:	4b2b      	ldr	r3, [pc, #172]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe f807 	bl	8004664 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d02e      	beq.n	80066ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4413      	add	r3, r2
 8006674:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	429a      	cmp	r2, r3
 800667c:	d90e      	bls.n	800669c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800668a:	4b19      	ldr	r3, [pc, #100]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fd ffac 	bl	80045f2 <vListInsert>
 800669a:	e016      	b.n	80066ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800669c:	2300      	movs	r3, #0
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	2300      	movs	r3, #0
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	2100      	movs	r1, #0
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fd60 	bl	800616c <xTimerGenericCommand>
 80066ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10a      	bne.n	80066ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	603b      	str	r3, [r7, #0]
}
 80066c6:	bf00      	nop
 80066c8:	e7fe      	b.n	80066c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ca:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1b1      	bne.n	8006638 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066da:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <prvSwitchTimerLists+0xc4>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a04      	ldr	r2, [pc, #16]	; (80066f0 <prvSwitchTimerLists+0xc0>)
 80066e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066e2:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <prvSwitchTimerLists+0xc4>)
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	6013      	str	r3, [r2, #0]
}
 80066e8:	bf00      	nop
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20000e80 	.word	0x20000e80
 80066f4:	20000e84 	.word	0x20000e84

080066f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066fe:	f000 f969 	bl	80069d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006702:	4b15      	ldr	r3, [pc, #84]	; (8006758 <prvCheckForValidListAndQueue+0x60>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d120      	bne.n	800674c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800670a:	4814      	ldr	r0, [pc, #80]	; (800675c <prvCheckForValidListAndQueue+0x64>)
 800670c:	f7fd ff20 	bl	8004550 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006710:	4813      	ldr	r0, [pc, #76]	; (8006760 <prvCheckForValidListAndQueue+0x68>)
 8006712:	f7fd ff1d 	bl	8004550 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006716:	4b13      	ldr	r3, [pc, #76]	; (8006764 <prvCheckForValidListAndQueue+0x6c>)
 8006718:	4a10      	ldr	r2, [pc, #64]	; (800675c <prvCheckForValidListAndQueue+0x64>)
 800671a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <prvCheckForValidListAndQueue+0x70>)
 800671e:	4a10      	ldr	r2, [pc, #64]	; (8006760 <prvCheckForValidListAndQueue+0x68>)
 8006720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006722:	2300      	movs	r3, #0
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4b11      	ldr	r3, [pc, #68]	; (800676c <prvCheckForValidListAndQueue+0x74>)
 8006728:	4a11      	ldr	r2, [pc, #68]	; (8006770 <prvCheckForValidListAndQueue+0x78>)
 800672a:	2110      	movs	r1, #16
 800672c:	200a      	movs	r0, #10
 800672e:	f7fe f82b 	bl	8004788 <xQueueGenericCreateStatic>
 8006732:	4603      	mov	r3, r0
 8006734:	4a08      	ldr	r2, [pc, #32]	; (8006758 <prvCheckForValidListAndQueue+0x60>)
 8006736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006738:	4b07      	ldr	r3, [pc, #28]	; (8006758 <prvCheckForValidListAndQueue+0x60>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <prvCheckForValidListAndQueue+0x60>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	490b      	ldr	r1, [pc, #44]	; (8006774 <prvCheckForValidListAndQueue+0x7c>)
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fcca 	bl	80050e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800674c:	f000 f972 	bl	8006a34 <vPortExitCritical>
}
 8006750:	bf00      	nop
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000e88 	.word	0x20000e88
 800675c:	20000e58 	.word	0x20000e58
 8006760:	20000e6c 	.word	0x20000e6c
 8006764:	20000e80 	.word	0x20000e80
 8006768:	20000e84 	.word	0x20000e84
 800676c:	20000f34 	.word	0x20000f34
 8006770:	20000e94 	.word	0x20000e94
 8006774:	08007b34 	.word	0x08007b34

08006778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3b04      	subs	r3, #4
 8006788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3b04      	subs	r3, #4
 8006796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f023 0201 	bic.w	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3b04      	subs	r3, #4
 80067a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067a8:	4a0c      	ldr	r2, [pc, #48]	; (80067dc <pxPortInitialiseStack+0x64>)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3b14      	subs	r3, #20
 80067b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3b04      	subs	r3, #4
 80067be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f06f 0202 	mvn.w	r2, #2
 80067c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3b20      	subs	r3, #32
 80067cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067ce:	68fb      	ldr	r3, [r7, #12]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	080067e1 	.word	0x080067e1

080067e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <prvTaskExitError+0x54>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f2:	d00a      	beq.n	800680a <prvTaskExitError+0x2a>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	60fb      	str	r3, [r7, #12]
}
 8006806:	bf00      	nop
 8006808:	e7fe      	b.n	8006808 <prvTaskExitError+0x28>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60bb      	str	r3, [r7, #8]
}
 800681c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800681e:	bf00      	nop
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0fc      	beq.n	8006820 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	2000000c 	.word	0x2000000c
	...

08006840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <pxCurrentTCBConst2>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	6808      	ldr	r0, [r1, #0]
 8006846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	f380 8809 	msr	PSP, r0
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	4770      	bx	lr
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst2>:
 8006860:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006868:	4808      	ldr	r0, [pc, #32]	; (800688c <prvPortStartFirstTask+0x24>)
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f380 8808 	msr	MSP, r0
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f380 8814 	msr	CONTROL, r0
 800687a:	b662      	cpsie	i
 800687c:	b661      	cpsie	f
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	df00      	svc	0
 8006888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800688a:	bf00      	nop
 800688c:	e000ed08 	.word	0xe000ed08

08006890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006896:	4b46      	ldr	r3, [pc, #280]	; (80069b0 <xPortStartScheduler+0x120>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a46      	ldr	r2, [pc, #280]	; (80069b4 <xPortStartScheduler+0x124>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10a      	bne.n	80068b6 <xPortStartScheduler+0x26>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068b6:	4b3e      	ldr	r3, [pc, #248]	; (80069b0 <xPortStartScheduler+0x120>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a3f      	ldr	r2, [pc, #252]	; (80069b8 <xPortStartScheduler+0x128>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10a      	bne.n	80068d6 <xPortStartScheduler+0x46>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	60fb      	str	r3, [r7, #12]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068d6:	4b39      	ldr	r3, [pc, #228]	; (80069bc <xPortStartScheduler+0x12c>)
 80068d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <xPortStartScheduler+0x130>)
 80068fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <xPortStartScheduler+0x134>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006904:	e009      	b.n	800691a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <xPortStartScheduler+0x134>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3b01      	subs	r3, #1
 800690c:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <xPortStartScheduler+0x134>)
 800690e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	b2db      	uxtb	r3, r3
 8006918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d0ef      	beq.n	8006906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006926:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <xPortStartScheduler+0x134>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1c3 0307 	rsb	r3, r3, #7
 800692e:	2b04      	cmp	r3, #4
 8006930:	d00a      	beq.n	8006948 <xPortStartScheduler+0xb8>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	60bb      	str	r3, [r7, #8]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006948:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <xPortStartScheduler+0x134>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <xPortStartScheduler+0x134>)
 8006950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <xPortStartScheduler+0x134>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <xPortStartScheduler+0x134>)
 800695c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006966:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <xPortStartScheduler+0x138>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <xPortStartScheduler+0x138>)
 800696c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <xPortStartScheduler+0x138>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <xPortStartScheduler+0x138>)
 8006978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800697c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800697e:	f000 f8dd 	bl	8006b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <xPortStartScheduler+0x13c>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006988:	f000 f8fc 	bl	8006b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <xPortStartScheduler+0x140>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0f      	ldr	r2, [pc, #60]	; (80069d0 <xPortStartScheduler+0x140>)
 8006992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006998:	f7ff ff66 	bl	8006868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800699c:	f7ff f846 	bl	8005a2c <vTaskSwitchContext>
	prvTaskExitError();
 80069a0:	f7ff ff1e 	bl	80067e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	e000ed00 	.word	0xe000ed00
 80069b4:	410fc271 	.word	0x410fc271
 80069b8:	410fc270 	.word	0x410fc270
 80069bc:	e000e400 	.word	0xe000e400
 80069c0:	20000f84 	.word	0x20000f84
 80069c4:	20000f88 	.word	0x20000f88
 80069c8:	e000ed20 	.word	0xe000ed20
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	e000ef34 	.word	0xe000ef34

080069d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	607b      	str	r3, [r7, #4]
}
 80069ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <vPortEnterCritical+0x58>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d10f      	bne.n	8006a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortEnterCritical+0x5c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	603b      	str	r3, [r7, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <vPortEnterCritical+0x4a>
	}
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	2000000c 	.word	0x2000000c
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <vPortExitCritical+0x50>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <vPortExitCritical+0x24>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	607b      	str	r3, [r7, #4]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <vPortExitCritical+0x50>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <vPortExitCritical+0x50>)
 8006a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <vPortExitCritical+0x50>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <vPortExitCritical+0x42>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	f383 8811 	msr	BASEPRI, r3
}
 8006a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000000c 	.word	0x2000000c
	...

08006a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a90:	f3ef 8009 	mrs	r0, PSP
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <pxCurrentTCBConst>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f01e 0f10 	tst.w	lr, #16
 8006aa0:	bf08      	it	eq
 8006aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	6010      	str	r0, [r2, #0]
 8006aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ab4:	f380 8811 	msr	BASEPRI, r0
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f7fe ffb4 	bl	8005a2c <vTaskSwitchContext>
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f380 8811 	msr	BASEPRI, r0
 8006acc:	bc09      	pop	{r0, r3}
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad6:	f01e 0f10 	tst.w	lr, #16
 8006ada:	bf08      	it	eq
 8006adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ae0:	f380 8809 	msr	PSP, r0
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst>:
 8006af0:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	607b      	str	r3, [r7, #4]
}
 8006b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b12:	f7fe fed1 	bl	80058b8 <xTaskIncrementTick>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <xPortSysTickHandler+0x40>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f383 8811 	msr	BASEPRI, r3
}
 8006b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <vPortSetupTimerInterrupt+0x38>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <vPortSetupTimerInterrupt+0x3c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <vPortSetupTimerInterrupt+0x40>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	099b      	lsrs	r3, r3, #6
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <vPortSetupTimerInterrupt+0x44>)
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b5e:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b60:	2207      	movs	r2, #7
 8006b62:	601a      	str	r2, [r3, #0]
}
 8006b64:	bf00      	nop
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	e000e010 	.word	0xe000e010
 8006b74:	e000e018 	.word	0xe000e018
 8006b78:	20000000 	.word	0x20000000
 8006b7c:	10624dd3 	.word	0x10624dd3
 8006b80:	e000e014 	.word	0xe000e014

08006b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b94 <vPortEnableVFP+0x10>
 8006b88:	6801      	ldr	r1, [r0, #0]
 8006b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b8e:	6001      	str	r1, [r0, #0]
 8006b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b92:	bf00      	nop
 8006b94:	e000ed88 	.word	0xe000ed88

08006b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b9e:	f3ef 8305 	mrs	r3, IPSR
 8006ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d914      	bls.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <vPortValidateInterruptPriority+0x70>)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bb4:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <vPortValidateInterruptPriority+0x74>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	7afa      	ldrb	r2, [r7, #11]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d20a      	bcs.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <vPortValidateInterruptPriority+0x78>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <vPortValidateInterruptPriority+0x7c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d90a      	bls.n	8006bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	603b      	str	r3, [r7, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <vPortValidateInterruptPriority+0x60>
	}
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	e000e3f0 	.word	0xe000e3f0
 8006c0c:	20000f84 	.word	0x20000f84
 8006c10:	e000ed0c 	.word	0xe000ed0c
 8006c14:	20000f88 	.word	0x20000f88

08006c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c24:	f7fe fd8c 	bl	8005740 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c28:	4b5b      	ldr	r3, [pc, #364]	; (8006d98 <pvPortMalloc+0x180>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c30:	f000 f920 	bl	8006e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c34:	4b59      	ldr	r3, [pc, #356]	; (8006d9c <pvPortMalloc+0x184>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 8093 	bne.w	8006d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01d      	beq.n	8006c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c48:	2208      	movs	r2, #8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d014      	beq.n	8006c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f023 0307 	bic.w	r3, r3, #7
 8006c60:	3308      	adds	r3, #8
 8006c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <pvPortMalloc+0x6c>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	617b      	str	r3, [r7, #20]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d06e      	beq.n	8006d68 <pvPortMalloc+0x150>
 8006c8a:	4b45      	ldr	r3, [pc, #276]	; (8006da0 <pvPortMalloc+0x188>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d869      	bhi.n	8006d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c94:	4b43      	ldr	r3, [pc, #268]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c98:	4b42      	ldr	r3, [pc, #264]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c9e:	e004      	b.n	8006caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d903      	bls.n	8006cbc <pvPortMalloc+0xa4>
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f1      	bne.n	8006ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cbc:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <pvPortMalloc+0x180>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d050      	beq.n	8006d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2208      	movs	r2, #8
 8006ccc:	4413      	add	r3, r2
 8006cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d91f      	bls.n	8006d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <pvPortMalloc+0xf8>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	613b      	str	r3, [r7, #16]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d22:	69b8      	ldr	r0, [r7, #24]
 8006d24:	f000 f908 	bl	8006f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <pvPortMalloc+0x188>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <pvPortMalloc+0x188>)
 8006d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d36:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <pvPortMalloc+0x188>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <pvPortMalloc+0x190>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d203      	bcs.n	8006d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d42:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <pvPortMalloc+0x188>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <pvPortMalloc+0x190>)
 8006d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <pvPortMalloc+0x184>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <pvPortMalloc+0x194>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	4a11      	ldr	r2, [pc, #68]	; (8006dac <pvPortMalloc+0x194>)
 8006d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d68:	f7fe fcf8 	bl	800575c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <pvPortMalloc+0x174>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60fb      	str	r3, [r7, #12]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <pvPortMalloc+0x172>
	return pvReturn;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3728      	adds	r7, #40	; 0x28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	2000231c 	.word	0x2000231c
 8006d9c:	20002330 	.word	0x20002330
 8006da0:	20002320 	.word	0x20002320
 8006da4:	20002314 	.word	0x20002314
 8006da8:	20002324 	.word	0x20002324
 8006dac:	20002328 	.word	0x20002328

08006db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04d      	beq.n	8006e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <vPortFree+0xb8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <vPortFree+0x44>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	60fb      	str	r3, [r7, #12]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <vPortFree+0x62>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60bb      	str	r3, [r7, #8]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <vPortFree+0xb8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01e      	beq.n	8006e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11a      	bne.n	8006e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <vPortFree+0xb8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	43db      	mvns	r3, r3
 8006e32:	401a      	ands	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e38:	f7fe fc82 	bl	8005740 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <vPortFree+0xbc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4413      	add	r3, r2
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <vPortFree+0xbc>)
 8006e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e4a:	6938      	ldr	r0, [r7, #16]
 8006e4c:	f000 f874 	bl	8006f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <vPortFree+0xc0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a06      	ldr	r2, [pc, #24]	; (8006e70 <vPortFree+0xc0>)
 8006e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e5a:	f7fe fc7f 	bl	800575c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e5e:	bf00      	nop
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20002330 	.word	0x20002330
 8006e6c:	20002320 	.word	0x20002320
 8006e70:	2000232c 	.word	0x2000232c

08006e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <prvHeapInit+0xac>)
 8006e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3307      	adds	r3, #7
 8006e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <prvHeapInit+0xac>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006eac:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <prvHeapInit+0xb0>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <prvHeapInit+0xb0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0307 	bic.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <prvHeapInit+0xb4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvHeapInit+0xb4>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <prvHeapInit+0xb8>)
 8006f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <prvHeapInit+0xbc>)
 8006f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <prvHeapInit+0xc0>)
 8006f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20000f8c 	.word	0x20000f8c
 8006f24:	20002314 	.word	0x20002314
 8006f28:	2000231c 	.word	0x2000231c
 8006f2c:	20002324 	.word	0x20002324
 8006f30:	20002320 	.word	0x20002320
 8006f34:	20002330 	.word	0x20002330

08006f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f40:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <prvInsertBlockIntoFreeList+0xac>)
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e002      	b.n	8006f4c <prvInsertBlockIntoFreeList+0x14>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d8f7      	bhi.n	8006f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d108      	bne.n	8006f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	441a      	add	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d118      	bne.n	8006fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d00d      	beq.n	8006fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e008      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e003      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d002      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20002314 	.word	0x20002314
 8006fe8:	2000231c 	.word	0x2000231c

08006fec <siprintf>:
 8006fec:	b40e      	push	{r1, r2, r3}
 8006fee:	b500      	push	{lr}
 8006ff0:	b09c      	sub	sp, #112	; 0x70
 8006ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ff4:	9002      	str	r0, [sp, #8]
 8006ff6:	9006      	str	r0, [sp, #24]
 8006ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ffc:	4809      	ldr	r0, [pc, #36]	; (8007024 <siprintf+0x38>)
 8006ffe:	9107      	str	r1, [sp, #28]
 8007000:	9104      	str	r1, [sp, #16]
 8007002:	4909      	ldr	r1, [pc, #36]	; (8007028 <siprintf+0x3c>)
 8007004:	f853 2b04 	ldr.w	r2, [r3], #4
 8007008:	9105      	str	r1, [sp, #20]
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	a902      	add	r1, sp, #8
 8007010:	f000 f9f6 	bl	8007400 <_svfiprintf_r>
 8007014:	9b02      	ldr	r3, [sp, #8]
 8007016:	2200      	movs	r2, #0
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	b01c      	add	sp, #112	; 0x70
 800701c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007020:	b003      	add	sp, #12
 8007022:	4770      	bx	lr
 8007024:	2000005c 	.word	0x2000005c
 8007028:	ffff0208 	.word	0xffff0208

0800702c <memset>:
 800702c:	4402      	add	r2, r0
 800702e:	4603      	mov	r3, r0
 8007030:	4293      	cmp	r3, r2
 8007032:	d100      	bne.n	8007036 <memset+0xa>
 8007034:	4770      	bx	lr
 8007036:	f803 1b01 	strb.w	r1, [r3], #1
 800703a:	e7f9      	b.n	8007030 <memset+0x4>

0800703c <_reclaim_reent>:
 800703c:	4b29      	ldr	r3, [pc, #164]	; (80070e4 <_reclaim_reent+0xa8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4283      	cmp	r3, r0
 8007042:	b570      	push	{r4, r5, r6, lr}
 8007044:	4604      	mov	r4, r0
 8007046:	d04b      	beq.n	80070e0 <_reclaim_reent+0xa4>
 8007048:	69c3      	ldr	r3, [r0, #28]
 800704a:	b143      	cbz	r3, 800705e <_reclaim_reent+0x22>
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d144      	bne.n	80070dc <_reclaim_reent+0xa0>
 8007052:	69e3      	ldr	r3, [r4, #28]
 8007054:	6819      	ldr	r1, [r3, #0]
 8007056:	b111      	cbz	r1, 800705e <_reclaim_reent+0x22>
 8007058:	4620      	mov	r0, r4
 800705a:	f000 f87f 	bl	800715c <_free_r>
 800705e:	6961      	ldr	r1, [r4, #20]
 8007060:	b111      	cbz	r1, 8007068 <_reclaim_reent+0x2c>
 8007062:	4620      	mov	r0, r4
 8007064:	f000 f87a 	bl	800715c <_free_r>
 8007068:	69e1      	ldr	r1, [r4, #28]
 800706a:	b111      	cbz	r1, 8007072 <_reclaim_reent+0x36>
 800706c:	4620      	mov	r0, r4
 800706e:	f000 f875 	bl	800715c <_free_r>
 8007072:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007074:	b111      	cbz	r1, 800707c <_reclaim_reent+0x40>
 8007076:	4620      	mov	r0, r4
 8007078:	f000 f870 	bl	800715c <_free_r>
 800707c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800707e:	b111      	cbz	r1, 8007086 <_reclaim_reent+0x4a>
 8007080:	4620      	mov	r0, r4
 8007082:	f000 f86b 	bl	800715c <_free_r>
 8007086:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007088:	b111      	cbz	r1, 8007090 <_reclaim_reent+0x54>
 800708a:	4620      	mov	r0, r4
 800708c:	f000 f866 	bl	800715c <_free_r>
 8007090:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007092:	b111      	cbz	r1, 800709a <_reclaim_reent+0x5e>
 8007094:	4620      	mov	r0, r4
 8007096:	f000 f861 	bl	800715c <_free_r>
 800709a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800709c:	b111      	cbz	r1, 80070a4 <_reclaim_reent+0x68>
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 f85c 	bl	800715c <_free_r>
 80070a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80070a6:	b111      	cbz	r1, 80070ae <_reclaim_reent+0x72>
 80070a8:	4620      	mov	r0, r4
 80070aa:	f000 f857 	bl	800715c <_free_r>
 80070ae:	6a23      	ldr	r3, [r4, #32]
 80070b0:	b1b3      	cbz	r3, 80070e0 <_reclaim_reent+0xa4>
 80070b2:	4620      	mov	r0, r4
 80070b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070b8:	4718      	bx	r3
 80070ba:	5949      	ldr	r1, [r1, r5]
 80070bc:	b941      	cbnz	r1, 80070d0 <_reclaim_reent+0x94>
 80070be:	3504      	adds	r5, #4
 80070c0:	69e3      	ldr	r3, [r4, #28]
 80070c2:	2d80      	cmp	r5, #128	; 0x80
 80070c4:	68d9      	ldr	r1, [r3, #12]
 80070c6:	d1f8      	bne.n	80070ba <_reclaim_reent+0x7e>
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 f847 	bl	800715c <_free_r>
 80070ce:	e7c0      	b.n	8007052 <_reclaim_reent+0x16>
 80070d0:	680e      	ldr	r6, [r1, #0]
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 f842 	bl	800715c <_free_r>
 80070d8:	4631      	mov	r1, r6
 80070da:	e7ef      	b.n	80070bc <_reclaim_reent+0x80>
 80070dc:	2500      	movs	r5, #0
 80070de:	e7ef      	b.n	80070c0 <_reclaim_reent+0x84>
 80070e0:	bd70      	pop	{r4, r5, r6, pc}
 80070e2:	bf00      	nop
 80070e4:	2000005c 	.word	0x2000005c

080070e8 <__errno>:
 80070e8:	4b01      	ldr	r3, [pc, #4]	; (80070f0 <__errno+0x8>)
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	2000005c 	.word	0x2000005c

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4d0d      	ldr	r5, [pc, #52]	; (800712c <__libc_init_array+0x38>)
 80070f8:	4c0d      	ldr	r4, [pc, #52]	; (8007130 <__libc_init_array+0x3c>)
 80070fa:	1b64      	subs	r4, r4, r5
 80070fc:	10a4      	asrs	r4, r4, #2
 80070fe:	2600      	movs	r6, #0
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	4d0b      	ldr	r5, [pc, #44]	; (8007134 <__libc_init_array+0x40>)
 8007106:	4c0c      	ldr	r4, [pc, #48]	; (8007138 <__libc_init_array+0x44>)
 8007108:	f000 fc6a 	bl	80079e0 <_init>
 800710c:	1b64      	subs	r4, r4, r5
 800710e:	10a4      	asrs	r4, r4, #2
 8007110:	2600      	movs	r6, #0
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	4798      	blx	r3
 800711e:	3601      	adds	r6, #1
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	4798      	blx	r3
 8007128:	3601      	adds	r6, #1
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	08007c9c 	.word	0x08007c9c
 8007130:	08007c9c 	.word	0x08007c9c
 8007134:	08007c9c 	.word	0x08007c9c
 8007138:	08007ca0 	.word	0x08007ca0

0800713c <__retarget_lock_acquire_recursive>:
 800713c:	4770      	bx	lr

0800713e <__retarget_lock_release_recursive>:
 800713e:	4770      	bx	lr

08007140 <memcpy>:
 8007140:	440a      	add	r2, r1
 8007142:	4291      	cmp	r1, r2
 8007144:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007148:	d100      	bne.n	800714c <memcpy+0xc>
 800714a:	4770      	bx	lr
 800714c:	b510      	push	{r4, lr}
 800714e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007156:	4291      	cmp	r1, r2
 8007158:	d1f9      	bne.n	800714e <memcpy+0xe>
 800715a:	bd10      	pop	{r4, pc}

0800715c <_free_r>:
 800715c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800715e:	2900      	cmp	r1, #0
 8007160:	d044      	beq.n	80071ec <_free_r+0x90>
 8007162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007166:	9001      	str	r0, [sp, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f1a1 0404 	sub.w	r4, r1, #4
 800716e:	bfb8      	it	lt
 8007170:	18e4      	addlt	r4, r4, r3
 8007172:	f000 f8df 	bl	8007334 <__malloc_lock>
 8007176:	4a1e      	ldr	r2, [pc, #120]	; (80071f0 <_free_r+0x94>)
 8007178:	9801      	ldr	r0, [sp, #4]
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	b933      	cbnz	r3, 800718c <_free_r+0x30>
 800717e:	6063      	str	r3, [r4, #4]
 8007180:	6014      	str	r4, [r2, #0]
 8007182:	b003      	add	sp, #12
 8007184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007188:	f000 b8da 	b.w	8007340 <__malloc_unlock>
 800718c:	42a3      	cmp	r3, r4
 800718e:	d908      	bls.n	80071a2 <_free_r+0x46>
 8007190:	6825      	ldr	r5, [r4, #0]
 8007192:	1961      	adds	r1, r4, r5
 8007194:	428b      	cmp	r3, r1
 8007196:	bf01      	itttt	eq
 8007198:	6819      	ldreq	r1, [r3, #0]
 800719a:	685b      	ldreq	r3, [r3, #4]
 800719c:	1949      	addeq	r1, r1, r5
 800719e:	6021      	streq	r1, [r4, #0]
 80071a0:	e7ed      	b.n	800717e <_free_r+0x22>
 80071a2:	461a      	mov	r2, r3
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	b10b      	cbz	r3, 80071ac <_free_r+0x50>
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	d9fa      	bls.n	80071a2 <_free_r+0x46>
 80071ac:	6811      	ldr	r1, [r2, #0]
 80071ae:	1855      	adds	r5, r2, r1
 80071b0:	42a5      	cmp	r5, r4
 80071b2:	d10b      	bne.n	80071cc <_free_r+0x70>
 80071b4:	6824      	ldr	r4, [r4, #0]
 80071b6:	4421      	add	r1, r4
 80071b8:	1854      	adds	r4, r2, r1
 80071ba:	42a3      	cmp	r3, r4
 80071bc:	6011      	str	r1, [r2, #0]
 80071be:	d1e0      	bne.n	8007182 <_free_r+0x26>
 80071c0:	681c      	ldr	r4, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	6053      	str	r3, [r2, #4]
 80071c6:	440c      	add	r4, r1
 80071c8:	6014      	str	r4, [r2, #0]
 80071ca:	e7da      	b.n	8007182 <_free_r+0x26>
 80071cc:	d902      	bls.n	80071d4 <_free_r+0x78>
 80071ce:	230c      	movs	r3, #12
 80071d0:	6003      	str	r3, [r0, #0]
 80071d2:	e7d6      	b.n	8007182 <_free_r+0x26>
 80071d4:	6825      	ldr	r5, [r4, #0]
 80071d6:	1961      	adds	r1, r4, r5
 80071d8:	428b      	cmp	r3, r1
 80071da:	bf04      	itt	eq
 80071dc:	6819      	ldreq	r1, [r3, #0]
 80071de:	685b      	ldreq	r3, [r3, #4]
 80071e0:	6063      	str	r3, [r4, #4]
 80071e2:	bf04      	itt	eq
 80071e4:	1949      	addeq	r1, r1, r5
 80071e6:	6021      	streq	r1, [r4, #0]
 80071e8:	6054      	str	r4, [r2, #4]
 80071ea:	e7ca      	b.n	8007182 <_free_r+0x26>
 80071ec:	b003      	add	sp, #12
 80071ee:	bd30      	pop	{r4, r5, pc}
 80071f0:	20002474 	.word	0x20002474

080071f4 <sbrk_aligned>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	4e0e      	ldr	r6, [pc, #56]	; (8007230 <sbrk_aligned+0x3c>)
 80071f8:	460c      	mov	r4, r1
 80071fa:	6831      	ldr	r1, [r6, #0]
 80071fc:	4605      	mov	r5, r0
 80071fe:	b911      	cbnz	r1, 8007206 <sbrk_aligned+0x12>
 8007200:	f000 fba6 	bl	8007950 <_sbrk_r>
 8007204:	6030      	str	r0, [r6, #0]
 8007206:	4621      	mov	r1, r4
 8007208:	4628      	mov	r0, r5
 800720a:	f000 fba1 	bl	8007950 <_sbrk_r>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	d00a      	beq.n	8007228 <sbrk_aligned+0x34>
 8007212:	1cc4      	adds	r4, r0, #3
 8007214:	f024 0403 	bic.w	r4, r4, #3
 8007218:	42a0      	cmp	r0, r4
 800721a:	d007      	beq.n	800722c <sbrk_aligned+0x38>
 800721c:	1a21      	subs	r1, r4, r0
 800721e:	4628      	mov	r0, r5
 8007220:	f000 fb96 	bl	8007950 <_sbrk_r>
 8007224:	3001      	adds	r0, #1
 8007226:	d101      	bne.n	800722c <sbrk_aligned+0x38>
 8007228:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800722c:	4620      	mov	r0, r4
 800722e:	bd70      	pop	{r4, r5, r6, pc}
 8007230:	20002478 	.word	0x20002478

08007234 <_malloc_r>:
 8007234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007238:	1ccd      	adds	r5, r1, #3
 800723a:	f025 0503 	bic.w	r5, r5, #3
 800723e:	3508      	adds	r5, #8
 8007240:	2d0c      	cmp	r5, #12
 8007242:	bf38      	it	cc
 8007244:	250c      	movcc	r5, #12
 8007246:	2d00      	cmp	r5, #0
 8007248:	4607      	mov	r7, r0
 800724a:	db01      	blt.n	8007250 <_malloc_r+0x1c>
 800724c:	42a9      	cmp	r1, r5
 800724e:	d905      	bls.n	800725c <_malloc_r+0x28>
 8007250:	230c      	movs	r3, #12
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	2600      	movs	r6, #0
 8007256:	4630      	mov	r0, r6
 8007258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800725c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007330 <_malloc_r+0xfc>
 8007260:	f000 f868 	bl	8007334 <__malloc_lock>
 8007264:	f8d8 3000 	ldr.w	r3, [r8]
 8007268:	461c      	mov	r4, r3
 800726a:	bb5c      	cbnz	r4, 80072c4 <_malloc_r+0x90>
 800726c:	4629      	mov	r1, r5
 800726e:	4638      	mov	r0, r7
 8007270:	f7ff ffc0 	bl	80071f4 <sbrk_aligned>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	4604      	mov	r4, r0
 8007278:	d155      	bne.n	8007326 <_malloc_r+0xf2>
 800727a:	f8d8 4000 	ldr.w	r4, [r8]
 800727e:	4626      	mov	r6, r4
 8007280:	2e00      	cmp	r6, #0
 8007282:	d145      	bne.n	8007310 <_malloc_r+0xdc>
 8007284:	2c00      	cmp	r4, #0
 8007286:	d048      	beq.n	800731a <_malloc_r+0xe6>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	4631      	mov	r1, r6
 800728c:	4638      	mov	r0, r7
 800728e:	eb04 0903 	add.w	r9, r4, r3
 8007292:	f000 fb5d 	bl	8007950 <_sbrk_r>
 8007296:	4581      	cmp	r9, r0
 8007298:	d13f      	bne.n	800731a <_malloc_r+0xe6>
 800729a:	6821      	ldr	r1, [r4, #0]
 800729c:	1a6d      	subs	r5, r5, r1
 800729e:	4629      	mov	r1, r5
 80072a0:	4638      	mov	r0, r7
 80072a2:	f7ff ffa7 	bl	80071f4 <sbrk_aligned>
 80072a6:	3001      	adds	r0, #1
 80072a8:	d037      	beq.n	800731a <_malloc_r+0xe6>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	442b      	add	r3, r5
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	f8d8 3000 	ldr.w	r3, [r8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d038      	beq.n	800732a <_malloc_r+0xf6>
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	42a2      	cmp	r2, r4
 80072bc:	d12b      	bne.n	8007316 <_malloc_r+0xe2>
 80072be:	2200      	movs	r2, #0
 80072c0:	605a      	str	r2, [r3, #4]
 80072c2:	e00f      	b.n	80072e4 <_malloc_r+0xb0>
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	1b52      	subs	r2, r2, r5
 80072c8:	d41f      	bmi.n	800730a <_malloc_r+0xd6>
 80072ca:	2a0b      	cmp	r2, #11
 80072cc:	d917      	bls.n	80072fe <_malloc_r+0xca>
 80072ce:	1961      	adds	r1, r4, r5
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	6025      	str	r5, [r4, #0]
 80072d4:	bf18      	it	ne
 80072d6:	6059      	strne	r1, [r3, #4]
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	bf08      	it	eq
 80072dc:	f8c8 1000 	streq.w	r1, [r8]
 80072e0:	5162      	str	r2, [r4, r5]
 80072e2:	604b      	str	r3, [r1, #4]
 80072e4:	4638      	mov	r0, r7
 80072e6:	f104 060b 	add.w	r6, r4, #11
 80072ea:	f000 f829 	bl	8007340 <__malloc_unlock>
 80072ee:	f026 0607 	bic.w	r6, r6, #7
 80072f2:	1d23      	adds	r3, r4, #4
 80072f4:	1af2      	subs	r2, r6, r3
 80072f6:	d0ae      	beq.n	8007256 <_malloc_r+0x22>
 80072f8:	1b9b      	subs	r3, r3, r6
 80072fa:	50a3      	str	r3, [r4, r2]
 80072fc:	e7ab      	b.n	8007256 <_malloc_r+0x22>
 80072fe:	42a3      	cmp	r3, r4
 8007300:	6862      	ldr	r2, [r4, #4]
 8007302:	d1dd      	bne.n	80072c0 <_malloc_r+0x8c>
 8007304:	f8c8 2000 	str.w	r2, [r8]
 8007308:	e7ec      	b.n	80072e4 <_malloc_r+0xb0>
 800730a:	4623      	mov	r3, r4
 800730c:	6864      	ldr	r4, [r4, #4]
 800730e:	e7ac      	b.n	800726a <_malloc_r+0x36>
 8007310:	4634      	mov	r4, r6
 8007312:	6876      	ldr	r6, [r6, #4]
 8007314:	e7b4      	b.n	8007280 <_malloc_r+0x4c>
 8007316:	4613      	mov	r3, r2
 8007318:	e7cc      	b.n	80072b4 <_malloc_r+0x80>
 800731a:	230c      	movs	r3, #12
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	4638      	mov	r0, r7
 8007320:	f000 f80e 	bl	8007340 <__malloc_unlock>
 8007324:	e797      	b.n	8007256 <_malloc_r+0x22>
 8007326:	6025      	str	r5, [r4, #0]
 8007328:	e7dc      	b.n	80072e4 <_malloc_r+0xb0>
 800732a:	605b      	str	r3, [r3, #4]
 800732c:	deff      	udf	#255	; 0xff
 800732e:	bf00      	nop
 8007330:	20002474 	.word	0x20002474

08007334 <__malloc_lock>:
 8007334:	4801      	ldr	r0, [pc, #4]	; (800733c <__malloc_lock+0x8>)
 8007336:	f7ff bf01 	b.w	800713c <__retarget_lock_acquire_recursive>
 800733a:	bf00      	nop
 800733c:	20002470 	.word	0x20002470

08007340 <__malloc_unlock>:
 8007340:	4801      	ldr	r0, [pc, #4]	; (8007348 <__malloc_unlock+0x8>)
 8007342:	f7ff befc 	b.w	800713e <__retarget_lock_release_recursive>
 8007346:	bf00      	nop
 8007348:	20002470 	.word	0x20002470

0800734c <__ssputs_r>:
 800734c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007350:	688e      	ldr	r6, [r1, #8]
 8007352:	461f      	mov	r7, r3
 8007354:	42be      	cmp	r6, r7
 8007356:	680b      	ldr	r3, [r1, #0]
 8007358:	4682      	mov	sl, r0
 800735a:	460c      	mov	r4, r1
 800735c:	4690      	mov	r8, r2
 800735e:	d82c      	bhi.n	80073ba <__ssputs_r+0x6e>
 8007360:	898a      	ldrh	r2, [r1, #12]
 8007362:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007366:	d026      	beq.n	80073b6 <__ssputs_r+0x6a>
 8007368:	6965      	ldr	r5, [r4, #20]
 800736a:	6909      	ldr	r1, [r1, #16]
 800736c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007370:	eba3 0901 	sub.w	r9, r3, r1
 8007374:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007378:	1c7b      	adds	r3, r7, #1
 800737a:	444b      	add	r3, r9
 800737c:	106d      	asrs	r5, r5, #1
 800737e:	429d      	cmp	r5, r3
 8007380:	bf38      	it	cc
 8007382:	461d      	movcc	r5, r3
 8007384:	0553      	lsls	r3, r2, #21
 8007386:	d527      	bpl.n	80073d8 <__ssputs_r+0x8c>
 8007388:	4629      	mov	r1, r5
 800738a:	f7ff ff53 	bl	8007234 <_malloc_r>
 800738e:	4606      	mov	r6, r0
 8007390:	b360      	cbz	r0, 80073ec <__ssputs_r+0xa0>
 8007392:	6921      	ldr	r1, [r4, #16]
 8007394:	464a      	mov	r2, r9
 8007396:	f7ff fed3 	bl	8007140 <memcpy>
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	6126      	str	r6, [r4, #16]
 80073a8:	6165      	str	r5, [r4, #20]
 80073aa:	444e      	add	r6, r9
 80073ac:	eba5 0509 	sub.w	r5, r5, r9
 80073b0:	6026      	str	r6, [r4, #0]
 80073b2:	60a5      	str	r5, [r4, #8]
 80073b4:	463e      	mov	r6, r7
 80073b6:	42be      	cmp	r6, r7
 80073b8:	d900      	bls.n	80073bc <__ssputs_r+0x70>
 80073ba:	463e      	mov	r6, r7
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	4632      	mov	r2, r6
 80073c0:	4641      	mov	r1, r8
 80073c2:	f000 faab 	bl	800791c <memmove>
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	1b9b      	subs	r3, r3, r6
 80073ca:	60a3      	str	r3, [r4, #8]
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	4433      	add	r3, r6
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	2000      	movs	r0, #0
 80073d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d8:	462a      	mov	r2, r5
 80073da:	f000 fac9 	bl	8007970 <_realloc_r>
 80073de:	4606      	mov	r6, r0
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d1e0      	bne.n	80073a6 <__ssputs_r+0x5a>
 80073e4:	6921      	ldr	r1, [r4, #16]
 80073e6:	4650      	mov	r0, sl
 80073e8:	f7ff feb8 	bl	800715c <_free_r>
 80073ec:	230c      	movs	r3, #12
 80073ee:	f8ca 3000 	str.w	r3, [sl]
 80073f2:	89a3      	ldrh	r3, [r4, #12]
 80073f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073fe:	e7e9      	b.n	80073d4 <__ssputs_r+0x88>

08007400 <_svfiprintf_r>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	4698      	mov	r8, r3
 8007406:	898b      	ldrh	r3, [r1, #12]
 8007408:	061b      	lsls	r3, r3, #24
 800740a:	b09d      	sub	sp, #116	; 0x74
 800740c:	4607      	mov	r7, r0
 800740e:	460d      	mov	r5, r1
 8007410:	4614      	mov	r4, r2
 8007412:	d50e      	bpl.n	8007432 <_svfiprintf_r+0x32>
 8007414:	690b      	ldr	r3, [r1, #16]
 8007416:	b963      	cbnz	r3, 8007432 <_svfiprintf_r+0x32>
 8007418:	2140      	movs	r1, #64	; 0x40
 800741a:	f7ff ff0b 	bl	8007234 <_malloc_r>
 800741e:	6028      	str	r0, [r5, #0]
 8007420:	6128      	str	r0, [r5, #16]
 8007422:	b920      	cbnz	r0, 800742e <_svfiprintf_r+0x2e>
 8007424:	230c      	movs	r3, #12
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800742c:	e0d0      	b.n	80075d0 <_svfiprintf_r+0x1d0>
 800742e:	2340      	movs	r3, #64	; 0x40
 8007430:	616b      	str	r3, [r5, #20]
 8007432:	2300      	movs	r3, #0
 8007434:	9309      	str	r3, [sp, #36]	; 0x24
 8007436:	2320      	movs	r3, #32
 8007438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800743c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007440:	2330      	movs	r3, #48	; 0x30
 8007442:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80075e8 <_svfiprintf_r+0x1e8>
 8007446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800744a:	f04f 0901 	mov.w	r9, #1
 800744e:	4623      	mov	r3, r4
 8007450:	469a      	mov	sl, r3
 8007452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007456:	b10a      	cbz	r2, 800745c <_svfiprintf_r+0x5c>
 8007458:	2a25      	cmp	r2, #37	; 0x25
 800745a:	d1f9      	bne.n	8007450 <_svfiprintf_r+0x50>
 800745c:	ebba 0b04 	subs.w	fp, sl, r4
 8007460:	d00b      	beq.n	800747a <_svfiprintf_r+0x7a>
 8007462:	465b      	mov	r3, fp
 8007464:	4622      	mov	r2, r4
 8007466:	4629      	mov	r1, r5
 8007468:	4638      	mov	r0, r7
 800746a:	f7ff ff6f 	bl	800734c <__ssputs_r>
 800746e:	3001      	adds	r0, #1
 8007470:	f000 80a9 	beq.w	80075c6 <_svfiprintf_r+0x1c6>
 8007474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007476:	445a      	add	r2, fp
 8007478:	9209      	str	r2, [sp, #36]	; 0x24
 800747a:	f89a 3000 	ldrb.w	r3, [sl]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 80a1 	beq.w	80075c6 <_svfiprintf_r+0x1c6>
 8007484:	2300      	movs	r3, #0
 8007486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800748a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800748e:	f10a 0a01 	add.w	sl, sl, #1
 8007492:	9304      	str	r3, [sp, #16]
 8007494:	9307      	str	r3, [sp, #28]
 8007496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800749a:	931a      	str	r3, [sp, #104]	; 0x68
 800749c:	4654      	mov	r4, sl
 800749e:	2205      	movs	r2, #5
 80074a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a4:	4850      	ldr	r0, [pc, #320]	; (80075e8 <_svfiprintf_r+0x1e8>)
 80074a6:	f7f8 fe93 	bl	80001d0 <memchr>
 80074aa:	9a04      	ldr	r2, [sp, #16]
 80074ac:	b9d8      	cbnz	r0, 80074e6 <_svfiprintf_r+0xe6>
 80074ae:	06d0      	lsls	r0, r2, #27
 80074b0:	bf44      	itt	mi
 80074b2:	2320      	movmi	r3, #32
 80074b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074b8:	0711      	lsls	r1, r2, #28
 80074ba:	bf44      	itt	mi
 80074bc:	232b      	movmi	r3, #43	; 0x2b
 80074be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c2:	f89a 3000 	ldrb.w	r3, [sl]
 80074c6:	2b2a      	cmp	r3, #42	; 0x2a
 80074c8:	d015      	beq.n	80074f6 <_svfiprintf_r+0xf6>
 80074ca:	9a07      	ldr	r2, [sp, #28]
 80074cc:	4654      	mov	r4, sl
 80074ce:	2000      	movs	r0, #0
 80074d0:	f04f 0c0a 	mov.w	ip, #10
 80074d4:	4621      	mov	r1, r4
 80074d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074da:	3b30      	subs	r3, #48	; 0x30
 80074dc:	2b09      	cmp	r3, #9
 80074de:	d94d      	bls.n	800757c <_svfiprintf_r+0x17c>
 80074e0:	b1b0      	cbz	r0, 8007510 <_svfiprintf_r+0x110>
 80074e2:	9207      	str	r2, [sp, #28]
 80074e4:	e014      	b.n	8007510 <_svfiprintf_r+0x110>
 80074e6:	eba0 0308 	sub.w	r3, r0, r8
 80074ea:	fa09 f303 	lsl.w	r3, r9, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	46a2      	mov	sl, r4
 80074f4:	e7d2      	b.n	800749c <_svfiprintf_r+0x9c>
 80074f6:	9b03      	ldr	r3, [sp, #12]
 80074f8:	1d19      	adds	r1, r3, #4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	9103      	str	r1, [sp, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bfbb      	ittet	lt
 8007502:	425b      	neglt	r3, r3
 8007504:	f042 0202 	orrlt.w	r2, r2, #2
 8007508:	9307      	strge	r3, [sp, #28]
 800750a:	9307      	strlt	r3, [sp, #28]
 800750c:	bfb8      	it	lt
 800750e:	9204      	strlt	r2, [sp, #16]
 8007510:	7823      	ldrb	r3, [r4, #0]
 8007512:	2b2e      	cmp	r3, #46	; 0x2e
 8007514:	d10c      	bne.n	8007530 <_svfiprintf_r+0x130>
 8007516:	7863      	ldrb	r3, [r4, #1]
 8007518:	2b2a      	cmp	r3, #42	; 0x2a
 800751a:	d134      	bne.n	8007586 <_svfiprintf_r+0x186>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	1d1a      	adds	r2, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	9203      	str	r2, [sp, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	bfb8      	it	lt
 8007528:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800752c:	3402      	adds	r4, #2
 800752e:	9305      	str	r3, [sp, #20]
 8007530:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80075f8 <_svfiprintf_r+0x1f8>
 8007534:	7821      	ldrb	r1, [r4, #0]
 8007536:	2203      	movs	r2, #3
 8007538:	4650      	mov	r0, sl
 800753a:	f7f8 fe49 	bl	80001d0 <memchr>
 800753e:	b138      	cbz	r0, 8007550 <_svfiprintf_r+0x150>
 8007540:	9b04      	ldr	r3, [sp, #16]
 8007542:	eba0 000a 	sub.w	r0, r0, sl
 8007546:	2240      	movs	r2, #64	; 0x40
 8007548:	4082      	lsls	r2, r0
 800754a:	4313      	orrs	r3, r2
 800754c:	3401      	adds	r4, #1
 800754e:	9304      	str	r3, [sp, #16]
 8007550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007554:	4825      	ldr	r0, [pc, #148]	; (80075ec <_svfiprintf_r+0x1ec>)
 8007556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800755a:	2206      	movs	r2, #6
 800755c:	f7f8 fe38 	bl	80001d0 <memchr>
 8007560:	2800      	cmp	r0, #0
 8007562:	d038      	beq.n	80075d6 <_svfiprintf_r+0x1d6>
 8007564:	4b22      	ldr	r3, [pc, #136]	; (80075f0 <_svfiprintf_r+0x1f0>)
 8007566:	bb1b      	cbnz	r3, 80075b0 <_svfiprintf_r+0x1b0>
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	3307      	adds	r3, #7
 800756c:	f023 0307 	bic.w	r3, r3, #7
 8007570:	3308      	adds	r3, #8
 8007572:	9303      	str	r3, [sp, #12]
 8007574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007576:	4433      	add	r3, r6
 8007578:	9309      	str	r3, [sp, #36]	; 0x24
 800757a:	e768      	b.n	800744e <_svfiprintf_r+0x4e>
 800757c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007580:	460c      	mov	r4, r1
 8007582:	2001      	movs	r0, #1
 8007584:	e7a6      	b.n	80074d4 <_svfiprintf_r+0xd4>
 8007586:	2300      	movs	r3, #0
 8007588:	3401      	adds	r4, #1
 800758a:	9305      	str	r3, [sp, #20]
 800758c:	4619      	mov	r1, r3
 800758e:	f04f 0c0a 	mov.w	ip, #10
 8007592:	4620      	mov	r0, r4
 8007594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007598:	3a30      	subs	r2, #48	; 0x30
 800759a:	2a09      	cmp	r2, #9
 800759c:	d903      	bls.n	80075a6 <_svfiprintf_r+0x1a6>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0c6      	beq.n	8007530 <_svfiprintf_r+0x130>
 80075a2:	9105      	str	r1, [sp, #20]
 80075a4:	e7c4      	b.n	8007530 <_svfiprintf_r+0x130>
 80075a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80075aa:	4604      	mov	r4, r0
 80075ac:	2301      	movs	r3, #1
 80075ae:	e7f0      	b.n	8007592 <_svfiprintf_r+0x192>
 80075b0:	ab03      	add	r3, sp, #12
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	462a      	mov	r2, r5
 80075b6:	4b0f      	ldr	r3, [pc, #60]	; (80075f4 <_svfiprintf_r+0x1f4>)
 80075b8:	a904      	add	r1, sp, #16
 80075ba:	4638      	mov	r0, r7
 80075bc:	f3af 8000 	nop.w
 80075c0:	1c42      	adds	r2, r0, #1
 80075c2:	4606      	mov	r6, r0
 80075c4:	d1d6      	bne.n	8007574 <_svfiprintf_r+0x174>
 80075c6:	89ab      	ldrh	r3, [r5, #12]
 80075c8:	065b      	lsls	r3, r3, #25
 80075ca:	f53f af2d 	bmi.w	8007428 <_svfiprintf_r+0x28>
 80075ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075d0:	b01d      	add	sp, #116	; 0x74
 80075d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462a      	mov	r2, r5
 80075dc:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <_svfiprintf_r+0x1f4>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	4638      	mov	r0, r7
 80075e2:	f000 f879 	bl	80076d8 <_printf_i>
 80075e6:	e7eb      	b.n	80075c0 <_svfiprintf_r+0x1c0>
 80075e8:	08007c60 	.word	0x08007c60
 80075ec:	08007c6a 	.word	0x08007c6a
 80075f0:	00000000 	.word	0x00000000
 80075f4:	0800734d 	.word	0x0800734d
 80075f8:	08007c66 	.word	0x08007c66

080075fc <_printf_common>:
 80075fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	4616      	mov	r6, r2
 8007602:	4699      	mov	r9, r3
 8007604:	688a      	ldr	r2, [r1, #8]
 8007606:	690b      	ldr	r3, [r1, #16]
 8007608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800760c:	4293      	cmp	r3, r2
 800760e:	bfb8      	it	lt
 8007610:	4613      	movlt	r3, r2
 8007612:	6033      	str	r3, [r6, #0]
 8007614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007618:	4607      	mov	r7, r0
 800761a:	460c      	mov	r4, r1
 800761c:	b10a      	cbz	r2, 8007622 <_printf_common+0x26>
 800761e:	3301      	adds	r3, #1
 8007620:	6033      	str	r3, [r6, #0]
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	0699      	lsls	r1, r3, #26
 8007626:	bf42      	ittt	mi
 8007628:	6833      	ldrmi	r3, [r6, #0]
 800762a:	3302      	addmi	r3, #2
 800762c:	6033      	strmi	r3, [r6, #0]
 800762e:	6825      	ldr	r5, [r4, #0]
 8007630:	f015 0506 	ands.w	r5, r5, #6
 8007634:	d106      	bne.n	8007644 <_printf_common+0x48>
 8007636:	f104 0a19 	add.w	sl, r4, #25
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	6832      	ldr	r2, [r6, #0]
 800763e:	1a9b      	subs	r3, r3, r2
 8007640:	42ab      	cmp	r3, r5
 8007642:	dc26      	bgt.n	8007692 <_printf_common+0x96>
 8007644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007648:	1e13      	subs	r3, r2, #0
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	bf18      	it	ne
 800764e:	2301      	movne	r3, #1
 8007650:	0692      	lsls	r2, r2, #26
 8007652:	d42b      	bmi.n	80076ac <_printf_common+0xb0>
 8007654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007658:	4649      	mov	r1, r9
 800765a:	4638      	mov	r0, r7
 800765c:	47c0      	blx	r8
 800765e:	3001      	adds	r0, #1
 8007660:	d01e      	beq.n	80076a0 <_printf_common+0xa4>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	f003 0306 	and.w	r3, r3, #6
 800766a:	2b04      	cmp	r3, #4
 800766c:	bf02      	ittt	eq
 800766e:	68e5      	ldreq	r5, [r4, #12]
 8007670:	6833      	ldreq	r3, [r6, #0]
 8007672:	1aed      	subeq	r5, r5, r3
 8007674:	68a3      	ldr	r3, [r4, #8]
 8007676:	bf0c      	ite	eq
 8007678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800767c:	2500      	movne	r5, #0
 800767e:	4293      	cmp	r3, r2
 8007680:	bfc4      	itt	gt
 8007682:	1a9b      	subgt	r3, r3, r2
 8007684:	18ed      	addgt	r5, r5, r3
 8007686:	2600      	movs	r6, #0
 8007688:	341a      	adds	r4, #26
 800768a:	42b5      	cmp	r5, r6
 800768c:	d11a      	bne.n	80076c4 <_printf_common+0xc8>
 800768e:	2000      	movs	r0, #0
 8007690:	e008      	b.n	80076a4 <_printf_common+0xa8>
 8007692:	2301      	movs	r3, #1
 8007694:	4652      	mov	r2, sl
 8007696:	4649      	mov	r1, r9
 8007698:	4638      	mov	r0, r7
 800769a:	47c0      	blx	r8
 800769c:	3001      	adds	r0, #1
 800769e:	d103      	bne.n	80076a8 <_printf_common+0xac>
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a8:	3501      	adds	r5, #1
 80076aa:	e7c6      	b.n	800763a <_printf_common+0x3e>
 80076ac:	18e1      	adds	r1, r4, r3
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	2030      	movs	r0, #48	; 0x30
 80076b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076b6:	4422      	add	r2, r4
 80076b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076c0:	3302      	adds	r3, #2
 80076c2:	e7c7      	b.n	8007654 <_printf_common+0x58>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4622      	mov	r2, r4
 80076c8:	4649      	mov	r1, r9
 80076ca:	4638      	mov	r0, r7
 80076cc:	47c0      	blx	r8
 80076ce:	3001      	adds	r0, #1
 80076d0:	d0e6      	beq.n	80076a0 <_printf_common+0xa4>
 80076d2:	3601      	adds	r6, #1
 80076d4:	e7d9      	b.n	800768a <_printf_common+0x8e>
	...

080076d8 <_printf_i>:
 80076d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	7e0f      	ldrb	r7, [r1, #24]
 80076de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076e0:	2f78      	cmp	r7, #120	; 0x78
 80076e2:	4691      	mov	r9, r2
 80076e4:	4680      	mov	r8, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	469a      	mov	sl, r3
 80076ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076ee:	d807      	bhi.n	8007700 <_printf_i+0x28>
 80076f0:	2f62      	cmp	r7, #98	; 0x62
 80076f2:	d80a      	bhi.n	800770a <_printf_i+0x32>
 80076f4:	2f00      	cmp	r7, #0
 80076f6:	f000 80d4 	beq.w	80078a2 <_printf_i+0x1ca>
 80076fa:	2f58      	cmp	r7, #88	; 0x58
 80076fc:	f000 80c0 	beq.w	8007880 <_printf_i+0x1a8>
 8007700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007708:	e03a      	b.n	8007780 <_printf_i+0xa8>
 800770a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800770e:	2b15      	cmp	r3, #21
 8007710:	d8f6      	bhi.n	8007700 <_printf_i+0x28>
 8007712:	a101      	add	r1, pc, #4	; (adr r1, 8007718 <_printf_i+0x40>)
 8007714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007718:	08007771 	.word	0x08007771
 800771c:	08007785 	.word	0x08007785
 8007720:	08007701 	.word	0x08007701
 8007724:	08007701 	.word	0x08007701
 8007728:	08007701 	.word	0x08007701
 800772c:	08007701 	.word	0x08007701
 8007730:	08007785 	.word	0x08007785
 8007734:	08007701 	.word	0x08007701
 8007738:	08007701 	.word	0x08007701
 800773c:	08007701 	.word	0x08007701
 8007740:	08007701 	.word	0x08007701
 8007744:	08007889 	.word	0x08007889
 8007748:	080077b1 	.word	0x080077b1
 800774c:	08007843 	.word	0x08007843
 8007750:	08007701 	.word	0x08007701
 8007754:	08007701 	.word	0x08007701
 8007758:	080078ab 	.word	0x080078ab
 800775c:	08007701 	.word	0x08007701
 8007760:	080077b1 	.word	0x080077b1
 8007764:	08007701 	.word	0x08007701
 8007768:	08007701 	.word	0x08007701
 800776c:	0800784b 	.word	0x0800784b
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	1d1a      	adds	r2, r3, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	602a      	str	r2, [r5, #0]
 8007778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800777c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007780:	2301      	movs	r3, #1
 8007782:	e09f      	b.n	80078c4 <_printf_i+0x1ec>
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	682b      	ldr	r3, [r5, #0]
 8007788:	0607      	lsls	r7, r0, #24
 800778a:	f103 0104 	add.w	r1, r3, #4
 800778e:	6029      	str	r1, [r5, #0]
 8007790:	d501      	bpl.n	8007796 <_printf_i+0xbe>
 8007792:	681e      	ldr	r6, [r3, #0]
 8007794:	e003      	b.n	800779e <_printf_i+0xc6>
 8007796:	0646      	lsls	r6, r0, #25
 8007798:	d5fb      	bpl.n	8007792 <_printf_i+0xba>
 800779a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800779e:	2e00      	cmp	r6, #0
 80077a0:	da03      	bge.n	80077aa <_printf_i+0xd2>
 80077a2:	232d      	movs	r3, #45	; 0x2d
 80077a4:	4276      	negs	r6, r6
 80077a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077aa:	485a      	ldr	r0, [pc, #360]	; (8007914 <_printf_i+0x23c>)
 80077ac:	230a      	movs	r3, #10
 80077ae:	e012      	b.n	80077d6 <_printf_i+0xfe>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	6820      	ldr	r0, [r4, #0]
 80077b4:	1d19      	adds	r1, r3, #4
 80077b6:	6029      	str	r1, [r5, #0]
 80077b8:	0605      	lsls	r5, r0, #24
 80077ba:	d501      	bpl.n	80077c0 <_printf_i+0xe8>
 80077bc:	681e      	ldr	r6, [r3, #0]
 80077be:	e002      	b.n	80077c6 <_printf_i+0xee>
 80077c0:	0641      	lsls	r1, r0, #25
 80077c2:	d5fb      	bpl.n	80077bc <_printf_i+0xe4>
 80077c4:	881e      	ldrh	r6, [r3, #0]
 80077c6:	4853      	ldr	r0, [pc, #332]	; (8007914 <_printf_i+0x23c>)
 80077c8:	2f6f      	cmp	r7, #111	; 0x6f
 80077ca:	bf0c      	ite	eq
 80077cc:	2308      	moveq	r3, #8
 80077ce:	230a      	movne	r3, #10
 80077d0:	2100      	movs	r1, #0
 80077d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077d6:	6865      	ldr	r5, [r4, #4]
 80077d8:	60a5      	str	r5, [r4, #8]
 80077da:	2d00      	cmp	r5, #0
 80077dc:	bfa2      	ittt	ge
 80077de:	6821      	ldrge	r1, [r4, #0]
 80077e0:	f021 0104 	bicge.w	r1, r1, #4
 80077e4:	6021      	strge	r1, [r4, #0]
 80077e6:	b90e      	cbnz	r6, 80077ec <_printf_i+0x114>
 80077e8:	2d00      	cmp	r5, #0
 80077ea:	d04b      	beq.n	8007884 <_printf_i+0x1ac>
 80077ec:	4615      	mov	r5, r2
 80077ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80077f2:	fb03 6711 	mls	r7, r3, r1, r6
 80077f6:	5dc7      	ldrb	r7, [r0, r7]
 80077f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077fc:	4637      	mov	r7, r6
 80077fe:	42bb      	cmp	r3, r7
 8007800:	460e      	mov	r6, r1
 8007802:	d9f4      	bls.n	80077ee <_printf_i+0x116>
 8007804:	2b08      	cmp	r3, #8
 8007806:	d10b      	bne.n	8007820 <_printf_i+0x148>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	07de      	lsls	r6, r3, #31
 800780c:	d508      	bpl.n	8007820 <_printf_i+0x148>
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	6861      	ldr	r1, [r4, #4]
 8007812:	4299      	cmp	r1, r3
 8007814:	bfde      	ittt	le
 8007816:	2330      	movle	r3, #48	; 0x30
 8007818:	f805 3c01 	strble.w	r3, [r5, #-1]
 800781c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007820:	1b52      	subs	r2, r2, r5
 8007822:	6122      	str	r2, [r4, #16]
 8007824:	f8cd a000 	str.w	sl, [sp]
 8007828:	464b      	mov	r3, r9
 800782a:	aa03      	add	r2, sp, #12
 800782c:	4621      	mov	r1, r4
 800782e:	4640      	mov	r0, r8
 8007830:	f7ff fee4 	bl	80075fc <_printf_common>
 8007834:	3001      	adds	r0, #1
 8007836:	d14a      	bne.n	80078ce <_printf_i+0x1f6>
 8007838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800783c:	b004      	add	sp, #16
 800783e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	f043 0320 	orr.w	r3, r3, #32
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	4833      	ldr	r0, [pc, #204]	; (8007918 <_printf_i+0x240>)
 800784c:	2778      	movs	r7, #120	; 0x78
 800784e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	6829      	ldr	r1, [r5, #0]
 8007856:	061f      	lsls	r7, r3, #24
 8007858:	f851 6b04 	ldr.w	r6, [r1], #4
 800785c:	d402      	bmi.n	8007864 <_printf_i+0x18c>
 800785e:	065f      	lsls	r7, r3, #25
 8007860:	bf48      	it	mi
 8007862:	b2b6      	uxthmi	r6, r6
 8007864:	07df      	lsls	r7, r3, #31
 8007866:	bf48      	it	mi
 8007868:	f043 0320 	orrmi.w	r3, r3, #32
 800786c:	6029      	str	r1, [r5, #0]
 800786e:	bf48      	it	mi
 8007870:	6023      	strmi	r3, [r4, #0]
 8007872:	b91e      	cbnz	r6, 800787c <_printf_i+0x1a4>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	f023 0320 	bic.w	r3, r3, #32
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	2310      	movs	r3, #16
 800787e:	e7a7      	b.n	80077d0 <_printf_i+0xf8>
 8007880:	4824      	ldr	r0, [pc, #144]	; (8007914 <_printf_i+0x23c>)
 8007882:	e7e4      	b.n	800784e <_printf_i+0x176>
 8007884:	4615      	mov	r5, r2
 8007886:	e7bd      	b.n	8007804 <_printf_i+0x12c>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	6826      	ldr	r6, [r4, #0]
 800788c:	6961      	ldr	r1, [r4, #20]
 800788e:	1d18      	adds	r0, r3, #4
 8007890:	6028      	str	r0, [r5, #0]
 8007892:	0635      	lsls	r5, r6, #24
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	d501      	bpl.n	800789c <_printf_i+0x1c4>
 8007898:	6019      	str	r1, [r3, #0]
 800789a:	e002      	b.n	80078a2 <_printf_i+0x1ca>
 800789c:	0670      	lsls	r0, r6, #25
 800789e:	d5fb      	bpl.n	8007898 <_printf_i+0x1c0>
 80078a0:	8019      	strh	r1, [r3, #0]
 80078a2:	2300      	movs	r3, #0
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	4615      	mov	r5, r2
 80078a8:	e7bc      	b.n	8007824 <_printf_i+0x14c>
 80078aa:	682b      	ldr	r3, [r5, #0]
 80078ac:	1d1a      	adds	r2, r3, #4
 80078ae:	602a      	str	r2, [r5, #0]
 80078b0:	681d      	ldr	r5, [r3, #0]
 80078b2:	6862      	ldr	r2, [r4, #4]
 80078b4:	2100      	movs	r1, #0
 80078b6:	4628      	mov	r0, r5
 80078b8:	f7f8 fc8a 	bl	80001d0 <memchr>
 80078bc:	b108      	cbz	r0, 80078c2 <_printf_i+0x1ea>
 80078be:	1b40      	subs	r0, r0, r5
 80078c0:	6060      	str	r0, [r4, #4]
 80078c2:	6863      	ldr	r3, [r4, #4]
 80078c4:	6123      	str	r3, [r4, #16]
 80078c6:	2300      	movs	r3, #0
 80078c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078cc:	e7aa      	b.n	8007824 <_printf_i+0x14c>
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	462a      	mov	r2, r5
 80078d2:	4649      	mov	r1, r9
 80078d4:	4640      	mov	r0, r8
 80078d6:	47d0      	blx	sl
 80078d8:	3001      	adds	r0, #1
 80078da:	d0ad      	beq.n	8007838 <_printf_i+0x160>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	079b      	lsls	r3, r3, #30
 80078e0:	d413      	bmi.n	800790a <_printf_i+0x232>
 80078e2:	68e0      	ldr	r0, [r4, #12]
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	4298      	cmp	r0, r3
 80078e8:	bfb8      	it	lt
 80078ea:	4618      	movlt	r0, r3
 80078ec:	e7a6      	b.n	800783c <_printf_i+0x164>
 80078ee:	2301      	movs	r3, #1
 80078f0:	4632      	mov	r2, r6
 80078f2:	4649      	mov	r1, r9
 80078f4:	4640      	mov	r0, r8
 80078f6:	47d0      	blx	sl
 80078f8:	3001      	adds	r0, #1
 80078fa:	d09d      	beq.n	8007838 <_printf_i+0x160>
 80078fc:	3501      	adds	r5, #1
 80078fe:	68e3      	ldr	r3, [r4, #12]
 8007900:	9903      	ldr	r1, [sp, #12]
 8007902:	1a5b      	subs	r3, r3, r1
 8007904:	42ab      	cmp	r3, r5
 8007906:	dcf2      	bgt.n	80078ee <_printf_i+0x216>
 8007908:	e7eb      	b.n	80078e2 <_printf_i+0x20a>
 800790a:	2500      	movs	r5, #0
 800790c:	f104 0619 	add.w	r6, r4, #25
 8007910:	e7f5      	b.n	80078fe <_printf_i+0x226>
 8007912:	bf00      	nop
 8007914:	08007c71 	.word	0x08007c71
 8007918:	08007c82 	.word	0x08007c82

0800791c <memmove>:
 800791c:	4288      	cmp	r0, r1
 800791e:	b510      	push	{r4, lr}
 8007920:	eb01 0402 	add.w	r4, r1, r2
 8007924:	d902      	bls.n	800792c <memmove+0x10>
 8007926:	4284      	cmp	r4, r0
 8007928:	4623      	mov	r3, r4
 800792a:	d807      	bhi.n	800793c <memmove+0x20>
 800792c:	1e43      	subs	r3, r0, #1
 800792e:	42a1      	cmp	r1, r4
 8007930:	d008      	beq.n	8007944 <memmove+0x28>
 8007932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800793a:	e7f8      	b.n	800792e <memmove+0x12>
 800793c:	4402      	add	r2, r0
 800793e:	4601      	mov	r1, r0
 8007940:	428a      	cmp	r2, r1
 8007942:	d100      	bne.n	8007946 <memmove+0x2a>
 8007944:	bd10      	pop	{r4, pc}
 8007946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800794a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800794e:	e7f7      	b.n	8007940 <memmove+0x24>

08007950 <_sbrk_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d06      	ldr	r5, [pc, #24]	; (800796c <_sbrk_r+0x1c>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	602b      	str	r3, [r5, #0]
 800795c:	f7f9 fa72 	bl	8000e44 <_sbrk>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_sbrk_r+0x1a>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_sbrk_r+0x1a>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	2000246c 	.word	0x2000246c

08007970 <_realloc_r>:
 8007970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007974:	4680      	mov	r8, r0
 8007976:	4614      	mov	r4, r2
 8007978:	460e      	mov	r6, r1
 800797a:	b921      	cbnz	r1, 8007986 <_realloc_r+0x16>
 800797c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	4611      	mov	r1, r2
 8007982:	f7ff bc57 	b.w	8007234 <_malloc_r>
 8007986:	b92a      	cbnz	r2, 8007994 <_realloc_r+0x24>
 8007988:	f7ff fbe8 	bl	800715c <_free_r>
 800798c:	4625      	mov	r5, r4
 800798e:	4628      	mov	r0, r5
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007994:	f000 f81b 	bl	80079ce <_malloc_usable_size_r>
 8007998:	4284      	cmp	r4, r0
 800799a:	4607      	mov	r7, r0
 800799c:	d802      	bhi.n	80079a4 <_realloc_r+0x34>
 800799e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079a2:	d812      	bhi.n	80079ca <_realloc_r+0x5a>
 80079a4:	4621      	mov	r1, r4
 80079a6:	4640      	mov	r0, r8
 80079a8:	f7ff fc44 	bl	8007234 <_malloc_r>
 80079ac:	4605      	mov	r5, r0
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d0ed      	beq.n	800798e <_realloc_r+0x1e>
 80079b2:	42bc      	cmp	r4, r7
 80079b4:	4622      	mov	r2, r4
 80079b6:	4631      	mov	r1, r6
 80079b8:	bf28      	it	cs
 80079ba:	463a      	movcs	r2, r7
 80079bc:	f7ff fbc0 	bl	8007140 <memcpy>
 80079c0:	4631      	mov	r1, r6
 80079c2:	4640      	mov	r0, r8
 80079c4:	f7ff fbca 	bl	800715c <_free_r>
 80079c8:	e7e1      	b.n	800798e <_realloc_r+0x1e>
 80079ca:	4635      	mov	r5, r6
 80079cc:	e7df      	b.n	800798e <_realloc_r+0x1e>

080079ce <_malloc_usable_size_r>:
 80079ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d2:	1f18      	subs	r0, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bfbc      	itt	lt
 80079d8:	580b      	ldrlt	r3, [r1, r0]
 80079da:	18c0      	addlt	r0, r0, r3
 80079dc:	4770      	bx	lr
	...

080079e0 <_init>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	bf00      	nop
 80079e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e6:	bc08      	pop	{r3}
 80079e8:	469e      	mov	lr, r3
 80079ea:	4770      	bx	lr

080079ec <_fini>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr
